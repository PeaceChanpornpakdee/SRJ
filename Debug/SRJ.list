
SRJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a474  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a610  0800a610  0001a610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a678  0800a678  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a678  0800a678  0001a678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a680  0800a680  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a680  0800a680  0001a680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a684  0800a684  0001a684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800a688  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  200000c0  0800a748  000200c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  0800a748  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f47b  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dfd  00000000  00000000  0002f56b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f98  00000000  00000000  00031368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed8  00000000  00000000  00032300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016e0c  00000000  00000000  000331d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad99  00000000  00000000  00049fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000907e1  00000000  00000000  00054d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e555e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004898  00000000  00000000  000e55dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000c0 	.word	0x200000c0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a5f4 	.word	0x0800a5f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000c4 	.word	0x200000c4
 80001d4:	0800a5f4 	.word	0x0800a5f4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	d1ed      	bne.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d80:	f000 b972 	b.w	8001068 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9e08      	ldr	r6, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	4688      	mov	r8, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d14b      	bne.n	8000e42 <__udivmoddi4+0xa6>
 8000daa:	428a      	cmp	r2, r1
 8000dac:	4615      	mov	r5, r2
 8000dae:	d967      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	b14a      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db6:	f1c2 0720 	rsb	r7, r2, #32
 8000dba:	fa01 f302 	lsl.w	r3, r1, r2
 8000dbe:	fa20 f707 	lsr.w	r7, r0, r7
 8000dc2:	4095      	lsls	r5, r2
 8000dc4:	ea47 0803 	orr.w	r8, r7, r3
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000dd4:	fa1f fc85 	uxth.w	ip, r5
 8000dd8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ddc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de0:	fb07 f10c 	mul.w	r1, r7, ip
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18eb      	adds	r3, r5, r3
 8000dea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000dee:	f080 811b 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8118 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000df8:	3f02      	subs	r7, #2
 8000dfa:	442b      	add	r3, r5
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e10:	45a4      	cmp	ip, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	f080 8107 	bcs.w	800102c <__udivmoddi4+0x290>
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	f240 8104 	bls.w	800102c <__udivmoddi4+0x290>
 8000e24:	3802      	subs	r0, #2
 8000e26:	442c      	add	r4, r5
 8000e28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e2c:	eba4 040c 	sub.w	r4, r4, ip
 8000e30:	2700      	movs	r7, #0
 8000e32:	b11e      	cbz	r6, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d909      	bls.n	8000e5a <__udivmoddi4+0xbe>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	f000 80eb 	beq.w	8001022 <__udivmoddi4+0x286>
 8000e4c:	2700      	movs	r7, #0
 8000e4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000e52:	4638      	mov	r0, r7
 8000e54:	4639      	mov	r1, r7
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	fab3 f783 	clz	r7, r3
 8000e5e:	2f00      	cmp	r7, #0
 8000e60:	d147      	bne.n	8000ef2 <__udivmoddi4+0x156>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d302      	bcc.n	8000e6c <__udivmoddi4+0xd0>
 8000e66:	4282      	cmp	r2, r0
 8000e68:	f200 80fa 	bhi.w	8001060 <__udivmoddi4+0x2c4>
 8000e6c:	1a84      	subs	r4, r0, r2
 8000e6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e72:	2001      	movs	r0, #1
 8000e74:	4698      	mov	r8, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d0e0      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000e7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000e7e:	e7dd      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000e80:	b902      	cbnz	r2, 8000e84 <__udivmoddi4+0xe8>
 8000e82:	deff      	udf	#255	; 0xff
 8000e84:	fab2 f282 	clz	r2, r2
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	f040 808f 	bne.w	8000fac <__udivmoddi4+0x210>
 8000e8e:	1b49      	subs	r1, r1, r5
 8000e90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e94:	fa1f f885 	uxth.w	r8, r5
 8000e98:	2701      	movs	r7, #1
 8000e9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e9e:	0c23      	lsrs	r3, r4, #16
 8000ea0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ea4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea8:	fb08 f10c 	mul.w	r1, r8, ip
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0x124>
 8000eb0:	18eb      	adds	r3, r5, r3
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x122>
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	f200 80cd 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1a59      	subs	r1, r3, r1
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ecc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x14c>
 8000ed8:	192c      	adds	r4, r5, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x14a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80b6 	bhi.w	8001052 <__udivmoddi4+0x2b6>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e79f      	b.n	8000e32 <__udivmoddi4+0x96>
 8000ef2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ef6:	40bb      	lsls	r3, r7
 8000ef8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000efc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000f00:	fa01 f407 	lsl.w	r4, r1, r7
 8000f04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000f08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000f0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000f10:	4325      	orrs	r5, r4
 8000f12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000f16:	0c2c      	lsrs	r4, r5, #16
 8000f18:	fb08 3319 	mls	r3, r8, r9, r3
 8000f1c:	fa1f fa8e 	uxth.w	sl, lr
 8000f20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f24:	fb09 f40a 	mul.w	r4, r9, sl
 8000f28:	429c      	cmp	r4, r3
 8000f2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000f2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b0>
 8000f34:	eb1e 0303 	adds.w	r3, lr, r3
 8000f38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f3c:	f080 8087 	bcs.w	800104e <__udivmoddi4+0x2b2>
 8000f40:	429c      	cmp	r4, r3
 8000f42:	f240 8084 	bls.w	800104e <__udivmoddi4+0x2b2>
 8000f46:	f1a9 0902 	sub.w	r9, r9, #2
 8000f4a:	4473      	add	r3, lr
 8000f4c:	1b1b      	subs	r3, r3, r4
 8000f4e:	b2ad      	uxth	r5, r5
 8000f50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f54:	fb08 3310 	mls	r3, r8, r0, r3
 8000f58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f60:	45a2      	cmp	sl, r4
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1da>
 8000f64:	eb1e 0404 	adds.w	r4, lr, r4
 8000f68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f6c:	d26b      	bcs.n	8001046 <__udivmoddi4+0x2aa>
 8000f6e:	45a2      	cmp	sl, r4
 8000f70:	d969      	bls.n	8001046 <__udivmoddi4+0x2aa>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4474      	add	r4, lr
 8000f76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7e:	eba4 040a 	sub.w	r4, r4, sl
 8000f82:	454c      	cmp	r4, r9
 8000f84:	46c2      	mov	sl, r8
 8000f86:	464b      	mov	r3, r9
 8000f88:	d354      	bcc.n	8001034 <__udivmoddi4+0x298>
 8000f8a:	d051      	beq.n	8001030 <__udivmoddi4+0x294>
 8000f8c:	2e00      	cmp	r6, #0
 8000f8e:	d069      	beq.n	8001064 <__udivmoddi4+0x2c8>
 8000f90:	ebb1 050a 	subs.w	r5, r1, sl
 8000f94:	eb64 0403 	sbc.w	r4, r4, r3
 8000f98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f9c:	40fd      	lsrs	r5, r7
 8000f9e:	40fc      	lsrs	r4, r7
 8000fa0:	ea4c 0505 	orr.w	r5, ip, r5
 8000fa4:	e9c6 5400 	strd	r5, r4, [r6]
 8000fa8:	2700      	movs	r7, #0
 8000faa:	e747      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000fac:	f1c2 0320 	rsb	r3, r2, #32
 8000fb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000fb4:	4095      	lsls	r5, r2
 8000fb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000fba:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fc2:	4338      	orrs	r0, r7
 8000fc4:	0c01      	lsrs	r1, r0, #16
 8000fc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fca:	fa1f f885 	uxth.w	r8, r5
 8000fce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd6:	fb07 f308 	mul.w	r3, r7, r8
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d907      	bls.n	8000ff2 <__udivmoddi4+0x256>
 8000fe2:	1869      	adds	r1, r5, r1
 8000fe4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000fe8:	d22f      	bcs.n	800104a <__udivmoddi4+0x2ae>
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d92d      	bls.n	800104a <__udivmoddi4+0x2ae>
 8000fee:	3f02      	subs	r7, #2
 8000ff0:	4429      	add	r1, r5
 8000ff2:	1acb      	subs	r3, r1, r3
 8000ff4:	b281      	uxth	r1, r0
 8000ff6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ffa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ffe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001002:	fb00 f308 	mul.w	r3, r0, r8
 8001006:	428b      	cmp	r3, r1
 8001008:	d907      	bls.n	800101a <__udivmoddi4+0x27e>
 800100a:	1869      	adds	r1, r5, r1
 800100c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8001010:	d217      	bcs.n	8001042 <__udivmoddi4+0x2a6>
 8001012:	428b      	cmp	r3, r1
 8001014:	d915      	bls.n	8001042 <__udivmoddi4+0x2a6>
 8001016:	3802      	subs	r0, #2
 8001018:	4429      	add	r1, r5
 800101a:	1ac9      	subs	r1, r1, r3
 800101c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001020:	e73b      	b.n	8000e9a <__udivmoddi4+0xfe>
 8001022:	4637      	mov	r7, r6
 8001024:	4630      	mov	r0, r6
 8001026:	e709      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001028:	4607      	mov	r7, r0
 800102a:	e6e7      	b.n	8000dfc <__udivmoddi4+0x60>
 800102c:	4618      	mov	r0, r3
 800102e:	e6fb      	b.n	8000e28 <__udivmoddi4+0x8c>
 8001030:	4541      	cmp	r1, r8
 8001032:	d2ab      	bcs.n	8000f8c <__udivmoddi4+0x1f0>
 8001034:	ebb8 0a02 	subs.w	sl, r8, r2
 8001038:	eb69 020e 	sbc.w	r2, r9, lr
 800103c:	3801      	subs	r0, #1
 800103e:	4613      	mov	r3, r2
 8001040:	e7a4      	b.n	8000f8c <__udivmoddi4+0x1f0>
 8001042:	4660      	mov	r0, ip
 8001044:	e7e9      	b.n	800101a <__udivmoddi4+0x27e>
 8001046:	4618      	mov	r0, r3
 8001048:	e795      	b.n	8000f76 <__udivmoddi4+0x1da>
 800104a:	4667      	mov	r7, ip
 800104c:	e7d1      	b.n	8000ff2 <__udivmoddi4+0x256>
 800104e:	4681      	mov	r9, r0
 8001050:	e77c      	b.n	8000f4c <__udivmoddi4+0x1b0>
 8001052:	3802      	subs	r0, #2
 8001054:	442c      	add	r4, r5
 8001056:	e747      	b.n	8000ee8 <__udivmoddi4+0x14c>
 8001058:	f1ac 0c02 	sub.w	ip, ip, #2
 800105c:	442b      	add	r3, r5
 800105e:	e72f      	b.n	8000ec0 <__udivmoddi4+0x124>
 8001060:	4638      	mov	r0, r7
 8001062:	e708      	b.n	8000e76 <__udivmoddi4+0xda>
 8001064:	4637      	mov	r7, r6
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0xa0>

08001068 <__aeabi_idiv0>:
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	0000      	movs	r0, r0
	...

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f002 ffdd 	bl	8004034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f9ad 	bl	80013d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107e:	f000 fbeb 	bl	8001858 <MX_GPIO_Init>
  MX_DMA_Init();
 8001082:	f000 fbc1 	bl	8001808 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001086:	f000 fb93 	bl	80017b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800108a:	f000 fa0d 	bl	80014a8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800108e:	f000 fa39 	bl	8001504 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001092:	f000 fadb 	bl	800164c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001096:	f000 fa8d 	bl	80015b4 <MX_TIM2_Init>
  MX_TIM4_Init();
 800109a:	f000 fb3b 	bl	8001714 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  UART2.huart = &huart2;
 800109e:	4bac      	ldr	r3, [pc, #688]	; (8001350 <main+0x2e0>)
 80010a0:	4aac      	ldr	r2, [pc, #688]	; (8001354 <main+0x2e4>)
 80010a2:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 80010a4:	4baa      	ldr	r3, [pc, #680]	; (8001350 <main+0x2e0>)
 80010a6:	22ff      	movs	r2, #255	; 0xff
 80010a8:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 80010aa:	4ba9      	ldr	r3, [pc, #676]	; (8001350 <main+0x2e0>)
 80010ac:	22ff      	movs	r2, #255	; 0xff
 80010ae:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 80010b0:	48a7      	ldr	r0, [pc, #668]	; (8001350 <main+0x2e0>)
 80010b2:	f001 ffed 	bl	8003090 <UARTInit>
  UARTResetStart(&UART2);
 80010b6:	48a6      	ldr	r0, [pc, #664]	; (8001350 <main+0x2e0>)
 80010b8:	f002 f812 	bl	80030e0 <UARTResetStart>

  HAL_TIM_Base_Start_IT(&htim2);
 80010bc:	48a6      	ldr	r0, [pc, #664]	; (8001358 <main+0x2e8>)
 80010be:	f006 fa10 	bl	80074e2 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 80010c2:	48a6      	ldr	r0, [pc, #664]	; (800135c <main+0x2ec>)
 80010c4:	f006 f9e9 	bl	800749a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010c8:	2100      	movs	r1, #0
 80010ca:	48a4      	ldr	r0, [pc, #656]	; (800135c <main+0x2ec>)
 80010cc:	f006 fa58 	bl	8007580 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010d0:	2104      	movs	r1, #4
 80010d2:	48a2      	ldr	r0, [pc, #648]	; (800135c <main+0x2ec>)
 80010d4:	f006 fa54 	bl	8007580 <HAL_TIM_PWM_Start>

  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 1)
 80010d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010dc:	48a0      	ldr	r0, [pc, #640]	; (8001360 <main+0x2f0>)
 80010de:	f003 fe6f 	bl	8004dc0 <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d104      	bne.n	80010f2 <main+0x82>
  {
	  HomeMode = 10;
 80010e8:	4b9e      	ldr	r3, [pc, #632]	; (8001364 <main+0x2f4>)
 80010ea:	220a      	movs	r2, #10
 80010ec:	701a      	strb	r2, [r3, #0]
	  SetHome();
 80010ee:	f000 fcff 	bl	8001af0 <SetHome>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /////////////////////////////////////////////////////////////
  while (1)
  {
	  if (micros() - Timestamp >= 10000) //10000us = 0.01s = 100Hz
 80010f2:	f000 fcbf 	bl	8001a74 <micros>
 80010f6:	460a      	mov	r2, r1
 80010f8:	4601      	mov	r1, r0
 80010fa:	4b9b      	ldr	r3, [pc, #620]	; (8001368 <main+0x2f8>)
 80010fc:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001100:	460b      	mov	r3, r1
 8001102:	4614      	mov	r4, r2
 8001104:	ebb3 030b 	subs.w	r3, r3, fp
 8001108:	eb64 040c 	sbc.w	r4, r4, ip
 800110c:	f242 710f 	movw	r1, #9999	; 0x270f
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	42a2      	cmp	r2, r4
 8001116:	bf08      	it	eq
 8001118:	4299      	cmpeq	r1, r3
 800111a:	d2ea      	bcs.n	80010f2 <main+0x82>
	  {
		  Timestamp = micros();
 800111c:	f000 fcaa 	bl	8001a74 <micros>
 8001120:	4603      	mov	r3, r0
 8001122:	460c      	mov	r4, r1
 8001124:	4a90      	ldr	r2, [pc, #576]	; (8001368 <main+0x2f8>)
 8001126:	e9c2 3400 	strd	r3, r4, [r2]

		  NucleoCheck();
 800112a:	f000 fc1f 	bl	800196c <NucleoCheck>
		  EmergencyCheck();
 800112e:	f000 fc41 	bl	80019b4 <EmergencyCheck>

		  if(UART_Flow2_Ack)
 8001132:	4b8e      	ldr	r3, [pc, #568]	; (800136c <main+0x2fc>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d037      	beq.n	80011aa <main+0x13a>
		  {
			while(1)
			{
				while(1)
				{
					InputChar = UARTReadChar(&UART2);
 800113a:	4885      	ldr	r0, [pc, #532]	; (8001350 <main+0x2e0>)
 800113c:	f001 fff4 	bl	8003128 <UARTReadChar>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b8a      	ldr	r3, [pc, #552]	; (8001370 <main+0x300>)
 8001146:	801a      	strh	r2, [r3, #0]
					if(InputChar != -1)
 8001148:	4b89      	ldr	r3, [pc, #548]	; (8001370 <main+0x300>)
 800114a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001152:	d0f2      	beq.n	800113a <main+0xca>
					{
						InputByte = (uint8_t)InputChar;
 8001154:	4b86      	ldr	r3, [pc, #536]	; (8001370 <main+0x300>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b85      	ldr	r3, [pc, #532]	; (8001374 <main+0x304>)
 800115e:	701a      	strb	r2, [r3, #0]
						ak[0] = InputByte;
 8001160:	4b84      	ldr	r3, [pc, #528]	; (8001374 <main+0x304>)
 8001162:	781a      	ldrb	r2, [r3, #0]
 8001164:	4b84      	ldr	r3, [pc, #528]	; (8001378 <main+0x308>)
 8001166:	701a      	strb	r2, [r3, #0]
						break;
					}
				}
				while(1)
				{
					InputChar = UARTReadChar(&UART2);
 8001168:	4879      	ldr	r0, [pc, #484]	; (8001350 <main+0x2e0>)
 800116a:	f001 ffdd 	bl	8003128 <UARTReadChar>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	4b7f      	ldr	r3, [pc, #508]	; (8001370 <main+0x300>)
 8001174:	801a      	strh	r2, [r3, #0]
					if(InputChar != -1)
 8001176:	4b7e      	ldr	r3, [pc, #504]	; (8001370 <main+0x300>)
 8001178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001180:	d0f2      	beq.n	8001168 <main+0xf8>
					{
						InputByte = (uint8_t)InputChar;
 8001182:	4b7b      	ldr	r3, [pc, #492]	; (8001370 <main+0x300>)
 8001184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b7a      	ldr	r3, [pc, #488]	; (8001374 <main+0x304>)
 800118c:	701a      	strb	r2, [r3, #0]
						ak[1] = InputByte;
 800118e:	4b79      	ldr	r3, [pc, #484]	; (8001374 <main+0x304>)
 8001190:	781a      	ldrb	r2, [r3, #0]
 8001192:	4b79      	ldr	r3, [pc, #484]	; (8001378 <main+0x308>)
 8001194:	705a      	strb	r2, [r3, #1]
						break;
 8001196:	bf00      	nop
					}
				}
				if(ak[0] == 'X' && ak[1] == 'u')
 8001198:	4b77      	ldr	r3, [pc, #476]	; (8001378 <main+0x308>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b58      	cmp	r3, #88	; 0x58
 800119e:	d1cc      	bne.n	800113a <main+0xca>
 80011a0:	4b75      	ldr	r3, [pc, #468]	; (8001378 <main+0x308>)
 80011a2:	785b      	ldrb	r3, [r3, #1]
 80011a4:	2b75      	cmp	r3, #117	; 0x75
 80011a6:	d003      	beq.n	80011b0 <main+0x140>
			while(1)
 80011a8:	e7c7      	b.n	800113a <main+0xca>
				}
			}
		  }
		  else
		  {
			  UART_Protocal();
 80011aa:	f002 f971 	bl	8003490 <UART_Protocal>
 80011ae:	e000      	b.n	80011b2 <main+0x142>
					break;
 80011b0:	bf00      	nop
		  }

		  //----------------------------------------------

		  if(Laser)
 80011b2:	4b72      	ldr	r3, [pc, #456]	; (800137c <main+0x30c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d05f      	beq.n	800127a <main+0x20a>
		  {
			  if(EndEff_Enable) { LaserDelay = 5000000; } //5000000us = 5s
 80011ba:	4b71      	ldr	r3, [pc, #452]	; (8001380 <main+0x310>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d006      	beq.n	80011d0 <main+0x160>
 80011c2:	4a70      	ldr	r2, [pc, #448]	; (8001384 <main+0x314>)
 80011c4:	a460      	add	r4, pc, #384	; (adr r4, 8001348 <main+0x2d8>)
 80011c6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80011ca:	e9c2 3400 	strd	r3, r4, [r2]
 80011ce:	e005      	b.n	80011dc <main+0x16c>
			  else              { LaserDelay = 1000000; } //1000000us = 1s
 80011d0:	4a6c      	ldr	r2, [pc, #432]	; (8001384 <main+0x314>)
 80011d2:	4b6d      	ldr	r3, [pc, #436]	; (8001388 <main+0x318>)
 80011d4:	f04f 0400 	mov.w	r4, #0
 80011d8:	e9c2 3400 	strd	r3, r4, [r2]

			  if (micros() - LaserTimestamp >= LaserDelay)
 80011dc:	f000 fc4a 	bl	8001a74 <micros>
 80011e0:	4683      	mov	fp, r0
 80011e2:	468c      	mov	ip, r1
 80011e4:	4b69      	ldr	r3, [pc, #420]	; (800138c <main+0x31c>)
 80011e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011ea:	4659      	mov	r1, fp
 80011ec:	4662      	mov	r2, ip
 80011ee:	1ac9      	subs	r1, r1, r3
 80011f0:	eb62 0204 	sbc.w	r2, r2, r4
 80011f4:	4b63      	ldr	r3, [pc, #396]	; (8001384 <main+0x314>)
 80011f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011fa:	42a2      	cmp	r2, r4
 80011fc:	bf08      	it	eq
 80011fe:	4299      	cmpeq	r1, r3
 8001200:	d33b      	bcc.n	800127a <main+0x20a>
			  {
				  if(Goal_Mode == 3)
 8001202:	4b63      	ldr	r3, [pc, #396]	; (8001390 <main+0x320>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d12b      	bne.n	8001262 <main+0x1f2>
				  {
					  if(Current_Multi_Station == Multi_Station_Amount-1)
 800120a:	4b62      	ldr	r3, [pc, #392]	; (8001394 <main+0x324>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	4b61      	ldr	r3, [pc, #388]	; (8001398 <main+0x328>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	429a      	cmp	r2, r3
 8001218:	d105      	bne.n	8001226 <main+0x1b6>
					  {
						  UART_Ack2();
 800121a:	f002 f863 	bl	80032e4 <UART_Ack2>
						  Goal_Mode = 0;
 800121e:	4b5c      	ldr	r3, [pc, #368]	; (8001390 <main+0x320>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	e022      	b.n	800126c <main+0x1fc>
					  }
					  else
					  {
						  Current_Multi_Station += 1;
 8001226:	4b5b      	ldr	r3, [pc, #364]	; (8001394 <main+0x324>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b59      	ldr	r3, [pc, #356]	; (8001394 <main+0x324>)
 8001230:	701a      	strb	r2, [r3, #0]
						  angle = Multi_Station_Angle[ Multi_Station[Current_Multi_Station] ];
 8001232:	4b58      	ldr	r3, [pc, #352]	; (8001394 <main+0x324>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	4b58      	ldr	r3, [pc, #352]	; (800139c <main+0x32c>)
 800123a:	5c9b      	ldrb	r3, [r3, r2]
 800123c:	461a      	mov	r2, r3
 800123e:	4b58      	ldr	r3, [pc, #352]	; (80013a0 <main+0x330>)
 8001240:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124c:	4b55      	ldr	r3, [pc, #340]	; (80013a4 <main+0x334>)
 800124e:	edc3 7a00 	vstr	s15, [r3]
						  Lastest_Angle = Current_Angle;
 8001252:	4b55      	ldr	r3, [pc, #340]	; (80013a8 <main+0x338>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a55      	ldr	r2, [pc, #340]	; (80013ac <main+0x33c>)
 8001258:	6013      	str	r3, [r2, #0]
						  Run = 1;
 800125a:	4b55      	ldr	r3, [pc, #340]	; (80013b0 <main+0x340>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	e004      	b.n	800126c <main+0x1fc>
					  }
				  }
				  else
				  {
					  UART_Ack2();
 8001262:	f002 f83f 	bl	80032e4 <UART_Ack2>
					  Goal_Mode = 0;
 8001266:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <main+0x320>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
				  }
				  Laser = 0;
 800126c:	4b43      	ldr	r3, [pc, #268]	; (800137c <main+0x30c>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
				  t = 0;
 8001272:	4b50      	ldr	r3, [pc, #320]	; (80013b4 <main+0x344>)
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
			  }
		  }

		  if(Emergency)
 800127a:	4b4f      	ldr	r3, [pc, #316]	; (80013b8 <main+0x348>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d02c      	beq.n	80012dc <main+0x26c>
		  {
			  if(Emergency == 2)
 8001282:	4b4d      	ldr	r3, [pc, #308]	; (80013b8 <main+0x348>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b02      	cmp	r3, #2
 8001288:	f47f af33 	bne.w	80010f2 <main+0x82>
			  {
				  if(micros() - EmergencyTimestamp >= 1000000)
 800128c:	f000 fbf2 	bl	8001a74 <micros>
 8001290:	460a      	mov	r2, r1
 8001292:	4601      	mov	r1, r0
 8001294:	4b49      	ldr	r3, [pc, #292]	; (80013bc <main+0x34c>)
 8001296:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800129a:	460b      	mov	r3, r1
 800129c:	4614      	mov	r4, r2
 800129e:	ebb3 030b 	subs.w	r3, r3, fp
 80012a2:	eb64 040c 	sbc.w	r4, r4, ip
 80012a6:	4946      	ldr	r1, [pc, #280]	; (80013c0 <main+0x350>)
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	42a2      	cmp	r2, r4
 80012ae:	bf08      	it	eq
 80012b0:	4299      	cmpeq	r1, r3
 80012b2:	d20d      	bcs.n	80012d0 <main+0x260>
				  {
					  VariableReset();
 80012b4:	f001 fc92 	bl	8002bdc <VariableReset>
					  Emergency = 0;
 80012b8:	4b3f      	ldr	r3, [pc, #252]	; (80013b8 <main+0x348>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
					  Lastest_Angle = Current_Angle;
 80012be:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <main+0x338>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a3a      	ldr	r2, [pc, #232]	; (80013ac <main+0x33c>)
 80012c4:	6013      	str	r3, [r2, #0]
					  t = 0;
 80012c6:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <main+0x344>)
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e710      	b.n	80010f2 <main+0x82>
				  }
				  else
				  {
					  PWMOut = 0;
 80012d0:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <main+0x354>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
					  MotorDrive();
 80012d6:	f000 fbe7 	bl	8001aa8 <MotorDrive>
 80012da:	e70a      	b.n	80010f2 <main+0x82>
				  }
			  }
		  }
		  else if(Run)
 80012dc:	4b34      	ldr	r3, [pc, #208]	; (80013b0 <main+0x340>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <main+0x2b4>
		  {
			  if(angle == 0)
 80012e4:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <main+0x334>)
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f2:	d106      	bne.n	8001302 <main+0x292>
			  {
				  angle = 10;
 80012f4:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <main+0x334>)
 80012f6:	4a34      	ldr	r2, [pc, #208]	; (80013c8 <main+0x358>)
 80012f8:	601a      	str	r2, [r3, #0]
				  SpecialHome = 1;
 80012fa:	4b34      	ldr	r3, [pc, #208]	; (80013cc <main+0x35c>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	e6f7      	b.n	80010f2 <main+0x82>
			  }
			  else
			  {
				  RobotArm_Position = EncoderPosition_Update();
 8001302:	f000 fcd5 	bl	8001cb0 <EncoderPosition_Update>
 8001306:	4603      	mov	r3, r0
 8001308:	b29a      	uxth	r2, r3
 800130a:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <main+0x360>)
 800130c:	801a      	strh	r2, [r3, #0]
				  EncoderVelocity_Update();
 800130e:	f000 fcdb 	bl	8001cc8 <EncoderVelocity_Update>
				  planning();
 8001312:	f001 f8cd 	bl	80024b0 <planning>
				  kalmanfilter();
 8001316:	f000 fd87 	bl	8001e28 <kalmanfilter>
				  pid();
 800131a:	f001 fced 	bl	8002cf8 <pid>
				  MotorDrive();
 800131e:	f000 fbc3 	bl	8001aa8 <MotorDrive>
 8001322:	e6e6      	b.n	80010f2 <main+0x82>
			  }
		  }

		  else if(Home)
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <main+0x364>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	f43f aee2 	beq.w	80010f2 <main+0x82>
		  {
			  RobotArm_Position = EncoderPosition_Update();
 800132e:	f000 fcbf 	bl	8001cb0 <EncoderPosition_Update>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <main+0x360>)
 8001338:	801a      	strh	r2, [r3, #0]
			  kalmanfilter();
 800133a:	f000 fd75 	bl	8001e28 <kalmanfilter>
			  SetHome();
 800133e:	f000 fbd7 	bl	8001af0 <SetHome>
	  if (micros() - Timestamp >= 10000) //10000us = 0.01s = 100Hz
 8001342:	e6d6      	b.n	80010f2 <main+0x82>
 8001344:	f3af 8000 	nop.w
 8001348:	004c4b40 	.word	0x004c4b40
 800134c:	00000000 	.word	0x00000000
 8001350:	200001b8 	.word	0x200001b8
 8001354:	2000045c 	.word	0x2000045c
 8001358:	2000041c 	.word	0x2000041c
 800135c:	2000033c 	.word	0x2000033c
 8001360:	40020000 	.word	0x40020000
 8001364:	20000108 	.word	0x20000108
 8001368:	200000e8 	.word	0x200000e8
 800136c:	2000021c 	.word	0x2000021c
 8001370:	200001f6 	.word	0x200001f6
 8001374:	200001f8 	.word	0x200001f8
 8001378:	200001e0 	.word	0x200001e0
 800137c:	200001e6 	.word	0x200001e6
 8001380:	200001e8 	.word	0x200001e8
 8001384:	20000008 	.word	0x20000008
 8001388:	000f4240 	.word	0x000f4240
 800138c:	200000f8 	.word	0x200000f8
 8001390:	200001da 	.word	0x200001da
 8001394:	200001d9 	.word	0x200001d9
 8001398:	20000218 	.word	0x20000218
 800139c:	20000208 	.word	0x20000208
 80013a0:	20000034 	.word	0x20000034
 80013a4:	20000194 	.word	0x20000194
 80013a8:	200001d4 	.word	0x200001d4
 80013ac:	200001d0 	.word	0x200001d0
 80013b0:	200001e3 	.word	0x200001e3
 80013b4:	20000178 	.word	0x20000178
 80013b8:	200001e2 	.word	0x200001e2
 80013bc:	20000100 	.word	0x20000100
 80013c0:	000f423f 	.word	0x000f423f
 80013c4:	2000010c 	.word	0x2000010c
 80013c8:	41200000 	.word	0x41200000
 80013cc:	200001e5 	.word	0x200001e5
 80013d0:	20000110 	.word	0x20000110
 80013d4:	200001e4 	.word	0x200001e4

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b094      	sub	sp, #80	; 0x50
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	2230      	movs	r2, #48	; 0x30
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f007 ffe1 	bl	80093ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <SystemClock_Config+0xc8>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	4a26      	ldr	r2, [pc, #152]	; (80014a0 <SystemClock_Config+0xc8>)
 8001406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140a:	6413      	str	r3, [r2, #64]	; 0x40
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <SystemClock_Config+0xc8>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <SystemClock_Config+0xcc>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a20      	ldr	r2, [pc, #128]	; (80014a4 <SystemClock_Config+0xcc>)
 8001422:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <SystemClock_Config+0xcc>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001434:	2302      	movs	r3, #2
 8001436:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001438:	2301      	movs	r3, #1
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143c:	2310      	movs	r3, #16
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001440:	2302      	movs	r3, #2
 8001442:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001444:	2300      	movs	r3, #0
 8001446:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001448:	2308      	movs	r3, #8
 800144a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800144c:	2364      	movs	r3, #100	; 0x64
 800144e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001450:	2302      	movs	r3, #2
 8001452:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001454:	2304      	movs	r3, #4
 8001456:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	4618      	mov	r0, r3
 800145e:	f005 fb8f 	bl	8006b80 <HAL_RCC_OscConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001468:	f002 fadc 	bl	8003a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	230f      	movs	r3, #15
 800146e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001470:	2302      	movs	r3, #2
 8001472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	2103      	movs	r1, #3
 8001488:	4618      	mov	r0, r3
 800148a:	f005 fde9 	bl	8007060 <HAL_RCC_ClockConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001494:	f002 fac6 	bl	8003a24 <Error_Handler>
  }
}
 8001498:	bf00      	nop
 800149a:	3750      	adds	r7, #80	; 0x50
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000

080014a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_I2C1_Init+0x54>)
 80014ae:	4a14      	ldr	r2, [pc, #80]	; (8001500 <MX_I2C1_Init+0x58>)
 80014b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_I2C1_Init+0x54>)
 80014b4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80014b8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <MX_I2C1_Init+0x54>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_I2C1_Init+0x54>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <MX_I2C1_Init+0x54>)
 80014c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MX_I2C1_Init+0x54>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_I2C1_Init+0x54>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <MX_I2C1_Init+0x54>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_I2C1_Init+0x54>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_I2C1_Init+0x54>)
 80014e8:	f003 fcb6 	bl	8004e58 <HAL_I2C_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80014f2:	f002 fa97 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200002e4 	.word	0x200002e4
 8001500:	40005400 	.word	0x40005400

08001504 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	; 0x30
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	2224      	movs	r2, #36	; 0x24
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f007 ff4b 	bl	80093ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <MX_TIM1_Init+0xa8>)
 8001522:	4a23      	ldr	r2, [pc, #140]	; (80015b0 <MX_TIM1_Init+0xac>)
 8001524:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <MX_TIM1_Init+0xa8>)
 8001528:	2200      	movs	r2, #0
 800152a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <MX_TIM1_Init+0xa8>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001532:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <MX_TIM1_Init+0xa8>)
 8001534:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001538:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <MX_TIM1_Init+0xa8>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_TIM1_Init+0xa8>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <MX_TIM1_Init+0xa8>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800154c:	2303      	movs	r3, #3
 800154e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001554:	2301      	movs	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001560:	2302      	movs	r3, #2
 8001562:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001564:	2301      	movs	r3, #1
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4619      	mov	r1, r3
 8001576:	480d      	ldr	r0, [pc, #52]	; (80015ac <MX_TIM1_Init+0xa8>)
 8001578:	f006 f834 	bl	80075e4 <HAL_TIM_Encoder_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001582:	f002 fa4f 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <MX_TIM1_Init+0xa8>)
 8001594:	f006 fe6a 	bl	800826c <HAL_TIMEx_MasterConfigSynchronization>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800159e:	f002 fa41 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	3730      	adds	r7, #48	; 0x30
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200003dc 	.word	0x200003dc
 80015b0:	40010000 	.word	0x40010000

080015b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <MX_TIM2_Init+0x94>)
 80015d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <MX_TIM2_Init+0x94>)
 80015da:	2263      	movs	r2, #99	; 0x63
 80015dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_TIM2_Init+0x94>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <MX_TIM2_Init+0x94>)
 80015e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_TIM2_Init+0x94>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_TIM2_Init+0x94>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015f8:	4813      	ldr	r0, [pc, #76]	; (8001648 <MX_TIM2_Init+0x94>)
 80015fa:	f005 ff23 	bl	8007444 <HAL_TIM_Base_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001604:	f002 fa0e 	bl	8003a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	4619      	mov	r1, r3
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <MX_TIM2_Init+0x94>)
 8001616:	f006 fa7d 	bl	8007b14 <HAL_TIM_ConfigClockSource>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001620:	f002 fa00 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800162c:	463b      	mov	r3, r7
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_TIM2_Init+0x94>)
 8001632:	f006 fe1b 	bl	800826c <HAL_TIMEx_MasterConfigSynchronization>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800163c:	f002 f9f2 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	2000041c 	.word	0x2000041c

0800164c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001652:	f107 0320 	add.w	r3, r7, #32
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]
 800166a:	615a      	str	r2, [r3, #20]
 800166c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800166e:	4b27      	ldr	r3, [pc, #156]	; (800170c <MX_TIM3_Init+0xc0>)
 8001670:	4a27      	ldr	r2, [pc, #156]	; (8001710 <MX_TIM3_Init+0xc4>)
 8001672:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <MX_TIM3_Init+0xc0>)
 8001676:	2200      	movs	r2, #0
 8001678:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <MX_TIM3_Init+0xc0>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <MX_TIM3_Init+0xc0>)
 8001682:	f242 7210 	movw	r2, #10000	; 0x2710
 8001686:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <MX_TIM3_Init+0xc0>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <MX_TIM3_Init+0xc0>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001694:	481d      	ldr	r0, [pc, #116]	; (800170c <MX_TIM3_Init+0xc0>)
 8001696:	f005 ff48 	bl	800752a <HAL_TIM_PWM_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80016a0:	f002 f9c0 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	4619      	mov	r1, r3
 80016b2:	4816      	ldr	r0, [pc, #88]	; (800170c <MX_TIM3_Init+0xc0>)
 80016b4:	f006 fdda 	bl	800826c <HAL_TIMEx_MasterConfigSynchronization>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80016be:	f002 f9b1 	bl	8003a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c2:	2360      	movs	r3, #96	; 0x60
 80016c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	4619      	mov	r1, r3
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <MX_TIM3_Init+0xc0>)
 80016da:	f006 f955 	bl	8007988 <HAL_TIM_PWM_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80016e4:	f002 f99e 	bl	8003a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	2204      	movs	r2, #4
 80016ec:	4619      	mov	r1, r3
 80016ee:	4807      	ldr	r0, [pc, #28]	; (800170c <MX_TIM3_Init+0xc0>)
 80016f0:	f006 f94a 	bl	8007988 <HAL_TIM_PWM_ConfigChannel>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016fa:	f002 f993 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016fe:	4803      	ldr	r0, [pc, #12]	; (800170c <MX_TIM3_Init+0xc0>)
 8001700:	f002 fac2 	bl	8003c88 <HAL_TIM_MspPostInit>

}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2000033c 	.word	0x2000033c
 8001710:	40000400 	.word	0x40000400

08001714 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001728:	463b      	mov	r3, r7
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <MX_TIM4_Init+0x94>)
 8001732:	4a1e      	ldr	r2, [pc, #120]	; (80017ac <MX_TIM4_Init+0x98>)
 8001734:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_TIM4_Init+0x94>)
 8001738:	2263      	movs	r2, #99	; 0x63
 800173a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_TIM4_Init+0x94>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_TIM4_Init+0x94>)
 8001744:	f242 7210 	movw	r2, #10000	; 0x2710
 8001748:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_TIM4_Init+0x94>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_TIM4_Init+0x94>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001756:	4814      	ldr	r0, [pc, #80]	; (80017a8 <MX_TIM4_Init+0x94>)
 8001758:	f005 fe74 	bl	8007444 <HAL_TIM_Base_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001762:	f002 f95f 	bl	8003a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	4619      	mov	r1, r3
 8001772:	480d      	ldr	r0, [pc, #52]	; (80017a8 <MX_TIM4_Init+0x94>)
 8001774:	f006 f9ce 	bl	8007b14 <HAL_TIM_ConfigClockSource>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800177e:	f002 f951 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800178a:	463b      	mov	r3, r7
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_TIM4_Init+0x94>)
 8001790:	f006 fd6c 	bl	800826c <HAL_TIMEx_MasterConfigSynchronization>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800179a:	f002 f943 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200002a0 	.word	0x200002a0
 80017ac:	40000800 	.word	0x40000800

080017b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MX_USART2_UART_Init+0x50>)
 80017b6:	4a13      	ldr	r2, [pc, #76]	; (8001804 <MX_USART2_UART_Init+0x54>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_USART2_UART_Init+0x50>)
 80017bc:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80017c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_USART2_UART_Init+0x50>)
 80017c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <MX_USART2_UART_Init+0x50>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_USART2_UART_Init+0x50>)
 80017d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_USART2_UART_Init+0x50>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_USART2_UART_Init+0x50>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_USART2_UART_Init+0x50>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_USART2_UART_Init+0x50>)
 80017ec:	f006 fdc0 	bl	8008370 <HAL_UART_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80017f6:	f002 f915 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000045c 	.word	0x2000045c
 8001804:	40004400 	.word	0x40004400

08001808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <MX_DMA_Init+0x4c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a0f      	ldr	r2, [pc, #60]	; (8001854 <MX_DMA_Init+0x4c>)
 8001818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <MX_DMA_Init+0x4c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	2010      	movs	r0, #16
 8001830:	f002 fd6f 	bl	8004312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001834:	2010      	movs	r0, #16
 8001836:	f002 fd88 	bl	800434a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2011      	movs	r0, #17
 8001840:	f002 fd67 	bl	8004312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001844:	2011      	movs	r0, #17
 8001846:	f002 fd80 	bl	800434a <HAL_NVIC_EnableIRQ>

}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800

08001858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	4b39      	ldr	r3, [pc, #228]	; (8001958 <MX_GPIO_Init+0x100>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a38      	ldr	r2, [pc, #224]	; (8001958 <MX_GPIO_Init+0x100>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b36      	ldr	r3, [pc, #216]	; (8001958 <MX_GPIO_Init+0x100>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b32      	ldr	r3, [pc, #200]	; (8001958 <MX_GPIO_Init+0x100>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a31      	ldr	r2, [pc, #196]	; (8001958 <MX_GPIO_Init+0x100>)
 8001894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <MX_GPIO_Init+0x100>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <MX_GPIO_Init+0x100>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a2a      	ldr	r2, [pc, #168]	; (8001958 <MX_GPIO_Init+0x100>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b28      	ldr	r3, [pc, #160]	; (8001958 <MX_GPIO_Init+0x100>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	4b24      	ldr	r3, [pc, #144]	; (8001958 <MX_GPIO_Init+0x100>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a23      	ldr	r2, [pc, #140]	; (8001958 <MX_GPIO_Init+0x100>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <MX_GPIO_Init+0x100>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	2120      	movs	r1, #32
 80018e2:	481e      	ldr	r0, [pc, #120]	; (800195c <MX_GPIO_Init+0x104>)
 80018e4:	f003 fa84 	bl	8004df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <MX_GPIO_Init+0x108>)
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4819      	ldr	r0, [pc, #100]	; (8001964 <MX_GPIO_Init+0x10c>)
 80018fe:	f003 f8dd 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001902:	2320      	movs	r3, #32
 8001904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4810      	ldr	r0, [pc, #64]	; (800195c <MX_GPIO_Init+0x104>)
 800191a:	f003 f8cf 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800191e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	480a      	ldr	r0, [pc, #40]	; (800195c <MX_GPIO_Init+0x104>)
 8001934:	f003 f8c2 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001938:	2330      	movs	r3, #48	; 0x30
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <MX_GPIO_Init+0x110>)
 800194c:	f003 f8b6 	bl	8004abc <HAL_GPIO_Init>

}
 8001950:	bf00      	nop
 8001952:	3728      	adds	r7, #40	; 0x28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	40020000 	.word	0x40020000
 8001960:	10210000 	.word	0x10210000
 8001964:	40020800 	.word	0x40020800
 8001968:	40020400 	.word	0x40020400

0800196c <NucleoCheck>:

/* USER CODE BEGIN 4 */
//******************************************************************

void NucleoCheck()
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	ButtonArray[1] = ButtonArray[0];
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <NucleoCheck+0x3c>)
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <NucleoCheck+0x3c>)
 8001976:	705a      	strb	r2, [r3, #1]
	ButtonArray[0] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001978:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800197c:	480b      	ldr	r0, [pc, #44]	; (80019ac <NucleoCheck+0x40>)
 800197e:	f003 fa1f 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <NucleoCheck+0x3c>)
 8001988:	701a      	strb	r2, [r3, #0]

	if(ButtonArray[0]==1 && ButtonArray[1]==0) //When Released Button
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <NucleoCheck+0x3c>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <NucleoCheck+0x36>
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <NucleoCheck+0x3c>)
 8001994:	785b      	ldrb	r3, [r3, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <NucleoCheck+0x36>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800199a:	2120      	movs	r1, #32
 800199c:	4804      	ldr	r0, [pc, #16]	; (80019b0 <NucleoCheck+0x44>)
 800199e:	f003 fa40 	bl	8004e22 <HAL_GPIO_TogglePin>
	}
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000004 	.word	0x20000004
 80019ac:	40020800 	.word	0x40020800
 80019b0:	40020000 	.word	0x40020000

080019b4 <EmergencyCheck>:

void EmergencyCheck()
{
 80019b4:	b598      	push	{r3, r4, r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	EmergencyArray[1] = EmergencyArray[0];
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <EmergencyCheck+0x74>)
 80019ba:	781a      	ldrb	r2, [r3, #0]
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <EmergencyCheck+0x74>)
 80019be:	705a      	strb	r2, [r3, #1]
	EmergencyArray[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80019c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019c4:	4819      	ldr	r0, [pc, #100]	; (8001a2c <EmergencyCheck+0x78>)
 80019c6:	f003 f9fb 	bl	8004dc0 <HAL_GPIO_ReadPin>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <EmergencyCheck+0x74>)
 80019d0:	701a      	strb	r2, [r3, #0]

	if(EmergencyArray[0]==0 && EmergencyArray[1]==1) //When Pressed Emergency
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <EmergencyCheck+0x74>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10c      	bne.n	80019f4 <EmergencyCheck+0x40>
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <EmergencyCheck+0x74>)
 80019dc:	785b      	ldrb	r3, [r3, #1]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d108      	bne.n	80019f4 <EmergencyCheck+0x40>
	{
		Emergency = 1;
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <EmergencyCheck+0x7c>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <EmergencyCheck+0x80>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
		MotorDrive();
 80019ee:	f000 f85b 	bl	8001aa8 <MotorDrive>
		PWMOut = 0;
		MotorDrive();
		Emergency = 2;
		EmergencyTimestamp = micros();
	}
}
 80019f2:	e016      	b.n	8001a22 <EmergencyCheck+0x6e>
	else if(EmergencyArray[0]==1 && EmergencyArray[1]==0) //When Released Emergency
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <EmergencyCheck+0x74>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d112      	bne.n	8001a22 <EmergencyCheck+0x6e>
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <EmergencyCheck+0x74>)
 80019fe:	785b      	ldrb	r3, [r3, #1]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10e      	bne.n	8001a22 <EmergencyCheck+0x6e>
		PWMOut = 0;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <EmergencyCheck+0x80>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001a0a:	f000 f84d 	bl	8001aa8 <MotorDrive>
		Emergency = 2;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <EmergencyCheck+0x7c>)
 8001a10:	2202      	movs	r2, #2
 8001a12:	701a      	strb	r2, [r3, #0]
		EmergencyTimestamp = micros();
 8001a14:	f000 f82e 	bl	8001a74 <micros>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <EmergencyCheck+0x84>)
 8001a1e:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001a22:	bf00      	nop
 8001a24:	bd98      	pop	{r3, r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	200001e2 	.word	0x200001e2
 8001a34:	2000010c 	.word	0x2000010c
 8001a38:	20000100 	.word	0x20000100

08001a3c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a3c:	b490      	push	{r4, r7}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d109      	bne.n	8001a60 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a4e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001a52:	f111 33ff 	adds.w	r3, r1, #4294967295	; 0xffffffff
 8001a56:	f142 0400 	adc.w	r4, r2, #0
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a5c:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc90      	pop	{r4, r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	2000041c 	.word	0x2000041c
 8001a70:	200000e0 	.word	0x200000e0

08001a74 <micros>:

uint64_t micros()
{
 8001a74:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001a78:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <micros+0x2c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	4619      	mov	r1, r3
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <micros+0x30>)
 8001a88:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001a8c:	eb1b 0301 	adds.w	r3, fp, r1
 8001a90:	eb4c 0402 	adc.w	r4, ip, r2
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	4621      	mov	r1, r4
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001a9e:	4770      	bx	lr
 8001aa0:	2000041c 	.word	0x2000041c
 8001aa4:	200000e0 	.word	0x200000e0

08001aa8 <MotorDrive>:
	ProxiArray[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
	ProxiArray[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
}

void MotorDrive()
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
	if(PWMOut >= 0)
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MotorDrive+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db09      	blt.n	8001ac8 <MotorDrive+0x20>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWMOut);
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <MotorDrive+0x40>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MotorDrive+0x44>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <MotorDrive+0x44>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, -PWMOut);
	}
}
 8001ac6:	e009      	b.n	8001adc <MotorDrive+0x34>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <MotorDrive+0x44>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, -PWMOut);
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <MotorDrive+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	425a      	negs	r2, r3
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <MotorDrive+0x44>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	2000010c 	.word	0x2000010c
 8001aec:	2000033c 	.word	0x2000033c

08001af0 <SetHome>:

void SetHome()
{
 8001af0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001af4:	af00      	add	r7, sp, #0
	if(HomeMode == 1)
 8001af6:	4b61      	ldr	r3, [pc, #388]	; (8001c7c <SetHome+0x18c>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d11e      	bne.n	8001b3c <SetHome+0x4c>
	{
		PWMOut = 750;
 8001afe:	4b60      	ldr	r3, [pc, #384]	; (8001c80 <SetHome+0x190>)
 8001b00:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001b04:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001b06:	f7ff ffcf 	bl	8001aa8 <MotorDrive>
		if (micros() - HomeTimestamp >= 200000) //200000us = 0.2s
 8001b0a:	f7ff ffb3 	bl	8001a74 <micros>
 8001b0e:	460a      	mov	r2, r1
 8001b10:	4601      	mov	r1, r0
 8001b12:	4b5c      	ldr	r3, [pc, #368]	; (8001c84 <SetHome+0x194>)
 8001b14:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4614      	mov	r4, r2
 8001b1c:	ebb3 030b 	subs.w	r3, r3, fp
 8001b20:	eb64 040c 	sbc.w	r4, r4, ip
 8001b24:	4958      	ldr	r1, [pc, #352]	; (8001c88 <SetHome+0x198>)
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	42a2      	cmp	r2, r4
 8001b2c:	bf08      	it	eq
 8001b2e:	4299      	cmpeq	r1, r3
 8001b30:	f080 80a0 	bcs.w	8001c74 <SetHome+0x184>
		{
			HomeMode = 2;
 8001b34:	4b51      	ldr	r3, [pc, #324]	; (8001c7c <SetHome+0x18c>)
 8001b36:	2202      	movs	r2, #2
 8001b38:	701a      	strb	r2, [r3, #0]
		MotorDrive();
		HAL_Delay(500);
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
		HomeMode = 0;
	}
}
 8001b3a:	e09b      	b.n	8001c74 <SetHome+0x184>
	else if(HomeMode == 2)
 8001b3c:	4b4f      	ldr	r3, [pc, #316]	; (8001c7c <SetHome+0x18c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d110      	bne.n	8001b66 <SetHome+0x76>
		PWMOut = -2500;
 8001b44:	4b4e      	ldr	r3, [pc, #312]	; (8001c80 <SetHome+0x190>)
 8001b46:	4a51      	ldr	r2, [pc, #324]	; (8001c8c <SetHome+0x19c>)
 8001b48:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001b4a:	f7ff ffad 	bl	8001aa8 <MotorDrive>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0)
 8001b4e:	2110      	movs	r1, #16
 8001b50:	484f      	ldr	r0, [pc, #316]	; (8001c90 <SetHome+0x1a0>)
 8001b52:	f003 f935 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f040 808b 	bne.w	8001c74 <SetHome+0x184>
			HomeMode = 3;
 8001b5e:	4b47      	ldr	r3, [pc, #284]	; (8001c7c <SetHome+0x18c>)
 8001b60:	2203      	movs	r2, #3
 8001b62:	701a      	strb	r2, [r3, #0]
}
 8001b64:	e086      	b.n	8001c74 <SetHome+0x184>
	else if(HomeMode == 3)
 8001b66:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <SetHome+0x18c>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d116      	bne.n	8001b9c <SetHome+0xac>
		PWMOut = -600;
 8001b6e:	4b44      	ldr	r3, [pc, #272]	; (8001c80 <SetHome+0x190>)
 8001b70:	4a48      	ldr	r2, [pc, #288]	; (8001c94 <SetHome+0x1a4>)
 8001b72:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001b74:	f7ff ff98 	bl	8001aa8 <MotorDrive>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0)
 8001b78:	2120      	movs	r1, #32
 8001b7a:	4845      	ldr	r0, [pc, #276]	; (8001c90 <SetHome+0x1a0>)
 8001b7c:	f003 f920 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d176      	bne.n	8001c74 <SetHome+0x184>
			HomeMode = 4;
 8001b86:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <SetHome+0x18c>)
 8001b88:	2204      	movs	r2, #4
 8001b8a:	701a      	strb	r2, [r3, #0]
			HomeTimestamp = micros();
 8001b8c:	f7ff ff72 	bl	8001a74 <micros>
 8001b90:	4603      	mov	r3, r0
 8001b92:	460c      	mov	r4, r1
 8001b94:	4a3b      	ldr	r2, [pc, #236]	; (8001c84 <SetHome+0x194>)
 8001b96:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001b9a:	e06b      	b.n	8001c74 <SetHome+0x184>
	else if(HomeMode == 4)
 8001b9c:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <SetHome+0x18c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d130      	bne.n	8001c06 <SetHome+0x116>
		PWMOut = 0;
 8001ba4:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <SetHome+0x190>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001baa:	f7ff ff7d 	bl	8001aa8 <MotorDrive>
		if (micros() - HomeTimestamp >= 500000) //500000us = 0.5s
 8001bae:	f7ff ff61 	bl	8001a74 <micros>
 8001bb2:	460a      	mov	r2, r1
 8001bb4:	4601      	mov	r1, r0
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <SetHome+0x194>)
 8001bb8:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	ebb3 030b 	subs.w	r3, r3, fp
 8001bc4:	eb64 040c 	sbc.w	r4, r4, ip
 8001bc8:	4933      	ldr	r1, [pc, #204]	; (8001c98 <SetHome+0x1a8>)
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	42a2      	cmp	r2, r4
 8001bd0:	bf08      	it	eq
 8001bd2:	4299      	cmpeq	r1, r3
 8001bd4:	d24e      	bcs.n	8001c74 <SetHome+0x184>
			htim1.Instance->CNT = 0;
 8001bd6:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <SetHome+0x1ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24
			HomeMode = 0;
 8001bde:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <SetHome+0x18c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
			Home = 0;
 8001be4:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <SetHome+0x1b0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
			Lastest_Angle = 0;
 8001bea:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <SetHome+0x1b4>)
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
			if(Goal_Mode != 0)
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <SetHome+0x1b8>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d03c      	beq.n	8001c74 <SetHome+0x184>
				SpecialHome = 0;
 8001bfa:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <SetHome+0x1bc>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
				ReachGoal();
 8001c00:	f001 f830 	bl	8002c64 <ReachGoal>
}
 8001c04:	e036      	b.n	8001c74 <SetHome+0x184>
	else if(HomeMode == 10)
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <SetHome+0x18c>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b0a      	cmp	r3, #10
 8001c0c:	d132      	bne.n	8001c74 <SetHome+0x184>
		PWMOut = 750;
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <SetHome+0x190>)
 8001c10:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001c14:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001c16:	f7ff ff47 	bl	8001aa8 <MotorDrive>
		HAL_Delay(200);
 8001c1a:	20c8      	movs	r0, #200	; 0xc8
 8001c1c:	f002 fa7c 	bl	8004118 <HAL_Delay>
		PWMOut = -2500;
 8001c20:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <SetHome+0x190>)
 8001c22:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <SetHome+0x19c>)
 8001c24:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8001c26:	e001      	b.n	8001c2c <SetHome+0x13c>
			MotorDrive();
 8001c28:	f7ff ff3e 	bl	8001aa8 <MotorDrive>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	4818      	ldr	r0, [pc, #96]	; (8001c90 <SetHome+0x1a0>)
 8001c30:	f003 f8c6 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d0f6      	beq.n	8001c28 <SetHome+0x138>
		PWMOut = -600;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <SetHome+0x190>)
 8001c3c:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <SetHome+0x1a4>)
 8001c3e:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1)
 8001c40:	e001      	b.n	8001c46 <SetHome+0x156>
			MotorDrive();
 8001c42:	f7ff ff31 	bl	8001aa8 <MotorDrive>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1)
 8001c46:	2120      	movs	r1, #32
 8001c48:	4811      	ldr	r0, [pc, #68]	; (8001c90 <SetHome+0x1a0>)
 8001c4a:	f003 f8b9 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d0f6      	beq.n	8001c42 <SetHome+0x152>
		PWMOut = 0;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <SetHome+0x190>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001c5a:	f7ff ff25 	bl	8001aa8 <MotorDrive>
		HAL_Delay(500);
 8001c5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c62:	f002 fa59 	bl	8004118 <HAL_Delay>
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001c66:	213c      	movs	r1, #60	; 0x3c
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <SetHome+0x1ac>)
 8001c6a:	f005 fd4d 	bl	8007708 <HAL_TIM_Encoder_Start>
		HomeMode = 0;
 8001c6e:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <SetHome+0x18c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
}
 8001c74:	bf00      	nop
 8001c76:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000108 	.word	0x20000108
 8001c80:	2000010c 	.word	0x2000010c
 8001c84:	200000f0 	.word	0x200000f0
 8001c88:	00030d3f 	.word	0x00030d3f
 8001c8c:	fffff63c 	.word	0xfffff63c
 8001c90:	40020400 	.word	0x40020400
 8001c94:	fffffda8 	.word	0xfffffda8
 8001c98:	0007a11f 	.word	0x0007a11f
 8001c9c:	200003dc 	.word	0x200003dc
 8001ca0:	200001e4 	.word	0x200001e4
 8001ca4:	200001d0 	.word	0x200001d0
 8001ca8:	200001da 	.word	0x200001da
 8001cac:	200001e5 	.word	0x200001e5

08001cb0 <EncoderPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 3600
#define  MAX_ENCODER_PERIOD 7200

uint32_t EncoderPosition_Update()
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
	return HTIM_ENCODER.Instance->CNT;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <EncoderPosition_Update+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	200003dc 	.word	0x200003dc

08001cc8 <EncoderVelocity_Update>:

float EncoderVelocity_Update()
{
 8001cc8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001ccc:	ed2d 8b02 	vpush	{d8}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001cd4:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <EncoderVelocity_Update+0x140>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8001cdc:	f7ff feca 	bl	8001a74 <micros>
 8001ce0:	e9c7 0102 	strd	r0, r1, [r7, #8]
	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff; sample2 = 104.0;
 8001ce4:	4b49      	ldr	r3, [pc, #292]	; (8001e0c <EncoderVelocity_Update+0x144>)
 8001ce6:	4a4a      	ldr	r2, [pc, #296]	; (8001e10 <EncoderVelocity_Update+0x148>)
 8001ce8:	601a      	str	r2, [r3, #0]
	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001cea:	4b4a      	ldr	r3, [pc, #296]	; (8001e14 <EncoderVelocity_Update+0x14c>)
 8001cec:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001cf0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4614      	mov	r4, r2
 8001cf8:	ebb3 030b 	subs.w	r3, r3, fp
 8001cfc:	eb64 040c 	sbc.w	r4, r4, ip
 8001d00:	e9c7 3400 	strd	r3, r4, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8001d04:	4b44      	ldr	r3, [pc, #272]	; (8001e18 <EncoderVelocity_Update+0x150>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	617b      	str	r3, [r7, #20]
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001d14:	db04      	blt.n	8001d20 <EncoderVelocity_Update+0x58>
	{EncoderPositionDiff -= MAX_ENCODER_PERIOD;}
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e008      	b.n	8001d32 <EncoderVelocity_Update+0x6a>
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	425b      	negs	r3, r3
 8001d24:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001d28:	db03      	blt.n	8001d32 <EncoderVelocity_Update+0x6a>
	{EncoderPositionDiff += MAX_ENCODER_PERIOD;}
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001d30:	617b      	str	r3, [r7, #20]
	EncoderLastPosition = EncoderNowPosition;
 8001d32:	4a39      	ldr	r2, [pc, #228]	; (8001e18 <EncoderVelocity_Update+0x150>)
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8001d38:	4a36      	ldr	r2, [pc, #216]	; (8001e14 <EncoderVelocity_Update+0x14c>)
 8001d3a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001d3e:	e9c2 3400 	strd	r3, r4, [r2]
	raw =(float)(EncoderPositionDiff * 1000000.00) / (float) EncoderTimeDiff;
 8001d42:	6978      	ldr	r0, [r7, #20]
 8001d44:	f7fe fb9a 	bl	800047c <__aeabi_i2d>
 8001d48:	a329      	add	r3, pc, #164	; (adr r3, 8001df0 <EncoderVelocity_Update+0x128>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	f7fe fbff 	bl	8000550 <__aeabi_dmul>
 8001d52:	4603      	mov	r3, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	4618      	mov	r0, r3
 8001d58:	4621      	mov	r1, r4
 8001d5a:	f7fe fea9 	bl	8000ab0 <__aeabi_d2f>
 8001d5e:	ee08 0a10 	vmov	s16, r0
 8001d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d66:	f7fe ffbb 	bl	8000ce0 <__aeabi_ul2f>
 8001d6a:	ee07 0a10 	vmov	s14, r0
 8001d6e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <EncoderVelocity_Update+0x154>)
 8001d74:	edc3 7a00 	vstr	s15, [r3]
	rad = raw* 0.05*2.00*3.141592/360.00;
 8001d78:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <EncoderVelocity_Update+0x154>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fb8f 	bl	80004a0 <__aeabi_f2d>
 8001d82:	a31d      	add	r3, pc, #116	; (adr r3, 8001df8 <EncoderVelocity_Update+0x130>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe fbe2 	bl	8000550 <__aeabi_dmul>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	460c      	mov	r4, r1
 8001d90:	4618      	mov	r0, r3
 8001d92:	4621      	mov	r1, r4
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	f7fe fa24 	bl	80001e4 <__adddf3>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	460c      	mov	r4, r1
 8001da0:	4618      	mov	r0, r3
 8001da2:	4621      	mov	r1, r4
 8001da4:	a316      	add	r3, pc, #88	; (adr r3, 8001e00 <EncoderVelocity_Update+0x138>)
 8001da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001daa:	f7fe fbd1 	bl	8000550 <__aeabi_dmul>
 8001dae:	4603      	mov	r3, r0
 8001db0:	460c      	mov	r4, r1
 8001db2:	4618      	mov	r0, r3
 8001db4:	4621      	mov	r1, r4
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <EncoderVelocity_Update+0x158>)
 8001dbc:	f7fe fcf2 	bl	80007a4 <__aeabi_ddiv>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	460c      	mov	r4, r1
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	f7fe fe72 	bl	8000ab0 <__aeabi_d2f>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <EncoderVelocity_Update+0x15c>)
 8001dd0:	601a      	str	r2, [r3, #0]
	return rad;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <EncoderVelocity_Update+0x15c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	ee07 3a90 	vmov	s15, r3
}
 8001dda:	eeb0 0a67 	vmov.f32	s0, s15
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	ecbd 8b02 	vpop	{d8}
 8001de6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001dea:	bf00      	nop
 8001dec:	f3af 8000 	nop.w
 8001df0:	00000000 	.word	0x00000000
 8001df4:	412e8480 	.word	0x412e8480
 8001df8:	9999999a 	.word	0x9999999a
 8001dfc:	3fa99999 	.word	0x3fa99999
 8001e00:	fc8b007a 	.word	0xfc8b007a
 8001e04:	400921fa 	.word	0x400921fa
 8001e08:	200003dc 	.word	0x200003dc
 8001e0c:	20000028 	.word	0x20000028
 8001e10:	42d00000 	.word	0x42d00000
 8001e14:	20000220 	.word	0x20000220
 8001e18:	20000228 	.word	0x20000228
 8001e1c:	2000011c 	.word	0x2000011c
 8001e20:	40768000 	.word	0x40768000
 8001e24:	20000118 	.word	0x20000118

08001e28 <kalmanfilter>:

void kalmanfilter()
{    Q = pow(a,2);
 8001e28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e2c:	ed2d 8b02 	vpush	{d8}
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4bd5      	ldr	r3, [pc, #852]	; (8002188 <kalmanfilter+0x360>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb32 	bl	80004a0 <__aeabi_f2d>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	460c      	mov	r4, r1
 8001e40:	ed9f 1bcd 	vldr	d1, [pc, #820]	; 8002178 <kalmanfilter+0x350>
 8001e44:	ec44 3b10 	vmov	d0, r3, r4
 8001e48:	f007 fb7e 	bl	8009548 <pow>
 8001e4c:	ec54 3b10 	vmov	r3, r4, d0
 8001e50:	4618      	mov	r0, r3
 8001e52:	4621      	mov	r1, r4
 8001e54:	f7fe fe2c 	bl	8000ab0 <__aeabi_d2f>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4bcc      	ldr	r3, [pc, #816]	; (800218c <kalmanfilter+0x364>)
 8001e5c:	601a      	str	r2, [r3, #0]
	 R = pow(w,2);
 8001e5e:	4bcc      	ldr	r3, [pc, #816]	; (8002190 <kalmanfilter+0x368>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fb1c 	bl	80004a0 <__aeabi_f2d>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	460c      	mov	r4, r1
 8001e6c:	ed9f 1bc2 	vldr	d1, [pc, #776]	; 8002178 <kalmanfilter+0x350>
 8001e70:	ec44 3b10 	vmov	d0, r3, r4
 8001e74:	f007 fb68 	bl	8009548 <pow>
 8001e78:	ec54 3b10 	vmov	r3, r4, d0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	4621      	mov	r1, r4
 8001e80:	f7fe fe16 	bl	8000ab0 <__aeabi_d2f>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4bc3      	ldr	r3, [pc, #780]	; (8002194 <kalmanfilter+0x36c>)
 8001e88:	601a      	str	r2, [r3, #0]
	 theta_est = theta_pd + omega_pd*dt1;
 8001e8a:	4bc3      	ldr	r3, [pc, #780]	; (8002198 <kalmanfilter+0x370>)
 8001e8c:	ed93 7a00 	vldr	s14, [r3]
 8001e90:	4bc2      	ldr	r3, [pc, #776]	; (800219c <kalmanfilter+0x374>)
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e9a:	4bc1      	ldr	r3, [pc, #772]	; (80021a0 <kalmanfilter+0x378>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea4:	4bbf      	ldr	r3, [pc, #764]	; (80021a4 <kalmanfilter+0x37c>)
 8001ea6:	edc3 7a00 	vstr	s15, [r3]
	 omega_est = omega_pd;
 8001eaa:	4bbb      	ldr	r3, [pc, #748]	; (8002198 <kalmanfilter+0x370>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4abe      	ldr	r2, [pc, #760]	; (80021a8 <kalmanfilter+0x380>)
 8001eb0:	6013      	str	r3, [r2, #0]

	 v_pre = omega_est;
 8001eb2:	4bbd      	ldr	r3, [pc, #756]	; (80021a8 <kalmanfilter+0x380>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4abd      	ldr	r2, [pc, #756]	; (80021ac <kalmanfilter+0x384>)
 8001eb8:	6013      	str	r3, [r2, #0]

	 y = (rad-omega_est);
 8001eba:	4bbd      	ldr	r3, [pc, #756]	; (80021b0 <kalmanfilter+0x388>)
 8001ebc:	ed93 7a00 	vldr	s14, [r3]
 8001ec0:	4bb9      	ldr	r3, [pc, #740]	; (80021a8 <kalmanfilter+0x380>)
 8001ec2:	edd3 7a00 	vldr	s15, [r3]
 8001ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eca:	4bba      	ldr	r3, [pc, #744]	; (80021b4 <kalmanfilter+0x38c>)
 8001ecc:	edc3 7a00 	vstr	s15, [r3]

    p11 = p11 + dt1*p21+ (Q*pow(dt1,4))/4 + (pow(dt1,2))*(p12+dt1*p22)/dt1;
 8001ed0:	4bb2      	ldr	r3, [pc, #712]	; (800219c <kalmanfilter+0x374>)
 8001ed2:	ed93 7a00 	vldr	s14, [r3]
 8001ed6:	4bb8      	ldr	r3, [pc, #736]	; (80021b8 <kalmanfilter+0x390>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee0:	4bb6      	ldr	r3, [pc, #728]	; (80021bc <kalmanfilter+0x394>)
 8001ee2:	edd3 7a00 	vldr	s15, [r3]
 8001ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eea:	ee17 0a90 	vmov	r0, s15
 8001eee:	f7fe fad7 	bl	80004a0 <__aeabi_f2d>
 8001ef2:	4604      	mov	r4, r0
 8001ef4:	460d      	mov	r5, r1
 8001ef6:	4ba5      	ldr	r3, [pc, #660]	; (800218c <kalmanfilter+0x364>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fad0 	bl	80004a0 <__aeabi_f2d>
 8001f00:	4680      	mov	r8, r0
 8001f02:	4689      	mov	r9, r1
 8001f04:	4ba5      	ldr	r3, [pc, #660]	; (800219c <kalmanfilter+0x374>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fac9 	bl	80004a0 <__aeabi_f2d>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	ed9f 1b9b 	vldr	d1, [pc, #620]	; 8002180 <kalmanfilter+0x358>
 8001f16:	ec43 2b10 	vmov	d0, r2, r3
 8001f1a:	f007 fb15 	bl	8009548 <pow>
 8001f1e:	ec53 2b10 	vmov	r2, r3, d0
 8001f22:	4640      	mov	r0, r8
 8001f24:	4649      	mov	r1, r9
 8001f26:	f7fe fb13 	bl	8000550 <__aeabi_dmul>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4610      	mov	r0, r2
 8001f30:	4619      	mov	r1, r3
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	4ba2      	ldr	r3, [pc, #648]	; (80021c0 <kalmanfilter+0x398>)
 8001f38:	f7fe fc34 	bl	80007a4 <__aeabi_ddiv>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4620      	mov	r0, r4
 8001f42:	4629      	mov	r1, r5
 8001f44:	f7fe f94e 	bl	80001e4 <__adddf3>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	4625      	mov	r5, r4
 8001f4e:	461c      	mov	r4, r3
 8001f50:	4b92      	ldr	r3, [pc, #584]	; (800219c <kalmanfilter+0x374>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe faa3 	bl	80004a0 <__aeabi_f2d>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	ed9f 1b86 	vldr	d1, [pc, #536]	; 8002178 <kalmanfilter+0x350>
 8001f62:	ec43 2b10 	vmov	d0, r2, r3
 8001f66:	f007 faef 	bl	8009548 <pow>
 8001f6a:	ec59 8b10 	vmov	r8, r9, d0
 8001f6e:	4b8b      	ldr	r3, [pc, #556]	; (800219c <kalmanfilter+0x374>)
 8001f70:	ed93 7a00 	vldr	s14, [r3]
 8001f74:	4b93      	ldr	r3, [pc, #588]	; (80021c4 <kalmanfilter+0x39c>)
 8001f76:	edd3 7a00 	vldr	s15, [r3]
 8001f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f7e:	4b92      	ldr	r3, [pc, #584]	; (80021c8 <kalmanfilter+0x3a0>)
 8001f80:	edd3 7a00 	vldr	s15, [r3]
 8001f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f88:	ee17 0a90 	vmov	r0, s15
 8001f8c:	f7fe fa88 	bl	80004a0 <__aeabi_f2d>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4640      	mov	r0, r8
 8001f96:	4649      	mov	r1, r9
 8001f98:	f7fe fada 	bl	8000550 <__aeabi_dmul>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4690      	mov	r8, r2
 8001fa2:	4699      	mov	r9, r3
 8001fa4:	4b7d      	ldr	r3, [pc, #500]	; (800219c <kalmanfilter+0x374>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fa79 	bl	80004a0 <__aeabi_f2d>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4640      	mov	r0, r8
 8001fb4:	4649      	mov	r1, r9
 8001fb6:	f7fe fbf5 	bl	80007a4 <__aeabi_ddiv>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	f7fe f90f 	bl	80001e4 <__adddf3>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	460c      	mov	r4, r1
 8001fca:	4618      	mov	r0, r3
 8001fcc:	4621      	mov	r1, r4
 8001fce:	f7fe fd6f 	bl	8000ab0 <__aeabi_d2f>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	4b79      	ldr	r3, [pc, #484]	; (80021bc <kalmanfilter+0x394>)
 8001fd6:	601a      	str	r2, [r3, #0]
    p12 = p12 + dt1*p22 + (Q*dt1*pow(dt1,2))/2;
 8001fd8:	4b70      	ldr	r3, [pc, #448]	; (800219c <kalmanfilter+0x374>)
 8001fda:	ed93 7a00 	vldr	s14, [r3]
 8001fde:	4b79      	ldr	r3, [pc, #484]	; (80021c4 <kalmanfilter+0x39c>)
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe8:	4b77      	ldr	r3, [pc, #476]	; (80021c8 <kalmanfilter+0x3a0>)
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff2:	ee17 0a90 	vmov	r0, s15
 8001ff6:	f7fe fa53 	bl	80004a0 <__aeabi_f2d>
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	460d      	mov	r5, r1
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <kalmanfilter+0x364>)
 8002000:	ed93 7a00 	vldr	s14, [r3]
 8002004:	4b65      	ldr	r3, [pc, #404]	; (800219c <kalmanfilter+0x374>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200e:	ee17 0a90 	vmov	r0, s15
 8002012:	f7fe fa45 	bl	80004a0 <__aeabi_f2d>
 8002016:	4680      	mov	r8, r0
 8002018:	4689      	mov	r9, r1
 800201a:	4b60      	ldr	r3, [pc, #384]	; (800219c <kalmanfilter+0x374>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa3e 	bl	80004a0 <__aeabi_f2d>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8002178 <kalmanfilter+0x350>
 800202c:	ec43 2b10 	vmov	d0, r2, r3
 8002030:	f007 fa8a 	bl	8009548 <pow>
 8002034:	ec53 2b10 	vmov	r2, r3, d0
 8002038:	4640      	mov	r0, r8
 800203a:	4649      	mov	r1, r9
 800203c:	f7fe fa88 	bl	8000550 <__aeabi_dmul>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002050:	f7fe fba8 	bl	80007a4 <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4620      	mov	r0, r4
 800205a:	4629      	mov	r1, r5
 800205c:	f7fe f8c2 	bl	80001e4 <__adddf3>
 8002060:	4603      	mov	r3, r0
 8002062:	460c      	mov	r4, r1
 8002064:	4618      	mov	r0, r3
 8002066:	4621      	mov	r1, r4
 8002068:	f7fe fd22 	bl	8000ab0 <__aeabi_d2f>
 800206c:	4602      	mov	r2, r0
 800206e:	4b56      	ldr	r3, [pc, #344]	; (80021c8 <kalmanfilter+0x3a0>)
 8002070:	601a      	str	r2, [r3, #0]
    p21 = (2*dt1*p21+Q*pow(dt1,4) + 2*p22*pow(dt1,2))/(2*dt1);
 8002072:	4b4a      	ldr	r3, [pc, #296]	; (800219c <kalmanfilter+0x374>)
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800207c:	4b4e      	ldr	r3, [pc, #312]	; (80021b8 <kalmanfilter+0x390>)
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002086:	ee17 0a90 	vmov	r0, s15
 800208a:	f7fe fa09 	bl	80004a0 <__aeabi_f2d>
 800208e:	4604      	mov	r4, r0
 8002090:	460d      	mov	r5, r1
 8002092:	4b3e      	ldr	r3, [pc, #248]	; (800218c <kalmanfilter+0x364>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fa02 	bl	80004a0 <__aeabi_f2d>
 800209c:	4680      	mov	r8, r0
 800209e:	4689      	mov	r9, r1
 80020a0:	4b3e      	ldr	r3, [pc, #248]	; (800219c <kalmanfilter+0x374>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe f9fb 	bl	80004a0 <__aeabi_f2d>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8002180 <kalmanfilter+0x358>
 80020b2:	ec43 2b10 	vmov	d0, r2, r3
 80020b6:	f007 fa47 	bl	8009548 <pow>
 80020ba:	ec53 2b10 	vmov	r2, r3, d0
 80020be:	4640      	mov	r0, r8
 80020c0:	4649      	mov	r1, r9
 80020c2:	f7fe fa45 	bl	8000550 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4620      	mov	r0, r4
 80020cc:	4629      	mov	r1, r5
 80020ce:	f7fe f889 	bl	80001e4 <__adddf3>
 80020d2:	4603      	mov	r3, r0
 80020d4:	460c      	mov	r4, r1
 80020d6:	4625      	mov	r5, r4
 80020d8:	461c      	mov	r4, r3
 80020da:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <kalmanfilter+0x39c>)
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020e4:	ee17 0a90 	vmov	r0, s15
 80020e8:	f7fe f9da 	bl	80004a0 <__aeabi_f2d>
 80020ec:	4680      	mov	r8, r0
 80020ee:	4689      	mov	r9, r1
 80020f0:	4b2a      	ldr	r3, [pc, #168]	; (800219c <kalmanfilter+0x374>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe f9d3 	bl	80004a0 <__aeabi_f2d>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8002178 <kalmanfilter+0x350>
 8002102:	ec43 2b10 	vmov	d0, r2, r3
 8002106:	f007 fa1f 	bl	8009548 <pow>
 800210a:	ec53 2b10 	vmov	r2, r3, d0
 800210e:	4640      	mov	r0, r8
 8002110:	4649      	mov	r1, r9
 8002112:	f7fe fa1d 	bl	8000550 <__aeabi_dmul>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4620      	mov	r0, r4
 800211c:	4629      	mov	r1, r5
 800211e:	f7fe f861 	bl	80001e4 <__adddf3>
 8002122:	4603      	mov	r3, r0
 8002124:	460c      	mov	r4, r1
 8002126:	4625      	mov	r5, r4
 8002128:	461c      	mov	r4, r3
 800212a:	4b1c      	ldr	r3, [pc, #112]	; (800219c <kalmanfilter+0x374>)
 800212c:	edd3 7a00 	vldr	s15, [r3]
 8002130:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002134:	ee17 0a90 	vmov	r0, s15
 8002138:	f7fe f9b2 	bl	80004a0 <__aeabi_f2d>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4620      	mov	r0, r4
 8002142:	4629      	mov	r1, r5
 8002144:	f7fe fb2e 	bl	80007a4 <__aeabi_ddiv>
 8002148:	4603      	mov	r3, r0
 800214a:	460c      	mov	r4, r1
 800214c:	4618      	mov	r0, r3
 800214e:	4621      	mov	r1, r4
 8002150:	f7fe fcae 	bl	8000ab0 <__aeabi_d2f>
 8002154:	4602      	mov	r2, r0
 8002156:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <kalmanfilter+0x390>)
 8002158:	601a      	str	r2, [r3, #0]
    p22 = Q*pow(dt1,2)+p22;
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <kalmanfilter+0x364>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe f99e 	bl	80004a0 <__aeabi_f2d>
 8002164:	4604      	mov	r4, r0
 8002166:	460d      	mov	r5, r1
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <kalmanfilter+0x374>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe f997 	bl	80004a0 <__aeabi_f2d>
 8002172:	e02b      	b.n	80021cc <kalmanfilter+0x3a4>
 8002174:	f3af 8000 	nop.w
 8002178:	00000000 	.word	0x00000000
 800217c:	40000000 	.word	0x40000000
 8002180:	00000000 	.word	0x00000000
 8002184:	40100000 	.word	0x40100000
 8002188:	20000018 	.word	0x20000018
 800218c:	20000120 	.word	0x20000120
 8002190:	2000001c 	.word	0x2000001c
 8002194:	20000124 	.word	0x20000124
 8002198:	20000148 	.word	0x20000148
 800219c:	20000020 	.word	0x20000020
 80021a0:	20000130 	.word	0x20000130
 80021a4:	20000128 	.word	0x20000128
 80021a8:	2000012c 	.word	0x2000012c
 80021ac:	200001a4 	.word	0x200001a4
 80021b0:	20000118 	.word	0x20000118
 80021b4:	20000134 	.word	0x20000134
 80021b8:	20000140 	.word	0x20000140
 80021bc:	20000138 	.word	0x20000138
 80021c0:	40100000 	.word	0x40100000
 80021c4:	20000144 	.word	0x20000144
 80021c8:	2000013c 	.word	0x2000013c
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	ed9f 1b9b 	vldr	d1, [pc, #620]	; 8002440 <kalmanfilter+0x618>
 80021d4:	ec43 2b10 	vmov	d0, r2, r3
 80021d8:	f007 f9b6 	bl	8009548 <pow>
 80021dc:	ec53 2b10 	vmov	r2, r3, d0
 80021e0:	4620      	mov	r0, r4
 80021e2:	4629      	mov	r1, r5
 80021e4:	f7fe f9b4 	bl	8000550 <__aeabi_dmul>
 80021e8:	4603      	mov	r3, r0
 80021ea:	460c      	mov	r4, r1
 80021ec:	4625      	mov	r5, r4
 80021ee:	461c      	mov	r4, r3
 80021f0:	4b9b      	ldr	r3, [pc, #620]	; (8002460 <kalmanfilter+0x638>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f953 	bl	80004a0 <__aeabi_f2d>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4620      	mov	r0, r4
 8002200:	4629      	mov	r1, r5
 8002202:	f7fd ffef 	bl	80001e4 <__adddf3>
 8002206:	4603      	mov	r3, r0
 8002208:	460c      	mov	r4, r1
 800220a:	4618      	mov	r0, r3
 800220c:	4621      	mov	r1, r4
 800220e:	f7fe fc4f 	bl	8000ab0 <__aeabi_d2f>
 8002212:	4602      	mov	r2, r0
 8002214:	4b92      	ldr	r3, [pc, #584]	; (8002460 <kalmanfilter+0x638>)
 8002216:	601a      	str	r2, [r3, #0]

    theta_est+= (p12*y)/(R+p22);
 8002218:	4b92      	ldr	r3, [pc, #584]	; (8002464 <kalmanfilter+0x63c>)
 800221a:	ed93 7a00 	vldr	s14, [r3]
 800221e:	4b92      	ldr	r3, [pc, #584]	; (8002468 <kalmanfilter+0x640>)
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002228:	4b90      	ldr	r3, [pc, #576]	; (800246c <kalmanfilter+0x644>)
 800222a:	ed93 7a00 	vldr	s14, [r3]
 800222e:	4b8c      	ldr	r3, [pc, #560]	; (8002460 <kalmanfilter+0x638>)
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002238:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800223c:	4b8c      	ldr	r3, [pc, #560]	; (8002470 <kalmanfilter+0x648>)
 800223e:	edd3 7a00 	vldr	s15, [r3]
 8002242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002246:	4b8a      	ldr	r3, [pc, #552]	; (8002470 <kalmanfilter+0x648>)
 8002248:	edc3 7a00 	vstr	s15, [r3]
    omega_est+= (p22*y)/(R+p22);
 800224c:	4b84      	ldr	r3, [pc, #528]	; (8002460 <kalmanfilter+0x638>)
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	4b85      	ldr	r3, [pc, #532]	; (8002468 <kalmanfilter+0x640>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ee67 6a27 	vmul.f32	s13, s14, s15
 800225c:	4b83      	ldr	r3, [pc, #524]	; (800246c <kalmanfilter+0x644>)
 800225e:	ed93 7a00 	vldr	s14, [r3]
 8002262:	4b7f      	ldr	r3, [pc, #508]	; (8002460 <kalmanfilter+0x638>)
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800226c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002270:	4b80      	ldr	r3, [pc, #512]	; (8002474 <kalmanfilter+0x64c>)
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227a:	4b7e      	ldr	r3, [pc, #504]	; (8002474 <kalmanfilter+0x64c>)
 800227c:	edc3 7a00 	vstr	s15, [r3]

    p11=p11-(p12*p21)/(R+p22);
 8002280:	4b7d      	ldr	r3, [pc, #500]	; (8002478 <kalmanfilter+0x650>)
 8002282:	ed93 7a00 	vldr	s14, [r3]
 8002286:	4b77      	ldr	r3, [pc, #476]	; (8002464 <kalmanfilter+0x63c>)
 8002288:	edd3 6a00 	vldr	s13, [r3]
 800228c:	4b7b      	ldr	r3, [pc, #492]	; (800247c <kalmanfilter+0x654>)
 800228e:	edd3 7a00 	vldr	s15, [r3]
 8002292:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002296:	4b75      	ldr	r3, [pc, #468]	; (800246c <kalmanfilter+0x644>)
 8002298:	edd3 6a00 	vldr	s13, [r3]
 800229c:	4b70      	ldr	r3, [pc, #448]	; (8002460 <kalmanfilter+0x638>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80022aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ae:	4b72      	ldr	r3, [pc, #456]	; (8002478 <kalmanfilter+0x650>)
 80022b0:	edc3 7a00 	vstr	s15, [r3]
    p12=p12-(p22*p21)/(R+p22);
 80022b4:	4b6b      	ldr	r3, [pc, #428]	; (8002464 <kalmanfilter+0x63c>)
 80022b6:	ed93 7a00 	vldr	s14, [r3]
 80022ba:	4b69      	ldr	r3, [pc, #420]	; (8002460 <kalmanfilter+0x638>)
 80022bc:	edd3 6a00 	vldr	s13, [r3]
 80022c0:	4b6e      	ldr	r3, [pc, #440]	; (800247c <kalmanfilter+0x654>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80022ca:	4b68      	ldr	r3, [pc, #416]	; (800246c <kalmanfilter+0x644>)
 80022cc:	edd3 6a00 	vldr	s13, [r3]
 80022d0:	4b63      	ldr	r3, [pc, #396]	; (8002460 <kalmanfilter+0x638>)
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022da:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80022de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e2:	4b60      	ldr	r3, [pc, #384]	; (8002464 <kalmanfilter+0x63c>)
 80022e4:	edc3 7a00 	vstr	s15, [r3]
    p21=-p21*(p22/(R+p22)-1);
 80022e8:	4b64      	ldr	r3, [pc, #400]	; (800247c <kalmanfilter+0x654>)
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	eeb1 7a67 	vneg.f32	s14, s15
 80022f2:	4b5b      	ldr	r3, [pc, #364]	; (8002460 <kalmanfilter+0x638>)
 80022f4:	ed93 6a00 	vldr	s12, [r3]
 80022f8:	4b5c      	ldr	r3, [pc, #368]	; (800246c <kalmanfilter+0x644>)
 80022fa:	edd3 6a00 	vldr	s13, [r3]
 80022fe:	4b58      	ldr	r3, [pc, #352]	; (8002460 <kalmanfilter+0x638>)
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002308:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800230c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002310:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002318:	4b58      	ldr	r3, [pc, #352]	; (800247c <kalmanfilter+0x654>)
 800231a:	edc3 7a00 	vstr	s15, [r3]
    p22=-p22*(p22/(R+p22)-1);
 800231e:	4b50      	ldr	r3, [pc, #320]	; (8002460 <kalmanfilter+0x638>)
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	eeb1 7a67 	vneg.f32	s14, s15
 8002328:	4b4d      	ldr	r3, [pc, #308]	; (8002460 <kalmanfilter+0x638>)
 800232a:	ed93 6a00 	vldr	s12, [r3]
 800232e:	4b4f      	ldr	r3, [pc, #316]	; (800246c <kalmanfilter+0x644>)
 8002330:	edd3 6a00 	vldr	s13, [r3]
 8002334:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <kalmanfilter+0x638>)
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800233e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002346:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800234a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800234e:	4b44      	ldr	r3, [pc, #272]	; (8002460 <kalmanfilter+0x638>)
 8002350:	edc3 7a00 	vstr	s15, [r3]

    theta_pd=theta_est;
 8002354:	4b46      	ldr	r3, [pc, #280]	; (8002470 <kalmanfilter+0x648>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a49      	ldr	r2, [pc, #292]	; (8002480 <kalmanfilter+0x658>)
 800235a:	6013      	str	r3, [r2, #0]
    omega_pd=omega_est;
 800235c:	4b45      	ldr	r3, [pc, #276]	; (8002474 <kalmanfilter+0x64c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a48      	ldr	r2, [pc, #288]	; (8002484 <kalmanfilter+0x65c>)
 8002362:	6013      	str	r3, [r2, #0]

    kalman_theta=(float)(theta_est*57.2958);
 8002364:	4b42      	ldr	r3, [pc, #264]	; (8002470 <kalmanfilter+0x648>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f899 	bl	80004a0 <__aeabi_f2d>
 800236e:	a336      	add	r3, pc, #216	; (adr r3, 8002448 <kalmanfilter+0x620>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fe f8ec 	bl	8000550 <__aeabi_dmul>
 8002378:	4603      	mov	r3, r0
 800237a:	460c      	mov	r4, r1
 800237c:	4618      	mov	r0, r3
 800237e:	4621      	mov	r1, r4
 8002380:	f7fe fb96 	bl	8000ab0 <__aeabi_d2f>
 8002384:	4602      	mov	r2, r0
 8002386:	4b40      	ldr	r3, [pc, #256]	; (8002488 <kalmanfilter+0x660>)
 8002388:	601a      	str	r2, [r3, #0]

    p2graph = RobotArm_Position / 20.00;
 800238a:	4b40      	ldr	r3, [pc, #256]	; (800248c <kalmanfilter+0x664>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f874 	bl	800047c <__aeabi_i2d>
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <kalmanfilter+0x668>)
 800239a:	f7fe fa03 	bl	80007a4 <__aeabi_ddiv>
 800239e:	4603      	mov	r3, r0
 80023a0:	460c      	mov	r4, r1
 80023a2:	4618      	mov	r0, r3
 80023a4:	4621      	mov	r1, r4
 80023a6:	f7fe fb83 	bl	8000ab0 <__aeabi_d2f>
 80023aa:	4602      	mov	r2, r0
 80023ac:	4b39      	ldr	r3, [pc, #228]	; (8002494 <kalmanfilter+0x66c>)
 80023ae:	601a      	str	r2, [r3, #0]
    v2graph = omega_est * 8.1493;
 80023b0:	4b30      	ldr	r3, [pc, #192]	; (8002474 <kalmanfilter+0x64c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f873 	bl	80004a0 <__aeabi_f2d>
 80023ba:	a325      	add	r3, pc, #148	; (adr r3, 8002450 <kalmanfilter+0x628>)
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	f7fe f8c6 	bl	8000550 <__aeabi_dmul>
 80023c4:	4603      	mov	r3, r0
 80023c6:	460c      	mov	r4, r1
 80023c8:	4618      	mov	r0, r3
 80023ca:	4621      	mov	r1, r4
 80023cc:	f7fe fb70 	bl	8000ab0 <__aeabi_d2f>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b31      	ldr	r3, [pc, #196]	; (8002498 <kalmanfilter+0x670>)
 80023d4:	601a      	str	r2, [r3, #0]
    a2graph = ( ( a2graph*sample1 ) + ( (float)((v_pre-v_aft)/0.01) ) ) / sample2; //Add Low Pass Filter
 80023d6:	4b31      	ldr	r3, [pc, #196]	; (800249c <kalmanfilter+0x674>)
 80023d8:	ed93 7a00 	vldr	s14, [r3]
 80023dc:	4b30      	ldr	r3, [pc, #192]	; (80024a0 <kalmanfilter+0x678>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	ee27 8a27 	vmul.f32	s16, s14, s15
 80023e6:	4b2f      	ldr	r3, [pc, #188]	; (80024a4 <kalmanfilter+0x67c>)
 80023e8:	ed93 7a00 	vldr	s14, [r3]
 80023ec:	4b2e      	ldr	r3, [pc, #184]	; (80024a8 <kalmanfilter+0x680>)
 80023ee:	edd3 7a00 	vldr	s15, [r3]
 80023f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f6:	ee17 0a90 	vmov	r0, s15
 80023fa:	f7fe f851 	bl	80004a0 <__aeabi_f2d>
 80023fe:	a316      	add	r3, pc, #88	; (adr r3, 8002458 <kalmanfilter+0x630>)
 8002400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002404:	f7fe f9ce 	bl	80007a4 <__aeabi_ddiv>
 8002408:	4603      	mov	r3, r0
 800240a:	460c      	mov	r4, r1
 800240c:	4618      	mov	r0, r3
 800240e:	4621      	mov	r1, r4
 8002410:	f7fe fb4e 	bl	8000ab0 <__aeabi_d2f>
 8002414:	ee07 0a90 	vmov	s15, r0
 8002418:	ee78 6a27 	vadd.f32	s13, s16, s15
 800241c:	4b23      	ldr	r3, [pc, #140]	; (80024ac <kalmanfilter+0x684>)
 800241e:	ed93 7a00 	vldr	s14, [r3]
 8002422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002426:	4b1d      	ldr	r3, [pc, #116]	; (800249c <kalmanfilter+0x674>)
 8002428:	edc3 7a00 	vstr	s15, [r3]
    v_aft = v_pre;
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <kalmanfilter+0x67c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1d      	ldr	r2, [pc, #116]	; (80024a8 <kalmanfilter+0x680>)
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	ecbd 8b02 	vpop	{d8}
 800243c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002440:	00000000 	.word	0x00000000
 8002444:	40000000 	.word	0x40000000
 8002448:	c63f1412 	.word	0xc63f1412
 800244c:	404ca5dc 	.word	0x404ca5dc
 8002450:	0cb295ea 	.word	0x0cb295ea
 8002454:	40204c71 	.word	0x40204c71
 8002458:	47ae147b 	.word	0x47ae147b
 800245c:	3f847ae1 	.word	0x3f847ae1
 8002460:	20000144 	.word	0x20000144
 8002464:	2000013c 	.word	0x2000013c
 8002468:	20000134 	.word	0x20000134
 800246c:	20000124 	.word	0x20000124
 8002470:	20000128 	.word	0x20000128
 8002474:	2000012c 	.word	0x2000012c
 8002478:	20000138 	.word	0x20000138
 800247c:	20000140 	.word	0x20000140
 8002480:	20000130 	.word	0x20000130
 8002484:	20000148 	.word	0x20000148
 8002488:	20000198 	.word	0x20000198
 800248c:	20000110 	.word	0x20000110
 8002490:	40340000 	.word	0x40340000
 8002494:	200001ac 	.word	0x200001ac
 8002498:	200001b0 	.word	0x200001b0
 800249c:	200001b4 	.word	0x200001b4
 80024a0:	20000024 	.word	0x20000024
 80024a4:	200001a4 	.word	0x200001a4
 80024a8:	200001a8 	.word	0x200001a8
 80024ac:	20000028 	.word	0x20000028

080024b0 <planning>:

void planning()
{
 80024b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024b4:	af00      	add	r7, sp, #0
  t=t+0.01;
 80024b6:	4bac      	ldr	r3, [pc, #688]	; (8002768 <planning+0x2b8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fd fff0 	bl	80004a0 <__aeabi_f2d>
 80024c0:	a39b      	add	r3, pc, #620	; (adr r3, 8002730 <planning+0x280>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fd fe8d 	bl	80001e4 <__adddf3>
 80024ca:	4603      	mov	r3, r0
 80024cc:	460c      	mov	r4, r1
 80024ce:	4618      	mov	r0, r3
 80024d0:	4621      	mov	r1, r4
 80024d2:	f7fe faed 	bl	8000ab0 <__aeabi_d2f>
 80024d6:	4602      	mov	r2, r0
 80024d8:	4ba3      	ldr	r3, [pc, #652]	; (8002768 <planning+0x2b8>)
 80024da:	601a      	str	r2, [r3, #0]
  Vmax = Max_Speed * 0.10472 * 0.95;     //rad/s
 80024dc:	4ba3      	ldr	r3, [pc, #652]	; (800276c <planning+0x2bc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fd ffdd 	bl	80004a0 <__aeabi_f2d>
 80024e6:	a394      	add	r3, pc, #592	; (adr r3, 8002738 <planning+0x288>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	f7fe f830 	bl	8000550 <__aeabi_dmul>
 80024f0:	4603      	mov	r3, r0
 80024f2:	460c      	mov	r4, r1
 80024f4:	4618      	mov	r0, r3
 80024f6:	4621      	mov	r1, r4
 80024f8:	a391      	add	r3, pc, #580	; (adr r3, 8002740 <planning+0x290>)
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	f7fe f827 	bl	8000550 <__aeabi_dmul>
 8002502:	4603      	mov	r3, r0
 8002504:	460c      	mov	r4, r1
 8002506:	4618      	mov	r0, r3
 8002508:	4621      	mov	r1, r4
 800250a:	f7fe fad1 	bl	8000ab0 <__aeabi_d2f>
 800250e:	4602      	mov	r2, r0
 8002510:	4b97      	ldr	r3, [pc, #604]	; (8002770 <planning+0x2c0>)
 8002512:	601a      	str	r2, [r3, #0]
  sb = angle*0.0174533;           //degree -> rad
 8002514:	4b97      	ldr	r3, [pc, #604]	; (8002774 <planning+0x2c4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fd ffc1 	bl	80004a0 <__aeabi_f2d>
 800251e:	a38a      	add	r3, pc, #552	; (adr r3, 8002748 <planning+0x298>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fe f814 	bl	8000550 <__aeabi_dmul>
 8002528:	4603      	mov	r3, r0
 800252a:	460c      	mov	r4, r1
 800252c:	4618      	mov	r0, r3
 800252e:	4621      	mov	r1, r4
 8002530:	f7fe fabe 	bl	8000ab0 <__aeabi_d2f>
 8002534:	4602      	mov	r2, r0
 8002536:	4b90      	ldr	r3, [pc, #576]	; (8002778 <planning+0x2c8>)
 8002538:	601a      	str	r2, [r3, #0]
  sa = Lastest_Angle * 0.0174533; //degree -> rad
 800253a:	4b90      	ldr	r3, [pc, #576]	; (800277c <planning+0x2cc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fd ffae 	bl	80004a0 <__aeabi_f2d>
 8002544:	a380      	add	r3, pc, #512	; (adr r3, 8002748 <planning+0x298>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fe f801 	bl	8000550 <__aeabi_dmul>
 800254e:	4603      	mov	r3, r0
 8002550:	460c      	mov	r4, r1
 8002552:	4618      	mov	r0, r3
 8002554:	4621      	mov	r1, r4
 8002556:	f7fe faab 	bl	8000ab0 <__aeabi_d2f>
 800255a:	4602      	mov	r2, r0
 800255c:	4b88      	ldr	r3, [pc, #544]	; (8002780 <planning+0x2d0>)
 800255e:	601a      	str	r2, [r3, #0]

  if(sb < sa) { reverse = 1; distance = Lastest_Angle - angle; tf = 15.00*(sa-sb)/(8.00*Vmax); }
 8002560:	4b85      	ldr	r3, [pc, #532]	; (8002778 <planning+0x2c8>)
 8002562:	ed93 7a00 	vldr	s14, [r3]
 8002566:	4b86      	ldr	r3, [pc, #536]	; (8002780 <planning+0x2d0>)
 8002568:	edd3 7a00 	vldr	s15, [r3]
 800256c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	d53c      	bpl.n	80025f0 <planning+0x140>
 8002576:	4b83      	ldr	r3, [pc, #524]	; (8002784 <planning+0x2d4>)
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	4b7f      	ldr	r3, [pc, #508]	; (800277c <planning+0x2cc>)
 800257e:	ed93 7a00 	vldr	s14, [r3]
 8002582:	4b7c      	ldr	r3, [pc, #496]	; (8002774 <planning+0x2c4>)
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258c:	4b7e      	ldr	r3, [pc, #504]	; (8002788 <planning+0x2d8>)
 800258e:	edc3 7a00 	vstr	s15, [r3]
 8002592:	4b7b      	ldr	r3, [pc, #492]	; (8002780 <planning+0x2d0>)
 8002594:	ed93 7a00 	vldr	s14, [r3]
 8002598:	4b77      	ldr	r3, [pc, #476]	; (8002778 <planning+0x2c8>)
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a2:	ee17 0a90 	vmov	r0, s15
 80025a6:	f7fd ff7b 	bl	80004a0 <__aeabi_f2d>
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	4b77      	ldr	r3, [pc, #476]	; (800278c <planning+0x2dc>)
 80025b0:	f7fd ffce 	bl	8000550 <__aeabi_dmul>
 80025b4:	4603      	mov	r3, r0
 80025b6:	460c      	mov	r4, r1
 80025b8:	4625      	mov	r5, r4
 80025ba:	461c      	mov	r4, r3
 80025bc:	4b6c      	ldr	r3, [pc, #432]	; (8002770 <planning+0x2c0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd ff6d 	bl	80004a0 <__aeabi_f2d>
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	4b71      	ldr	r3, [pc, #452]	; (8002790 <planning+0x2e0>)
 80025cc:	f7fd ffc0 	bl	8000550 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4620      	mov	r0, r4
 80025d6:	4629      	mov	r1, r5
 80025d8:	f7fe f8e4 	bl	80007a4 <__aeabi_ddiv>
 80025dc:	4603      	mov	r3, r0
 80025de:	460c      	mov	r4, r1
 80025e0:	4618      	mov	r0, r3
 80025e2:	4621      	mov	r1, r4
 80025e4:	f7fe fa64 	bl	8000ab0 <__aeabi_d2f>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b6a      	ldr	r3, [pc, #424]	; (8002794 <planning+0x2e4>)
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e03b      	b.n	8002668 <planning+0x1b8>
  else        { reverse = 0; distance = angle - Lastest_Angle; tf = 15.00*(sb-sa)/(8.00*Vmax); }
 80025f0:	4b64      	ldr	r3, [pc, #400]	; (8002784 <planning+0x2d4>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	4b5f      	ldr	r3, [pc, #380]	; (8002774 <planning+0x2c4>)
 80025f8:	ed93 7a00 	vldr	s14, [r3]
 80025fc:	4b5f      	ldr	r3, [pc, #380]	; (800277c <planning+0x2cc>)
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002606:	4b60      	ldr	r3, [pc, #384]	; (8002788 <planning+0x2d8>)
 8002608:	edc3 7a00 	vstr	s15, [r3]
 800260c:	4b5a      	ldr	r3, [pc, #360]	; (8002778 <planning+0x2c8>)
 800260e:	ed93 7a00 	vldr	s14, [r3]
 8002612:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <planning+0x2d0>)
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800261c:	ee17 0a90 	vmov	r0, s15
 8002620:	f7fd ff3e 	bl	80004a0 <__aeabi_f2d>
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	4b58      	ldr	r3, [pc, #352]	; (800278c <planning+0x2dc>)
 800262a:	f7fd ff91 	bl	8000550 <__aeabi_dmul>
 800262e:	4603      	mov	r3, r0
 8002630:	460c      	mov	r4, r1
 8002632:	4625      	mov	r5, r4
 8002634:	461c      	mov	r4, r3
 8002636:	4b4e      	ldr	r3, [pc, #312]	; (8002770 <planning+0x2c0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd ff30 	bl	80004a0 <__aeabi_f2d>
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	4b52      	ldr	r3, [pc, #328]	; (8002790 <planning+0x2e0>)
 8002646:	f7fd ff83 	bl	8000550 <__aeabi_dmul>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4620      	mov	r0, r4
 8002650:	4629      	mov	r1, r5
 8002652:	f7fe f8a7 	bl	80007a4 <__aeabi_ddiv>
 8002656:	4603      	mov	r3, r0
 8002658:	460c      	mov	r4, r1
 800265a:	4618      	mov	r0, r3
 800265c:	4621      	mov	r1, r4
 800265e:	f7fe fa27 	bl	8000ab0 <__aeabi_d2f>
 8002662:	4602      	mov	r2, r0
 8002664:	4b4b      	ldr	r3, [pc, #300]	; (8002794 <planning+0x2e4>)
 8002666:	601a      	str	r2, [r3, #0]

  if (distance <=32)
 8002668:	4b47      	ldr	r3, [pc, #284]	; (8002788 <planning+0x2d8>)
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002798 <planning+0x2e8>
 8002672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267a:	d802      	bhi.n	8002682 <planning+0x1d2>
  { flag_case = 1; }
 800267c:	4b47      	ldr	r3, [pc, #284]	; (800279c <planning+0x2ec>)
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]

  if (distance > 32){
 8002682:	4b41      	ldr	r3, [pc, #260]	; (8002788 <planning+0x2d8>)
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002798 <planning+0x2e8>
 800268c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002694:	dc00      	bgt.n	8002698 <planning+0x1e8>
	  if(t<=tf){
		  sbf =  a3*pow(t,3)+a4*pow(t,4)+a5*pow(t,5);
		  vb= (float)((3*a3*pow(t,2))+(4*a4*pow(t,3))+(5*a5*pow(t,4)));}
	  else { vb=0; }
  }
}
 8002696:	e291      	b.n	8002bbc <planning+0x70c>
	  flag_case = 2;
 8002698:	4b40      	ldr	r3, [pc, #256]	; (800279c <planning+0x2ec>)
 800269a:	2202      	movs	r2, #2
 800269c:	701a      	strb	r2, [r3, #0]
	  if(Max_Speed == 10)
 800269e:	4b33      	ldr	r3, [pc, #204]	; (800276c <planning+0x2bc>)
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80026a8:	eef4 7a47 	vcmp.f32	s15, s14
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	f040 80ae 	bne.w	8002810 <planning+0x360>
		  if(reverse) { tf=pow((5.7335*(sa-sb)/0.5),0.5) * 0.9; }
 80026b4:	4b33      	ldr	r3, [pc, #204]	; (8002784 <planning+0x2d4>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d073      	beq.n	80027a4 <planning+0x2f4>
 80026bc:	4b30      	ldr	r3, [pc, #192]	; (8002780 <planning+0x2d0>)
 80026be:	ed93 7a00 	vldr	s14, [r3]
 80026c2:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <planning+0x2c8>)
 80026c4:	edd3 7a00 	vldr	s15, [r3]
 80026c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026cc:	ee17 0a90 	vmov	r0, s15
 80026d0:	f7fd fee6 	bl	80004a0 <__aeabi_f2d>
 80026d4:	a31e      	add	r3, pc, #120	; (adr r3, 8002750 <planning+0x2a0>)
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	f7fd ff39 	bl	8000550 <__aeabi_dmul>
 80026de:	4603      	mov	r3, r0
 80026e0:	460c      	mov	r4, r1
 80026e2:	4618      	mov	r0, r3
 80026e4:	4621      	mov	r1, r4
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	4b2d      	ldr	r3, [pc, #180]	; (80027a0 <planning+0x2f0>)
 80026ec:	f7fe f85a 	bl	80007a4 <__aeabi_ddiv>
 80026f0:	4603      	mov	r3, r0
 80026f2:	460c      	mov	r4, r1
 80026f4:	ec44 3b17 	vmov	d7, r3, r4
 80026f8:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8002758 <planning+0x2a8>
 80026fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002700:	eef0 0a67 	vmov.f32	s1, s15
 8002704:	f006 ff20 	bl	8009548 <pow>
 8002708:	ec51 0b10 	vmov	r0, r1, d0
 800270c:	a314      	add	r3, pc, #80	; (adr r3, 8002760 <planning+0x2b0>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	f7fd ff1d 	bl	8000550 <__aeabi_dmul>
 8002716:	4603      	mov	r3, r0
 8002718:	460c      	mov	r4, r1
 800271a:	4618      	mov	r0, r3
 800271c:	4621      	mov	r1, r4
 800271e:	f7fe f9c7 	bl	8000ab0 <__aeabi_d2f>
 8002722:	4602      	mov	r2, r0
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <planning+0x2e4>)
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	e072      	b.n	8002810 <planning+0x360>
 800272a:	bf00      	nop
 800272c:	f3af 8000 	nop.w
 8002730:	47ae147b 	.word	0x47ae147b
 8002734:	3f847ae1 	.word	0x3f847ae1
 8002738:	0f3cb3e5 	.word	0x0f3cb3e5
 800273c:	3fbaceee 	.word	0x3fbaceee
 8002740:	66666666 	.word	0x66666666
 8002744:	3fee6666 	.word	0x3fee6666
 8002748:	22d4405f 	.word	0x22d4405f
 800274c:	3f91df47 	.word	0x3f91df47
 8002750:	9fbe76c9 	.word	0x9fbe76c9
 8002754:	4016ef1a 	.word	0x4016ef1a
 8002758:	00000000 	.word	0x00000000
 800275c:	3fe00000 	.word	0x3fe00000
 8002760:	cccccccd 	.word	0xcccccccd
 8002764:	3feccccc 	.word	0x3feccccc
 8002768:	20000178 	.word	0x20000178
 800276c:	200001ec 	.word	0x200001ec
 8002770:	2000017c 	.word	0x2000017c
 8002774:	20000194 	.word	0x20000194
 8002778:	20000164 	.word	0x20000164
 800277c:	200001d0 	.word	0x200001d0
 8002780:	20000168 	.word	0x20000168
 8002784:	2000019d 	.word	0x2000019d
 8002788:	200001a0 	.word	0x200001a0
 800278c:	402e0000 	.word	0x402e0000
 8002790:	40200000 	.word	0x40200000
 8002794:	2000016c 	.word	0x2000016c
 8002798:	42000000 	.word	0x42000000
 800279c:	2000019c 	.word	0x2000019c
 80027a0:	3fe00000 	.word	0x3fe00000
		  else        { tf=pow((5.7335*(sb-sa)/0.5),0.5) * 0.9; }
 80027a4:	4bda      	ldr	r3, [pc, #872]	; (8002b10 <planning+0x660>)
 80027a6:	ed93 7a00 	vldr	s14, [r3]
 80027aa:	4bda      	ldr	r3, [pc, #872]	; (8002b14 <planning+0x664>)
 80027ac:	edd3 7a00 	vldr	s15, [r3]
 80027b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b4:	ee17 0a90 	vmov	r0, s15
 80027b8:	f7fd fe72 	bl	80004a0 <__aeabi_f2d>
 80027bc:	a3c6      	add	r3, pc, #792	; (adr r3, 8002ad8 <planning+0x628>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	f7fd fec5 	bl	8000550 <__aeabi_dmul>
 80027c6:	4603      	mov	r3, r0
 80027c8:	460c      	mov	r4, r1
 80027ca:	4618      	mov	r0, r3
 80027cc:	4621      	mov	r1, r4
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	4bd1      	ldr	r3, [pc, #836]	; (8002b18 <planning+0x668>)
 80027d4:	f7fd ffe6 	bl	80007a4 <__aeabi_ddiv>
 80027d8:	4603      	mov	r3, r0
 80027da:	460c      	mov	r4, r1
 80027dc:	ec44 3b17 	vmov	d7, r3, r4
 80027e0:	ed9f 1bbf 	vldr	d1, [pc, #764]	; 8002ae0 <planning+0x630>
 80027e4:	eeb0 0a47 	vmov.f32	s0, s14
 80027e8:	eef0 0a67 	vmov.f32	s1, s15
 80027ec:	f006 feac 	bl	8009548 <pow>
 80027f0:	ec51 0b10 	vmov	r0, r1, d0
 80027f4:	a3bc      	add	r3, pc, #752	; (adr r3, 8002ae8 <planning+0x638>)
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	f7fd fea9 	bl	8000550 <__aeabi_dmul>
 80027fe:	4603      	mov	r3, r0
 8002800:	460c      	mov	r4, r1
 8002802:	4618      	mov	r0, r3
 8002804:	4621      	mov	r1, r4
 8002806:	f7fe f953 	bl	8000ab0 <__aeabi_d2f>
 800280a:	4602      	mov	r2, r0
 800280c:	4bc3      	ldr	r3, [pc, #780]	; (8002b1c <planning+0x66c>)
 800280e:	601a      	str	r2, [r3, #0]
	  a0=0;
 8002810:	4bc3      	ldr	r3, [pc, #780]	; (8002b20 <planning+0x670>)
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
	  a1=0;
 8002818:	4bc2      	ldr	r3, [pc, #776]	; (8002b24 <planning+0x674>)
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
	  a2=0;
 8002820:	4bc1      	ldr	r3, [pc, #772]	; (8002b28 <planning+0x678>)
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
	  a3= 10.00*(sb-sa)/(pow(tf,3));
 8002828:	4bb9      	ldr	r3, [pc, #740]	; (8002b10 <planning+0x660>)
 800282a:	ed93 7a00 	vldr	s14, [r3]
 800282e:	4bb9      	ldr	r3, [pc, #740]	; (8002b14 <planning+0x664>)
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002838:	ee17 0a90 	vmov	r0, s15
 800283c:	f7fd fe30 	bl	80004a0 <__aeabi_f2d>
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	4bb9      	ldr	r3, [pc, #740]	; (8002b2c <planning+0x67c>)
 8002846:	f7fd fe83 	bl	8000550 <__aeabi_dmul>
 800284a:	4603      	mov	r3, r0
 800284c:	460c      	mov	r4, r1
 800284e:	4625      	mov	r5, r4
 8002850:	461c      	mov	r4, r3
 8002852:	4bb2      	ldr	r3, [pc, #712]	; (8002b1c <planning+0x66c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fd fe22 	bl	80004a0 <__aeabi_f2d>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	ed9f 1ba3 	vldr	d1, [pc, #652]	; 8002af0 <planning+0x640>
 8002864:	ec43 2b10 	vmov	d0, r2, r3
 8002868:	f006 fe6e 	bl	8009548 <pow>
 800286c:	ec53 2b10 	vmov	r2, r3, d0
 8002870:	4620      	mov	r0, r4
 8002872:	4629      	mov	r1, r5
 8002874:	f7fd ff96 	bl	80007a4 <__aeabi_ddiv>
 8002878:	4603      	mov	r3, r0
 800287a:	460c      	mov	r4, r1
 800287c:	4618      	mov	r0, r3
 800287e:	4621      	mov	r1, r4
 8002880:	f7fe f916 	bl	8000ab0 <__aeabi_d2f>
 8002884:	4602      	mov	r2, r0
 8002886:	4baa      	ldr	r3, [pc, #680]	; (8002b30 <planning+0x680>)
 8002888:	601a      	str	r2, [r3, #0]
	  a4= -15.00*(sb-sa)/(pow(tf,4));
 800288a:	4ba1      	ldr	r3, [pc, #644]	; (8002b10 <planning+0x660>)
 800288c:	ed93 7a00 	vldr	s14, [r3]
 8002890:	4ba0      	ldr	r3, [pc, #640]	; (8002b14 <planning+0x664>)
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800289a:	ee17 0a90 	vmov	r0, s15
 800289e:	f7fd fdff 	bl	80004a0 <__aeabi_f2d>
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	4ba3      	ldr	r3, [pc, #652]	; (8002b34 <planning+0x684>)
 80028a8:	f7fd fe52 	bl	8000550 <__aeabi_dmul>
 80028ac:	4603      	mov	r3, r0
 80028ae:	460c      	mov	r4, r1
 80028b0:	4625      	mov	r5, r4
 80028b2:	461c      	mov	r4, r3
 80028b4:	4b99      	ldr	r3, [pc, #612]	; (8002b1c <planning+0x66c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd fdf1 	bl	80004a0 <__aeabi_f2d>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	ed9f 1b8d 	vldr	d1, [pc, #564]	; 8002af8 <planning+0x648>
 80028c6:	ec43 2b10 	vmov	d0, r2, r3
 80028ca:	f006 fe3d 	bl	8009548 <pow>
 80028ce:	ec53 2b10 	vmov	r2, r3, d0
 80028d2:	4620      	mov	r0, r4
 80028d4:	4629      	mov	r1, r5
 80028d6:	f7fd ff65 	bl	80007a4 <__aeabi_ddiv>
 80028da:	4603      	mov	r3, r0
 80028dc:	460c      	mov	r4, r1
 80028de:	4618      	mov	r0, r3
 80028e0:	4621      	mov	r1, r4
 80028e2:	f7fe f8e5 	bl	8000ab0 <__aeabi_d2f>
 80028e6:	4602      	mov	r2, r0
 80028e8:	4b93      	ldr	r3, [pc, #588]	; (8002b38 <planning+0x688>)
 80028ea:	601a      	str	r2, [r3, #0]
	  a5= 6.00*(sb-sa)/(pow(tf,5));
 80028ec:	4b88      	ldr	r3, [pc, #544]	; (8002b10 <planning+0x660>)
 80028ee:	ed93 7a00 	vldr	s14, [r3]
 80028f2:	4b88      	ldr	r3, [pc, #544]	; (8002b14 <planning+0x664>)
 80028f4:	edd3 7a00 	vldr	s15, [r3]
 80028f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fc:	ee17 0a90 	vmov	r0, s15
 8002900:	f7fd fdce 	bl	80004a0 <__aeabi_f2d>
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	4b8c      	ldr	r3, [pc, #560]	; (8002b3c <planning+0x68c>)
 800290a:	f7fd fe21 	bl	8000550 <__aeabi_dmul>
 800290e:	4603      	mov	r3, r0
 8002910:	460c      	mov	r4, r1
 8002912:	4625      	mov	r5, r4
 8002914:	461c      	mov	r4, r3
 8002916:	4b81      	ldr	r3, [pc, #516]	; (8002b1c <planning+0x66c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd fdc0 	bl	80004a0 <__aeabi_f2d>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	ed9f 1b76 	vldr	d1, [pc, #472]	; 8002b00 <planning+0x650>
 8002928:	ec43 2b10 	vmov	d0, r2, r3
 800292c:	f006 fe0c 	bl	8009548 <pow>
 8002930:	ec53 2b10 	vmov	r2, r3, d0
 8002934:	4620      	mov	r0, r4
 8002936:	4629      	mov	r1, r5
 8002938:	f7fd ff34 	bl	80007a4 <__aeabi_ddiv>
 800293c:	4603      	mov	r3, r0
 800293e:	460c      	mov	r4, r1
 8002940:	4618      	mov	r0, r3
 8002942:	4621      	mov	r1, r4
 8002944:	f7fe f8b4 	bl	8000ab0 <__aeabi_d2f>
 8002948:	4602      	mov	r2, r0
 800294a:	4b7d      	ldr	r3, [pc, #500]	; (8002b40 <planning+0x690>)
 800294c:	601a      	str	r2, [r3, #0]
	  if(t<=tf){
 800294e:	4b7d      	ldr	r3, [pc, #500]	; (8002b44 <planning+0x694>)
 8002950:	ed93 7a00 	vldr	s14, [r3]
 8002954:	4b71      	ldr	r3, [pc, #452]	; (8002b1c <planning+0x66c>)
 8002956:	edd3 7a00 	vldr	s15, [r3]
 800295a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800295e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002962:	f200 8127 	bhi.w	8002bb4 <planning+0x704>
		  sbf =  a3*pow(t,3)+a4*pow(t,4)+a5*pow(t,5);
 8002966:	4b72      	ldr	r3, [pc, #456]	; (8002b30 <planning+0x680>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fd98 	bl	80004a0 <__aeabi_f2d>
 8002970:	4604      	mov	r4, r0
 8002972:	460d      	mov	r5, r1
 8002974:	4b73      	ldr	r3, [pc, #460]	; (8002b44 <planning+0x694>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fd91 	bl	80004a0 <__aeabi_f2d>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8002af0 <planning+0x640>
 8002986:	ec43 2b10 	vmov	d0, r2, r3
 800298a:	f006 fddd 	bl	8009548 <pow>
 800298e:	ec53 2b10 	vmov	r2, r3, d0
 8002992:	4620      	mov	r0, r4
 8002994:	4629      	mov	r1, r5
 8002996:	f7fd fddb 	bl	8000550 <__aeabi_dmul>
 800299a:	4603      	mov	r3, r0
 800299c:	460c      	mov	r4, r1
 800299e:	4625      	mov	r5, r4
 80029a0:	461c      	mov	r4, r3
 80029a2:	4b65      	ldr	r3, [pc, #404]	; (8002b38 <planning+0x688>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd fd7a 	bl	80004a0 <__aeabi_f2d>
 80029ac:	4680      	mov	r8, r0
 80029ae:	4689      	mov	r9, r1
 80029b0:	4b64      	ldr	r3, [pc, #400]	; (8002b44 <planning+0x694>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fd73 	bl	80004a0 <__aeabi_f2d>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8002af8 <planning+0x648>
 80029c2:	ec43 2b10 	vmov	d0, r2, r3
 80029c6:	f006 fdbf 	bl	8009548 <pow>
 80029ca:	ec53 2b10 	vmov	r2, r3, d0
 80029ce:	4640      	mov	r0, r8
 80029d0:	4649      	mov	r1, r9
 80029d2:	f7fd fdbd 	bl	8000550 <__aeabi_dmul>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4620      	mov	r0, r4
 80029dc:	4629      	mov	r1, r5
 80029de:	f7fd fc01 	bl	80001e4 <__adddf3>
 80029e2:	4603      	mov	r3, r0
 80029e4:	460c      	mov	r4, r1
 80029e6:	4625      	mov	r5, r4
 80029e8:	461c      	mov	r4, r3
 80029ea:	4b55      	ldr	r3, [pc, #340]	; (8002b40 <planning+0x690>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fd fd56 	bl	80004a0 <__aeabi_f2d>
 80029f4:	4680      	mov	r8, r0
 80029f6:	4689      	mov	r9, r1
 80029f8:	4b52      	ldr	r3, [pc, #328]	; (8002b44 <planning+0x694>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fd fd4f 	bl	80004a0 <__aeabi_f2d>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 8002b00 <planning+0x650>
 8002a0a:	ec43 2b10 	vmov	d0, r2, r3
 8002a0e:	f006 fd9b 	bl	8009548 <pow>
 8002a12:	ec53 2b10 	vmov	r2, r3, d0
 8002a16:	4640      	mov	r0, r8
 8002a18:	4649      	mov	r1, r9
 8002a1a:	f7fd fd99 	bl	8000550 <__aeabi_dmul>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4620      	mov	r0, r4
 8002a24:	4629      	mov	r1, r5
 8002a26:	f7fd fbdd 	bl	80001e4 <__adddf3>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	460c      	mov	r4, r1
 8002a2e:	4618      	mov	r0, r3
 8002a30:	4621      	mov	r1, r4
 8002a32:	f7fe f83d 	bl	8000ab0 <__aeabi_d2f>
 8002a36:	4602      	mov	r2, r0
 8002a38:	4b43      	ldr	r3, [pc, #268]	; (8002b48 <planning+0x698>)
 8002a3a:	601a      	str	r2, [r3, #0]
		  vb= (float)((3*a3*pow(t,2))+(4*a4*pow(t,3))+(5*a5*pow(t,4)));}
 8002a3c:	4b3c      	ldr	r3, [pc, #240]	; (8002b30 <planning+0x680>)
 8002a3e:	edd3 7a00 	vldr	s15, [r3]
 8002a42:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a4a:	ee17 0a90 	vmov	r0, s15
 8002a4e:	f7fd fd27 	bl	80004a0 <__aeabi_f2d>
 8002a52:	4604      	mov	r4, r0
 8002a54:	460d      	mov	r5, r1
 8002a56:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <planning+0x694>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fd20 	bl	80004a0 <__aeabi_f2d>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8002b08 <planning+0x658>
 8002a68:	ec43 2b10 	vmov	d0, r2, r3
 8002a6c:	f006 fd6c 	bl	8009548 <pow>
 8002a70:	ec53 2b10 	vmov	r2, r3, d0
 8002a74:	4620      	mov	r0, r4
 8002a76:	4629      	mov	r1, r5
 8002a78:	f7fd fd6a 	bl	8000550 <__aeabi_dmul>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	460c      	mov	r4, r1
 8002a80:	4625      	mov	r5, r4
 8002a82:	461c      	mov	r4, r3
 8002a84:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <planning+0x688>)
 8002a86:	edd3 7a00 	vldr	s15, [r3]
 8002a8a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a92:	ee17 0a90 	vmov	r0, s15
 8002a96:	f7fd fd03 	bl	80004a0 <__aeabi_f2d>
 8002a9a:	4680      	mov	r8, r0
 8002a9c:	4689      	mov	r9, r1
 8002a9e:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <planning+0x694>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fd fcfc 	bl	80004a0 <__aeabi_f2d>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002af0 <planning+0x640>
 8002ab0:	ec43 2b10 	vmov	d0, r2, r3
 8002ab4:	f006 fd48 	bl	8009548 <pow>
 8002ab8:	ec53 2b10 	vmov	r2, r3, d0
 8002abc:	4640      	mov	r0, r8
 8002abe:	4649      	mov	r1, r9
 8002ac0:	f7fd fd46 	bl	8000550 <__aeabi_dmul>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4620      	mov	r0, r4
 8002aca:	4629      	mov	r1, r5
 8002acc:	f7fd fb8a 	bl	80001e4 <__adddf3>
 8002ad0:	e03c      	b.n	8002b4c <planning+0x69c>
 8002ad2:	bf00      	nop
 8002ad4:	f3af 8000 	nop.w
 8002ad8:	9fbe76c9 	.word	0x9fbe76c9
 8002adc:	4016ef1a 	.word	0x4016ef1a
 8002ae0:	00000000 	.word	0x00000000
 8002ae4:	3fe00000 	.word	0x3fe00000
 8002ae8:	cccccccd 	.word	0xcccccccd
 8002aec:	3feccccc 	.word	0x3feccccc
 8002af0:	00000000 	.word	0x00000000
 8002af4:	40080000 	.word	0x40080000
 8002af8:	00000000 	.word	0x00000000
 8002afc:	40100000 	.word	0x40100000
 8002b00:	00000000 	.word	0x00000000
 8002b04:	40140000 	.word	0x40140000
 8002b08:	00000000 	.word	0x00000000
 8002b0c:	40000000 	.word	0x40000000
 8002b10:	20000164 	.word	0x20000164
 8002b14:	20000168 	.word	0x20000168
 8002b18:	3fe00000 	.word	0x3fe00000
 8002b1c:	2000016c 	.word	0x2000016c
 8002b20:	2000014c 	.word	0x2000014c
 8002b24:	20000150 	.word	0x20000150
 8002b28:	20000154 	.word	0x20000154
 8002b2c:	40240000 	.word	0x40240000
 8002b30:	20000158 	.word	0x20000158
 8002b34:	c02e0000 	.word	0xc02e0000
 8002b38:	2000015c 	.word	0x2000015c
 8002b3c:	40180000 	.word	0x40180000
 8002b40:	20000160 	.word	0x20000160
 8002b44:	20000178 	.word	0x20000178
 8002b48:	20000174 	.word	0x20000174
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	460c      	mov	r4, r1
 8002b50:	4625      	mov	r5, r4
 8002b52:	461c      	mov	r4, r3
 8002b54:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <planning+0x720>)
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b62:	ee17 0a90 	vmov	r0, s15
 8002b66:	f7fd fc9b 	bl	80004a0 <__aeabi_f2d>
 8002b6a:	4680      	mov	r8, r0
 8002b6c:	4689      	mov	r9, r1
 8002b6e:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <planning+0x724>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fc94 	bl	80004a0 <__aeabi_f2d>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002bc8 <planning+0x718>
 8002b80:	ec43 2b10 	vmov	d0, r2, r3
 8002b84:	f006 fce0 	bl	8009548 <pow>
 8002b88:	ec53 2b10 	vmov	r2, r3, d0
 8002b8c:	4640      	mov	r0, r8
 8002b8e:	4649      	mov	r1, r9
 8002b90:	f7fd fcde 	bl	8000550 <__aeabi_dmul>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4620      	mov	r0, r4
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	f7fd fb22 	bl	80001e4 <__adddf3>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	460c      	mov	r4, r1
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	f7fd ff82 	bl	8000ab0 <__aeabi_d2f>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <planning+0x728>)
 8002bb0:	601a      	str	r2, [r3, #0]
}
 8002bb2:	e003      	b.n	8002bbc <planning+0x70c>
	  else { vb=0; }
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <planning+0x728>)
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bc2:	bf00      	nop
 8002bc4:	f3af 8000 	nop.w
 8002bc8:	00000000 	.word	0x00000000
 8002bcc:	40100000 	.word	0x40100000
 8002bd0:	20000160 	.word	0x20000160
 8002bd4:	20000178 	.word	0x20000178
 8002bd8:	20000170 	.word	0x20000170

08002bdc <VariableReset>:

void VariableReset()
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
	theta_est = 0;
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <VariableReset+0x60>)
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
	omega_est = 0;
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <VariableReset+0x64>)
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
    theta_pd = 0;
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <VariableReset+0x68>)
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
	omega_pd = 0;
 8002bf8:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <VariableReset+0x6c>)
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
	vb = 0;
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <VariableReset+0x70>)
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
	error = 0;
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <VariableReset+0x74>)
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
	p = 0;
 8002c10:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <VariableReset+0x78>)
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
	i = 0;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <VariableReset+0x7c>)
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
	d = 0;
 8002c20:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <VariableReset+0x80>)
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
	pre_error = 0;
 8002c28:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <VariableReset+0x84>)
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000128 	.word	0x20000128
 8002c40:	2000012c 	.word	0x2000012c
 8002c44:	20000130 	.word	0x20000130
 8002c48:	20000148 	.word	0x20000148
 8002c4c:	20000170 	.word	0x20000170
 8002c50:	20000190 	.word	0x20000190
 8002c54:	20000180 	.word	0x20000180
 8002c58:	20000184 	.word	0x20000184
 8002c5c:	20000188 	.word	0x20000188
 8002c60:	2000018c 	.word	0x2000018c

08002c64 <ReachGoal>:

void ReachGoal()
{
 8002c64:	b598      	push	{r3, r4, r7, lr}
 8002c66:	af00      	add	r7, sp, #0
	VariableReset();
 8002c68:	f7ff ffb8 	bl	8002bdc <VariableReset>

	if(SpecialHome)
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <ReachGoal+0x6c>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00e      	beq.n	8002c92 <ReachGoal+0x2e>
	{
	  PWMOut=0;
 8002c74:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <ReachGoal+0x70>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
	  MotorDrive();
 8002c7a:	f7fe ff15 	bl	8001aa8 <MotorDrive>
	  Run = 0;
 8002c7e:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <ReachGoal+0x74>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
	  Home = 1;
 8002c84:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <ReachGoal+0x78>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
	  HomeMode = 2;
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <ReachGoal+0x7c>)
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	701a      	strb	r2, [r3, #0]
		Run=0;
		if(EndEff_Enable) { HAL_I2C_Master_Transmit_IT(&hi2c1, EndeffAddress, LaserOpenCommand, 1); }
		Laser = 1;
		LaserTimestamp = micros();
	}
}
 8002c90:	e01b      	b.n	8002cca <ReachGoal+0x66>
		PWMOut=0;
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <ReachGoal+0x70>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8002c98:	f7fe ff06 	bl	8001aa8 <MotorDrive>
		Run=0;
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <ReachGoal+0x74>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
		if(EndEff_Enable) { HAL_I2C_Master_Transmit_IT(&hi2c1, EndeffAddress, LaserOpenCommand, 1); }
 8002ca2:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <ReachGoal+0x80>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <ReachGoal+0x52>
 8002caa:	2301      	movs	r3, #1
 8002cac:	4a0e      	ldr	r2, [pc, #56]	; (8002ce8 <ReachGoal+0x84>)
 8002cae:	2146      	movs	r1, #70	; 0x46
 8002cb0:	480e      	ldr	r0, [pc, #56]	; (8002cec <ReachGoal+0x88>)
 8002cb2:	f002 fa09 	bl	80050c8 <HAL_I2C_Master_Transmit_IT>
		Laser = 1;
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <ReachGoal+0x8c>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	701a      	strb	r2, [r3, #0]
		LaserTimestamp = micros();
 8002cbc:	f7fe feda 	bl	8001a74 <micros>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	460c      	mov	r4, r1
 8002cc4:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <ReachGoal+0x90>)
 8002cc6:	e9c2 3400 	strd	r3, r4, [r2]
}
 8002cca:	bf00      	nop
 8002ccc:	bd98      	pop	{r3, r4, r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	200001e5 	.word	0x200001e5
 8002cd4:	2000010c 	.word	0x2000010c
 8002cd8:	200001e3 	.word	0x200001e3
 8002cdc:	200001e4 	.word	0x200001e4
 8002ce0:	20000108 	.word	0x20000108
 8002ce4:	200001e8 	.word	0x200001e8
 8002ce8:	2000002c 	.word	0x2000002c
 8002cec:	200002e4 	.word	0x200002e4
 8002cf0:	200001e6 	.word	0x200001e6
 8002cf4:	200000f8 	.word	0x200000f8

08002cf8 <pid>:


void pid()
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
	if  (flag_case == 2)
 8002cfc:	4bb0      	ldr	r3, [pc, #704]	; (8002fc0 <pid+0x2c8>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	f040 80f7 	bne.w	8002ef4 <pid+0x1fc>
	{
		 error = vb-omega_est;
 8002d06:	4baf      	ldr	r3, [pc, #700]	; (8002fc4 <pid+0x2cc>)
 8002d08:	ed93 7a00 	vldr	s14, [r3]
 8002d0c:	4bae      	ldr	r3, [pc, #696]	; (8002fc8 <pid+0x2d0>)
 8002d0e:	edd3 7a00 	vldr	s15, [r3]
 8002d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d16:	4bad      	ldr	r3, [pc, #692]	; (8002fcc <pid+0x2d4>)
 8002d18:	edc3 7a00 	vstr	s15, [r3]
		 p = (error);
 8002d1c:	4bab      	ldr	r3, [pc, #684]	; (8002fcc <pid+0x2d4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4aab      	ldr	r2, [pc, #684]	; (8002fd0 <pid+0x2d8>)
 8002d22:	6013      	str	r3, [r2, #0]
		 i = i+error;
 8002d24:	4bab      	ldr	r3, [pc, #684]	; (8002fd4 <pid+0x2dc>)
 8002d26:	ed93 7a00 	vldr	s14, [r3]
 8002d2a:	4ba8      	ldr	r3, [pc, #672]	; (8002fcc <pid+0x2d4>)
 8002d2c:	edd3 7a00 	vldr	s15, [r3]
 8002d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d34:	4ba7      	ldr	r3, [pc, #668]	; (8002fd4 <pid+0x2dc>)
 8002d36:	edc3 7a00 	vstr	s15, [r3]
		 d = error - pre_error;
 8002d3a:	4ba4      	ldr	r3, [pc, #656]	; (8002fcc <pid+0x2d4>)
 8002d3c:	ed93 7a00 	vldr	s14, [r3]
 8002d40:	4ba5      	ldr	r3, [pc, #660]	; (8002fd8 <pid+0x2e0>)
 8002d42:	edd3 7a00 	vldr	s15, [r3]
 8002d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d4a:	4ba4      	ldr	r3, [pc, #656]	; (8002fdc <pid+0x2e4>)
 8002d4c:	edc3 7a00 	vstr	s15, [r3]
		 pre_error = error;
 8002d50:	4b9e      	ldr	r3, [pc, #632]	; (8002fcc <pid+0x2d4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4aa0      	ldr	r2, [pc, #640]	; (8002fd8 <pid+0x2e0>)
 8002d56:	6013      	str	r3, [r2, #0]
		 PWMOut =( (p*K_P)+(i*K_I)+(d*K_D));
 8002d58:	4b9d      	ldr	r3, [pc, #628]	; (8002fd0 <pid+0x2d8>)
 8002d5a:	ed93 7a00 	vldr	s14, [r3]
 8002d5e:	4ba0      	ldr	r3, [pc, #640]	; (8002fe0 <pid+0x2e8>)
 8002d60:	edd3 7a00 	vldr	s15, [r3]
 8002d64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d68:	4b9a      	ldr	r3, [pc, #616]	; (8002fd4 <pid+0x2dc>)
 8002d6a:	edd3 6a00 	vldr	s13, [r3]
 8002d6e:	4b9d      	ldr	r3, [pc, #628]	; (8002fe4 <pid+0x2ec>)
 8002d70:	edd3 7a00 	vldr	s15, [r3]
 8002d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d7c:	4b97      	ldr	r3, [pc, #604]	; (8002fdc <pid+0x2e4>)
 8002d7e:	edd3 6a00 	vldr	s13, [r3]
 8002d82:	4b99      	ldr	r3, [pc, #612]	; (8002fe8 <pid+0x2f0>)
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d94:	ee17 2a90 	vmov	r2, s15
 8002d98:	4b94      	ldr	r3, [pc, #592]	; (8002fec <pid+0x2f4>)
 8002d9a:	601a      	str	r2, [r3, #0]

		 if(vb==0)
 8002d9c:	4b89      	ldr	r3, [pc, #548]	; (8002fc4 <pid+0x2cc>)
 8002d9e:	edd3 7a00 	vldr	s15, [r3]
 8002da2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002daa:	f040 8167 	bne.w	800307c <pid+0x384>
		 {
			if(SpecialHome)
 8002dae:	4b90      	ldr	r3, [pc, #576]	; (8002ff0 <pid+0x2f8>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <pid+0xc4>
			{
				ReachGoal();
 8002db6:	f7ff ff55 	bl	8002c64 <ReachGoal>
		if((RobotArm_Position) == (uint16_t)(angle*20))
		{
			ReachGoal();
		}
	}
}
 8002dba:	e15f      	b.n	800307c <pid+0x384>
				if(reverse)
 8002dbc:	4b8d      	ldr	r3, [pc, #564]	; (8002ff4 <pid+0x2fc>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d042      	beq.n	8002e4a <pid+0x152>
					if((uint16_t)(angle*20) < 30*20 && (RobotArm_Position) > 330*20)
 8002dc4:	4b8c      	ldr	r3, [pc, #560]	; (8002ff8 <pid+0x300>)
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dd6:	ee17 3a90 	vmov	r3, s15
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002de0:	d20a      	bcs.n	8002df8 <pid+0x100>
 8002de2:	4b86      	ldr	r3, [pc, #536]	; (8002ffc <pid+0x304>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d904      	bls.n	8002df8 <pid+0x100>
						PWMOut=600;
 8002dee:	4b7f      	ldr	r3, [pc, #508]	; (8002fec <pid+0x2f4>)
 8002df0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e069      	b.n	8002ecc <pid+0x1d4>
					else if((RobotArm_Position) < (uint16_t)(angle*20))
 8002df8:	4b7f      	ldr	r3, [pc, #508]	; (8002ff8 <pid+0x300>)
 8002dfa:	edd3 7a00 	vldr	s15, [r3]
 8002dfe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e0a:	ee17 3a90 	vmov	r3, s15
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	4b7a      	ldr	r3, [pc, #488]	; (8002ffc <pid+0x304>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d904      	bls.n	8002e22 <pid+0x12a>
						PWMOut=600;
 8002e18:	4b74      	ldr	r3, [pc, #464]	; (8002fec <pid+0x2f4>)
 8002e1a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	e054      	b.n	8002ecc <pid+0x1d4>
					else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002e22:	4b75      	ldr	r3, [pc, #468]	; (8002ff8 <pid+0x300>)
 8002e24:	edd3 7a00 	vldr	s15, [r3]
 8002e28:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e34:	ee17 3a90 	vmov	r3, s15
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	4b70      	ldr	r3, [pc, #448]	; (8002ffc <pid+0x304>)
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d244      	bcs.n	8002ecc <pid+0x1d4>
						PWMOut=-600;
 8002e42:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <pid+0x2f4>)
 8002e44:	4a6e      	ldr	r2, [pc, #440]	; (8003000 <pid+0x308>)
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e040      	b.n	8002ecc <pid+0x1d4>
					if((uint16_t)(angle*20) > 330*20 && (RobotArm_Position) < 30*20)
 8002e4a:	4b6b      	ldr	r3, [pc, #428]	; (8002ff8 <pid+0x300>)
 8002e4c:	edd3 7a00 	vldr	s15, [r3]
 8002e50:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e5c:	ee17 3a90 	vmov	r3, s15
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d908      	bls.n	8002e7c <pid+0x184>
 8002e6a:	4b64      	ldr	r3, [pc, #400]	; (8002ffc <pid+0x304>)
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002e72:	d203      	bcs.n	8002e7c <pid+0x184>
						PWMOut=-600;
 8002e74:	4b5d      	ldr	r3, [pc, #372]	; (8002fec <pid+0x2f4>)
 8002e76:	4a62      	ldr	r2, [pc, #392]	; (8003000 <pid+0x308>)
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	e027      	b.n	8002ecc <pid+0x1d4>
					else if((RobotArm_Position) < (uint16_t)(angle*20))
 8002e7c:	4b5e      	ldr	r3, [pc, #376]	; (8002ff8 <pid+0x300>)
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e8e:	ee17 3a90 	vmov	r3, s15
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	4b59      	ldr	r3, [pc, #356]	; (8002ffc <pid+0x304>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d904      	bls.n	8002ea6 <pid+0x1ae>
						PWMOut=600;
 8002e9c:	4b53      	ldr	r3, [pc, #332]	; (8002fec <pid+0x2f4>)
 8002e9e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e012      	b.n	8002ecc <pid+0x1d4>
					else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002ea6:	4b54      	ldr	r3, [pc, #336]	; (8002ff8 <pid+0x300>)
 8002ea8:	edd3 7a00 	vldr	s15, [r3]
 8002eac:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002eb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eb8:	ee17 3a90 	vmov	r3, s15
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	4b4f      	ldr	r3, [pc, #316]	; (8002ffc <pid+0x304>)
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d202      	bcs.n	8002ecc <pid+0x1d4>
						PWMOut=-600;
 8002ec6:	4b49      	ldr	r3, [pc, #292]	; (8002fec <pid+0x2f4>)
 8002ec8:	4a4d      	ldr	r2, [pc, #308]	; (8003000 <pid+0x308>)
 8002eca:	601a      	str	r2, [r3, #0]
				if((RobotArm_Position) == (uint16_t)(angle*20))
 8002ecc:	4b4a      	ldr	r3, [pc, #296]	; (8002ff8 <pid+0x300>)
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ede:	ee17 3a90 	vmov	r3, s15
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	4b45      	ldr	r3, [pc, #276]	; (8002ffc <pid+0x304>)
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	f040 80c7 	bne.w	800307c <pid+0x384>
					ReachGoal();
 8002eee:	f7ff feb9 	bl	8002c64 <ReachGoal>
}
 8002ef2:	e0c3      	b.n	800307c <pid+0x384>
	else if (flag_case == 1)
 8002ef4:	4b32      	ldr	r3, [pc, #200]	; (8002fc0 <pid+0x2c8>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	f040 80bf 	bne.w	800307c <pid+0x384>
		if(reverse)
 8002efe:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <pid+0x2fc>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d042      	beq.n	8002f8c <pid+0x294>
			if((uint16_t)(angle*20) < 30*20 && (RobotArm_Position) > 330*20)
 8002f06:	4b3c      	ldr	r3, [pc, #240]	; (8002ff8 <pid+0x300>)
 8002f08:	edd3 7a00 	vldr	s15, [r3]
 8002f0c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f18:	ee17 3a90 	vmov	r3, s15
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002f22:	d20a      	bcs.n	8002f3a <pid+0x242>
 8002f24:	4b35      	ldr	r3, [pc, #212]	; (8002ffc <pid+0x304>)
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d904      	bls.n	8002f3a <pid+0x242>
				PWMOut=600;
 8002f30:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <pid+0x2f4>)
 8002f32:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	e08e      	b.n	8003058 <pid+0x360>
			else if((RobotArm_Position) < (uint16_t)(angle*20))
 8002f3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ff8 <pid+0x300>)
 8002f3c:	edd3 7a00 	vldr	s15, [r3]
 8002f40:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f4c:	ee17 3a90 	vmov	r3, s15
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	4b2a      	ldr	r3, [pc, #168]	; (8002ffc <pid+0x304>)
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d904      	bls.n	8002f64 <pid+0x26c>
				PWMOut=300;
 8002f5a:	4b24      	ldr	r3, [pc, #144]	; (8002fec <pid+0x2f4>)
 8002f5c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	e079      	b.n	8003058 <pid+0x360>
			else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002f64:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <pid+0x300>)
 8002f66:	edd3 7a00 	vldr	s15, [r3]
 8002f6a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f76:	ee17 3a90 	vmov	r3, s15
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <pid+0x304>)
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d269      	bcs.n	8003058 <pid+0x360>
				PWMOut=-1600;
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <pid+0x2f4>)
 8002f86:	4a1f      	ldr	r2, [pc, #124]	; (8003004 <pid+0x30c>)
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	e065      	b.n	8003058 <pid+0x360>
			if((uint16_t)(angle*20) > 330*20 && (RobotArm_Position) < 30*20)
 8002f8c:	4b1a      	ldr	r3, [pc, #104]	; (8002ff8 <pid+0x300>)
 8002f8e:	edd3 7a00 	vldr	s15, [r3]
 8002f92:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f9e:	ee17 3a90 	vmov	r3, s15
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d92d      	bls.n	8003008 <pid+0x310>
 8002fac:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <pid+0x304>)
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002fb4:	d228      	bcs.n	8003008 <pid+0x310>
				PWMOut=-600;
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <pid+0x2f4>)
 8002fb8:	4a11      	ldr	r2, [pc, #68]	; (8003000 <pid+0x308>)
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e04c      	b.n	8003058 <pid+0x360>
 8002fbe:	bf00      	nop
 8002fc0:	2000019c 	.word	0x2000019c
 8002fc4:	20000170 	.word	0x20000170
 8002fc8:	2000012c 	.word	0x2000012c
 8002fcc:	20000190 	.word	0x20000190
 8002fd0:	20000180 	.word	0x20000180
 8002fd4:	20000184 	.word	0x20000184
 8002fd8:	2000018c 	.word	0x2000018c
 8002fdc:	20000188 	.word	0x20000188
 8002fe0:	20000010 	.word	0x20000010
 8002fe4:	20000014 	.word	0x20000014
 8002fe8:	20000114 	.word	0x20000114
 8002fec:	2000010c 	.word	0x2000010c
 8002ff0:	200001e5 	.word	0x200001e5
 8002ff4:	2000019d 	.word	0x2000019d
 8002ff8:	20000194 	.word	0x20000194
 8002ffc:	20000110 	.word	0x20000110
 8003000:	fffffda8 	.word	0xfffffda8
 8003004:	fffff9c0 	.word	0xfffff9c0
			else if((RobotArm_Position) < (uint16_t)(angle*20))
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <pid+0x388>)
 800300a:	edd3 7a00 	vldr	s15, [r3]
 800300e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800301a:	ee17 3a90 	vmov	r3, s15
 800301e:	b29a      	uxth	r2, r3
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <pid+0x38c>)
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d904      	bls.n	8003032 <pid+0x33a>
				PWMOut=1600;
 8003028:	4b17      	ldr	r3, [pc, #92]	; (8003088 <pid+0x390>)
 800302a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e012      	b.n	8003058 <pid+0x360>
			else if((RobotArm_Position) > (uint16_t)(angle*20))
 8003032:	4b13      	ldr	r3, [pc, #76]	; (8003080 <pid+0x388>)
 8003034:	edd3 7a00 	vldr	s15, [r3]
 8003038:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800303c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003044:	ee17 3a90 	vmov	r3, s15
 8003048:	b29a      	uxth	r2, r3
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <pid+0x38c>)
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d202      	bcs.n	8003058 <pid+0x360>
				PWMOut=-300;
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <pid+0x390>)
 8003054:	4a0d      	ldr	r2, [pc, #52]	; (800308c <pid+0x394>)
 8003056:	601a      	str	r2, [r3, #0]
		if((RobotArm_Position) == (uint16_t)(angle*20))
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <pid+0x388>)
 800305a:	edd3 7a00 	vldr	s15, [r3]
 800305e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800306a:	ee17 3a90 	vmov	r3, s15
 800306e:	b29a      	uxth	r2, r3
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <pid+0x38c>)
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d101      	bne.n	800307c <pid+0x384>
			ReachGoal();
 8003078:	f7ff fdf4 	bl	8002c64 <ReachGoal>
}
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000194 	.word	0x20000194
 8003084:	20000110 	.word	0x20000110
 8003088:	2000010c 	.word	0x2000010c
 800308c:	fffffed4 	.word	0xfffffed4

08003090 <UARTInit>:

void UARTInit(UARTStucrture *uart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8003098:	4b10      	ldr	r3, [pc, #64]	; (80030dc <UARTInit+0x4c>)
 800309a:	88db      	ldrh	r3, [r3, #6]
 800309c:	4619      	mov	r1, r3
 800309e:	2001      	movs	r0, #1
 80030a0:	f006 f948 	bl	8009334 <calloc>
 80030a4:	4603      	mov	r3, r0
 80030a6:	461a      	mov	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <UARTInit+0x4c>)
 80030ae:	889b      	ldrh	r3, [r3, #4]
 80030b0:	4619      	mov	r1, r3
 80030b2:	2001      	movs	r0, #1
 80030b4:	f006 f93e 	bl	8009334 <calloc>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	81da      	strh	r2, [r3, #14]

}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200001b8 	.word	0x200001b8

080030e0 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6919      	ldr	r1, [r3, #16]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	88db      	ldrh	r3, [r3, #6]
 80030f4:	461a      	mov	r2, r3
 80030f6:	f005 f9f5 	bl	80084e4 <HAL_UART_Receive_DMA>
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	88db      	ldrh	r3, [r3, #6]
 800310e:	461a      	mov	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	1ad3      	subs	r3, r2, r3
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8003130:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003134:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	8a9b      	ldrh	r3, [r3, #20]
 800313a:	461c      	mov	r4, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff ffe0 	bl	8003102 <UARTGetRxHead>
 8003142:	4603      	mov	r3, r0
 8003144:	429c      	cmp	r4, r3
 8003146:	d013      	beq.n	8003170 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	8a92      	ldrh	r2, [r2, #20]
 8003150:	4413      	add	r3, r2
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	8a9b      	ldrh	r3, [r3, #20]
 800315a:	3301      	adds	r3, #1
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	88d2      	ldrh	r2, [r2, #6]
 8003160:	fb93 f1f2 	sdiv	r1, r3, r2
 8003164:	fb02 f201 	mul.w	r2, r2, r1
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	b29a      	uxth	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8003170:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}

0800317c <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b20      	cmp	r3, #32
 8003190:	d13d      	bne.n	800320e <UARTTxDumpBuffer+0x92>
 8003192:	4b21      	ldr	r3, [pc, #132]	; (8003218 <UARTTxDumpBuffer+0x9c>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d139      	bne.n	800320e <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 800319a:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <UARTTxDumpBuffer+0x9c>)
 800319c:	2201      	movs	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	89da      	ldrh	r2, [r3, #14]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	899b      	ldrh	r3, [r3, #12]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d02d      	beq.n	8003208 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	89da      	ldrh	r2, [r3, #14]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d906      	bls.n	80031c6 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	89da      	ldrh	r2, [r3, #14]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	e005      	b.n	80031d2 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	889a      	ldrh	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	8992      	ldrh	r2, [r2, #12]
 80031e0:	4413      	add	r3, r2
 80031e2:	89fa      	ldrh	r2, [r7, #14]
 80031e4:	4619      	mov	r1, r3
 80031e6:	f005 f911 	bl	800840c <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	899b      	ldrh	r3, [r3, #12]
 80031ee:	461a      	mov	r2, r3
 80031f0:	89fb      	ldrh	r3, [r7, #14]
 80031f2:	4413      	add	r3, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	8892      	ldrh	r2, [r2, #4]
 80031f8:	fb93 f1f2 	sdiv	r1, r3, r2
 80031fc:	fb02 f201 	mul.w	r2, r2, r1
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	b29a      	uxth	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <UARTTxDumpBuffer+0x9c>)
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
	}
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	2000022c 	.word	0x2000022c

0800321c <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	889b      	ldrh	r3, [r3, #4]
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	4293      	cmp	r3, r2
 8003232:	bf28      	it	cs
 8003234:	4613      	movcs	r3, r2
 8003236:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8003238:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	889b      	ldrh	r3, [r3, #4]
 800323e:	4619      	mov	r1, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	89db      	ldrh	r3, [r3, #14]
 8003244:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8003246:	4293      	cmp	r3, r2
 8003248:	bfa8      	it	ge
 800324a:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 800324c:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	89d2      	ldrh	r2, [r2, #14]
 8003256:	4413      	add	r3, r2
 8003258:	8aba      	ldrh	r2, [r7, #20]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	4618      	mov	r0, r3
 800325e:	f006 f89b 	bl	8009398 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	89db      	ldrh	r3, [r3, #14]
 8003266:	461a      	mov	r2, r3
 8003268:	8afb      	ldrh	r3, [r7, #22]
 800326a:	4413      	add	r3, r2
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	8892      	ldrh	r2, [r2, #4]
 8003270:	fb93 f1f2 	sdiv	r1, r3, r2
 8003274:	fb02 f201 	mul.w	r2, r2, r1
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8003280:	8afa      	ldrh	r2, [r7, #22]
 8003282:	8abb      	ldrh	r3, [r7, #20]
 8003284:	429a      	cmp	r2, r3
 8003286:	d00a      	beq.n	800329e <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6898      	ldr	r0, [r3, #8]
 800328c:	8abb      	ldrh	r3, [r7, #20]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8003292:	8afa      	ldrh	r2, [r7, #22]
 8003294:	8abb      	ldrh	r3, [r7, #20]
 8003296:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8003298:	461a      	mov	r2, r3
 800329a:	f006 f87d 	bl	8009398 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff ff6c 	bl	800317c <UARTTxDumpBuffer>
}
 80032a4:	bf00      	nop
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <UART_Ack1>:

void UART_Ack1()
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
	uint8_t temp[1];
	temp[0] = 'X'; //0x58
 80032b2:	2358      	movs	r3, #88	; 0x58
 80032b4:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	2201      	movs	r2, #1
 80032ba:	4619      	mov	r1, r3
 80032bc:	4808      	ldr	r0, [pc, #32]	; (80032e0 <UART_Ack1+0x34>)
 80032be:	f7ff ffad 	bl	800321c <UARTTxWrite>
	HAL_Delay(1);
 80032c2:	2001      	movs	r0, #1
 80032c4:	f000 ff28 	bl	8004118 <HAL_Delay>
	temp[0] = 'u'; //0b01110101
 80032c8:	2375      	movs	r3, #117	; 0x75
 80032ca:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	2201      	movs	r2, #1
 80032d0:	4619      	mov	r1, r3
 80032d2:	4803      	ldr	r0, [pc, #12]	; (80032e0 <UART_Ack1+0x34>)
 80032d4:	f7ff ffa2 	bl	800321c <UARTTxWrite>
	// HAL_Delay(1);
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	200001b8 	.word	0x200001b8

080032e4 <UART_Ack2>:

void UART_Ack2()
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
	uint8_t temp[1];
	temp[0] = 'F'; //70
 80032ea:	2346      	movs	r3, #70	; 0x46
 80032ec:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	2201      	movs	r2, #1
 80032f2:	4619      	mov	r1, r3
 80032f4:	4808      	ldr	r0, [pc, #32]	; (8003318 <UART_Ack2+0x34>)
 80032f6:	f7ff ff91 	bl	800321c <UARTTxWrite>
	HAL_Delay(1);
 80032fa:	2001      	movs	r0, #1
 80032fc:	f000 ff0c 	bl	8004118 <HAL_Delay>
	temp[0] = 'n'; //0o156
 8003300:	236e      	movs	r3, #110	; 0x6e
 8003302:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	2201      	movs	r2, #1
 8003308:	4619      	mov	r1, r3
 800330a:	4803      	ldr	r0, [pc, #12]	; (8003318 <UART_Ack2+0x34>)
 800330c:	f7ff ff86 	bl	800321c <UARTTxWrite>
	// HAL_Delay(1);
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	200001b8 	.word	0x200001b8

0800331c <UART_Flow2>:

void UART_Flow2()
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
	Serial_Mode  = (0b10010000 | UART_Mode);
 8003322:	4b4e      	ldr	r3, [pc, #312]	; (800345c <UART_Flow2+0x140>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800332a:	b2da      	uxtb	r2, r3
 800332c:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <UART_Flow2+0x144>)
 800332e:	701a      	strb	r2, [r3, #0]
	Serial_Angle = (uint16_t)(Current_Angle * 10000 * pi / 180);
 8003330:	4b4c      	ldr	r3, [pc, #304]	; (8003464 <UART_Flow2+0x148>)
 8003332:	edd3 7a00 	vldr	s15, [r3]
 8003336:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003468 <UART_Flow2+0x14c>
 800333a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800333e:	4b4b      	ldr	r3, [pc, #300]	; (800346c <UART_Flow2+0x150>)
 8003340:	edd3 7a00 	vldr	s15, [r3]
 8003344:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003348:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003470 <UART_Flow2+0x154>
 800334c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003354:	ee17 3a90 	vmov	r3, s15
 8003358:	b29a      	uxth	r2, r3
 800335a:	4b46      	ldr	r3, [pc, #280]	; (8003474 <UART_Flow2+0x158>)
 800335c:	801a      	strh	r2, [r3, #0]
	Serial_Speed = (uint8_t) (Speed * 255 / 10);
 800335e:	4b46      	ldr	r3, [pc, #280]	; (8003478 <UART_Flow2+0x15c>)
 8003360:	edd3 7a00 	vldr	s15, [r3]
 8003364:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800347c <UART_Flow2+0x160>
 8003368:	ee27 7a87 	vmul.f32	s14, s15, s14
 800336c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003370:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003378:	edc7 7a01 	vstr	s15, [r7, #4]
 800337c:	793b      	ldrb	r3, [r7, #4]
 800337e:	b2da      	uxtb	r2, r3
 8003380:	4b3f      	ldr	r3, [pc, #252]	; (8003480 <UART_Flow2+0x164>)
 8003382:	701a      	strb	r2, [r3, #0]

	ChkSum = Serial_Mode;
 8003384:	4b36      	ldr	r3, [pc, #216]	; (8003460 <UART_Flow2+0x144>)
 8003386:	781a      	ldrb	r2, [r3, #0]
 8003388:	4b3e      	ldr	r3, [pc, #248]	; (8003484 <UART_Flow2+0x168>)
 800338a:	701a      	strb	r2, [r3, #0]

	uint8_t temp[1];
	temp[0] = Serial_Mode;
 800338c:	4b34      	ldr	r3, [pc, #208]	; (8003460 <UART_Flow2+0x144>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	733b      	strb	r3, [r7, #12]
	UARTTxWrite(&UART2, temp, 1);
 8003392:	f107 030c 	add.w	r3, r7, #12
 8003396:	2201      	movs	r2, #1
 8003398:	4619      	mov	r1, r3
 800339a:	483b      	ldr	r0, [pc, #236]	; (8003488 <UART_Flow2+0x16c>)
 800339c:	f7ff ff3e 	bl	800321c <UARTTxWrite>
	HAL_Delay(1);
 80033a0:	2001      	movs	r0, #1
 80033a2:	f000 feb9 	bl	8004118 <HAL_Delay>

	if(UART_Mode == 10) { temp[0] = (uint8_t)(Serial_Angle / 256); }
 80033a6:	4b2d      	ldr	r3, [pc, #180]	; (800345c <UART_Flow2+0x140>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b0a      	cmp	r3, #10
 80033ac:	d106      	bne.n	80033bc <UART_Flow2+0xa0>
 80033ae:	4b31      	ldr	r3, [pc, #196]	; (8003474 <UART_Flow2+0x158>)
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	733b      	strb	r3, [r7, #12]
 80033ba:	e001      	b.n	80033c0 <UART_Flow2+0xa4>
	else                { temp[0] = 0; }
 80033bc:	2300      	movs	r3, #0
 80033be:	733b      	strb	r3, [r7, #12]
	ChkSum += temp[0];
 80033c0:	7b3a      	ldrb	r2, [r7, #12]
 80033c2:	4b30      	ldr	r3, [pc, #192]	; (8003484 <UART_Flow2+0x168>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	4413      	add	r3, r2
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <UART_Flow2+0x168>)
 80033cc:	701a      	strb	r2, [r3, #0]
	UARTTxWrite(&UART2, temp, 1);
 80033ce:	f107 030c 	add.w	r3, r7, #12
 80033d2:	2201      	movs	r2, #1
 80033d4:	4619      	mov	r1, r3
 80033d6:	482c      	ldr	r0, [pc, #176]	; (8003488 <UART_Flow2+0x16c>)
 80033d8:	f7ff ff20 	bl	800321c <UARTTxWrite>
	HAL_Delay(1);
 80033dc:	2001      	movs	r0, #1
 80033de:	f000 fe9b 	bl	8004118 <HAL_Delay>

	if(UART_Mode == 9)       { temp[0] = Current_Station; }
 80033e2:	4b1e      	ldr	r3, [pc, #120]	; (800345c <UART_Flow2+0x140>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b09      	cmp	r3, #9
 80033e8:	d103      	bne.n	80033f2 <UART_Flow2+0xd6>
 80033ea:	4b28      	ldr	r3, [pc, #160]	; (800348c <UART_Flow2+0x170>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	733b      	strb	r3, [r7, #12]
 80033f0:	e00f      	b.n	8003412 <UART_Flow2+0xf6>
	else if(UART_Mode == 10) { temp[0] = (uint8_t)(Serial_Angle % 256); }
 80033f2:	4b1a      	ldr	r3, [pc, #104]	; (800345c <UART_Flow2+0x140>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b0a      	cmp	r3, #10
 80033f8:	d104      	bne.n	8003404 <UART_Flow2+0xe8>
 80033fa:	4b1e      	ldr	r3, [pc, #120]	; (8003474 <UART_Flow2+0x158>)
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	733b      	strb	r3, [r7, #12]
 8003402:	e006      	b.n	8003412 <UART_Flow2+0xf6>
	else if(UART_Mode == 11) { temp[0] = Serial_Speed; }
 8003404:	4b15      	ldr	r3, [pc, #84]	; (800345c <UART_Flow2+0x140>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b0b      	cmp	r3, #11
 800340a:	d102      	bne.n	8003412 <UART_Flow2+0xf6>
 800340c:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <UART_Flow2+0x164>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	733b      	strb	r3, [r7, #12]
	ChkSum += temp[0];
 8003412:	7b3a      	ldrb	r2, [r7, #12]
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <UART_Flow2+0x168>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	4413      	add	r3, r2
 800341a:	b2da      	uxtb	r2, r3
 800341c:	4b19      	ldr	r3, [pc, #100]	; (8003484 <UART_Flow2+0x168>)
 800341e:	701a      	strb	r2, [r3, #0]
	UARTTxWrite(&UART2, temp, 1);
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	2201      	movs	r2, #1
 8003426:	4619      	mov	r1, r3
 8003428:	4817      	ldr	r0, [pc, #92]	; (8003488 <UART_Flow2+0x16c>)
 800342a:	f7ff fef7 	bl	800321c <UARTTxWrite>
	HAL_Delay(1);
 800342e:	2001      	movs	r0, #1
 8003430:	f000 fe72 	bl	8004118 <HAL_Delay>

	ChkSum = ~(ChkSum);
 8003434:	4b13      	ldr	r3, [pc, #76]	; (8003484 <UART_Flow2+0x168>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	43db      	mvns	r3, r3
 800343a:	b2da      	uxtb	r2, r3
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <UART_Flow2+0x168>)
 800343e:	701a      	strb	r2, [r3, #0]
	temp[0] = ChkSum;
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <UART_Flow2+0x168>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	733b      	strb	r3, [r7, #12]
	UARTTxWrite(&UART2, temp, 1);
 8003446:	f107 030c 	add.w	r3, r7, #12
 800344a:	2201      	movs	r2, #1
 800344c:	4619      	mov	r1, r3
 800344e:	480e      	ldr	r0, [pc, #56]	; (8003488 <UART_Flow2+0x16c>)
 8003450:	f7ff fee4 	bl	800321c <UARTTxWrite>
	// HAL_Delay(1);
}
 8003454:	bf00      	nop
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	2000021a 	.word	0x2000021a
 8003460:	2000023c 	.word	0x2000023c
 8003464:	200001d4 	.word	0x200001d4
 8003468:	461c4000 	.word	0x461c4000
 800346c:	20000030 	.word	0x20000030
 8003470:	43340000 	.word	0x43340000
 8003474:	20000338 	.word	0x20000338
 8003478:	200001dc 	.word	0x200001dc
 800347c:	437f0000 	.word	0x437f0000
 8003480:	200002e0 	.word	0x200002e0
 8003484:	200001f9 	.word	0x200001f9
 8003488:	200001b8 	.word	0x200001b8
 800348c:	200001d8 	.word	0x200001d8

08003490 <UART_Protocal>:


void UART_Protocal()
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
	static ProtocalState State = Start;

	InputChar = UARTReadChar(&UART2);
 8003496:	48a3      	ldr	r0, [pc, #652]	; (8003724 <UART_Protocal+0x294>)
 8003498:	f7ff fe46 	bl	8003128 <UARTReadChar>
 800349c:	4603      	mov	r3, r0
 800349e:	461a      	mov	r2, r3
 80034a0:	4ba1      	ldr	r3, [pc, #644]	; (8003728 <UART_Protocal+0x298>)
 80034a2:	801a      	strh	r2, [r3, #0]

	if (InputChar != -1)
 80034a4:	4ba0      	ldr	r3, [pc, #640]	; (8003728 <UART_Protocal+0x298>)
 80034a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ae:	f000 8130 	beq.w	8003712 <UART_Protocal+0x282>
	{
		InputByte = (uint8_t)InputChar;
 80034b2:	4b9d      	ldr	r3, [pc, #628]	; (8003728 <UART_Protocal+0x298>)
 80034b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4b9c      	ldr	r3, [pc, #624]	; (800372c <UART_Protocal+0x29c>)
 80034bc:	701a      	strb	r2, [r3, #0]

		switch(State)
 80034be:	4b9c      	ldr	r3, [pc, #624]	; (8003730 <UART_Protocal+0x2a0>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b07      	cmp	r3, #7
 80034c4:	f200 8121 	bhi.w	800370a <UART_Protocal+0x27a>
 80034c8:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <UART_Protocal+0x40>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	080034f1 	.word	0x080034f1
 80034d4:	08003587 	.word	0x08003587
 80034d8:	080035bb 	.word	0x080035bb
 80034dc:	080035cb 	.word	0x080035cb
 80034e0:	080035db 	.word	0x080035db
 80034e4:	0800361f 	.word	0x0800361f
 80034e8:	0800362f 	.word	0x0800362f
 80034ec:	0800368b 	.word	0x0800368b
		{
			case Start:
				if( ((InputByte>>4) & 0b00001111) == 0b00001001)
 80034f0:	4b8e      	ldr	r3, [pc, #568]	; (800372c <UART_Protocal+0x29c>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	2b09      	cmp	r3, #9
 80034fe:	d10a      	bne.n	8003516 <UART_Protocal+0x86>
				{
					UART_Mode = InputByte & 0b00001111;
 8003500:	4b8a      	ldr	r3, [pc, #552]	; (800372c <UART_Protocal+0x29c>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	b2da      	uxtb	r2, r3
 800350a:	4b8a      	ldr	r3, [pc, #552]	; (8003734 <UART_Protocal+0x2a4>)
 800350c:	701a      	strb	r2, [r3, #0]
					UART_Mode_Print = UART_Mode;
 800350e:	4b89      	ldr	r3, [pc, #548]	; (8003734 <UART_Protocal+0x2a4>)
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	4b89      	ldr	r3, [pc, #548]	; (8003738 <UART_Protocal+0x2a8>)
 8003514:	701a      	strb	r2, [r3, #0]
				}
				if(UART_Mode >=1 && UART_Mode <= 14)
 8003516:	4b87      	ldr	r3, [pc, #540]	; (8003734 <UART_Protocal+0x2a4>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80fb 	beq.w	8003716 <UART_Protocal+0x286>
 8003520:	4b84      	ldr	r3, [pc, #528]	; (8003734 <UART_Protocal+0x2a4>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b0e      	cmp	r3, #14
 8003526:	f200 80f6 	bhi.w	8003716 <UART_Protocal+0x286>
				{

					if(UART_Mode == 2 || UART_Mode == 3 || UART_Mode >= 8)
 800352a:	4b82      	ldr	r3, [pc, #520]	; (8003734 <UART_Protocal+0x2a4>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d007      	beq.n	8003542 <UART_Protocal+0xb2>
 8003532:	4b80      	ldr	r3, [pc, #512]	; (8003734 <UART_Protocal+0x2a4>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b03      	cmp	r3, #3
 8003538:	d003      	beq.n	8003542 <UART_Protocal+0xb2>
 800353a:	4b7e      	ldr	r3, [pc, #504]	; (8003734 <UART_Protocal+0x2a4>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b07      	cmp	r3, #7
 8003540:	d903      	bls.n	800354a <UART_Protocal+0xba>
					{
						State = Frame1_CheckSum;
 8003542:	4b7b      	ldr	r3, [pc, #492]	; (8003730 <UART_Protocal+0x2a0>)
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	e01c      	b.n	8003584 <UART_Protocal+0xf4>
					}
					else if(UART_Mode == 1 || UART_Mode == 4 || UART_Mode == 5 || UART_Mode == 6)
 800354a:	4b7a      	ldr	r3, [pc, #488]	; (8003734 <UART_Protocal+0x2a4>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d00b      	beq.n	800356a <UART_Protocal+0xda>
 8003552:	4b78      	ldr	r3, [pc, #480]	; (8003734 <UART_Protocal+0x2a4>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b04      	cmp	r3, #4
 8003558:	d007      	beq.n	800356a <UART_Protocal+0xda>
 800355a:	4b76      	ldr	r3, [pc, #472]	; (8003734 <UART_Protocal+0x2a4>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b05      	cmp	r3, #5
 8003560:	d003      	beq.n	800356a <UART_Protocal+0xda>
 8003562:	4b74      	ldr	r3, [pc, #464]	; (8003734 <UART_Protocal+0x2a4>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b06      	cmp	r3, #6
 8003568:	d103      	bne.n	8003572 <UART_Protocal+0xe2>
					{
						State = Frame2_Data1;
 800356a:	4b71      	ldr	r3, [pc, #452]	; (8003730 <UART_Protocal+0x2a0>)
 800356c:	2202      	movs	r2, #2
 800356e:	701a      	strb	r2, [r3, #0]
 8003570:	e008      	b.n	8003584 <UART_Protocal+0xf4>

					}
					else if(UART_Mode == 7)
 8003572:	4b70      	ldr	r3, [pc, #448]	; (8003734 <UART_Protocal+0x2a4>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b07      	cmp	r3, #7
 8003578:	f040 80cd 	bne.w	8003716 <UART_Protocal+0x286>
					{
						State = Frame3_Station;
 800357c:	4b6c      	ldr	r3, [pc, #432]	; (8003730 <UART_Protocal+0x2a0>)
 800357e:	2205      	movs	r2, #5
 8003580:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8003582:	e0c8      	b.n	8003716 <UART_Protocal+0x286>
 8003584:	e0c7      	b.n	8003716 <UART_Protocal+0x286>

			case Frame1_CheckSum:
				ChkSum = ~(0b10010000 | UART_Mode);
 8003586:	4b6b      	ldr	r3, [pc, #428]	; (8003734 <UART_Protocal+0x2a4>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800358e:	b2db      	uxtb	r3, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	b2da      	uxtb	r2, r3
 8003594:	4b69      	ldr	r3, [pc, #420]	; (800373c <UART_Protocal+0x2ac>)
 8003596:	701a      	strb	r2, [r3, #0]
				if(InputByte == ChkSum)
 8003598:	4b64      	ldr	r3, [pc, #400]	; (800372c <UART_Protocal+0x29c>)
 800359a:	781a      	ldrb	r2, [r3, #0]
 800359c:	4b67      	ldr	r3, [pc, #412]	; (800373c <UART_Protocal+0x2ac>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d103      	bne.n	80035ac <UART_Protocal+0x11c>
				{
					UART_Ack1();
 80035a4:	f7ff fe82 	bl	80032ac <UART_Ack1>
					UART_Execute();
 80035a8:	f000 f8d6 	bl	8003758 <UART_Execute>
				}
				ChkSum = 0;
 80035ac:	4b63      	ldr	r3, [pc, #396]	; (800373c <UART_Protocal+0x2ac>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]
				State = Start;
 80035b2:	4b5f      	ldr	r3, [pc, #380]	; (8003730 <UART_Protocal+0x2a0>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
				break;
 80035b8:	e0b0      	b.n	800371c <UART_Protocal+0x28c>

			case Frame2_Data1:
				Data_Frame2[0] = InputByte;
 80035ba:	4b5c      	ldr	r3, [pc, #368]	; (800372c <UART_Protocal+0x29c>)
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	4b60      	ldr	r3, [pc, #384]	; (8003740 <UART_Protocal+0x2b0>)
 80035c0:	701a      	strb	r2, [r3, #0]
				State = Frame2_Data2;
 80035c2:	4b5b      	ldr	r3, [pc, #364]	; (8003730 <UART_Protocal+0x2a0>)
 80035c4:	2203      	movs	r2, #3
 80035c6:	701a      	strb	r2, [r3, #0]
				break;
 80035c8:	e0a8      	b.n	800371c <UART_Protocal+0x28c>

			case Frame2_Data2:
				Data_Frame2[1] = InputByte;
 80035ca:	4b58      	ldr	r3, [pc, #352]	; (800372c <UART_Protocal+0x29c>)
 80035cc:	781a      	ldrb	r2, [r3, #0]
 80035ce:	4b5c      	ldr	r3, [pc, #368]	; (8003740 <UART_Protocal+0x2b0>)
 80035d0:	705a      	strb	r2, [r3, #1]
				State = Frame2_CheckSum;
 80035d2:	4b57      	ldr	r3, [pc, #348]	; (8003730 <UART_Protocal+0x2a0>)
 80035d4:	2204      	movs	r2, #4
 80035d6:	701a      	strb	r2, [r3, #0]
				break;
 80035d8:	e0a0      	b.n	800371c <UART_Protocal+0x28c>

			case Frame2_CheckSum:
				ChkSum = ~( (0b10010000 | UART_Mode) + Data_Frame2[0] + Data_Frame2[1] );
 80035da:	4b56      	ldr	r3, [pc, #344]	; (8003734 <UART_Protocal+0x2a4>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	4b56      	ldr	r3, [pc, #344]	; (8003740 <UART_Protocal+0x2b0>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	4413      	add	r3, r2
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	4b54      	ldr	r3, [pc, #336]	; (8003740 <UART_Protocal+0x2b0>)
 80035ee:	785b      	ldrb	r3, [r3, #1]
 80035f0:	4413      	add	r3, r2
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	4b50      	ldr	r3, [pc, #320]	; (800373c <UART_Protocal+0x2ac>)
 80035fa:	701a      	strb	r2, [r3, #0]
				if(InputByte == ChkSum)
 80035fc:	4b4b      	ldr	r3, [pc, #300]	; (800372c <UART_Protocal+0x29c>)
 80035fe:	781a      	ldrb	r2, [r3, #0]
 8003600:	4b4e      	ldr	r3, [pc, #312]	; (800373c <UART_Protocal+0x2ac>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d103      	bne.n	8003610 <UART_Protocal+0x180>
				{
					UART_Ack1();
 8003608:	f7ff fe50 	bl	80032ac <UART_Ack1>
					UART_Execute();
 800360c:	f000 f8a4 	bl	8003758 <UART_Execute>
				}
				ChkSum = 0;
 8003610:	4b4a      	ldr	r3, [pc, #296]	; (800373c <UART_Protocal+0x2ac>)
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
				State = Start;
 8003616:	4b46      	ldr	r3, [pc, #280]	; (8003730 <UART_Protocal+0x2a0>)
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
				break;
 800361c:	e07e      	b.n	800371c <UART_Protocal+0x28c>

			case Frame3_Station:
				Multi_Station_Amount = InputByte;
 800361e:	4b43      	ldr	r3, [pc, #268]	; (800372c <UART_Protocal+0x29c>)
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	4b48      	ldr	r3, [pc, #288]	; (8003744 <UART_Protocal+0x2b4>)
 8003624:	701a      	strb	r2, [r3, #0]
				State = Frame3_Data;
 8003626:	4b42      	ldr	r3, [pc, #264]	; (8003730 <UART_Protocal+0x2a0>)
 8003628:	2206      	movs	r2, #6
 800362a:	701a      	strb	r2, [r3, #0]
				break;
 800362c:	e076      	b.n	800371c <UART_Protocal+0x28c>

			case Frame3_Data:
				Data_Frame3   [(int)Multi_Station_Current/2] = InputByte;
 800362e:	4b46      	ldr	r3, [pc, #280]	; (8003748 <UART_Protocal+0x2b8>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	4b3c      	ldr	r3, [pc, #240]	; (800372c <UART_Protocal+0x29c>)
 800363a:	7819      	ldrb	r1, [r3, #0]
 800363c:	4b43      	ldr	r3, [pc, #268]	; (800374c <UART_Protocal+0x2bc>)
 800363e:	5499      	strb	r1, [r3, r2]
				Multi_Station [Multi_Station_Current]        = InputByte & 0b00001111;
 8003640:	4b3a      	ldr	r3, [pc, #232]	; (800372c <UART_Protocal+0x29c>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	4a40      	ldr	r2, [pc, #256]	; (8003748 <UART_Protocal+0x2b8>)
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	b2d9      	uxtb	r1, r3
 800364e:	4b40      	ldr	r3, [pc, #256]	; (8003750 <UART_Protocal+0x2c0>)
 8003650:	5499      	strb	r1, [r3, r2]
				Multi_Station [Multi_Station_Current+1] 	 = InputByte >> 4;
 8003652:	4b36      	ldr	r3, [pc, #216]	; (800372c <UART_Protocal+0x29c>)
 8003654:	781a      	ldrb	r2, [r3, #0]
 8003656:	4b3c      	ldr	r3, [pc, #240]	; (8003748 <UART_Protocal+0x2b8>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	3301      	adds	r3, #1
 800365c:	0912      	lsrs	r2, r2, #4
 800365e:	b2d1      	uxtb	r1, r2
 8003660:	4a3b      	ldr	r2, [pc, #236]	; (8003750 <UART_Protocal+0x2c0>)
 8003662:	54d1      	strb	r1, [r2, r3]
				Multi_Station_Current += 2;
 8003664:	4b38      	ldr	r3, [pc, #224]	; (8003748 <UART_Protocal+0x2b8>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	3302      	adds	r3, #2
 800366a:	b2da      	uxtb	r2, r3
 800366c:	4b36      	ldr	r3, [pc, #216]	; (8003748 <UART_Protocal+0x2b8>)
 800366e:	701a      	strb	r2, [r3, #0]
				if(Multi_Station_Current >= Multi_Station_Amount)
 8003670:	4b35      	ldr	r3, [pc, #212]	; (8003748 <UART_Protocal+0x2b8>)
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	4b33      	ldr	r3, [pc, #204]	; (8003744 <UART_Protocal+0x2b4>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d34e      	bcc.n	800371a <UART_Protocal+0x28a>
				{
					Multi_Station_Current = 0;
 800367c:	4b32      	ldr	r3, [pc, #200]	; (8003748 <UART_Protocal+0x2b8>)
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
					State = Frame3_CheckSum;
 8003682:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <UART_Protocal+0x2a0>)
 8003684:	2207      	movs	r2, #7
 8003686:	701a      	strb	r2, [r3, #0]
				}
				break;
 8003688:	e047      	b.n	800371a <UART_Protocal+0x28a>

			case Frame3_CheckSum:
				ChkSum = (0b10010000 | UART_Mode);
 800368a:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <UART_Protocal+0x2a4>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8003692:	b2da      	uxtb	r2, r3
 8003694:	4b29      	ldr	r3, [pc, #164]	; (800373c <UART_Protocal+0x2ac>)
 8003696:	701a      	strb	r2, [r3, #0]
				ChkSum += Multi_Station_Amount;
 8003698:	4b28      	ldr	r3, [pc, #160]	; (800373c <UART_Protocal+0x2ac>)
 800369a:	781a      	ldrb	r2, [r3, #0]
 800369c:	4b29      	ldr	r3, [pc, #164]	; (8003744 <UART_Protocal+0x2b4>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	4413      	add	r3, r2
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	4b25      	ldr	r3, [pc, #148]	; (800373c <UART_Protocal+0x2ac>)
 80036a6:	701a      	strb	r2, [r3, #0]
				for(int i=0 ; i < (int)((Multi_Station_Amount+1)/2) ; i++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	607b      	str	r3, [r7, #4]
 80036ac:	e00c      	b.n	80036c8 <UART_Protocal+0x238>
				{
					ChkSum += Data_Frame3[i];
 80036ae:	4a27      	ldr	r2, [pc, #156]	; (800374c <UART_Protocal+0x2bc>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4413      	add	r3, r2
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	4b21      	ldr	r3, [pc, #132]	; (800373c <UART_Protocal+0x2ac>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	4413      	add	r3, r2
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	4b1f      	ldr	r3, [pc, #124]	; (800373c <UART_Protocal+0x2ac>)
 80036c0:	701a      	strb	r2, [r3, #0]
				for(int i=0 ; i < (int)((Multi_Station_Amount+1)/2) ; i++)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3301      	adds	r3, #1
 80036c6:	607b      	str	r3, [r7, #4]
 80036c8:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <UART_Protocal+0x2b4>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	0fda      	lsrs	r2, r3, #31
 80036d0:	4413      	add	r3, r2
 80036d2:	105b      	asrs	r3, r3, #1
 80036d4:	461a      	mov	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4293      	cmp	r3, r2
 80036da:	dbe8      	blt.n	80036ae <UART_Protocal+0x21e>
				}
				ChkSum = ~(ChkSum);
 80036dc:	4b17      	ldr	r3, [pc, #92]	; (800373c <UART_Protocal+0x2ac>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	4b15      	ldr	r3, [pc, #84]	; (800373c <UART_Protocal+0x2ac>)
 80036e6:	701a      	strb	r2, [r3, #0]
				if(InputByte == ChkSum)
 80036e8:	4b10      	ldr	r3, [pc, #64]	; (800372c <UART_Protocal+0x29c>)
 80036ea:	781a      	ldrb	r2, [r3, #0]
 80036ec:	4b13      	ldr	r3, [pc, #76]	; (800373c <UART_Protocal+0x2ac>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d103      	bne.n	80036fc <UART_Protocal+0x26c>
				{
					UART_Ack1();
 80036f4:	f7ff fdda 	bl	80032ac <UART_Ack1>
					UART_Execute();
 80036f8:	f000 f82e 	bl	8003758 <UART_Execute>
				}
				ChkSum = 0;
 80036fc:	4b0f      	ldr	r3, [pc, #60]	; (800373c <UART_Protocal+0x2ac>)
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
				State = Start;
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <UART_Protocal+0x2a0>)
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]
				break;
 8003708:	e008      	b.n	800371c <UART_Protocal+0x28c>

			default:
				State = Start;
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <UART_Protocal+0x2a0>)
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]
				break;
 8003710:	e004      	b.n	800371c <UART_Protocal+0x28c>
		}
	}
 8003712:	bf00      	nop
 8003714:	e002      	b.n	800371c <UART_Protocal+0x28c>
				break;
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <UART_Protocal+0x28c>
				break;
 800371a:	bf00      	nop

}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	200001b8 	.word	0x200001b8
 8003728:	200001f6 	.word	0x200001f6
 800372c:	200001f8 	.word	0x200001f8
 8003730:	2000022d 	.word	0x2000022d
 8003734:	2000021a 	.word	0x2000021a
 8003738:	2000021b 	.word	0x2000021b
 800373c:	200001f9 	.word	0x200001f9
 8003740:	200001fc 	.word	0x200001fc
 8003744:	20000218 	.word	0x20000218
 8003748:	20000219 	.word	0x20000219
 800374c:	20000200 	.word	0x20000200
 8003750:	20000208 	.word	0x20000208
 8003754:	00000000 	.word	0x00000000

08003758 <UART_Execute>:

void UART_Execute()
{
 8003758:	b598      	push	{r3, r4, r7, lr}
 800375a:	af00      	add	r7, sp, #0
	switch(UART_Mode)
 800375c:	4b96      	ldr	r3, [pc, #600]	; (80039b8 <UART_Execute+0x260>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	3b01      	subs	r3, #1
 8003762:	2b0e      	cmp	r3, #14
 8003764:	f200 8119 	bhi.w	800399a <UART_Execute+0x242>
 8003768:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <UART_Execute+0x18>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	0800399b 	.word	0x0800399b
 8003774:	080037ad 	.word	0x080037ad
 8003778:	080037b5 	.word	0x080037b5
 800377c:	080037bd 	.word	0x080037bd
 8003780:	080037e9 	.word	0x080037e9
 8003784:	08003861 	.word	0x08003861
 8003788:	08003893 	.word	0x08003893
 800378c:	080038c9 	.word	0x080038c9
 8003790:	080038d9 	.word	0x080038d9
 8003794:	080038df 	.word	0x080038df
 8003798:	0800391f 	.word	0x0800391f
 800379c:	0800396f 	.word	0x0800396f
 80037a0:	08003977 	.word	0x08003977
 80037a4:	0800397f 	.word	0x0800397f
 80037a8:	0800399b 	.word	0x0800399b
	{
		case 1:
			break;
		case 2:
			MCU_Connected = 1;
 80037ac:	4b83      	ldr	r3, [pc, #524]	; (80039bc <UART_Execute+0x264>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	701a      	strb	r2, [r3, #0]
			break;
 80037b2:	e0f2      	b.n	800399a <UART_Execute+0x242>
		case 3:
			MCU_Connected = 0;
 80037b4:	4b81      	ldr	r3, [pc, #516]	; (80039bc <UART_Execute+0x264>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	701a      	strb	r2, [r3, #0]
			break;
 80037ba:	e0ee      	b.n	800399a <UART_Execute+0x242>
		case 4:
			Max_Speed = Data_Frame2[1] * 10 / 255;
 80037bc:	4b80      	ldr	r3, [pc, #512]	; (80039c0 <UART_Execute+0x268>)
 80037be:	785b      	ldrb	r3, [r3, #1]
 80037c0:	461a      	mov	r2, r3
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4a7e      	ldr	r2, [pc, #504]	; (80039c4 <UART_Execute+0x26c>)
 80037cc:	fb82 1203 	smull	r1, r2, r2, r3
 80037d0:	441a      	add	r2, r3
 80037d2:	11d2      	asrs	r2, r2, #7
 80037d4:	17db      	asrs	r3, r3, #31
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	ee07 3a90 	vmov	s15, r3
 80037dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037e0:	4b79      	ldr	r3, [pc, #484]	; (80039c8 <UART_Execute+0x270>)
 80037e2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80037e6:	e0d8      	b.n	800399a <UART_Execute+0x242>
		case 5:
			Goal_Mode = 1;
 80037e8:	4b78      	ldr	r3, [pc, #480]	; (80039cc <UART_Execute+0x274>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]
			Goal_Angle = (Data_Frame2[0] * 256) + Data_Frame2[1];
 80037ee:	4b74      	ldr	r3, [pc, #464]	; (80039c0 <UART_Execute+0x268>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	4a72      	ldr	r2, [pc, #456]	; (80039c0 <UART_Execute+0x268>)
 80037f6:	7852      	ldrb	r2, [r2, #1]
 80037f8:	4413      	add	r3, r2
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003802:	4b73      	ldr	r3, [pc, #460]	; (80039d0 <UART_Execute+0x278>)
 8003804:	edc3 7a00 	vstr	s15, [r3]
			Goal_Angle = Goal_Angle / (pi * 10000) * 180.0;
 8003808:	4b71      	ldr	r3, [pc, #452]	; (80039d0 <UART_Execute+0x278>)
 800380a:	edd3 6a00 	vldr	s13, [r3]
 800380e:	4b71      	ldr	r3, [pc, #452]	; (80039d4 <UART_Execute+0x27c>)
 8003810:	edd3 7a00 	vldr	s15, [r3]
 8003814:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80039d8 <UART_Execute+0x280>
 8003818:	ee27 7a87 	vmul.f32	s14, s15, s14
 800381c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003820:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80039dc <UART_Execute+0x284>
 8003824:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003828:	4b69      	ldr	r3, [pc, #420]	; (80039d0 <UART_Execute+0x278>)
 800382a:	edc3 7a00 	vstr	s15, [r3]
			angle = round(Goal_Angle);
 800382e:	4b68      	ldr	r3, [pc, #416]	; (80039d0 <UART_Execute+0x278>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fc fe34 	bl	80004a0 <__aeabi_f2d>
 8003838:	4603      	mov	r3, r0
 800383a:	460c      	mov	r4, r1
 800383c:	ec44 3b10 	vmov	d0, r3, r4
 8003840:	f005 fe38 	bl	80094b4 <round>
 8003844:	ec54 3b10 	vmov	r3, r4, d0
 8003848:	4618      	mov	r0, r3
 800384a:	4621      	mov	r1, r4
 800384c:	f7fd f930 	bl	8000ab0 <__aeabi_d2f>
 8003850:	4602      	mov	r2, r0
 8003852:	4b63      	ldr	r3, [pc, #396]	; (80039e0 <UART_Execute+0x288>)
 8003854:	601a      	str	r2, [r3, #0]
			Lastest_Angle = Current_Angle;
 8003856:	4b63      	ldr	r3, [pc, #396]	; (80039e4 <UART_Execute+0x28c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a63      	ldr	r2, [pc, #396]	; (80039e8 <UART_Execute+0x290>)
 800385c:	6013      	str	r3, [r2, #0]
			break;
 800385e:	e09c      	b.n	800399a <UART_Execute+0x242>
		case 6:
			Goal_Mode = 2;
 8003860:	4b5a      	ldr	r3, [pc, #360]	; (80039cc <UART_Execute+0x274>)
 8003862:	2202      	movs	r2, #2
 8003864:	701a      	strb	r2, [r3, #0]
			Single_Station = Data_Frame2[1];
 8003866:	4b56      	ldr	r3, [pc, #344]	; (80039c0 <UART_Execute+0x268>)
 8003868:	785a      	ldrb	r2, [r3, #1]
 800386a:	4b60      	ldr	r3, [pc, #384]	; (80039ec <UART_Execute+0x294>)
 800386c:	701a      	strb	r2, [r3, #0]
			angle = Multi_Station_Angle[Single_Station];
 800386e:	4b5f      	ldr	r3, [pc, #380]	; (80039ec <UART_Execute+0x294>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	4b5e      	ldr	r3, [pc, #376]	; (80039f0 <UART_Execute+0x298>)
 8003876:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003882:	4b57      	ldr	r3, [pc, #348]	; (80039e0 <UART_Execute+0x288>)
 8003884:	edc3 7a00 	vstr	s15, [r3]
			Lastest_Angle = Current_Angle;
 8003888:	4b56      	ldr	r3, [pc, #344]	; (80039e4 <UART_Execute+0x28c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a56      	ldr	r2, [pc, #344]	; (80039e8 <UART_Execute+0x290>)
 800388e:	6013      	str	r3, [r2, #0]
			break;
 8003890:	e083      	b.n	800399a <UART_Execute+0x242>
		case 7:
			Goal_Mode = 3;
 8003892:	4b4e      	ldr	r3, [pc, #312]	; (80039cc <UART_Execute+0x274>)
 8003894:	2203      	movs	r2, #3
 8003896:	701a      	strb	r2, [r3, #0]
			Current_Multi_Station = 0;
 8003898:	4b56      	ldr	r3, [pc, #344]	; (80039f4 <UART_Execute+0x29c>)
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
			angle = Multi_Station_Angle[ Multi_Station[Current_Multi_Station] ];
 800389e:	4b55      	ldr	r3, [pc, #340]	; (80039f4 <UART_Execute+0x29c>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	4b54      	ldr	r3, [pc, #336]	; (80039f8 <UART_Execute+0x2a0>)
 80038a6:	5c9b      	ldrb	r3, [r3, r2]
 80038a8:	461a      	mov	r2, r3
 80038aa:	4b51      	ldr	r3, [pc, #324]	; (80039f0 <UART_Execute+0x298>)
 80038ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80038b0:	ee07 3a90 	vmov	s15, r3
 80038b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b8:	4b49      	ldr	r3, [pc, #292]	; (80039e0 <UART_Execute+0x288>)
 80038ba:	edc3 7a00 	vstr	s15, [r3]
			Lastest_Angle = Current_Angle;
 80038be:	4b49      	ldr	r3, [pc, #292]	; (80039e4 <UART_Execute+0x28c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a49      	ldr	r2, [pc, #292]	; (80039e8 <UART_Execute+0x290>)
 80038c4:	6013      	str	r3, [r2, #0]
			break;
 80038c6:	e068      	b.n	800399a <UART_Execute+0x242>
		case 8:
			t = 0;
 80038c8:	4b4c      	ldr	r3, [pc, #304]	; (80039fc <UART_Execute+0x2a4>)
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
			Run = 1;
 80038d0:	4b4b      	ldr	r3, [pc, #300]	; (8003a00 <UART_Execute+0x2a8>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	701a      	strb	r2, [r3, #0]
			break;
 80038d6:	e060      	b.n	800399a <UART_Execute+0x242>
		case 9:
			UART_Flow2();
 80038d8:	f7ff fd20 	bl	800331c <UART_Flow2>
			break;
 80038dc:	e05d      	b.n	800399a <UART_Execute+0x242>
		case 10:
			Current_Angle = ( EncoderPosition_Update() * 360.0 / 7200.0 );
 80038de:	f7fe f9e7 	bl	8001cb0 <EncoderPosition_Update>
 80038e2:	4603      	mov	r3, r0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fc fdb9 	bl	800045c <__aeabi_ui2d>
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	4b45      	ldr	r3, [pc, #276]	; (8003a04 <UART_Execute+0x2ac>)
 80038f0:	f7fc fe2e 	bl	8000550 <__aeabi_dmul>
 80038f4:	4603      	mov	r3, r0
 80038f6:	460c      	mov	r4, r1
 80038f8:	4618      	mov	r0, r3
 80038fa:	4621      	mov	r1, r4
 80038fc:	a32a      	add	r3, pc, #168	; (adr r3, 80039a8 <UART_Execute+0x250>)
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	f7fc ff4f 	bl	80007a4 <__aeabi_ddiv>
 8003906:	4603      	mov	r3, r0
 8003908:	460c      	mov	r4, r1
 800390a:	4618      	mov	r0, r3
 800390c:	4621      	mov	r1, r4
 800390e:	f7fd f8cf 	bl	8000ab0 <__aeabi_d2f>
 8003912:	4602      	mov	r2, r0
 8003914:	4b33      	ldr	r3, [pc, #204]	; (80039e4 <UART_Execute+0x28c>)
 8003916:	601a      	str	r2, [r3, #0]
			UART_Flow2();
 8003918:	f7ff fd00 	bl	800331c <UART_Flow2>
			break;
 800391c:	e03d      	b.n	800399a <UART_Execute+0x242>
		case 11:
			Speed = ( omega_est * 9.5493 );
 800391e:	4b3a      	ldr	r3, [pc, #232]	; (8003a08 <UART_Execute+0x2b0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fc fdbc 	bl	80004a0 <__aeabi_f2d>
 8003928:	a321      	add	r3, pc, #132	; (adr r3, 80039b0 <UART_Execute+0x258>)
 800392a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392e:	f7fc fe0f 	bl	8000550 <__aeabi_dmul>
 8003932:	4603      	mov	r3, r0
 8003934:	460c      	mov	r4, r1
 8003936:	4618      	mov	r0, r3
 8003938:	4621      	mov	r1, r4
 800393a:	f7fd f8b9 	bl	8000ab0 <__aeabi_d2f>
 800393e:	4602      	mov	r2, r0
 8003940:	4b32      	ldr	r3, [pc, #200]	; (8003a0c <UART_Execute+0x2b4>)
 8003942:	601a      	str	r2, [r3, #0]
			if(Speed < 0) { Speed = 0 - Speed; }
 8003944:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <UART_Execute+0x2b4>)
 8003946:	edd3 7a00 	vldr	s15, [r3]
 800394a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800394e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003952:	d509      	bpl.n	8003968 <UART_Execute+0x210>
 8003954:	4b2d      	ldr	r3, [pc, #180]	; (8003a0c <UART_Execute+0x2b4>)
 8003956:	edd3 7a00 	vldr	s15, [r3]
 800395a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003a10 <UART_Execute+0x2b8>
 800395e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003962:	4b2a      	ldr	r3, [pc, #168]	; (8003a0c <UART_Execute+0x2b4>)
 8003964:	edc3 7a00 	vstr	s15, [r3]
			UART_Flow2();
 8003968:	f7ff fcd8 	bl	800331c <UART_Flow2>
			break;
 800396c:	e015      	b.n	800399a <UART_Execute+0x242>
		case 12:
			EndEff_Enable = 1;
 800396e:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <UART_Execute+0x2bc>)
 8003970:	2201      	movs	r2, #1
 8003972:	701a      	strb	r2, [r3, #0]
			break;
 8003974:	e011      	b.n	800399a <UART_Execute+0x242>
		case 13:
			EndEff_Enable = 0;
 8003976:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <UART_Execute+0x2bc>)
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]
			break;
 800397c:	e00d      	b.n	800399a <UART_Execute+0x242>
		case 14:
			Home = 1;
 800397e:	4b26      	ldr	r3, [pc, #152]	; (8003a18 <UART_Execute+0x2c0>)
 8003980:	2201      	movs	r2, #1
 8003982:	701a      	strb	r2, [r3, #0]
			HomeMode = 1;
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <UART_Execute+0x2c4>)
 8003986:	2201      	movs	r2, #1
 8003988:	701a      	strb	r2, [r3, #0]
			HomeTimestamp = micros();
 800398a:	f7fe f873 	bl	8001a74 <micros>
 800398e:	4603      	mov	r3, r0
 8003990:	460c      	mov	r4, r1
 8003992:	4a23      	ldr	r2, [pc, #140]	; (8003a20 <UART_Execute+0x2c8>)
 8003994:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8003998:	bf00      	nop
		case 15:
			break;
	}
	UART_Mode = 0;
 800399a:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <UART_Execute+0x260>)
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
}
 80039a0:	bf00      	nop
 80039a2:	bd98      	pop	{r3, r4, r7, pc}
 80039a4:	f3af 8000 	nop.w
 80039a8:	00000000 	.word	0x00000000
 80039ac:	40bc2000 	.word	0x40bc2000
 80039b0:	d97f62b7 	.word	0xd97f62b7
 80039b4:	4023193d 	.word	0x4023193d
 80039b8:	2000021a 	.word	0x2000021a
 80039bc:	200001e7 	.word	0x200001e7
 80039c0:	200001fc 	.word	0x200001fc
 80039c4:	80808081 	.word	0x80808081
 80039c8:	200001ec 	.word	0x200001ec
 80039cc:	200001da 	.word	0x200001da
 80039d0:	200001f0 	.word	0x200001f0
 80039d4:	20000030 	.word	0x20000030
 80039d8:	461c4000 	.word	0x461c4000
 80039dc:	43340000 	.word	0x43340000
 80039e0:	20000194 	.word	0x20000194
 80039e4:	200001d4 	.word	0x200001d4
 80039e8:	200001d0 	.word	0x200001d0
 80039ec:	200001f4 	.word	0x200001f4
 80039f0:	20000034 	.word	0x20000034
 80039f4:	200001d9 	.word	0x200001d9
 80039f8:	20000208 	.word	0x20000208
 80039fc:	20000178 	.word	0x20000178
 8003a00:	200001e3 	.word	0x200001e3
 8003a04:	40768000 	.word	0x40768000
 8003a08:	2000012c 	.word	0x2000012c
 8003a0c:	200001dc 	.word	0x200001dc
 8003a10:	00000000 	.word	0x00000000
 8003a14:	200001e8 	.word	0x200001e8
 8003a18:	200001e4 	.word	0x200001e4
 8003a1c:	20000108 	.word	0x20000108
 8003a20:	200000f0 	.word	0x200000f0

08003a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a28:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a2a:	e7fe      	b.n	8003a2a <Error_Handler+0x6>

08003a2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <HAL_MspInit+0x4c>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	4a0f      	ldr	r2, [pc, #60]	; (8003a78 <HAL_MspInit+0x4c>)
 8003a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a40:	6453      	str	r3, [r2, #68]	; 0x44
 8003a42:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <HAL_MspInit+0x4c>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <HAL_MspInit+0x4c>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <HAL_MspInit+0x4c>)
 8003a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_MspInit+0x4c>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003a6a:	2007      	movs	r0, #7
 8003a6c:	f000 fc46 	bl	80042fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40023800 	.word	0x40023800

08003a7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	; 0x28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a84:	f107 0314 	add.w	r3, r7, #20
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <HAL_I2C_MspInit+0xa4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d13b      	bne.n	8003b16 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <HAL_I2C_MspInit+0xa8>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	4a1f      	ldr	r2, [pc, #124]	; (8003b24 <HAL_I2C_MspInit+0xa8>)
 8003aa8:	f043 0302 	orr.w	r3, r3, #2
 8003aac:	6313      	str	r3, [r2, #48]	; 0x30
 8003aae:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <HAL_I2C_MspInit+0xa8>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003aba:	23c0      	movs	r3, #192	; 0xc0
 8003abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003abe:	2312      	movs	r3, #18
 8003ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003aca:	2304      	movs	r3, #4
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ace:	f107 0314 	add.w	r3, r7, #20
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4814      	ldr	r0, [pc, #80]	; (8003b28 <HAL_I2C_MspInit+0xac>)
 8003ad6:	f000 fff1 	bl	8004abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <HAL_I2C_MspInit+0xa8>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	4a10      	ldr	r2, [pc, #64]	; (8003b24 <HAL_I2C_MspInit+0xa8>)
 8003ae4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aea:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <HAL_I2C_MspInit+0xa8>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	2100      	movs	r1, #0
 8003afa:	201f      	movs	r0, #31
 8003afc:	f000 fc09 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b00:	201f      	movs	r0, #31
 8003b02:	f000 fc22 	bl	800434a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2100      	movs	r1, #0
 8003b0a:	2020      	movs	r0, #32
 8003b0c:	f000 fc01 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b10:	2020      	movs	r0, #32
 8003b12:	f000 fc1a 	bl	800434a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b16:	bf00      	nop
 8003b18:	3728      	adds	r7, #40	; 0x28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40005400 	.word	0x40005400
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40020400 	.word	0x40020400

08003b2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	; 0x28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a19      	ldr	r2, [pc, #100]	; (8003bb0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d12c      	bne.n	8003ba8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b5e:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b94:	2300      	movs	r3, #0
 8003b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9c:	f107 0314 	add.w	r3, r7, #20
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4805      	ldr	r0, [pc, #20]	; (8003bb8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003ba4:	f000 ff8a 	bl	8004abc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003ba8:	bf00      	nop
 8003baa:	3728      	adds	r7, #40	; 0x28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40010000 	.word	0x40010000
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40020000 	.word	0x40020000

08003bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bcc:	d116      	bne.n	8003bfc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	4b1a      	ldr	r3, [pc, #104]	; (8003c3c <HAL_TIM_Base_MspInit+0x80>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	4a19      	ldr	r2, [pc, #100]	; (8003c3c <HAL_TIM_Base_MspInit+0x80>)
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bde:	4b17      	ldr	r3, [pc, #92]	; (8003c3c <HAL_TIM_Base_MspInit+0x80>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003bea:	2200      	movs	r2, #0
 8003bec:	2100      	movs	r1, #0
 8003bee:	201c      	movs	r0, #28
 8003bf0:	f000 fb8f 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003bf4:	201c      	movs	r0, #28
 8003bf6:	f000 fba8 	bl	800434a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003bfa:	e01a      	b.n	8003c32 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0f      	ldr	r2, [pc, #60]	; (8003c40 <HAL_TIM_Base_MspInit+0x84>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d115      	bne.n	8003c32 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <HAL_TIM_Base_MspInit+0x80>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	4a0b      	ldr	r2, [pc, #44]	; (8003c3c <HAL_TIM_Base_MspInit+0x80>)
 8003c10:	f043 0304 	orr.w	r3, r3, #4
 8003c14:	6413      	str	r3, [r2, #64]	; 0x40
 8003c16:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <HAL_TIM_Base_MspInit+0x80>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003c22:	2200      	movs	r2, #0
 8003c24:	2100      	movs	r1, #0
 8003c26:	201e      	movs	r0, #30
 8003c28:	f000 fb73 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003c2c:	201e      	movs	r0, #30
 8003c2e:	f000 fb8c 	bl	800434a <HAL_NVIC_EnableIRQ>
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	40000800 	.word	0x40000800

08003c44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0b      	ldr	r2, [pc, #44]	; (8003c80 <HAL_TIM_PWM_MspInit+0x3c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d10d      	bne.n	8003c72 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <HAL_TIM_PWM_MspInit+0x40>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a09      	ldr	r2, [pc, #36]	; (8003c84 <HAL_TIM_PWM_MspInit+0x40>)
 8003c60:	f043 0302 	orr.w	r3, r3, #2
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <HAL_TIM_PWM_MspInit+0x40>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003c72:	bf00      	nop
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40023800 	.word	0x40023800

08003c88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c90:	f107 030c 	add.w	r3, r7, #12
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <HAL_TIM_MspPostInit+0x68>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d11d      	bne.n	8003ce6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <HAL_TIM_MspPostInit+0x6c>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	4a10      	ldr	r2, [pc, #64]	; (8003cf4 <HAL_TIM_MspPostInit+0x6c>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <HAL_TIM_MspPostInit+0x6c>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cc6:	23c0      	movs	r3, #192	; 0xc0
 8003cc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cca:	2302      	movs	r3, #2
 8003ccc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cda:	f107 030c 	add.w	r3, r7, #12
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4805      	ldr	r0, [pc, #20]	; (8003cf8 <HAL_TIM_MspPostInit+0x70>)
 8003ce2:	f000 feeb 	bl	8004abc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ce6:	bf00      	nop
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	40020000 	.word	0x40020000

08003cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08a      	sub	sp, #40	; 0x28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d04:	f107 0314 	add.w	r3, r7, #20
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a4c      	ldr	r2, [pc, #304]	; (8003e4c <HAL_UART_MspInit+0x150>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	f040 8091 	bne.w	8003e42 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	4b4a      	ldr	r3, [pc, #296]	; (8003e50 <HAL_UART_MspInit+0x154>)
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	4a49      	ldr	r2, [pc, #292]	; (8003e50 <HAL_UART_MspInit+0x154>)
 8003d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d30:	4b47      	ldr	r3, [pc, #284]	; (8003e50 <HAL_UART_MspInit+0x154>)
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	4b43      	ldr	r3, [pc, #268]	; (8003e50 <HAL_UART_MspInit+0x154>)
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	4a42      	ldr	r2, [pc, #264]	; (8003e50 <HAL_UART_MspInit+0x154>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4c:	4b40      	ldr	r3, [pc, #256]	; (8003e50 <HAL_UART_MspInit+0x154>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003d58:	230c      	movs	r3, #12
 8003d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d64:	2303      	movs	r3, #3
 8003d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d68:	2307      	movs	r3, #7
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d6c:	f107 0314 	add.w	r3, r7, #20
 8003d70:	4619      	mov	r1, r3
 8003d72:	4838      	ldr	r0, [pc, #224]	; (8003e54 <HAL_UART_MspInit+0x158>)
 8003d74:	f000 fea2 	bl	8004abc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003d78:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <HAL_UART_MspInit+0x15c>)
 8003d7a:	4a38      	ldr	r2, [pc, #224]	; (8003e5c <HAL_UART_MspInit+0x160>)
 8003d7c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003d7e:	4b36      	ldr	r3, [pc, #216]	; (8003e58 <HAL_UART_MspInit+0x15c>)
 8003d80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d84:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d86:	4b34      	ldr	r3, [pc, #208]	; (8003e58 <HAL_UART_MspInit+0x15c>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d8c:	4b32      	ldr	r3, [pc, #200]	; (8003e58 <HAL_UART_MspInit+0x15c>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d92:	4b31      	ldr	r3, [pc, #196]	; (8003e58 <HAL_UART_MspInit+0x15c>)
 8003d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d98:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <HAL_UART_MspInit+0x15c>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003da0:	4b2d      	ldr	r3, [pc, #180]	; (8003e58 <HAL_UART_MspInit+0x15c>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003da6:	4b2c      	ldr	r3, [pc, #176]	; (8003e58 <HAL_UART_MspInit+0x15c>)
 8003da8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003dae:	4b2a      	ldr	r3, [pc, #168]	; (8003e58 <HAL_UART_MspInit+0x15c>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003db4:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <HAL_UART_MspInit+0x15c>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003dba:	4827      	ldr	r0, [pc, #156]	; (8003e58 <HAL_UART_MspInit+0x15c>)
 8003dbc:	f000 fae0 	bl	8004380 <HAL_DMA_Init>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003dc6:	f7ff fe2d 	bl	8003a24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a22      	ldr	r2, [pc, #136]	; (8003e58 <HAL_UART_MspInit+0x15c>)
 8003dce:	635a      	str	r2, [r3, #52]	; 0x34
 8003dd0:	4a21      	ldr	r2, [pc, #132]	; (8003e58 <HAL_UART_MspInit+0x15c>)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003dd6:	4b22      	ldr	r3, [pc, #136]	; (8003e60 <HAL_UART_MspInit+0x164>)
 8003dd8:	4a22      	ldr	r2, [pc, #136]	; (8003e64 <HAL_UART_MspInit+0x168>)
 8003dda:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003ddc:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <HAL_UART_MspInit+0x164>)
 8003dde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003de2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003de4:	4b1e      	ldr	r3, [pc, #120]	; (8003e60 <HAL_UART_MspInit+0x164>)
 8003de6:	2240      	movs	r2, #64	; 0x40
 8003de8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <HAL_UART_MspInit+0x164>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003df0:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <HAL_UART_MspInit+0x164>)
 8003df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003df6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003df8:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <HAL_UART_MspInit+0x164>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dfe:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <HAL_UART_MspInit+0x164>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003e04:	4b16      	ldr	r3, [pc, #88]	; (8003e60 <HAL_UART_MspInit+0x164>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <HAL_UART_MspInit+0x164>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e10:	4b13      	ldr	r3, [pc, #76]	; (8003e60 <HAL_UART_MspInit+0x164>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003e16:	4812      	ldr	r0, [pc, #72]	; (8003e60 <HAL_UART_MspInit+0x164>)
 8003e18:	f000 fab2 	bl	8004380 <HAL_DMA_Init>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003e22:	f7ff fdff 	bl	8003a24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a0d      	ldr	r2, [pc, #52]	; (8003e60 <HAL_UART_MspInit+0x164>)
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
 8003e2c:	4a0c      	ldr	r2, [pc, #48]	; (8003e60 <HAL_UART_MspInit+0x164>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e32:	2200      	movs	r2, #0
 8003e34:	2100      	movs	r1, #0
 8003e36:	2026      	movs	r0, #38	; 0x26
 8003e38:	f000 fa6b 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e3c:	2026      	movs	r0, #38	; 0x26
 8003e3e:	f000 fa84 	bl	800434a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e42:	bf00      	nop
 8003e44:	3728      	adds	r7, #40	; 0x28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40004400 	.word	0x40004400
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40020000 	.word	0x40020000
 8003e58:	20000240 	.word	0x20000240
 8003e5c:	40026088 	.word	0x40026088
 8003e60:	2000037c 	.word	0x2000037c
 8003e64:	400260a0 	.word	0x400260a0

08003e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e6c:	e7fe      	b.n	8003e6c <NMI_Handler+0x4>

08003e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e72:	e7fe      	b.n	8003e72 <HardFault_Handler+0x4>

08003e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e78:	e7fe      	b.n	8003e78 <MemManage_Handler+0x4>

08003e7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e7e:	e7fe      	b.n	8003e7e <BusFault_Handler+0x4>

08003e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e84:	e7fe      	b.n	8003e84 <UsageFault_Handler+0x4>

08003e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e86:	b480      	push	{r7}
 8003e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eb4:	f000 f910 	bl	80040d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eb8:	bf00      	nop
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ec0:	4802      	ldr	r0, [pc, #8]	; (8003ecc <DMA1_Stream5_IRQHandler+0x10>)
 8003ec2:	f000 fb85 	bl	80045d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000240 	.word	0x20000240

08003ed0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003ed4:	4802      	ldr	r0, [pc, #8]	; (8003ee0 <DMA1_Stream6_IRQHandler+0x10>)
 8003ed6:	f000 fb7b 	bl	80045d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	2000037c 	.word	0x2000037c

08003ee4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ee8:	4802      	ldr	r0, [pc, #8]	; (8003ef4 <TIM2_IRQHandler+0x10>)
 8003eea:	f003 fc44 	bl	8007776 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	2000041c 	.word	0x2000041c

08003ef8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003efc:	4802      	ldr	r0, [pc, #8]	; (8003f08 <TIM4_IRQHandler+0x10>)
 8003efe:	f003 fc3a 	bl	8007776 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	200002a0 	.word	0x200002a0

08003f0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003f10:	4802      	ldr	r0, [pc, #8]	; (8003f1c <I2C1_EV_IRQHandler+0x10>)
 8003f12:	f001 f97f 	bl	8005214 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	200002e4 	.word	0x200002e4

08003f20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003f24:	4802      	ldr	r0, [pc, #8]	; (8003f30 <I2C1_ER_IRQHandler+0x10>)
 8003f26:	f001 fae2 	bl	80054ee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	200002e4 	.word	0x200002e4

08003f34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f38:	4802      	ldr	r0, [pc, #8]	; (8003f44 <USART2_IRQHandler+0x10>)
 8003f3a:	f004 fb53 	bl	80085e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	2000045c 	.word	0x2000045c

08003f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <_sbrk+0x5c>)
 8003f52:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <_sbrk+0x60>)
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f5c:	4b13      	ldr	r3, [pc, #76]	; (8003fac <_sbrk+0x64>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f64:	4b11      	ldr	r3, [pc, #68]	; (8003fac <_sbrk+0x64>)
 8003f66:	4a12      	ldr	r2, [pc, #72]	; (8003fb0 <_sbrk+0x68>)
 8003f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f6a:	4b10      	ldr	r3, [pc, #64]	; (8003fac <_sbrk+0x64>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4413      	add	r3, r2
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d207      	bcs.n	8003f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f78:	f005 f9e4 	bl	8009344 <__errno>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	230c      	movs	r3, #12
 8003f80:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f86:	e009      	b.n	8003f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f88:	4b08      	ldr	r3, [pc, #32]	; (8003fac <_sbrk+0x64>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f8e:	4b07      	ldr	r3, [pc, #28]	; (8003fac <_sbrk+0x64>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	4a05      	ldr	r2, [pc, #20]	; (8003fac <_sbrk+0x64>)
 8003f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20020000 	.word	0x20020000
 8003fa8:	00000400 	.word	0x00000400
 8003fac:	20000230 	.word	0x20000230
 8003fb0:	200004a8 	.word	0x200004a8

08003fb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fb8:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <SystemInit+0x28>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	4a07      	ldr	r2, [pc, #28]	; (8003fdc <SystemInit+0x28>)
 8003fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003fc8:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <SystemInit+0x28>)
 8003fca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fce:	609a      	str	r2, [r3, #8]
#endif
}
 8003fd0:	bf00      	nop
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004018 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003fe4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003fe6:	e003      	b.n	8003ff0 <LoopCopyDataInit>

08003fe8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003fea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003fec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003fee:	3104      	adds	r1, #4

08003ff0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ff0:	480b      	ldr	r0, [pc, #44]	; (8004020 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ff4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ff6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ff8:	d3f6      	bcc.n	8003fe8 <CopyDataInit>
  ldr  r2, =_sbss
 8003ffa:	4a0b      	ldr	r2, [pc, #44]	; (8004028 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ffc:	e002      	b.n	8004004 <LoopFillZerobss>

08003ffe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ffe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004000:	f842 3b04 	str.w	r3, [r2], #4

08004004 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004004:	4b09      	ldr	r3, [pc, #36]	; (800402c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004006:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004008:	d3f9      	bcc.n	8003ffe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800400a:	f7ff ffd3 	bl	8003fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800400e:	f005 f99f 	bl	8009350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004012:	f7fd f82d 	bl	8001070 <main>
  bx  lr    
 8004016:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004018:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800401c:	0800a688 	.word	0x0800a688
  ldr  r0, =_sdata
 8004020:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004024:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8004028:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 800402c:	200004a4 	.word	0x200004a4

08004030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004030:	e7fe      	b.n	8004030 <ADC_IRQHandler>
	...

08004034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004038:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <HAL_Init+0x40>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a0d      	ldr	r2, [pc, #52]	; (8004074 <HAL_Init+0x40>)
 800403e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_Init+0x40>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <HAL_Init+0x40>)
 800404a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800404e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004050:	4b08      	ldr	r3, [pc, #32]	; (8004074 <HAL_Init+0x40>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a07      	ldr	r2, [pc, #28]	; (8004074 <HAL_Init+0x40>)
 8004056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800405c:	2003      	movs	r0, #3
 800405e:	f000 f94d 	bl	80042fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004062:	2000      	movs	r0, #0
 8004064:	f000 f808 	bl	8004078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004068:	f7ff fce0 	bl	8003a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00

08004078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004080:	4b12      	ldr	r3, [pc, #72]	; (80040cc <HAL_InitTick+0x54>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <HAL_InitTick+0x58>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	4619      	mov	r1, r3
 800408a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800408e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f965 	bl	8004366 <HAL_SYSTICK_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e00e      	b.n	80040c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d80a      	bhi.n	80040c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040ac:	2200      	movs	r2, #0
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040b4:	f000 f92d 	bl	8004312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040b8:	4a06      	ldr	r2, [pc, #24]	; (80040d4 <HAL_InitTick+0x5c>)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	e000      	b.n	80040c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	2000004c 	.word	0x2000004c
 80040d0:	20000054 	.word	0x20000054
 80040d4:	20000050 	.word	0x20000050

080040d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_IncTick+0x20>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <HAL_IncTick+0x24>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4413      	add	r3, r2
 80040e8:	4a04      	ldr	r2, [pc, #16]	; (80040fc <HAL_IncTick+0x24>)
 80040ea:	6013      	str	r3, [r2, #0]
}
 80040ec:	bf00      	nop
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000054 	.word	0x20000054
 80040fc:	2000049c 	.word	0x2000049c

08004100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return uwTick;
 8004104:	4b03      	ldr	r3, [pc, #12]	; (8004114 <HAL_GetTick+0x14>)
 8004106:	681b      	ldr	r3, [r3, #0]
}
 8004108:	4618      	mov	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	2000049c 	.word	0x2000049c

08004118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004120:	f7ff ffee 	bl	8004100 <HAL_GetTick>
 8004124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004130:	d005      	beq.n	800413e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004132:	4b09      	ldr	r3, [pc, #36]	; (8004158 <HAL_Delay+0x40>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800413e:	bf00      	nop
 8004140:	f7ff ffde 	bl	8004100 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	429a      	cmp	r2, r3
 800414e:	d8f7      	bhi.n	8004140 <HAL_Delay+0x28>
  {
  }
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20000054 	.word	0x20000054

0800415c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800416c:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <__NVIC_SetPriorityGrouping+0x44>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004178:	4013      	ands	r3, r2
 800417a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800418c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800418e:	4a04      	ldr	r2, [pc, #16]	; (80041a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	60d3      	str	r3, [r2, #12]
}
 8004194:	bf00      	nop
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	e000ed00 	.word	0xe000ed00

080041a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041a8:	4b04      	ldr	r3, [pc, #16]	; (80041bc <__NVIC_GetPriorityGrouping+0x18>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	0a1b      	lsrs	r3, r3, #8
 80041ae:	f003 0307 	and.w	r3, r3, #7
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	e000ed00 	.word	0xe000ed00

080041c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	db0b      	blt.n	80041ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	f003 021f 	and.w	r2, r3, #31
 80041d8:	4907      	ldr	r1, [pc, #28]	; (80041f8 <__NVIC_EnableIRQ+0x38>)
 80041da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2001      	movs	r0, #1
 80041e2:	fa00 f202 	lsl.w	r2, r0, r2
 80041e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	e000e100 	.word	0xe000e100

080041fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	6039      	str	r1, [r7, #0]
 8004206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420c:	2b00      	cmp	r3, #0
 800420e:	db0a      	blt.n	8004226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	b2da      	uxtb	r2, r3
 8004214:	490c      	ldr	r1, [pc, #48]	; (8004248 <__NVIC_SetPriority+0x4c>)
 8004216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421a:	0112      	lsls	r2, r2, #4
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	440b      	add	r3, r1
 8004220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004224:	e00a      	b.n	800423c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	4908      	ldr	r1, [pc, #32]	; (800424c <__NVIC_SetPriority+0x50>)
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	3b04      	subs	r3, #4
 8004234:	0112      	lsls	r2, r2, #4
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	440b      	add	r3, r1
 800423a:	761a      	strb	r2, [r3, #24]
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	e000e100 	.word	0xe000e100
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004250:	b480      	push	{r7}
 8004252:	b089      	sub	sp, #36	; 0x24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f1c3 0307 	rsb	r3, r3, #7
 800426a:	2b04      	cmp	r3, #4
 800426c:	bf28      	it	cs
 800426e:	2304      	movcs	r3, #4
 8004270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3304      	adds	r3, #4
 8004276:	2b06      	cmp	r3, #6
 8004278:	d902      	bls.n	8004280 <NVIC_EncodePriority+0x30>
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3b03      	subs	r3, #3
 800427e:	e000      	b.n	8004282 <NVIC_EncodePriority+0x32>
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	43da      	mvns	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	401a      	ands	r2, r3
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004298:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	fa01 f303 	lsl.w	r3, r1, r3
 80042a2:	43d9      	mvns	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a8:	4313      	orrs	r3, r2
         );
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3724      	adds	r7, #36	; 0x24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042c8:	d301      	bcc.n	80042ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ca:	2301      	movs	r3, #1
 80042cc:	e00f      	b.n	80042ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ce:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <SysTick_Config+0x40>)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042d6:	210f      	movs	r1, #15
 80042d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042dc:	f7ff ff8e 	bl	80041fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <SysTick_Config+0x40>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042e6:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <SysTick_Config+0x40>)
 80042e8:	2207      	movs	r2, #7
 80042ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	e000e010 	.word	0xe000e010

080042fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff ff29 	bl	800415c <__NVIC_SetPriorityGrouping>
}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004312:	b580      	push	{r7, lr}
 8004314:	b086      	sub	sp, #24
 8004316:	af00      	add	r7, sp, #0
 8004318:	4603      	mov	r3, r0
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004324:	f7ff ff3e 	bl	80041a4 <__NVIC_GetPriorityGrouping>
 8004328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	68b9      	ldr	r1, [r7, #8]
 800432e:	6978      	ldr	r0, [r7, #20]
 8004330:	f7ff ff8e 	bl	8004250 <NVIC_EncodePriority>
 8004334:	4602      	mov	r2, r0
 8004336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800433a:	4611      	mov	r1, r2
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff ff5d 	bl	80041fc <__NVIC_SetPriority>
}
 8004342:	bf00      	nop
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	4603      	mov	r3, r0
 8004352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff ff31 	bl	80041c0 <__NVIC_EnableIRQ>
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff ffa2 	bl	80042b8 <SysTick_Config>
 8004374:	4603      	mov	r3, r0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800438c:	f7ff feb8 	bl	8004100 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e099      	b.n	80044d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0201 	bic.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043bc:	e00f      	b.n	80043de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043be:	f7ff fe9f 	bl	8004100 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b05      	cmp	r3, #5
 80043ca:	d908      	bls.n	80043de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2203      	movs	r2, #3
 80043d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e078      	b.n	80044d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e8      	bne.n	80043be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4b38      	ldr	r3, [pc, #224]	; (80044d8 <HAL_DMA_Init+0x158>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800440a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004416:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004422:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	2b04      	cmp	r3, #4
 8004436:	d107      	bne.n	8004448 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	4313      	orrs	r3, r2
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0307 	bic.w	r3, r3, #7
 800445e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	2b04      	cmp	r3, #4
 8004470:	d117      	bne.n	80044a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00e      	beq.n	80044a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fa9f 	bl	80049c8 <DMA_CheckFifoParam>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2240      	movs	r2, #64	; 0x40
 8004494:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800449e:	2301      	movs	r3, #1
 80044a0:	e016      	b.n	80044d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fa56 	bl	800495c <DMA_CalcBaseAndBitshift>
 80044b0:	4603      	mov	r3, r0
 80044b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	223f      	movs	r2, #63	; 0x3f
 80044ba:	409a      	lsls	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	f010803f 	.word	0xf010803f

080044dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_DMA_Start_IT+0x26>
 80044fe:	2302      	movs	r3, #2
 8004500:	e040      	b.n	8004584 <HAL_DMA_Start_IT+0xa8>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b01      	cmp	r3, #1
 8004514:	d12f      	bne.n	8004576 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2202      	movs	r2, #2
 800451a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f9e8 	bl	8004900 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004534:	223f      	movs	r2, #63	; 0x3f
 8004536:	409a      	lsls	r2, r3
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0216 	orr.w	r2, r2, #22
 800454a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0208 	orr.w	r2, r2, #8
 8004562:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	e005      	b.n	8004582 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800457e:	2302      	movs	r3, #2
 8004580:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004582:	7dfb      	ldrb	r3, [r7, #23]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d004      	beq.n	80045aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2280      	movs	r2, #128	; 0x80
 80045a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e00c      	b.n	80045c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2205      	movs	r2, #5
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0201 	bic.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045dc:	4b92      	ldr	r3, [pc, #584]	; (8004828 <HAL_DMA_IRQHandler+0x258>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a92      	ldr	r2, [pc, #584]	; (800482c <HAL_DMA_IRQHandler+0x25c>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	0a9b      	lsrs	r3, r3, #10
 80045e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fa:	2208      	movs	r2, #8
 80045fc:	409a      	lsls	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4013      	ands	r3, r2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01a      	beq.n	800463c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d013      	beq.n	800463c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0204 	bic.w	r2, r2, #4
 8004622:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	2208      	movs	r2, #8
 800462a:	409a      	lsls	r2, r3
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004634:	f043 0201 	orr.w	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004640:	2201      	movs	r2, #1
 8004642:	409a      	lsls	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d012      	beq.n	8004672 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00b      	beq.n	8004672 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465e:	2201      	movs	r2, #1
 8004660:	409a      	lsls	r2, r3
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	f043 0202 	orr.w	r2, r3, #2
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004676:	2204      	movs	r2, #4
 8004678:	409a      	lsls	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4013      	ands	r3, r2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d012      	beq.n	80046a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00b      	beq.n	80046a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004694:	2204      	movs	r2, #4
 8004696:	409a      	lsls	r2, r3
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a0:	f043 0204 	orr.w	r2, r3, #4
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ac:	2210      	movs	r2, #16
 80046ae:	409a      	lsls	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d043      	beq.n	8004740 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d03c      	beq.n	8004740 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ca:	2210      	movs	r2, #16
 80046cc:	409a      	lsls	r2, r3
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d018      	beq.n	8004712 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d108      	bne.n	8004700 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d024      	beq.n	8004740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	4798      	blx	r3
 80046fe:	e01f      	b.n	8004740 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01b      	beq.n	8004740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	4798      	blx	r3
 8004710:	e016      	b.n	8004740 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471c:	2b00      	cmp	r3, #0
 800471e:	d107      	bne.n	8004730 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0208 	bic.w	r2, r2, #8
 800472e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004744:	2220      	movs	r2, #32
 8004746:	409a      	lsls	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 808e 	beq.w	800486e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8086 	beq.w	800486e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004766:	2220      	movs	r2, #32
 8004768:	409a      	lsls	r2, r3
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b05      	cmp	r3, #5
 8004778:	d136      	bne.n	80047e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0216 	bic.w	r2, r2, #22
 8004788:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695a      	ldr	r2, [r3, #20]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004798:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d103      	bne.n	80047aa <HAL_DMA_IRQHandler+0x1da>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0208 	bic.w	r2, r2, #8
 80047b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	223f      	movs	r2, #63	; 0x3f
 80047c0:	409a      	lsls	r2, r3
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d07d      	beq.n	80048da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
        }
        return;
 80047e6:	e078      	b.n	80048da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d01c      	beq.n	8004830 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d108      	bne.n	8004816 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004808:	2b00      	cmp	r3, #0
 800480a:	d030      	beq.n	800486e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	4798      	blx	r3
 8004814:	e02b      	b.n	800486e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d027      	beq.n	800486e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	4798      	blx	r3
 8004826:	e022      	b.n	800486e <HAL_DMA_IRQHandler+0x29e>
 8004828:	2000004c 	.word	0x2000004c
 800482c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10f      	bne.n	800485e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0210 	bic.w	r2, r2, #16
 800484c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004872:	2b00      	cmp	r3, #0
 8004874:	d032      	beq.n	80048dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d022      	beq.n	80048c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2205      	movs	r2, #5
 8004886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3301      	adds	r3, #1
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d307      	bcc.n	80048b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f2      	bne.n	800489a <HAL_DMA_IRQHandler+0x2ca>
 80048b4:	e000      	b.n	80048b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80048b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
 80048d8:	e000      	b.n	80048dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80048da:	bf00      	nop
    }
  }
}
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop

080048e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048f2:	b2db      	uxtb	r3, r3
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800491c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d108      	bne.n	8004940 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800493e:	e007      	b.n	8004950 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	3b10      	subs	r3, #16
 800496c:	4a14      	ldr	r2, [pc, #80]	; (80049c0 <DMA_CalcBaseAndBitshift+0x64>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	091b      	lsrs	r3, r3, #4
 8004974:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004976:	4a13      	ldr	r2, [pc, #76]	; (80049c4 <DMA_CalcBaseAndBitshift+0x68>)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b03      	cmp	r3, #3
 8004988:	d909      	bls.n	800499e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004992:	f023 0303 	bic.w	r3, r3, #3
 8004996:	1d1a      	adds	r2, r3, #4
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	659a      	str	r2, [r3, #88]	; 0x58
 800499c:	e007      	b.n	80049ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	aaaaaaab 	.word	0xaaaaaaab
 80049c4:	0800a628 	.word	0x0800a628

080049c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d11f      	bne.n	8004a22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d855      	bhi.n	8004a94 <DMA_CheckFifoParam+0xcc>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <DMA_CheckFifoParam+0x28>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a13 	.word	0x08004a13
 80049f8:	08004a01 	.word	0x08004a01
 80049fc:	08004a95 	.word	0x08004a95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d045      	beq.n	8004a98 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a10:	e042      	b.n	8004a98 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a1a:	d13f      	bne.n	8004a9c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a20:	e03c      	b.n	8004a9c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a2a:	d121      	bne.n	8004a70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d836      	bhi.n	8004aa0 <DMA_CheckFifoParam+0xd8>
 8004a32:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <DMA_CheckFifoParam+0x70>)
 8004a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a38:	08004a49 	.word	0x08004a49
 8004a3c:	08004a4f 	.word	0x08004a4f
 8004a40:	08004a49 	.word	0x08004a49
 8004a44:	08004a61 	.word	0x08004a61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a4c:	e02f      	b.n	8004aae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d024      	beq.n	8004aa4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a5e:	e021      	b.n	8004aa4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a68:	d11e      	bne.n	8004aa8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a6e:	e01b      	b.n	8004aa8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d902      	bls.n	8004a7c <DMA_CheckFifoParam+0xb4>
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d003      	beq.n	8004a82 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a7a:	e018      	b.n	8004aae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a80:	e015      	b.n	8004aae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00e      	beq.n	8004aac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
      break;
 8004a92:	e00b      	b.n	8004aac <DMA_CheckFifoParam+0xe4>
      break;
 8004a94:	bf00      	nop
 8004a96:	e00a      	b.n	8004aae <DMA_CheckFifoParam+0xe6>
      break;
 8004a98:	bf00      	nop
 8004a9a:	e008      	b.n	8004aae <DMA_CheckFifoParam+0xe6>
      break;
 8004a9c:	bf00      	nop
 8004a9e:	e006      	b.n	8004aae <DMA_CheckFifoParam+0xe6>
      break;
 8004aa0:	bf00      	nop
 8004aa2:	e004      	b.n	8004aae <DMA_CheckFifoParam+0xe6>
      break;
 8004aa4:	bf00      	nop
 8004aa6:	e002      	b.n	8004aae <DMA_CheckFifoParam+0xe6>
      break;   
 8004aa8:	bf00      	nop
 8004aaa:	e000      	b.n	8004aae <DMA_CheckFifoParam+0xe6>
      break;
 8004aac:	bf00      	nop
    }
  } 
  
  return status; 
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	e159      	b.n	8004d8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ad8:	2201      	movs	r2, #1
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	f040 8148 	bne.w	8004d86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d00b      	beq.n	8004b16 <HAL_GPIO_Init+0x5a>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d007      	beq.n	8004b16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b0a:	2b11      	cmp	r3, #17
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b12      	cmp	r3, #18
 8004b14:	d130      	bne.n	8004b78 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	2203      	movs	r2, #3
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 0201 	and.w	r2, r3, #1
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	2203      	movs	r2, #3
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d003      	beq.n	8004bb8 <HAL_GPIO_Init+0xfc>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b12      	cmp	r3, #18
 8004bb6:	d123      	bne.n	8004c00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	08da      	lsrs	r2, r3, #3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3208      	adds	r2, #8
 8004bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	220f      	movs	r2, #15
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	08da      	lsrs	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3208      	adds	r2, #8
 8004bfa:	69b9      	ldr	r1, [r7, #24]
 8004bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 0203 	and.w	r2, r3, #3
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 80a2 	beq.w	8004d86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	4b56      	ldr	r3, [pc, #344]	; (8004da0 <HAL_GPIO_Init+0x2e4>)
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	4a55      	ldr	r2, [pc, #340]	; (8004da0 <HAL_GPIO_Init+0x2e4>)
 8004c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c50:	6453      	str	r3, [r2, #68]	; 0x44
 8004c52:	4b53      	ldr	r3, [pc, #332]	; (8004da0 <HAL_GPIO_Init+0x2e4>)
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c5e:	4a51      	ldr	r2, [pc, #324]	; (8004da4 <HAL_GPIO_Init+0x2e8>)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	089b      	lsrs	r3, r3, #2
 8004c64:	3302      	adds	r3, #2
 8004c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	220f      	movs	r2, #15
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a48      	ldr	r2, [pc, #288]	; (8004da8 <HAL_GPIO_Init+0x2ec>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d019      	beq.n	8004cbe <HAL_GPIO_Init+0x202>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a47      	ldr	r2, [pc, #284]	; (8004dac <HAL_GPIO_Init+0x2f0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d013      	beq.n	8004cba <HAL_GPIO_Init+0x1fe>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a46      	ldr	r2, [pc, #280]	; (8004db0 <HAL_GPIO_Init+0x2f4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00d      	beq.n	8004cb6 <HAL_GPIO_Init+0x1fa>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a45      	ldr	r2, [pc, #276]	; (8004db4 <HAL_GPIO_Init+0x2f8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <HAL_GPIO_Init+0x1f6>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a44      	ldr	r2, [pc, #272]	; (8004db8 <HAL_GPIO_Init+0x2fc>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d101      	bne.n	8004cae <HAL_GPIO_Init+0x1f2>
 8004caa:	2304      	movs	r3, #4
 8004cac:	e008      	b.n	8004cc0 <HAL_GPIO_Init+0x204>
 8004cae:	2307      	movs	r3, #7
 8004cb0:	e006      	b.n	8004cc0 <HAL_GPIO_Init+0x204>
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e004      	b.n	8004cc0 <HAL_GPIO_Init+0x204>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e002      	b.n	8004cc0 <HAL_GPIO_Init+0x204>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <HAL_GPIO_Init+0x204>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	f002 0203 	and.w	r2, r2, #3
 8004cc6:	0092      	lsls	r2, r2, #2
 8004cc8:	4093      	lsls	r3, r2
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cd0:	4934      	ldr	r1, [pc, #208]	; (8004da4 <HAL_GPIO_Init+0x2e8>)
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	089b      	lsrs	r3, r3, #2
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cde:	4b37      	ldr	r3, [pc, #220]	; (8004dbc <HAL_GPIO_Init+0x300>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	4013      	ands	r3, r2
 8004cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d02:	4a2e      	ldr	r2, [pc, #184]	; (8004dbc <HAL_GPIO_Init+0x300>)
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d08:	4b2c      	ldr	r3, [pc, #176]	; (8004dbc <HAL_GPIO_Init+0x300>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4013      	ands	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d2c:	4a23      	ldr	r2, [pc, #140]	; (8004dbc <HAL_GPIO_Init+0x300>)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d32:	4b22      	ldr	r3, [pc, #136]	; (8004dbc <HAL_GPIO_Init+0x300>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d56:	4a19      	ldr	r2, [pc, #100]	; (8004dbc <HAL_GPIO_Init+0x300>)
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d5c:	4b17      	ldr	r3, [pc, #92]	; (8004dbc <HAL_GPIO_Init+0x300>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	43db      	mvns	r3, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d80:	4a0e      	ldr	r2, [pc, #56]	; (8004dbc <HAL_GPIO_Init+0x300>)
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	61fb      	str	r3, [r7, #28]
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b0f      	cmp	r3, #15
 8004d90:	f67f aea2 	bls.w	8004ad8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d94:	bf00      	nop
 8004d96:	3724      	adds	r7, #36	; 0x24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40013800 	.word	0x40013800
 8004da8:	40020000 	.word	0x40020000
 8004dac:	40020400 	.word	0x40020400
 8004db0:	40020800 	.word	0x40020800
 8004db4:	40020c00 	.word	0x40020c00
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40013c00 	.word	0x40013c00

08004dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	887b      	ldrh	r3, [r7, #2]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
 8004ddc:	e001      	b.n	8004de2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dde:	2300      	movs	r3, #0
 8004de0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	807b      	strh	r3, [r7, #2]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e00:	787b      	ldrb	r3, [r7, #1]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e06:	887a      	ldrh	r2, [r7, #2]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e0c:	e003      	b.n	8004e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e0e:	887b      	ldrh	r3, [r7, #2]
 8004e10:	041a      	lsls	r2, r3, #16
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	619a      	str	r2, [r3, #24]
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695a      	ldr	r2, [r3, #20]
 8004e32:	887b      	ldrh	r3, [r7, #2]
 8004e34:	401a      	ands	r2, r3
 8004e36:	887b      	ldrh	r3, [r7, #2]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d104      	bne.n	8004e46 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e3c:	887b      	ldrh	r3, [r7, #2]
 8004e3e:	041a      	lsls	r2, r3, #16
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004e44:	e002      	b.n	8004e4c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004e46:	887a      	ldrh	r2, [r7, #2]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	619a      	str	r2, [r3, #24]
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e11f      	b.n	80050aa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fe fdfc 	bl	8003a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2224      	movs	r2, #36	; 0x24
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0201 	bic.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ebc:	f002 fa9a 	bl	80073f4 <HAL_RCC_GetPCLK1Freq>
 8004ec0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4a7b      	ldr	r2, [pc, #492]	; (80050b4 <HAL_I2C_Init+0x25c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d807      	bhi.n	8004edc <HAL_I2C_Init+0x84>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4a7a      	ldr	r2, [pc, #488]	; (80050b8 <HAL_I2C_Init+0x260>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	bf94      	ite	ls
 8004ed4:	2301      	movls	r3, #1
 8004ed6:	2300      	movhi	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e006      	b.n	8004eea <HAL_I2C_Init+0x92>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4a77      	ldr	r2, [pc, #476]	; (80050bc <HAL_I2C_Init+0x264>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	bf94      	ite	ls
 8004ee4:	2301      	movls	r3, #1
 8004ee6:	2300      	movhi	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e0db      	b.n	80050aa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4a72      	ldr	r2, [pc, #456]	; (80050c0 <HAL_I2C_Init+0x268>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	0c9b      	lsrs	r3, r3, #18
 8004efc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	4a64      	ldr	r2, [pc, #400]	; (80050b4 <HAL_I2C_Init+0x25c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d802      	bhi.n	8004f2c <HAL_I2C_Init+0xd4>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	e009      	b.n	8004f40 <HAL_I2C_Init+0xe8>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f32:	fb02 f303 	mul.w	r3, r2, r3
 8004f36:	4a63      	ldr	r2, [pc, #396]	; (80050c4 <HAL_I2C_Init+0x26c>)
 8004f38:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3c:	099b      	lsrs	r3, r3, #6
 8004f3e:	3301      	adds	r3, #1
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	430b      	orrs	r3, r1
 8004f46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	4956      	ldr	r1, [pc, #344]	; (80050b4 <HAL_I2C_Init+0x25c>)
 8004f5c:	428b      	cmp	r3, r1
 8004f5e:	d80d      	bhi.n	8004f7c <HAL_I2C_Init+0x124>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1e59      	subs	r1, r3, #1
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f6e:	3301      	adds	r3, #1
 8004f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	bf38      	it	cc
 8004f78:	2304      	movcc	r3, #4
 8004f7a:	e04f      	b.n	800501c <HAL_I2C_Init+0x1c4>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d111      	bne.n	8004fa8 <HAL_I2C_Init+0x150>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	1e58      	subs	r0, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6859      	ldr	r1, [r3, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	440b      	add	r3, r1
 8004f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f96:	3301      	adds	r3, #1
 8004f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bf0c      	ite	eq
 8004fa0:	2301      	moveq	r3, #1
 8004fa2:	2300      	movne	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	e012      	b.n	8004fce <HAL_I2C_Init+0x176>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	1e58      	subs	r0, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6859      	ldr	r1, [r3, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	0099      	lsls	r1, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2301      	moveq	r3, #1
 8004fca:	2300      	movne	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_I2C_Init+0x17e>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e022      	b.n	800501c <HAL_I2C_Init+0x1c4>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10e      	bne.n	8004ffc <HAL_I2C_Init+0x1a4>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1e58      	subs	r0, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6859      	ldr	r1, [r3, #4]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	440b      	add	r3, r1
 8004fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffa:	e00f      	b.n	800501c <HAL_I2C_Init+0x1c4>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	1e58      	subs	r0, r3, #1
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6859      	ldr	r1, [r3, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	0099      	lsls	r1, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005012:	3301      	adds	r3, #1
 8005014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	6809      	ldr	r1, [r1, #0]
 8005020:	4313      	orrs	r3, r2
 8005022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69da      	ldr	r2, [r3, #28]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800504a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6911      	ldr	r1, [r2, #16]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	68d2      	ldr	r2, [r2, #12]
 8005056:	4311      	orrs	r1, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	430b      	orrs	r3, r1
 800505e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695a      	ldr	r2, [r3, #20]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	000186a0 	.word	0x000186a0
 80050b8:	001e847f 	.word	0x001e847f
 80050bc:	003d08ff 	.word	0x003d08ff
 80050c0:	431bde83 	.word	0x431bde83
 80050c4:	10624dd3 	.word	0x10624dd3

080050c8 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	607a      	str	r2, [r7, #4]
 80050d2:	461a      	mov	r2, r3
 80050d4:	460b      	mov	r3, r1
 80050d6:	817b      	strh	r3, [r7, #10]
 80050d8:	4613      	mov	r3, r2
 80050da:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	f040 8085 	bne.w	80051f8 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80050ee:	4b46      	ldr	r3, [pc, #280]	; (8005208 <HAL_I2C_Master_Transmit_IT+0x140>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	08db      	lsrs	r3, r3, #3
 80050f4:	4a45      	ldr	r2, [pc, #276]	; (800520c <HAL_I2C_Master_Transmit_IT+0x144>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	0a1a      	lsrs	r2, r3, #8
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	009a      	lsls	r2, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	3b01      	subs	r3, #1
 800510c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d116      	bne.n	8005142 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f043 0220 	orr.w	r2, r3, #32
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e05b      	b.n	80051fa <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b02      	cmp	r3, #2
 800514e:	d0db      	beq.n	8005108 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <HAL_I2C_Master_Transmit_IT+0x96>
 800515a:	2302      	movs	r3, #2
 800515c:	e04d      	b.n	80051fa <HAL_I2C_Master_Transmit_IT+0x132>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b01      	cmp	r3, #1
 8005172:	d007      	beq.n	8005184 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005192:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2221      	movs	r2, #33	; 0x21
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2210      	movs	r2, #16
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	893a      	ldrh	r2, [r7, #8]
 80051b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4a13      	ldr	r2, [pc, #76]	; (8005210 <HAL_I2C_Master_Transmit_IT+0x148>)
 80051c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80051c6:	897a      	ldrh	r2, [r7, #10]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051da:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80051f2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80051f4:	2300      	movs	r3, #0
 80051f6:	e000      	b.n	80051fa <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80051f8:	2302      	movs	r3, #2
  }
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	2000004c 	.word	0x2000004c
 800520c:	14f8b589 	.word	0x14f8b589
 8005210:	ffff0000 	.word	0xffff0000

08005214 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005234:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	2b10      	cmp	r3, #16
 8005242:	d003      	beq.n	800524c <HAL_I2C_EV_IRQHandler+0x38>
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	2b40      	cmp	r3, #64	; 0x40
 8005248:	f040 80bd 	bne.w	80053c6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10d      	bne.n	8005282 <HAL_I2C_EV_IRQHandler+0x6e>
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800526c:	d003      	beq.n	8005276 <HAL_I2C_EV_IRQHandler+0x62>
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005274:	d101      	bne.n	800527a <HAL_I2C_EV_IRQHandler+0x66>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <HAL_I2C_EV_IRQHandler+0x68>
 800527a:	2300      	movs	r3, #0
 800527c:	2b01      	cmp	r3, #1
 800527e:	f000 812e 	beq.w	80054de <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00c      	beq.n	80052a6 <HAL_I2C_EV_IRQHandler+0x92>
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	0a5b      	lsrs	r3, r3, #9
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d006      	beq.n	80052a6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f001 fc55 	bl	8006b48 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fd62 	bl	8005d68 <I2C_Master_SB>
 80052a4:	e08e      	b.n	80053c4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	08db      	lsrs	r3, r3, #3
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d009      	beq.n	80052c6 <HAL_I2C_EV_IRQHandler+0xb2>
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	0a5b      	lsrs	r3, r3, #9
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fdd8 	bl	8005e74 <I2C_Master_ADD10>
 80052c4:	e07e      	b.n	80053c4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	085b      	lsrs	r3, r3, #1
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d009      	beq.n	80052e6 <HAL_I2C_EV_IRQHandler+0xd2>
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	0a5b      	lsrs	r3, r3, #9
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fdf2 	bl	8005ec8 <I2C_Master_ADDR>
 80052e4:	e06e      	b.n	80053c4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	089b      	lsrs	r3, r3, #2
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d037      	beq.n	8005362 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005300:	f000 80ef 	beq.w	80054e2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	09db      	lsrs	r3, r3, #7
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00f      	beq.n	8005330 <HAL_I2C_EV_IRQHandler+0x11c>
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	0a9b      	lsrs	r3, r3, #10
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d009      	beq.n	8005330 <HAL_I2C_EV_IRQHandler+0x11c>
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	089b      	lsrs	r3, r3, #2
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d103      	bne.n	8005330 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f9ef 	bl	800570c <I2C_MasterTransmit_TXE>
 800532e:	e049      	b.n	80053c4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	089b      	lsrs	r3, r3, #2
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80d2 	beq.w	80054e2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	0a5b      	lsrs	r3, r3, #9
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 80cb 	beq.w	80054e2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	2b10      	cmp	r3, #16
 8005350:	d103      	bne.n	800535a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fa76 	bl	8005844 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005358:	e0c3      	b.n	80054e2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fada 	bl	8005914 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005360:	e0bf      	b.n	80054e2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800536c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005370:	f000 80b7 	beq.w	80054e2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	099b      	lsrs	r3, r3, #6
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00f      	beq.n	80053a0 <HAL_I2C_EV_IRQHandler+0x18c>
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	0a9b      	lsrs	r3, r3, #10
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d009      	beq.n	80053a0 <HAL_I2C_EV_IRQHandler+0x18c>
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	089b      	lsrs	r3, r3, #2
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d103      	bne.n	80053a0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fb4a 	bl	8005a32 <I2C_MasterReceive_RXNE>
 800539e:	e011      	b.n	80053c4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	089b      	lsrs	r3, r3, #2
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 809a 	beq.w	80054e2 <HAL_I2C_EV_IRQHandler+0x2ce>
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	0a5b      	lsrs	r3, r3, #9
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 8093 	beq.w	80054e2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fbe9 	bl	8005b94 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053c2:	e08e      	b.n	80054e2 <HAL_I2C_EV_IRQHandler+0x2ce>
 80053c4:	e08d      	b.n	80054e2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d004      	beq.n	80053d8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	e007      	b.n	80053e8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	085b      	lsrs	r3, r3, #1
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d012      	beq.n	800541a <HAL_I2C_EV_IRQHandler+0x206>
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	0a5b      	lsrs	r3, r3, #9
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00c      	beq.n	800541a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005410:	69b9      	ldr	r1, [r7, #24]
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 ffa7 	bl	8006366 <I2C_Slave_ADDR>
 8005418:	e066      	b.n	80054e8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	091b      	lsrs	r3, r3, #4
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <HAL_I2C_EV_IRQHandler+0x226>
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	0a5b      	lsrs	r3, r3, #9
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 ffdc 	bl	80063f0 <I2C_Slave_STOPF>
 8005438:	e056      	b.n	80054e8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800543a:	7bbb      	ldrb	r3, [r7, #14]
 800543c:	2b21      	cmp	r3, #33	; 0x21
 800543e:	d002      	beq.n	8005446 <HAL_I2C_EV_IRQHandler+0x232>
 8005440:	7bbb      	ldrb	r3, [r7, #14]
 8005442:	2b29      	cmp	r3, #41	; 0x29
 8005444:	d125      	bne.n	8005492 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	09db      	lsrs	r3, r3, #7
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00f      	beq.n	8005472 <HAL_I2C_EV_IRQHandler+0x25e>
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	0a9b      	lsrs	r3, r3, #10
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d009      	beq.n	8005472 <HAL_I2C_EV_IRQHandler+0x25e>
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	089b      	lsrs	r3, r3, #2
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d103      	bne.n	8005472 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 febd 	bl	80061ea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005470:	e039      	b.n	80054e6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	089b      	lsrs	r3, r3, #2
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d033      	beq.n	80054e6 <HAL_I2C_EV_IRQHandler+0x2d2>
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	0a5b      	lsrs	r3, r3, #9
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d02d      	beq.n	80054e6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 feea 	bl	8006264 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005490:	e029      	b.n	80054e6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	099b      	lsrs	r3, r3, #6
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00f      	beq.n	80054be <HAL_I2C_EV_IRQHandler+0x2aa>
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	0a9b      	lsrs	r3, r3, #10
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <HAL_I2C_EV_IRQHandler+0x2aa>
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	089b      	lsrs	r3, r3, #2
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d103      	bne.n	80054be <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fef5 	bl	80062a6 <I2C_SlaveReceive_RXNE>
 80054bc:	e014      	b.n	80054e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	089b      	lsrs	r3, r3, #2
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00e      	beq.n	80054e8 <HAL_I2C_EV_IRQHandler+0x2d4>
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	0a5b      	lsrs	r3, r3, #9
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d008      	beq.n	80054e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 ff23 	bl	8006322 <I2C_SlaveReceive_BTF>
 80054dc:	e004      	b.n	80054e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80054de:	bf00      	nop
 80054e0:	e002      	b.n	80054e8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054e2:	bf00      	nop
 80054e4:	e000      	b.n	80054e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054e6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80054e8:	3720      	adds	r7, #32
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b08a      	sub	sp, #40	; 0x28
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005506:	2300      	movs	r3, #0
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005510:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	0a1b      	lsrs	r3, r3, #8
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00e      	beq.n	800553c <HAL_I2C_ER_IRQHandler+0x4e>
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	0a1b      	lsrs	r3, r3, #8
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d008      	beq.n	800553c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	f043 0301 	orr.w	r3, r3, #1
 8005530:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800553a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	0a5b      	lsrs	r3, r3, #9
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00e      	beq.n	8005566 <HAL_I2C_ER_IRQHandler+0x78>
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	0a1b      	lsrs	r3, r3, #8
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d008      	beq.n	8005566 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	f043 0302 	orr.w	r3, r3, #2
 800555a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005564:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	0a9b      	lsrs	r3, r3, #10
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d03f      	beq.n	80055f2 <HAL_I2C_ER_IRQHandler+0x104>
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	0a1b      	lsrs	r3, r3, #8
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d039      	beq.n	80055f2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800557e:	7efb      	ldrb	r3, [r7, #27]
 8005580:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005586:	b29b      	uxth	r3, r3
 8005588:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005590:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005598:	7ebb      	ldrb	r3, [r7, #26]
 800559a:	2b20      	cmp	r3, #32
 800559c:	d112      	bne.n	80055c4 <HAL_I2C_ER_IRQHandler+0xd6>
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10f      	bne.n	80055c4 <HAL_I2C_ER_IRQHandler+0xd6>
 80055a4:	7cfb      	ldrb	r3, [r7, #19]
 80055a6:	2b21      	cmp	r3, #33	; 0x21
 80055a8:	d008      	beq.n	80055bc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80055aa:	7cfb      	ldrb	r3, [r7, #19]
 80055ac:	2b29      	cmp	r3, #41	; 0x29
 80055ae:	d005      	beq.n	80055bc <HAL_I2C_ER_IRQHandler+0xce>
 80055b0:	7cfb      	ldrb	r3, [r7, #19]
 80055b2:	2b28      	cmp	r3, #40	; 0x28
 80055b4:	d106      	bne.n	80055c4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b21      	cmp	r3, #33	; 0x21
 80055ba:	d103      	bne.n	80055c4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f001 f847 	bl	8006650 <I2C_Slave_AF>
 80055c2:	e016      	b.n	80055f2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055cc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	f043 0304 	orr.w	r3, r3, #4
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80055d6:	7efb      	ldrb	r3, [r7, #27]
 80055d8:	2b10      	cmp	r3, #16
 80055da:	d002      	beq.n	80055e2 <HAL_I2C_ER_IRQHandler+0xf4>
 80055dc:	7efb      	ldrb	r3, [r7, #27]
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d107      	bne.n	80055f2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	0adb      	lsrs	r3, r3, #11
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00e      	beq.n	800561c <HAL_I2C_ER_IRQHandler+0x12e>
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	0a1b      	lsrs	r3, r3, #8
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d008      	beq.n	800561c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	f043 0308 	orr.w	r3, r3, #8
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800561a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	d008      	beq.n	8005634 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f001 f87e 	bl	8006730 <I2C_ITError>
  }
}
 8005634:	bf00      	nop
 8005636:	3728      	adds	r7, #40	; 0x28
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	70fb      	strb	r3, [r7, #3]
 8005698:	4613      	mov	r3, r2
 800569a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005722:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800572e:	2b00      	cmp	r3, #0
 8005730:	d150      	bne.n	80057d4 <I2C_MasterTransmit_TXE+0xc8>
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	2b21      	cmp	r3, #33	; 0x21
 8005736:	d14d      	bne.n	80057d4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b08      	cmp	r3, #8
 800573c:	d01d      	beq.n	800577a <I2C_MasterTransmit_TXE+0x6e>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b20      	cmp	r3, #32
 8005742:	d01a      	beq.n	800577a <I2C_MasterTransmit_TXE+0x6e>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800574a:	d016      	beq.n	800577a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800575a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2211      	movs	r2, #17
 8005760:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2220      	movs	r2, #32
 800576e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff ff62 	bl	800563c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005778:	e060      	b.n	800583c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005788:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005798:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d107      	bne.n	80057c4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff ff7d 	bl	80056bc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057c2:	e03b      	b.n	800583c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff ff35 	bl	800563c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057d2:	e033      	b.n	800583c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	2b21      	cmp	r3, #33	; 0x21
 80057d8:	d005      	beq.n	80057e6 <I2C_MasterTransmit_TXE+0xda>
 80057da:	7bbb      	ldrb	r3, [r7, #14]
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d12d      	bne.n	800583c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	2b22      	cmp	r3, #34	; 0x22
 80057e4:	d12a      	bne.n	800583c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d108      	bne.n	8005802 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057fe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005800:	e01c      	b.n	800583c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b40      	cmp	r3, #64	; 0x40
 800580c:	d103      	bne.n	8005816 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f880 	bl	8005914 <I2C_MemoryTransmit_TXE_BTF>
}
 8005814:	e012      	b.n	800583c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	781a      	ldrb	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800583a:	e7ff      	b.n	800583c <I2C_MasterTransmit_TXE+0x130>
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b21      	cmp	r3, #33	; 0x21
 800585c:	d156      	bne.n	800590c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d012      	beq.n	800588e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	781a      	ldrb	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005882:	b29b      	uxth	r3, r3
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800588c:	e03e      	b.n	800590c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b08      	cmp	r3, #8
 8005892:	d01d      	beq.n	80058d0 <I2C_MasterTransmit_BTF+0x8c>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b20      	cmp	r3, #32
 8005898:	d01a      	beq.n	80058d0 <I2C_MasterTransmit_BTF+0x8c>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058a0:	d016      	beq.n	80058d0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058b0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2211      	movs	r2, #17
 80058b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff feb7 	bl	800563c <HAL_I2C_MasterTxCpltCallback>
}
 80058ce:	e01d      	b.n	800590c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff fe98 	bl	800563c <HAL_I2C_MasterTxCpltCallback>
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005922:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005928:	2b00      	cmp	r3, #0
 800592a:	d11d      	bne.n	8005968 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d10b      	bne.n	800594c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005938:	b2da      	uxtb	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005944:	1c9a      	adds	r2, r3, #2
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800594a:	e06e      	b.n	8005a2a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005950:	b29b      	uxth	r3, r3
 8005952:	121b      	asrs	r3, r3, #8
 8005954:	b2da      	uxtb	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005966:	e060      	b.n	8005a2a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800596c:	2b01      	cmp	r3, #1
 800596e:	d10b      	bne.n	8005988 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005974:	b2da      	uxtb	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005986:	e050      	b.n	8005a2a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598c:	2b02      	cmp	r3, #2
 800598e:	d14c      	bne.n	8005a2a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	2b22      	cmp	r3, #34	; 0x22
 8005994:	d108      	bne.n	80059a8 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059a4:	601a      	str	r2, [r3, #0]
}
 80059a6:	e040      	b.n	8005a2a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d015      	beq.n	80059de <I2C_MemoryTransmit_TXE_BTF+0xca>
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	2b21      	cmp	r3, #33	; 0x21
 80059b6:	d112      	bne.n	80059de <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	781a      	ldrb	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80059dc:	e025      	b.n	8005a2a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d120      	bne.n	8005a2a <I2C_MemoryTransmit_TXE_BTF+0x116>
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b21      	cmp	r3, #33	; 0x21
 80059ec:	d11d      	bne.n	8005a2a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059fc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a0c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff fe49 	bl	80056bc <HAL_I2C_MemTxCpltCallback>
}
 8005a2a:	bf00      	nop
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b22      	cmp	r3, #34	; 0x22
 8005a44:	f040 80a2 	bne.w	8005b8c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d921      	bls.n	8005a9a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	f040 8082 	bne.w	8005b8c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a96:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005a98:	e078      	b.n	8005b8c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d074      	beq.n	8005b8c <I2C_MasterReceive_RXNE+0x15a>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d002      	beq.n	8005aae <I2C_MasterReceive_RXNE+0x7c>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d16e      	bne.n	8005b8c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f001 f818 	bl	8006ae4 <I2C_WaitOnSTOPRequestThroughIT>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d142      	bne.n	8005b40 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ac8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ad8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b40      	cmp	r3, #64	; 0x40
 8005b12:	d10a      	bne.n	8005b2a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7ff fdd4 	bl	80056d0 <HAL_I2C_MemRxCpltCallback>
}
 8005b28:	e030      	b.n	8005b8c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2212      	movs	r2, #18
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff fd89 	bl	8005650 <HAL_I2C_MasterRxCpltCallback>
}
 8005b3e:	e025      	b.n	8005b8c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b4e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff fdac 	bl	80056e4 <HAL_I2C_ErrorCallback>
}
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d11b      	bne.n	8005be4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bba:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005be2:	e0bd      	b.n	8005d60 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d129      	bne.n	8005c42 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bfc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d00a      	beq.n	8005c1a <I2C_MasterReceive_BTF+0x86>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d007      	beq.n	8005c1a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c18:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c40:	e08e      	b.n	8005d60 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d176      	bne.n	8005d3a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d002      	beq.n	8005c58 <I2C_MasterReceive_BTF+0xc4>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b10      	cmp	r3, #16
 8005c56:	d108      	bne.n	8005c6a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	e019      	b.n	8005c9e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d002      	beq.n	8005c76 <I2C_MasterReceive_BTF+0xe2>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d108      	bne.n	8005c88 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	e00a      	b.n	8005c9e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d007      	beq.n	8005c9e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c9c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005cf8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d10a      	bne.n	8005d24 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff fcd7 	bl	80056d0 <HAL_I2C_MemRxCpltCallback>
}
 8005d22:	e01d      	b.n	8005d60 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2212      	movs	r2, #18
 8005d30:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff fc8c 	bl	8005650 <HAL_I2C_MasterRxCpltCallback>
}
 8005d38:	e012      	b.n	8005d60 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b40      	cmp	r3, #64	; 0x40
 8005d7a:	d117      	bne.n	8005dac <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d109      	bne.n	8005d98 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d94:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005d96:	e067      	b.n	8005e68 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	f043 0301 	orr.w	r3, r3, #1
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	611a      	str	r2, [r3, #16]
}
 8005daa:	e05d      	b.n	8005e68 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005db4:	d133      	bne.n	8005e1e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b21      	cmp	r3, #33	; 0x21
 8005dc0:	d109      	bne.n	8005dd6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005dd2:	611a      	str	r2, [r3, #16]
 8005dd4:	e008      	b.n	8005de8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	f043 0301 	orr.w	r3, r3, #1
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d004      	beq.n	8005dfa <I2C_Master_SB+0x92>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d108      	bne.n	8005e0c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d032      	beq.n	8005e68 <I2C_Master_SB+0x100>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d02d      	beq.n	8005e68 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e1a:	605a      	str	r2, [r3, #4]
}
 8005e1c:	e024      	b.n	8005e68 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10e      	bne.n	8005e44 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	11db      	asrs	r3, r3, #7
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f003 0306 	and.w	r3, r3, #6
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	f063 030f 	orn	r3, r3, #15
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	611a      	str	r2, [r3, #16]
}
 8005e42:	e011      	b.n	8005e68 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d10d      	bne.n	8005e68 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	11db      	asrs	r3, r3, #7
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	f003 0306 	and.w	r3, r3, #6
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f063 030e 	orn	r3, r3, #14
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	611a      	str	r2, [r3, #16]
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d103      	bne.n	8005e98 <I2C_Master_ADD10+0x24>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d011      	beq.n	8005ebc <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <I2C_Master_ADD10+0x38>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eba:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b091      	sub	sp, #68	; 0x44
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ed6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ede:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b22      	cmp	r3, #34	; 0x22
 8005ef0:	f040 8169 	bne.w	80061c6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10f      	bne.n	8005f1c <I2C_Master_ADDR+0x54>
 8005efc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f00:	2b40      	cmp	r3, #64	; 0x40
 8005f02:	d10b      	bne.n	8005f1c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f04:	2300      	movs	r3, #0
 8005f06:	633b      	str	r3, [r7, #48]	; 0x30
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	633b      	str	r3, [r7, #48]	; 0x30
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	e160      	b.n	80061de <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d11d      	bne.n	8005f60 <I2C_Master_ADDR+0x98>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f2c:	d118      	bne.n	8005f60 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f52:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	651a      	str	r2, [r3, #80]	; 0x50
 8005f5e:	e13e      	b.n	80061de <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d113      	bne.n	8005f92 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	e115      	b.n	80061be <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	f040 808a 	bne.w	80060b2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fa4:	d137      	bne.n	8006016 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fb4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fc4:	d113      	bne.n	8005fee <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	e0e7      	b.n	80061be <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	623b      	str	r3, [r7, #32]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	623b      	str	r3, [r7, #32]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	623b      	str	r3, [r7, #32]
 8006002:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	e0d3      	b.n	80061be <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	2b08      	cmp	r3, #8
 800601a:	d02e      	beq.n	800607a <I2C_Master_ADDR+0x1b2>
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	2b20      	cmp	r3, #32
 8006020:	d02b      	beq.n	800607a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006024:	2b12      	cmp	r3, #18
 8006026:	d102      	bne.n	800602e <I2C_Master_ADDR+0x166>
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	2b01      	cmp	r3, #1
 800602c:	d125      	bne.n	800607a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	2b04      	cmp	r3, #4
 8006032:	d00e      	beq.n	8006052 <I2C_Master_ADDR+0x18a>
 8006034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006036:	2b02      	cmp	r3, #2
 8006038:	d00b      	beq.n	8006052 <I2C_Master_ADDR+0x18a>
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	2b10      	cmp	r3, #16
 800603e:	d008      	beq.n	8006052 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	e007      	b.n	8006062 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006060:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006062:	2300      	movs	r3, #0
 8006064:	61fb      	str	r3, [r7, #28]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	61fb      	str	r3, [r7, #28]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	61fb      	str	r3, [r7, #28]
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	e0a1      	b.n	80061be <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006088:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800608a:	2300      	movs	r3, #0
 800608c:	61bb      	str	r3, [r7, #24]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	61bb      	str	r3, [r7, #24]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	e085      	b.n	80061be <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d14d      	bne.n	8006158 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d016      	beq.n	80060f0 <I2C_Master_ADDR+0x228>
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d013      	beq.n	80060f0 <I2C_Master_ADDR+0x228>
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	2b10      	cmp	r3, #16
 80060cc:	d010      	beq.n	80060f0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060dc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	e007      	b.n	8006100 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060fe:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800610a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800610e:	d117      	bne.n	8006140 <I2C_Master_ADDR+0x278>
 8006110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006112:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006116:	d00b      	beq.n	8006130 <I2C_Master_ADDR+0x268>
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	2b01      	cmp	r3, #1
 800611c:	d008      	beq.n	8006130 <I2C_Master_ADDR+0x268>
 800611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006120:	2b08      	cmp	r3, #8
 8006122:	d005      	beq.n	8006130 <I2C_Master_ADDR+0x268>
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	2b10      	cmp	r3, #16
 8006128:	d002      	beq.n	8006130 <I2C_Master_ADDR+0x268>
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	2b20      	cmp	r3, #32
 800612e:	d107      	bne.n	8006140 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800613e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	e032      	b.n	80061be <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006166:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006176:	d117      	bne.n	80061a8 <I2C_Master_ADDR+0x2e0>
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800617e:	d00b      	beq.n	8006198 <I2C_Master_ADDR+0x2d0>
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	2b01      	cmp	r3, #1
 8006184:	d008      	beq.n	8006198 <I2C_Master_ADDR+0x2d0>
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	2b08      	cmp	r3, #8
 800618a:	d005      	beq.n	8006198 <I2C_Master_ADDR+0x2d0>
 800618c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618e:	2b10      	cmp	r3, #16
 8006190:	d002      	beq.n	8006198 <I2C_Master_ADDR+0x2d0>
 8006192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006194:	2b20      	cmp	r3, #32
 8006196:	d107      	bne.n	80061a8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061a6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061a8:	2300      	movs	r3, #0
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80061c4:	e00b      	b.n	80061de <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	60fb      	str	r3, [r7, #12]
 80061da:	68fb      	ldr	r3, [r7, #12]
}
 80061dc:	e7ff      	b.n	80061de <I2C_Master_ADDR+0x316>
 80061de:	bf00      	nop
 80061e0:	3744      	adds	r7, #68	; 0x44
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d02b      	beq.n	800625c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	781a      	ldrb	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d114      	bne.n	800625c <I2C_SlaveTransmit_TXE+0x72>
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	2b29      	cmp	r3, #41	; 0x29
 8006236:	d111      	bne.n	800625c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006246:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2221      	movs	r2, #33	; 0x21
 800624c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2228      	movs	r2, #40	; 0x28
 8006252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff fa04 	bl	8005664 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d011      	beq.n	800629a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	781a      	ldrb	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d02c      	beq.n	800631a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691a      	ldr	r2, [r3, #16]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d114      	bne.n	800631a <I2C_SlaveReceive_RXNE+0x74>
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	2b2a      	cmp	r3, #42	; 0x2a
 80062f4:	d111      	bne.n	800631a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006304:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2222      	movs	r2, #34	; 0x22
 800630a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2228      	movs	r2, #40	; 0x28
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff f9af 	bl	8005678 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800631a:	bf00      	nop
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d012      	beq.n	800635a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691a      	ldr	r2, [r3, #16]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006350:	b29b      	uxth	r3, r3
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006370:	2300      	movs	r3, #0
 8006372:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800637a:	b2db      	uxtb	r3, r3
 800637c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006380:	2b28      	cmp	r3, #40	; 0x28
 8006382:	d127      	bne.n	80063d4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006392:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	089b      	lsrs	r3, r3, #2
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80063a0:	2301      	movs	r3, #1
 80063a2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	09db      	lsrs	r3, r3, #7
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d103      	bne.n	80063b8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	81bb      	strh	r3, [r7, #12]
 80063b6:	e002      	b.n	80063be <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80063c6:	89ba      	ldrh	r2, [r7, #12]
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7ff f95d 	bl	800568c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80063d2:	e008      	b.n	80063e6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0202 	mvn.w	r2, #2
 80063dc:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800640e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006410:	2300      	movs	r3, #0
 8006412:	60bb      	str	r3, [r7, #8]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	60bb      	str	r3, [r7, #8]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800643c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800644c:	d172      	bne.n	8006534 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800644e:	7bfb      	ldrb	r3, [r7, #15]
 8006450:	2b22      	cmp	r3, #34	; 0x22
 8006452:	d002      	beq.n	800645a <I2C_Slave_STOPF+0x6a>
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	2b2a      	cmp	r3, #42	; 0x2a
 8006458:	d135      	bne.n	80064c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	b29a      	uxth	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f043 0204 	orr.w	r2, r3, #4
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800648c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fa26 	bl	80048e4 <HAL_DMA_GetState>
 8006498:	4603      	mov	r3, r0
 800649a:	2b01      	cmp	r3, #1
 800649c:	d049      	beq.n	8006532 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	4a69      	ldr	r2, [pc, #420]	; (8006648 <I2C_Slave_STOPF+0x258>)
 80064a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fe f86e 	bl	800458c <HAL_DMA_Abort_IT>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d03d      	beq.n	8006532 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064c0:	4610      	mov	r0, r2
 80064c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064c4:	e035      	b.n	8006532 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d005      	beq.n	80064ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f043 0204 	orr.w	r2, r3, #4
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe f9f0 	bl	80048e4 <HAL_DMA_GetState>
 8006504:	4603      	mov	r3, r0
 8006506:	2b01      	cmp	r3, #1
 8006508:	d014      	beq.n	8006534 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650e:	4a4e      	ldr	r2, [pc, #312]	; (8006648 <I2C_Slave_STOPF+0x258>)
 8006510:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe f838 	bl	800458c <HAL_DMA_Abort_IT>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d008      	beq.n	8006534 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800652c:	4610      	mov	r0, r2
 800652e:	4798      	blx	r3
 8006530:	e000      	b.n	8006534 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006532:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d03e      	beq.n	80065bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b04      	cmp	r3, #4
 800654a:	d112      	bne.n	8006572 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691a      	ldr	r2, [r3, #16]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006568:	b29b      	uxth	r3, r3
 800656a:	3b01      	subs	r3, #1
 800656c:	b29a      	uxth	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657c:	2b40      	cmp	r3, #64	; 0x40
 800657e:	d112      	bne.n	80065a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b4:	f043 0204 	orr.w	r2, r3, #4
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f8b3 	bl	8006730 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80065ca:	e039      	b.n	8006640 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
 80065ce:	2b2a      	cmp	r3, #42	; 0x2a
 80065d0:	d109      	bne.n	80065e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2228      	movs	r2, #40	; 0x28
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff f849 	bl	8005678 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b28      	cmp	r3, #40	; 0x28
 80065f0:	d111      	bne.n	8006616 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a15      	ldr	r2, [pc, #84]	; (800664c <I2C_Slave_STOPF+0x25c>)
 80065f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7ff f84a 	bl	80056a8 <HAL_I2C_ListenCpltCallback>
}
 8006614:	e014      	b.n	8006640 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	2b22      	cmp	r3, #34	; 0x22
 800661c:	d002      	beq.n	8006624 <I2C_Slave_STOPF+0x234>
 800661e:	7bfb      	ldrb	r3, [r7, #15]
 8006620:	2b22      	cmp	r3, #34	; 0x22
 8006622:	d10d      	bne.n	8006640 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2220      	movs	r2, #32
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff f81c 	bl	8005678 <HAL_I2C_SlaveRxCpltCallback>
}
 8006640:	bf00      	nop
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	08006995 	.word	0x08006995
 800664c:	ffff0000 	.word	0xffff0000

08006650 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b08      	cmp	r3, #8
 800666a:	d002      	beq.n	8006672 <I2C_Slave_AF+0x22>
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2b20      	cmp	r3, #32
 8006670:	d129      	bne.n	80066c6 <I2C_Slave_AF+0x76>
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	2b28      	cmp	r3, #40	; 0x28
 8006676:	d126      	bne.n	80066c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a2c      	ldr	r2, [pc, #176]	; (800672c <I2C_Slave_AF+0xdc>)
 800667c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800668c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006696:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fe fff2 	bl	80056a8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80066c4:	e02e      	b.n	8006724 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	2b21      	cmp	r3, #33	; 0x21
 80066ca:	d126      	bne.n	800671a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a17      	ldr	r2, [pc, #92]	; (800672c <I2C_Slave_AF+0xdc>)
 80066d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2221      	movs	r2, #33	; 0x21
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006700:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006710:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7fe ffa6 	bl	8005664 <HAL_I2C_SlaveTxCpltCallback>
}
 8006718:	e004      	b.n	8006724 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006722:	615a      	str	r2, [r3, #20]
}
 8006724:	bf00      	nop
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	ffff0000 	.word	0xffff0000

08006730 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800673e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006746:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	2b10      	cmp	r3, #16
 800674c:	d002      	beq.n	8006754 <I2C_ITError+0x24>
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	2b40      	cmp	r3, #64	; 0x40
 8006752:	d10a      	bne.n	800676a <I2C_ITError+0x3a>
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	2b22      	cmp	r3, #34	; 0x22
 8006758:	d107      	bne.n	800676a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006768:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006770:	2b28      	cmp	r3, #40	; 0x28
 8006772:	d107      	bne.n	8006784 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2228      	movs	r2, #40	; 0x28
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006782:	e015      	b.n	80067b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800678e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006792:	d00a      	beq.n	80067aa <I2C_ITError+0x7a>
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	2b60      	cmp	r3, #96	; 0x60
 8006798:	d007      	beq.n	80067aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2220      	movs	r2, #32
 800679e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067be:	d162      	bne.n	8006886 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d020      	beq.n	8006820 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e2:	4a6a      	ldr	r2, [pc, #424]	; (800698c <I2C_ITError+0x25c>)
 80067e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fd fece 	bl	800458c <HAL_DMA_Abort_IT>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 8089 	beq.w	800690a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0201 	bic.w	r2, r2, #1
 8006806:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800681a:	4610      	mov	r0, r2
 800681c:	4798      	blx	r3
 800681e:	e074      	b.n	800690a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006824:	4a59      	ldr	r2, [pc, #356]	; (800698c <I2C_ITError+0x25c>)
 8006826:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	4618      	mov	r0, r3
 800682e:	f7fd fead 	bl	800458c <HAL_DMA_Abort_IT>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d068      	beq.n	800690a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d10b      	bne.n	800685e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691a      	ldr	r2, [r3, #16]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0201 	bic.w	r2, r2, #1
 800686c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006880:	4610      	mov	r0, r2
 8006882:	4798      	blx	r3
 8006884:	e041      	b.n	800690a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b60      	cmp	r3, #96	; 0x60
 8006890:	d125      	bne.n	80068de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068aa:	2b40      	cmp	r3, #64	; 0x40
 80068ac:	d10b      	bne.n	80068c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0201 	bic.w	r2, r2, #1
 80068d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7fe ff0e 	bl	80056f8 <HAL_I2C_AbortCpltCallback>
 80068dc:	e015      	b.n	800690a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e8:	2b40      	cmp	r3, #64	; 0x40
 80068ea:	d10b      	bne.n	8006904 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	691a      	ldr	r2, [r3, #16]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7fe feed 	bl	80056e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10e      	bne.n	8006938 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006920:	2b00      	cmp	r3, #0
 8006922:	d109      	bne.n	8006938 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800692a:	2b00      	cmp	r3, #0
 800692c:	d104      	bne.n	8006938 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006934:	2b00      	cmp	r3, #0
 8006936:	d007      	beq.n	8006948 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006946:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b04      	cmp	r3, #4
 800695a:	d113      	bne.n	8006984 <I2C_ITError+0x254>
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	2b28      	cmp	r3, #40	; 0x28
 8006960:	d110      	bne.n	8006984 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a0a      	ldr	r2, [pc, #40]	; (8006990 <I2C_ITError+0x260>)
 8006966:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2220      	movs	r2, #32
 8006972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fe fe92 	bl	80056a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006984:	bf00      	nop
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	08006995 	.word	0x08006995
 8006990:	ffff0000 	.word	0xffff0000

08006994 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80069ae:	4b4b      	ldr	r3, [pc, #300]	; (8006adc <I2C_DMAAbort+0x148>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	08db      	lsrs	r3, r3, #3
 80069b4:	4a4a      	ldr	r2, [pc, #296]	; (8006ae0 <I2C_DMAAbort+0x14c>)
 80069b6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ba:	0a1a      	lsrs	r2, r3, #8
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	00da      	lsls	r2, r3, #3
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d106      	bne.n	80069dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	f043 0220 	orr.w	r2, r3, #32
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80069da:	e00a      	b.n	80069f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3b01      	subs	r3, #1
 80069e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069f0:	d0ea      	beq.n	80069c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fe:	2200      	movs	r2, #0
 8006a00:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	2200      	movs	r2, #0
 8006a10:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a20:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2200      	movs	r2, #0
 8006a26:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a34:	2200      	movs	r2, #0
 8006a36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	2200      	movs	r2, #0
 8006a46:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0201 	bic.w	r2, r2, #1
 8006a56:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b60      	cmp	r3, #96	; 0x60
 8006a62:	d10e      	bne.n	8006a82 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2200      	movs	r2, #0
 8006a78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a7a:	6978      	ldr	r0, [r7, #20]
 8006a7c:	f7fe fe3c 	bl	80056f8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a80:	e027      	b.n	8006ad2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a82:	7cfb      	ldrb	r3, [r7, #19]
 8006a84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a88:	2b28      	cmp	r3, #40	; 0x28
 8006a8a:	d117      	bne.n	8006abc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 0201 	orr.w	r2, r2, #1
 8006a9a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006aaa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2228      	movs	r2, #40	; 0x28
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006aba:	e007      	b.n	8006acc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006acc:	6978      	ldr	r0, [r7, #20]
 8006ace:	f7fe fe09 	bl	80056e4 <HAL_I2C_ErrorCallback>
}
 8006ad2:	bf00      	nop
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	2000004c 	.word	0x2000004c
 8006ae0:	14f8b589 	.word	0x14f8b589

08006ae4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006af0:	4b13      	ldr	r3, [pc, #76]	; (8006b40 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	08db      	lsrs	r3, r3, #3
 8006af6:	4a13      	ldr	r2, [pc, #76]	; (8006b44 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006af8:	fba2 2303 	umull	r2, r3, r2, r3
 8006afc:	0a1a      	lsrs	r2, r3, #8
 8006afe:	4613      	mov	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d107      	bne.n	8006b22 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	f043 0220 	orr.w	r2, r3, #32
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e008      	b.n	8006b34 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b30:	d0e9      	beq.n	8006b06 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	2000004c 	.word	0x2000004c
 8006b44:	14f8b589 	.word	0x14f8b589

08006b48 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006b58:	d103      	bne.n	8006b62 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b60:	e007      	b.n	8006b72 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b66:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006b6a:	d102      	bne.n	8006b72 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2208      	movs	r2, #8
 8006b70:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
	...

08006b80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e25b      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d075      	beq.n	8006c8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b9e:	4ba3      	ldr	r3, [pc, #652]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 030c 	and.w	r3, r3, #12
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d00c      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006baa:	4ba0      	ldr	r3, [pc, #640]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bb2:	2b08      	cmp	r3, #8
 8006bb4:	d112      	bne.n	8006bdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bb6:	4b9d      	ldr	r3, [pc, #628]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bc2:	d10b      	bne.n	8006bdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bc4:	4b99      	ldr	r3, [pc, #612]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d05b      	beq.n	8006c88 <HAL_RCC_OscConfig+0x108>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d157      	bne.n	8006c88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e236      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006be4:	d106      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x74>
 8006be6:	4b91      	ldr	r3, [pc, #580]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a90      	ldr	r2, [pc, #576]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	e01d      	b.n	8006c30 <HAL_RCC_OscConfig+0xb0>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bfc:	d10c      	bne.n	8006c18 <HAL_RCC_OscConfig+0x98>
 8006bfe:	4b8b      	ldr	r3, [pc, #556]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a8a      	ldr	r2, [pc, #552]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	4b88      	ldr	r3, [pc, #544]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a87      	ldr	r2, [pc, #540]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	e00b      	b.n	8006c30 <HAL_RCC_OscConfig+0xb0>
 8006c18:	4b84      	ldr	r3, [pc, #528]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a83      	ldr	r2, [pc, #524]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	4b81      	ldr	r3, [pc, #516]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a80      	ldr	r2, [pc, #512]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d013      	beq.n	8006c60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c38:	f7fd fa62 	bl	8004100 <HAL_GetTick>
 8006c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c3e:	e008      	b.n	8006c52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c40:	f7fd fa5e 	bl	8004100 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b64      	cmp	r3, #100	; 0x64
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e1fb      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c52:	4b76      	ldr	r3, [pc, #472]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0f0      	beq.n	8006c40 <HAL_RCC_OscConfig+0xc0>
 8006c5e:	e014      	b.n	8006c8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c60:	f7fd fa4e 	bl	8004100 <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c68:	f7fd fa4a 	bl	8004100 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b64      	cmp	r3, #100	; 0x64
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e1e7      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c7a:	4b6c      	ldr	r3, [pc, #432]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f0      	bne.n	8006c68 <HAL_RCC_OscConfig+0xe8>
 8006c86:	e000      	b.n	8006c8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d063      	beq.n	8006d5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c96:	4b65      	ldr	r3, [pc, #404]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 030c 	and.w	r3, r3, #12
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00b      	beq.n	8006cba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ca2:	4b62      	ldr	r3, [pc, #392]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d11c      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cae:	4b5f      	ldr	r3, [pc, #380]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d116      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cba:	4b5c      	ldr	r3, [pc, #368]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x152>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d001      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e1bb      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd2:	4b56      	ldr	r3, [pc, #344]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	4952      	ldr	r1, [pc, #328]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ce6:	e03a      	b.n	8006d5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d020      	beq.n	8006d32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cf0:	4b4f      	ldr	r3, [pc, #316]	; (8006e30 <HAL_RCC_OscConfig+0x2b0>)
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf6:	f7fd fa03 	bl	8004100 <HAL_GetTick>
 8006cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cfc:	e008      	b.n	8006d10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cfe:	f7fd f9ff 	bl	8004100 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e19c      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d10:	4b46      	ldr	r3, [pc, #280]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0f0      	beq.n	8006cfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d1c:	4b43      	ldr	r3, [pc, #268]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	4940      	ldr	r1, [pc, #256]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	600b      	str	r3, [r1, #0]
 8006d30:	e015      	b.n	8006d5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d32:	4b3f      	ldr	r3, [pc, #252]	; (8006e30 <HAL_RCC_OscConfig+0x2b0>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d38:	f7fd f9e2 	bl	8004100 <HAL_GetTick>
 8006d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d3e:	e008      	b.n	8006d52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d40:	f7fd f9de 	bl	8004100 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d901      	bls.n	8006d52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e17b      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d52:	4b36      	ldr	r3, [pc, #216]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1f0      	bne.n	8006d40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0308 	and.w	r3, r3, #8
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d030      	beq.n	8006dcc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d016      	beq.n	8006da0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d72:	4b30      	ldr	r3, [pc, #192]	; (8006e34 <HAL_RCC_OscConfig+0x2b4>)
 8006d74:	2201      	movs	r2, #1
 8006d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d78:	f7fd f9c2 	bl	8004100 <HAL_GetTick>
 8006d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d80:	f7fd f9be 	bl	8004100 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e15b      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d92:	4b26      	ldr	r3, [pc, #152]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0f0      	beq.n	8006d80 <HAL_RCC_OscConfig+0x200>
 8006d9e:	e015      	b.n	8006dcc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006da0:	4b24      	ldr	r3, [pc, #144]	; (8006e34 <HAL_RCC_OscConfig+0x2b4>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006da6:	f7fd f9ab 	bl	8004100 <HAL_GetTick>
 8006daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dae:	f7fd f9a7 	bl	8004100 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e144      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dc0:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1f0      	bne.n	8006dae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 80a0 	beq.w	8006f1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dde:	4b13      	ldr	r3, [pc, #76]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10f      	bne.n	8006e0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dea:	2300      	movs	r3, #0
 8006dec:	60bb      	str	r3, [r7, #8]
 8006dee:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	4a0e      	ldr	r2, [pc, #56]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df8:	6413      	str	r3, [r2, #64]	; 0x40
 8006dfa:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <HAL_RCC_OscConfig+0x2ac>)
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e02:	60bb      	str	r3, [r7, #8]
 8006e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e06:	2301      	movs	r3, #1
 8006e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e0a:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <HAL_RCC_OscConfig+0x2b8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d121      	bne.n	8006e5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e16:	4b08      	ldr	r3, [pc, #32]	; (8006e38 <HAL_RCC_OscConfig+0x2b8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a07      	ldr	r2, [pc, #28]	; (8006e38 <HAL_RCC_OscConfig+0x2b8>)
 8006e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e22:	f7fd f96d 	bl	8004100 <HAL_GetTick>
 8006e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e28:	e011      	b.n	8006e4e <HAL_RCC_OscConfig+0x2ce>
 8006e2a:	bf00      	nop
 8006e2c:	40023800 	.word	0x40023800
 8006e30:	42470000 	.word	0x42470000
 8006e34:	42470e80 	.word	0x42470e80
 8006e38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e3c:	f7fd f960 	bl	8004100 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e0fd      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e4e:	4b81      	ldr	r3, [pc, #516]	; (8007054 <HAL_RCC_OscConfig+0x4d4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f0      	beq.n	8006e3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d106      	bne.n	8006e70 <HAL_RCC_OscConfig+0x2f0>
 8006e62:	4b7d      	ldr	r3, [pc, #500]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e66:	4a7c      	ldr	r2, [pc, #496]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006e68:	f043 0301 	orr.w	r3, r3, #1
 8006e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e6e:	e01c      	b.n	8006eaa <HAL_RCC_OscConfig+0x32a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	2b05      	cmp	r3, #5
 8006e76:	d10c      	bne.n	8006e92 <HAL_RCC_OscConfig+0x312>
 8006e78:	4b77      	ldr	r3, [pc, #476]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7c:	4a76      	ldr	r2, [pc, #472]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006e7e:	f043 0304 	orr.w	r3, r3, #4
 8006e82:	6713      	str	r3, [r2, #112]	; 0x70
 8006e84:	4b74      	ldr	r3, [pc, #464]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e88:	4a73      	ldr	r2, [pc, #460]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006e8a:	f043 0301 	orr.w	r3, r3, #1
 8006e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e90:	e00b      	b.n	8006eaa <HAL_RCC_OscConfig+0x32a>
 8006e92:	4b71      	ldr	r3, [pc, #452]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e96:	4a70      	ldr	r2, [pc, #448]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006e98:	f023 0301 	bic.w	r3, r3, #1
 8006e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e9e:	4b6e      	ldr	r3, [pc, #440]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea2:	4a6d      	ldr	r2, [pc, #436]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006ea4:	f023 0304 	bic.w	r3, r3, #4
 8006ea8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d015      	beq.n	8006ede <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb2:	f7fd f925 	bl	8004100 <HAL_GetTick>
 8006eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb8:	e00a      	b.n	8006ed0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eba:	f7fd f921 	bl	8004100 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d901      	bls.n	8006ed0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e0bc      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ed0:	4b61      	ldr	r3, [pc, #388]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0ee      	beq.n	8006eba <HAL_RCC_OscConfig+0x33a>
 8006edc:	e014      	b.n	8006f08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ede:	f7fd f90f 	bl	8004100 <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ee4:	e00a      	b.n	8006efc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ee6:	f7fd f90b 	bl	8004100 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e0a6      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006efc:	4b56      	ldr	r3, [pc, #344]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1ee      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d105      	bne.n	8006f1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f0e:	4b52      	ldr	r3, [pc, #328]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	4a51      	ldr	r2, [pc, #324]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 8092 	beq.w	8007048 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f24:	4b4c      	ldr	r3, [pc, #304]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f003 030c 	and.w	r3, r3, #12
 8006f2c:	2b08      	cmp	r3, #8
 8006f2e:	d05c      	beq.n	8006fea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d141      	bne.n	8006fbc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f38:	4b48      	ldr	r3, [pc, #288]	; (800705c <HAL_RCC_OscConfig+0x4dc>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3e:	f7fd f8df 	bl	8004100 <HAL_GetTick>
 8006f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f44:	e008      	b.n	8006f58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f46:	f7fd f8db 	bl	8004100 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d901      	bls.n	8006f58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e078      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f58:	4b3f      	ldr	r3, [pc, #252]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1f0      	bne.n	8006f46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	69da      	ldr	r2, [r3, #28]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	019b      	lsls	r3, r3, #6
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	085b      	lsrs	r3, r3, #1
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	041b      	lsls	r3, r3, #16
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f86:	061b      	lsls	r3, r3, #24
 8006f88:	4933      	ldr	r1, [pc, #204]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f8e:	4b33      	ldr	r3, [pc, #204]	; (800705c <HAL_RCC_OscConfig+0x4dc>)
 8006f90:	2201      	movs	r2, #1
 8006f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f94:	f7fd f8b4 	bl	8004100 <HAL_GetTick>
 8006f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f9a:	e008      	b.n	8006fae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f9c:	f7fd f8b0 	bl	8004100 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e04d      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fae:	4b2a      	ldr	r3, [pc, #168]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0f0      	beq.n	8006f9c <HAL_RCC_OscConfig+0x41c>
 8006fba:	e045      	b.n	8007048 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fbc:	4b27      	ldr	r3, [pc, #156]	; (800705c <HAL_RCC_OscConfig+0x4dc>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fc2:	f7fd f89d 	bl	8004100 <HAL_GetTick>
 8006fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fc8:	e008      	b.n	8006fdc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fca:	f7fd f899 	bl	8004100 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e036      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fdc:	4b1e      	ldr	r3, [pc, #120]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1f0      	bne.n	8006fca <HAL_RCC_OscConfig+0x44a>
 8006fe8:	e02e      	b.n	8007048 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d101      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e029      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ff6:	4b18      	ldr	r3, [pc, #96]	; (8007058 <HAL_RCC_OscConfig+0x4d8>)
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	429a      	cmp	r2, r3
 8007008:	d11c      	bne.n	8007044 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007014:	429a      	cmp	r2, r3
 8007016:	d115      	bne.n	8007044 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800701e:	4013      	ands	r3, r2
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007024:	4293      	cmp	r3, r2
 8007026:	d10d      	bne.n	8007044 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007032:	429a      	cmp	r2, r3
 8007034:	d106      	bne.n	8007044 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007040:	429a      	cmp	r2, r3
 8007042:	d001      	beq.n	8007048 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	40007000 	.word	0x40007000
 8007058:	40023800 	.word	0x40023800
 800705c:	42470060 	.word	0x42470060

08007060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e0cc      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007074:	4b68      	ldr	r3, [pc, #416]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 030f 	and.w	r3, r3, #15
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d90c      	bls.n	800709c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007082:	4b65      	ldr	r3, [pc, #404]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800708a:	4b63      	ldr	r3, [pc, #396]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 030f 	and.w	r3, r3, #15
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d001      	beq.n	800709c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e0b8      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d020      	beq.n	80070ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d005      	beq.n	80070c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070b4:	4b59      	ldr	r3, [pc, #356]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	4a58      	ldr	r2, [pc, #352]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070cc:	4b53      	ldr	r3, [pc, #332]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	4a52      	ldr	r2, [pc, #328]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070d8:	4b50      	ldr	r3, [pc, #320]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	494d      	ldr	r1, [pc, #308]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d044      	beq.n	8007180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d107      	bne.n	800710e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070fe:	4b47      	ldr	r3, [pc, #284]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d119      	bne.n	800713e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e07f      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d003      	beq.n	800711e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800711a:	2b03      	cmp	r3, #3
 800711c:	d107      	bne.n	800712e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800711e:	4b3f      	ldr	r3, [pc, #252]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d109      	bne.n	800713e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e06f      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800712e:	4b3b      	ldr	r3, [pc, #236]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e067      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800713e:	4b37      	ldr	r3, [pc, #220]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f023 0203 	bic.w	r2, r3, #3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	4934      	ldr	r1, [pc, #208]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 800714c:	4313      	orrs	r3, r2
 800714e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007150:	f7fc ffd6 	bl	8004100 <HAL_GetTick>
 8007154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007156:	e00a      	b.n	800716e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007158:	f7fc ffd2 	bl	8004100 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	f241 3288 	movw	r2, #5000	; 0x1388
 8007166:	4293      	cmp	r3, r2
 8007168:	d901      	bls.n	800716e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e04f      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800716e:	4b2b      	ldr	r3, [pc, #172]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f003 020c 	and.w	r2, r3, #12
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	429a      	cmp	r2, r3
 800717e:	d1eb      	bne.n	8007158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007180:	4b25      	ldr	r3, [pc, #148]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 030f 	and.w	r3, r3, #15
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d20c      	bcs.n	80071a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718e:	4b22      	ldr	r3, [pc, #136]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007196:	4b20      	ldr	r3, [pc, #128]	; (8007218 <HAL_RCC_ClockConfig+0x1b8>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 030f 	and.w	r3, r3, #15
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d001      	beq.n	80071a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e032      	b.n	800720e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d008      	beq.n	80071c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071b4:	4b19      	ldr	r3, [pc, #100]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	4916      	ldr	r1, [pc, #88]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d009      	beq.n	80071e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071d2:	4b12      	ldr	r3, [pc, #72]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	490e      	ldr	r1, [pc, #56]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071e6:	f000 f821 	bl	800722c <HAL_RCC_GetSysClockFreq>
 80071ea:	4601      	mov	r1, r0
 80071ec:	4b0b      	ldr	r3, [pc, #44]	; (800721c <HAL_RCC_ClockConfig+0x1bc>)
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	091b      	lsrs	r3, r3, #4
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	4a0a      	ldr	r2, [pc, #40]	; (8007220 <HAL_RCC_ClockConfig+0x1c0>)
 80071f8:	5cd3      	ldrb	r3, [r2, r3]
 80071fa:	fa21 f303 	lsr.w	r3, r1, r3
 80071fe:	4a09      	ldr	r2, [pc, #36]	; (8007224 <HAL_RCC_ClockConfig+0x1c4>)
 8007200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007202:	4b09      	ldr	r3, [pc, #36]	; (8007228 <HAL_RCC_ClockConfig+0x1c8>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4618      	mov	r0, r3
 8007208:	f7fc ff36 	bl	8004078 <HAL_InitTick>

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	40023c00 	.word	0x40023c00
 800721c:	40023800 	.word	0x40023800
 8007220:	0800a610 	.word	0x0800a610
 8007224:	2000004c 	.word	0x2000004c
 8007228:	20000050 	.word	0x20000050

0800722c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800722c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	607b      	str	r3, [r7, #4]
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	2300      	movs	r3, #0
 800723c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007242:	4b63      	ldr	r3, [pc, #396]	; (80073d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 030c 	and.w	r3, r3, #12
 800724a:	2b04      	cmp	r3, #4
 800724c:	d007      	beq.n	800725e <HAL_RCC_GetSysClockFreq+0x32>
 800724e:	2b08      	cmp	r3, #8
 8007250:	d008      	beq.n	8007264 <HAL_RCC_GetSysClockFreq+0x38>
 8007252:	2b00      	cmp	r3, #0
 8007254:	f040 80b4 	bne.w	80073c0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007258:	4b5e      	ldr	r3, [pc, #376]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800725a:	60bb      	str	r3, [r7, #8]
       break;
 800725c:	e0b3      	b.n	80073c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800725e:	4b5e      	ldr	r3, [pc, #376]	; (80073d8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007260:	60bb      	str	r3, [r7, #8]
      break;
 8007262:	e0b0      	b.n	80073c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007264:	4b5a      	ldr	r3, [pc, #360]	; (80073d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800726c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800726e:	4b58      	ldr	r3, [pc, #352]	; (80073d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d04a      	beq.n	8007310 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800727a:	4b55      	ldr	r3, [pc, #340]	; (80073d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	099b      	lsrs	r3, r3, #6
 8007280:	f04f 0400 	mov.w	r4, #0
 8007284:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	ea03 0501 	and.w	r5, r3, r1
 8007290:	ea04 0602 	and.w	r6, r4, r2
 8007294:	4629      	mov	r1, r5
 8007296:	4632      	mov	r2, r6
 8007298:	f04f 0300 	mov.w	r3, #0
 800729c:	f04f 0400 	mov.w	r4, #0
 80072a0:	0154      	lsls	r4, r2, #5
 80072a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80072a6:	014b      	lsls	r3, r1, #5
 80072a8:	4619      	mov	r1, r3
 80072aa:	4622      	mov	r2, r4
 80072ac:	1b49      	subs	r1, r1, r5
 80072ae:	eb62 0206 	sbc.w	r2, r2, r6
 80072b2:	f04f 0300 	mov.w	r3, #0
 80072b6:	f04f 0400 	mov.w	r4, #0
 80072ba:	0194      	lsls	r4, r2, #6
 80072bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80072c0:	018b      	lsls	r3, r1, #6
 80072c2:	1a5b      	subs	r3, r3, r1
 80072c4:	eb64 0402 	sbc.w	r4, r4, r2
 80072c8:	f04f 0100 	mov.w	r1, #0
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	00e2      	lsls	r2, r4, #3
 80072d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80072d6:	00d9      	lsls	r1, r3, #3
 80072d8:	460b      	mov	r3, r1
 80072da:	4614      	mov	r4, r2
 80072dc:	195b      	adds	r3, r3, r5
 80072de:	eb44 0406 	adc.w	r4, r4, r6
 80072e2:	f04f 0100 	mov.w	r1, #0
 80072e6:	f04f 0200 	mov.w	r2, #0
 80072ea:	0262      	lsls	r2, r4, #9
 80072ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80072f0:	0259      	lsls	r1, r3, #9
 80072f2:	460b      	mov	r3, r1
 80072f4:	4614      	mov	r4, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	4621      	mov	r1, r4
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f04f 0400 	mov.w	r4, #0
 8007300:	461a      	mov	r2, r3
 8007302:	4623      	mov	r3, r4
 8007304:	f7f9 fd32 	bl	8000d6c <__aeabi_uldivmod>
 8007308:	4603      	mov	r3, r0
 800730a:	460c      	mov	r4, r1
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	e049      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007310:	4b2f      	ldr	r3, [pc, #188]	; (80073d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	099b      	lsrs	r3, r3, #6
 8007316:	f04f 0400 	mov.w	r4, #0
 800731a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800731e:	f04f 0200 	mov.w	r2, #0
 8007322:	ea03 0501 	and.w	r5, r3, r1
 8007326:	ea04 0602 	and.w	r6, r4, r2
 800732a:	4629      	mov	r1, r5
 800732c:	4632      	mov	r2, r6
 800732e:	f04f 0300 	mov.w	r3, #0
 8007332:	f04f 0400 	mov.w	r4, #0
 8007336:	0154      	lsls	r4, r2, #5
 8007338:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800733c:	014b      	lsls	r3, r1, #5
 800733e:	4619      	mov	r1, r3
 8007340:	4622      	mov	r2, r4
 8007342:	1b49      	subs	r1, r1, r5
 8007344:	eb62 0206 	sbc.w	r2, r2, r6
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	f04f 0400 	mov.w	r4, #0
 8007350:	0194      	lsls	r4, r2, #6
 8007352:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007356:	018b      	lsls	r3, r1, #6
 8007358:	1a5b      	subs	r3, r3, r1
 800735a:	eb64 0402 	sbc.w	r4, r4, r2
 800735e:	f04f 0100 	mov.w	r1, #0
 8007362:	f04f 0200 	mov.w	r2, #0
 8007366:	00e2      	lsls	r2, r4, #3
 8007368:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800736c:	00d9      	lsls	r1, r3, #3
 800736e:	460b      	mov	r3, r1
 8007370:	4614      	mov	r4, r2
 8007372:	195b      	adds	r3, r3, r5
 8007374:	eb44 0406 	adc.w	r4, r4, r6
 8007378:	f04f 0100 	mov.w	r1, #0
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	02a2      	lsls	r2, r4, #10
 8007382:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007386:	0299      	lsls	r1, r3, #10
 8007388:	460b      	mov	r3, r1
 800738a:	4614      	mov	r4, r2
 800738c:	4618      	mov	r0, r3
 800738e:	4621      	mov	r1, r4
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f04f 0400 	mov.w	r4, #0
 8007396:	461a      	mov	r2, r3
 8007398:	4623      	mov	r3, r4
 800739a:	f7f9 fce7 	bl	8000d6c <__aeabi_uldivmod>
 800739e:	4603      	mov	r3, r0
 80073a0:	460c      	mov	r4, r1
 80073a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073a4:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	0c1b      	lsrs	r3, r3, #16
 80073aa:	f003 0303 	and.w	r3, r3, #3
 80073ae:	3301      	adds	r3, #1
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073bc:	60bb      	str	r3, [r7, #8]
      break;
 80073be:	e002      	b.n	80073c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073c0:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80073c2:	60bb      	str	r3, [r7, #8]
      break;
 80073c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073c6:	68bb      	ldr	r3, [r7, #8]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073d0:	40023800 	.word	0x40023800
 80073d4:	00f42400 	.word	0x00f42400
 80073d8:	007a1200 	.word	0x007a1200

080073dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073dc:	b480      	push	{r7}
 80073de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073e0:	4b03      	ldr	r3, [pc, #12]	; (80073f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80073e2:	681b      	ldr	r3, [r3, #0]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	2000004c 	.word	0x2000004c

080073f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073f8:	f7ff fff0 	bl	80073dc <HAL_RCC_GetHCLKFreq>
 80073fc:	4601      	mov	r1, r0
 80073fe:	4b05      	ldr	r3, [pc, #20]	; (8007414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	0a9b      	lsrs	r3, r3, #10
 8007404:	f003 0307 	and.w	r3, r3, #7
 8007408:	4a03      	ldr	r2, [pc, #12]	; (8007418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800740a:	5cd3      	ldrb	r3, [r2, r3]
 800740c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007410:	4618      	mov	r0, r3
 8007412:	bd80      	pop	{r7, pc}
 8007414:	40023800 	.word	0x40023800
 8007418:	0800a620 	.word	0x0800a620

0800741c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007420:	f7ff ffdc 	bl	80073dc <HAL_RCC_GetHCLKFreq>
 8007424:	4601      	mov	r1, r0
 8007426:	4b05      	ldr	r3, [pc, #20]	; (800743c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	0b5b      	lsrs	r3, r3, #13
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	4a03      	ldr	r2, [pc, #12]	; (8007440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007432:	5cd3      	ldrb	r3, [r2, r3]
 8007434:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007438:	4618      	mov	r0, r3
 800743a:	bd80      	pop	{r7, pc}
 800743c:	40023800 	.word	0x40023800
 8007440:	0800a620 	.word	0x0800a620

08007444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e01d      	b.n	8007492 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d106      	bne.n	8007470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fc fba6 	bl	8003bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3304      	adds	r3, #4
 8007480:	4619      	mov	r1, r3
 8007482:	4610      	mov	r0, r2
 8007484:	f000 fc26 	bl	8007cd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2202      	movs	r2, #2
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 0307 	and.w	r3, r3, #7
 80074b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b06      	cmp	r3, #6
 80074ba:	d007      	beq.n	80074cc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f042 0201 	orr.w	r2, r2, #1
 80074ca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b085      	sub	sp, #20
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f042 0201 	orr.w	r2, r2, #1
 80074f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b06      	cmp	r3, #6
 800750a:	d007      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0201 	orr.w	r2, r2, #1
 800751a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e01d      	b.n	8007578 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d106      	bne.n	8007556 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7fc fb77 	bl	8003c44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2202      	movs	r2, #2
 800755a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3304      	adds	r3, #4
 8007566:	4619      	mov	r1, r3
 8007568:	4610      	mov	r0, r2
 800756a:	f000 fbb3 	bl	8007cd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2201      	movs	r2, #1
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 fe44 	bl	8008220 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a10      	ldr	r2, [pc, #64]	; (80075e0 <HAL_TIM_PWM_Start+0x60>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d107      	bne.n	80075b2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f003 0307 	and.w	r3, r3, #7
 80075bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b06      	cmp	r3, #6
 80075c2:	d007      	beq.n	80075d4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f042 0201 	orr.w	r2, r2, #1
 80075d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	40010000 	.word	0x40010000

080075e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e083      	b.n	8007700 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d106      	bne.n	8007612 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7fc fa8d 	bl	8003b2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2202      	movs	r2, #2
 8007616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	6812      	ldr	r2, [r2, #0]
 8007624:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007628:	f023 0307 	bic.w	r3, r3, #7
 800762c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	3304      	adds	r3, #4
 8007636:	4619      	mov	r1, r3
 8007638:	4610      	mov	r0, r2
 800763a:	f000 fb4b 	bl	8007cd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	4313      	orrs	r3, r2
 800765e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007666:	f023 0303 	bic.w	r3, r3, #3
 800766a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	021b      	lsls	r3, r3, #8
 8007676:	4313      	orrs	r3, r2
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	4313      	orrs	r3, r2
 800767c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007684:	f023 030c 	bic.w	r3, r3, #12
 8007688:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007690:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007694:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68da      	ldr	r2, [r3, #12]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	021b      	lsls	r3, r3, #8
 80076a0:	4313      	orrs	r3, r2
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	011a      	lsls	r2, r3, #4
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	031b      	lsls	r3, r3, #12
 80076b4:	4313      	orrs	r3, r2
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80076c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80076ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	4313      	orrs	r3, r2
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <HAL_TIM_Encoder_Start+0x16>
 8007718:	2b04      	cmp	r3, #4
 800771a:	d008      	beq.n	800772e <HAL_TIM_Encoder_Start+0x26>
 800771c:	e00f      	b.n	800773e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2201      	movs	r2, #1
 8007724:	2100      	movs	r1, #0
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fd7a 	bl	8008220 <TIM_CCxChannelCmd>
      break;
 800772c:	e016      	b.n	800775c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2201      	movs	r2, #1
 8007734:	2104      	movs	r1, #4
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fd72 	bl	8008220 <TIM_CCxChannelCmd>
      break;
 800773c:	e00e      	b.n	800775c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2201      	movs	r2, #1
 8007744:	2100      	movs	r1, #0
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fd6a 	bl	8008220 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2201      	movs	r2, #1
 8007752:	2104      	movs	r1, #4
 8007754:	4618      	mov	r0, r3
 8007756:	f000 fd63 	bl	8008220 <TIM_CCxChannelCmd>
      break;
 800775a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0201 	orr.w	r2, r2, #1
 800776a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	f003 0302 	and.w	r3, r3, #2
 8007788:	2b02      	cmp	r3, #2
 800778a:	d122      	bne.n	80077d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b02      	cmp	r3, #2
 8007798:	d11b      	bne.n	80077d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f06f 0202 	mvn.w	r2, #2
 80077a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	f003 0303 	and.w	r3, r3, #3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fa6c 	bl	8007c96 <HAL_TIM_IC_CaptureCallback>
 80077be:	e005      	b.n	80077cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fa5e 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fa6f 	bl	8007caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b04      	cmp	r3, #4
 80077de:	d122      	bne.n	8007826 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	f003 0304 	and.w	r3, r3, #4
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d11b      	bne.n	8007826 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f06f 0204 	mvn.w	r2, #4
 80077f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fa42 	bl	8007c96 <HAL_TIM_IC_CaptureCallback>
 8007812:	e005      	b.n	8007820 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fa34 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fa45 	bl	8007caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	f003 0308 	and.w	r3, r3, #8
 8007830:	2b08      	cmp	r3, #8
 8007832:	d122      	bne.n	800787a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f003 0308 	and.w	r3, r3, #8
 800783e:	2b08      	cmp	r3, #8
 8007840:	d11b      	bne.n	800787a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f06f 0208 	mvn.w	r2, #8
 800784a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2204      	movs	r2, #4
 8007850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69db      	ldr	r3, [r3, #28]
 8007858:	f003 0303 	and.w	r3, r3, #3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fa18 	bl	8007c96 <HAL_TIM_IC_CaptureCallback>
 8007866:	e005      	b.n	8007874 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fa0a 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fa1b 	bl	8007caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b10      	cmp	r3, #16
 8007886:	d122      	bne.n	80078ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f003 0310 	and.w	r3, r3, #16
 8007892:	2b10      	cmp	r3, #16
 8007894:	d11b      	bne.n	80078ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f06f 0210 	mvn.w	r2, #16
 800789e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2208      	movs	r2, #8
 80078a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d003      	beq.n	80078bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f9ee 	bl	8007c96 <HAL_TIM_IC_CaptureCallback>
 80078ba:	e005      	b.n	80078c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f9e0 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f9f1 	bl	8007caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d10e      	bne.n	80078fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d107      	bne.n	80078fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f06f 0201 	mvn.w	r2, #1
 80078f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7fa f8a1 	bl	8001a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007904:	2b80      	cmp	r3, #128	; 0x80
 8007906:	d10e      	bne.n	8007926 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007912:	2b80      	cmp	r3, #128	; 0x80
 8007914:	d107      	bne.n	8007926 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800791e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fd1b 	bl	800835c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007930:	2b40      	cmp	r3, #64	; 0x40
 8007932:	d10e      	bne.n	8007952 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793e:	2b40      	cmp	r3, #64	; 0x40
 8007940:	d107      	bne.n	8007952 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800794a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f9b6 	bl	8007cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	f003 0320 	and.w	r3, r3, #32
 800795c:	2b20      	cmp	r3, #32
 800795e:	d10e      	bne.n	800797e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f003 0320 	and.w	r3, r3, #32
 800796a:	2b20      	cmp	r3, #32
 800796c:	d107      	bne.n	800797e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f06f 0220 	mvn.w	r2, #32
 8007976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fce5 	bl	8008348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800797e:	bf00      	nop
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800799e:	2302      	movs	r3, #2
 80079a0:	e0b4      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x184>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2202      	movs	r2, #2
 80079ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b0c      	cmp	r3, #12
 80079b6:	f200 809f 	bhi.w	8007af8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80079ba:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	080079f5 	.word	0x080079f5
 80079c4:	08007af9 	.word	0x08007af9
 80079c8:	08007af9 	.word	0x08007af9
 80079cc:	08007af9 	.word	0x08007af9
 80079d0:	08007a35 	.word	0x08007a35
 80079d4:	08007af9 	.word	0x08007af9
 80079d8:	08007af9 	.word	0x08007af9
 80079dc:	08007af9 	.word	0x08007af9
 80079e0:	08007a77 	.word	0x08007a77
 80079e4:	08007af9 	.word	0x08007af9
 80079e8:	08007af9 	.word	0x08007af9
 80079ec:	08007af9 	.word	0x08007af9
 80079f0:	08007ab7 	.word	0x08007ab7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68b9      	ldr	r1, [r7, #8]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 f9ea 	bl	8007dd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699a      	ldr	r2, [r3, #24]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0208 	orr.w	r2, r2, #8
 8007a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699a      	ldr	r2, [r3, #24]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0204 	bic.w	r2, r2, #4
 8007a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6999      	ldr	r1, [r3, #24]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	691a      	ldr	r2, [r3, #16]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	619a      	str	r2, [r3, #24]
      break;
 8007a32:	e062      	b.n	8007afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68b9      	ldr	r1, [r7, #8]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fa30 	bl	8007ea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	699a      	ldr	r2, [r3, #24]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6999      	ldr	r1, [r3, #24]
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	021a      	lsls	r2, r3, #8
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	619a      	str	r2, [r3, #24]
      break;
 8007a74:	e041      	b.n	8007afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68b9      	ldr	r1, [r7, #8]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 fa7b 	bl	8007f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	69da      	ldr	r2, [r3, #28]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f042 0208 	orr.w	r2, r2, #8
 8007a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69da      	ldr	r2, [r3, #28]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 0204 	bic.w	r2, r2, #4
 8007aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69d9      	ldr	r1, [r3, #28]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	691a      	ldr	r2, [r3, #16]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	61da      	str	r2, [r3, #28]
      break;
 8007ab4:	e021      	b.n	8007afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68b9      	ldr	r1, [r7, #8]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 fac5 	bl	800804c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	69da      	ldr	r2, [r3, #28]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69da      	ldr	r2, [r3, #28]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69d9      	ldr	r1, [r3, #28]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	021a      	lsls	r2, r3, #8
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	61da      	str	r2, [r3, #28]
      break;
 8007af6:	e000      	b.n	8007afa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007af8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_TIM_ConfigClockSource+0x18>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e0a6      	b.n	8007c7a <HAL_TIM_ConfigClockSource+0x166>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b40      	cmp	r3, #64	; 0x40
 8007b62:	d067      	beq.n	8007c34 <HAL_TIM_ConfigClockSource+0x120>
 8007b64:	2b40      	cmp	r3, #64	; 0x40
 8007b66:	d80b      	bhi.n	8007b80 <HAL_TIM_ConfigClockSource+0x6c>
 8007b68:	2b10      	cmp	r3, #16
 8007b6a:	d073      	beq.n	8007c54 <HAL_TIM_ConfigClockSource+0x140>
 8007b6c:	2b10      	cmp	r3, #16
 8007b6e:	d802      	bhi.n	8007b76 <HAL_TIM_ConfigClockSource+0x62>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d06f      	beq.n	8007c54 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007b74:	e078      	b.n	8007c68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	d06c      	beq.n	8007c54 <HAL_TIM_ConfigClockSource+0x140>
 8007b7a:	2b30      	cmp	r3, #48	; 0x30
 8007b7c:	d06a      	beq.n	8007c54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007b7e:	e073      	b.n	8007c68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007b80:	2b70      	cmp	r3, #112	; 0x70
 8007b82:	d00d      	beq.n	8007ba0 <HAL_TIM_ConfigClockSource+0x8c>
 8007b84:	2b70      	cmp	r3, #112	; 0x70
 8007b86:	d804      	bhi.n	8007b92 <HAL_TIM_ConfigClockSource+0x7e>
 8007b88:	2b50      	cmp	r3, #80	; 0x50
 8007b8a:	d033      	beq.n	8007bf4 <HAL_TIM_ConfigClockSource+0xe0>
 8007b8c:	2b60      	cmp	r3, #96	; 0x60
 8007b8e:	d041      	beq.n	8007c14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007b90:	e06a      	b.n	8007c68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b96:	d066      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x152>
 8007b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b9c:	d017      	beq.n	8007bce <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007b9e:	e063      	b.n	8007c68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6818      	ldr	r0, [r3, #0]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	6899      	ldr	r1, [r3, #8]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f000 fb16 	bl	80081e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bc2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	609a      	str	r2, [r3, #8]
      break;
 8007bcc:	e04c      	b.n	8007c68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	6899      	ldr	r1, [r3, #8]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f000 faff 	bl	80081e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bf0:	609a      	str	r2, [r3, #8]
      break;
 8007bf2:	e039      	b.n	8007c68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6818      	ldr	r0, [r3, #0]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	6859      	ldr	r1, [r3, #4]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	461a      	mov	r2, r3
 8007c02:	f000 fa73 	bl	80080ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2150      	movs	r1, #80	; 0x50
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f000 facc 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007c12:	e029      	b.n	8007c68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	6859      	ldr	r1, [r3, #4]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	461a      	mov	r2, r3
 8007c22:	f000 fa92 	bl	800814a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2160      	movs	r1, #96	; 0x60
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 fabc 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007c32:	e019      	b.n	8007c68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	6859      	ldr	r1, [r3, #4]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	461a      	mov	r2, r3
 8007c42:	f000 fa53 	bl	80080ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2140      	movs	r1, #64	; 0x40
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 faac 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007c52:	e009      	b.n	8007c68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f000 faa3 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007c64:	e000      	b.n	8007c68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a34      	ldr	r2, [pc, #208]	; (8007db8 <TIM_Base_SetConfig+0xe4>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d00f      	beq.n	8007d0c <TIM_Base_SetConfig+0x38>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf2:	d00b      	beq.n	8007d0c <TIM_Base_SetConfig+0x38>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a31      	ldr	r2, [pc, #196]	; (8007dbc <TIM_Base_SetConfig+0xe8>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d007      	beq.n	8007d0c <TIM_Base_SetConfig+0x38>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a30      	ldr	r2, [pc, #192]	; (8007dc0 <TIM_Base_SetConfig+0xec>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d003      	beq.n	8007d0c <TIM_Base_SetConfig+0x38>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a2f      	ldr	r2, [pc, #188]	; (8007dc4 <TIM_Base_SetConfig+0xf0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d108      	bne.n	8007d1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a25      	ldr	r2, [pc, #148]	; (8007db8 <TIM_Base_SetConfig+0xe4>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d01b      	beq.n	8007d5e <TIM_Base_SetConfig+0x8a>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d2c:	d017      	beq.n	8007d5e <TIM_Base_SetConfig+0x8a>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a22      	ldr	r2, [pc, #136]	; (8007dbc <TIM_Base_SetConfig+0xe8>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d013      	beq.n	8007d5e <TIM_Base_SetConfig+0x8a>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a21      	ldr	r2, [pc, #132]	; (8007dc0 <TIM_Base_SetConfig+0xec>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00f      	beq.n	8007d5e <TIM_Base_SetConfig+0x8a>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a20      	ldr	r2, [pc, #128]	; (8007dc4 <TIM_Base_SetConfig+0xf0>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d00b      	beq.n	8007d5e <TIM_Base_SetConfig+0x8a>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a1f      	ldr	r2, [pc, #124]	; (8007dc8 <TIM_Base_SetConfig+0xf4>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d007      	beq.n	8007d5e <TIM_Base_SetConfig+0x8a>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a1e      	ldr	r2, [pc, #120]	; (8007dcc <TIM_Base_SetConfig+0xf8>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d003      	beq.n	8007d5e <TIM_Base_SetConfig+0x8a>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a1d      	ldr	r2, [pc, #116]	; (8007dd0 <TIM_Base_SetConfig+0xfc>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d108      	bne.n	8007d70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a08      	ldr	r2, [pc, #32]	; (8007db8 <TIM_Base_SetConfig+0xe4>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d103      	bne.n	8007da4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	691a      	ldr	r2, [r3, #16]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	615a      	str	r2, [r3, #20]
}
 8007daa:	bf00      	nop
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	40010000 	.word	0x40010000
 8007dbc:	40000400 	.word	0x40000400
 8007dc0:	40000800 	.word	0x40000800
 8007dc4:	40000c00 	.word	0x40000c00
 8007dc8:	40014000 	.word	0x40014000
 8007dcc:	40014400 	.word	0x40014400
 8007dd0:	40014800 	.word	0x40014800

08007dd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	f023 0201 	bic.w	r2, r3, #1
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 0303 	bic.w	r3, r3, #3
 8007e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f023 0302 	bic.w	r3, r3, #2
 8007e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a1c      	ldr	r2, [pc, #112]	; (8007e9c <TIM_OC1_SetConfig+0xc8>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d10c      	bne.n	8007e4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f023 0308 	bic.w	r3, r3, #8
 8007e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f023 0304 	bic.w	r3, r3, #4
 8007e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a13      	ldr	r2, [pc, #76]	; (8007e9c <TIM_OC1_SetConfig+0xc8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d111      	bne.n	8007e76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	621a      	str	r2, [r3, #32]
}
 8007e90:	bf00      	nop
 8007e92:	371c      	adds	r7, #28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	40010000 	.word	0x40010000

08007ea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	f023 0210 	bic.w	r2, r3, #16
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	f023 0320 	bic.w	r3, r3, #32
 8007eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	011b      	lsls	r3, r3, #4
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a1e      	ldr	r2, [pc, #120]	; (8007f74 <TIM_OC2_SetConfig+0xd4>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d10d      	bne.n	8007f1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	011b      	lsls	r3, r3, #4
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a15      	ldr	r2, [pc, #84]	; (8007f74 <TIM_OC2_SetConfig+0xd4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d113      	bne.n	8007f4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	621a      	str	r2, [r3, #32]
}
 8007f66:	bf00      	nop
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	40010000 	.word	0x40010000

08007f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0303 	bic.w	r3, r3, #3
 8007fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	021b      	lsls	r3, r3, #8
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a1d      	ldr	r2, [pc, #116]	; (8008048 <TIM_OC3_SetConfig+0xd0>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d10d      	bne.n	8007ff2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	021b      	lsls	r3, r3, #8
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a14      	ldr	r2, [pc, #80]	; (8008048 <TIM_OC3_SetConfig+0xd0>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d113      	bne.n	8008022 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	011b      	lsls	r3, r3, #4
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4313      	orrs	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4313      	orrs	r3, r2
 8008020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	621a      	str	r2, [r3, #32]
}
 800803c:	bf00      	nop
 800803e:	371c      	adds	r7, #28
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	40010000 	.word	0x40010000

0800804c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800807a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	021b      	lsls	r3, r3, #8
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	4313      	orrs	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	031b      	lsls	r3, r3, #12
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a10      	ldr	r2, [pc, #64]	; (80080e8 <TIM_OC4_SetConfig+0x9c>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d109      	bne.n	80080c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	019b      	lsls	r3, r3, #6
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	621a      	str	r2, [r3, #32]
}
 80080da:	bf00      	nop
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	40010000 	.word	0x40010000

080080ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6a1b      	ldr	r3, [r3, #32]
 80080fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	f023 0201 	bic.w	r2, r3, #1
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	011b      	lsls	r3, r3, #4
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f023 030a 	bic.w	r3, r3, #10
 8008128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4313      	orrs	r3, r2
 8008130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	621a      	str	r2, [r3, #32]
}
 800813e:	bf00      	nop
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800814a:	b480      	push	{r7}
 800814c:	b087      	sub	sp, #28
 800814e:	af00      	add	r7, sp, #0
 8008150:	60f8      	str	r0, [r7, #12]
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	f023 0210 	bic.w	r2, r3, #16
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008174:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	031b      	lsls	r3, r3, #12
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	4313      	orrs	r3, r2
 800817e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008186:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	011b      	lsls	r3, r3, #4
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	4313      	orrs	r3, r2
 8008190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	621a      	str	r2, [r3, #32]
}
 800819e:	bf00      	nop
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b085      	sub	sp, #20
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	f043 0307 	orr.w	r3, r3, #7
 80081cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	609a      	str	r2, [r3, #8]
}
 80081d4:	bf00      	nop
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b087      	sub	sp, #28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	021a      	lsls	r2, r3, #8
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	431a      	orrs	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	4313      	orrs	r3, r2
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	4313      	orrs	r3, r2
 800820c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	609a      	str	r2, [r3, #8]
}
 8008214:	bf00      	nop
 8008216:	371c      	adds	r7, #28
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008220:	b480      	push	{r7}
 8008222:	b087      	sub	sp, #28
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	f003 031f 	and.w	r3, r3, #31
 8008232:	2201      	movs	r2, #1
 8008234:	fa02 f303 	lsl.w	r3, r2, r3
 8008238:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a1a      	ldr	r2, [r3, #32]
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	43db      	mvns	r3, r3
 8008242:	401a      	ands	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a1a      	ldr	r2, [r3, #32]
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f003 031f 	and.w	r3, r3, #31
 8008252:	6879      	ldr	r1, [r7, #4]
 8008254:	fa01 f303 	lsl.w	r3, r1, r3
 8008258:	431a      	orrs	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	621a      	str	r2, [r3, #32]
}
 800825e:	bf00      	nop
 8008260:	371c      	adds	r7, #28
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
	...

0800826c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008280:	2302      	movs	r3, #2
 8008282:	e050      	b.n	8008326 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a1c      	ldr	r2, [pc, #112]	; (8008334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d018      	beq.n	80082fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d0:	d013      	beq.n	80082fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a18      	ldr	r2, [pc, #96]	; (8008338 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d00e      	beq.n	80082fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a16      	ldr	r2, [pc, #88]	; (800833c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d009      	beq.n	80082fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a15      	ldr	r2, [pc, #84]	; (8008340 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d004      	beq.n	80082fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a13      	ldr	r2, [pc, #76]	; (8008344 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d10c      	bne.n	8008314 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	4313      	orrs	r3, r2
 800830a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	40010000 	.word	0x40010000
 8008338:	40000400 	.word	0x40000400
 800833c:	40000800 	.word	0x40000800
 8008340:	40000c00 	.word	0x40000c00
 8008344:	40014000 	.word	0x40014000

08008348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e03f      	b.n	8008402 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d106      	bne.n	800839c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7fb fcb0 	bl	8003cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2224      	movs	r2, #36	; 0x24
 80083a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68da      	ldr	r2, [r3, #12]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fc41 	bl	8008c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	691a      	ldr	r2, [r3, #16]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	695a      	ldr	r2, [r3, #20]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68da      	ldr	r2, [r3, #12]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2220      	movs	r2, #32
 80083f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2220      	movs	r2, #32
 80083fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b20      	cmp	r3, #32
 8008424:	d153      	bne.n	80084ce <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <HAL_UART_Transmit_DMA+0x26>
 800842c:	88fb      	ldrh	r3, [r7, #6]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e04c      	b.n	80084d0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800843c:	2b01      	cmp	r3, #1
 800843e:	d101      	bne.n	8008444 <HAL_UART_Transmit_DMA+0x38>
 8008440:	2302      	movs	r3, #2
 8008442:	e045      	b.n	80084d0 <HAL_UART_Transmit_DMA+0xc4>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	88fa      	ldrh	r2, [r7, #6]
 8008456:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	88fa      	ldrh	r2, [r7, #6]
 800845c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2221      	movs	r2, #33	; 0x21
 8008468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008470:	4a19      	ldr	r2, [pc, #100]	; (80084d8 <HAL_UART_Transmit_DMA+0xcc>)
 8008472:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008478:	4a18      	ldr	r2, [pc, #96]	; (80084dc <HAL_UART_Transmit_DMA+0xd0>)
 800847a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008480:	4a17      	ldr	r2, [pc, #92]	; (80084e0 <HAL_UART_Transmit_DMA+0xd4>)
 8008482:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008488:	2200      	movs	r2, #0
 800848a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800848c:	f107 0308 	add.w	r3, r7, #8
 8008490:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	6819      	ldr	r1, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3304      	adds	r3, #4
 80084a0:	461a      	mov	r2, r3
 80084a2:	88fb      	ldrh	r3, [r7, #6]
 80084a4:	f7fc f81a 	bl	80044dc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084b0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	695a      	ldr	r2, [r3, #20]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084c8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	e000      	b.n	80084d0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80084ce:	2302      	movs	r3, #2
  }
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	08008849 	.word	0x08008849
 80084dc:	0800889b 	.word	0x0800889b
 80084e0:	0800893b 	.word	0x0800893b

080084e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4613      	mov	r3, r2
 80084f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b20      	cmp	r3, #32
 80084fc:	d166      	bne.n	80085cc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <HAL_UART_Receive_DMA+0x26>
 8008504:	88fb      	ldrh	r3, [r7, #6]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d101      	bne.n	800850e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e05f      	b.n	80085ce <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_UART_Receive_DMA+0x38>
 8008518:	2302      	movs	r3, #2
 800851a:	e058      	b.n	80085ce <HAL_UART_Receive_DMA+0xea>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	88fa      	ldrh	r2, [r7, #6]
 800852e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2222      	movs	r2, #34	; 0x22
 800853a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008542:	4a25      	ldr	r2, [pc, #148]	; (80085d8 <HAL_UART_Receive_DMA+0xf4>)
 8008544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854a:	4a24      	ldr	r2, [pc, #144]	; (80085dc <HAL_UART_Receive_DMA+0xf8>)
 800854c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008552:	4a23      	ldr	r2, [pc, #140]	; (80085e0 <HAL_UART_Receive_DMA+0xfc>)
 8008554:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855a:	2200      	movs	r2, #0
 800855c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800855e:	f107 0308 	add.w	r3, r7, #8
 8008562:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3304      	adds	r3, #4
 800856e:	4619      	mov	r1, r3
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	88fb      	ldrh	r3, [r7, #6]
 8008576:	f7fb ffb1 	bl	80044dc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800857a:	2300      	movs	r3, #0
 800857c:	613b      	str	r3, [r7, #16]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	613b      	str	r3, [r7, #16]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	613b      	str	r3, [r7, #16]
 800858e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085a6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	695a      	ldr	r2, [r3, #20]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f042 0201 	orr.w	r2, r2, #1
 80085b6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	695a      	ldr	r2, [r3, #20]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085c6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	e000      	b.n	80085ce <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80085cc:	2302      	movs	r3, #2
  }
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3718      	adds	r7, #24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	080088b7 	.word	0x080088b7
 80085dc:	0800891f 	.word	0x0800891f
 80085e0:	0800893b 	.word	0x0800893b

080085e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b088      	sub	sp, #32
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008604:	2300      	movs	r3, #0
 8008606:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	f003 030f 	and.w	r3, r3, #15
 8008612:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10d      	bne.n	8008636 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	f003 0320 	and.w	r3, r3, #32
 8008620:	2b00      	cmp	r3, #0
 8008622:	d008      	beq.n	8008636 <HAL_UART_IRQHandler+0x52>
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	f003 0320 	and.w	r3, r3, #32
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fa83 	bl	8008b3a <UART_Receive_IT>
      return;
 8008634:	e0d1      	b.n	80087da <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 80b0 	beq.w	800879e <HAL_UART_IRQHandler+0x1ba>
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	2b00      	cmp	r3, #0
 8008646:	d105      	bne.n	8008654 <HAL_UART_IRQHandler+0x70>
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 80a5 	beq.w	800879e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <HAL_UART_IRQHandler+0x90>
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008664:	2b00      	cmp	r3, #0
 8008666:	d005      	beq.n	8008674 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866c:	f043 0201 	orr.w	r2, r3, #1
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	f003 0304 	and.w	r3, r3, #4
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <HAL_UART_IRQHandler+0xb0>
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	2b00      	cmp	r3, #0
 8008686:	d005      	beq.n	8008694 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868c:	f043 0202 	orr.w	r2, r3, #2
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	f003 0302 	and.w	r3, r3, #2
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00a      	beq.n	80086b4 <HAL_UART_IRQHandler+0xd0>
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d005      	beq.n	80086b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ac:	f043 0204 	orr.w	r2, r3, #4
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	f003 0308 	and.w	r3, r3, #8
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00f      	beq.n	80086de <HAL_UART_IRQHandler+0xfa>
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	f003 0320 	and.w	r3, r3, #32
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d104      	bne.n	80086d2 <HAL_UART_IRQHandler+0xee>
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d005      	beq.n	80086de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d6:	f043 0208 	orr.w	r2, r3, #8
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d078      	beq.n	80087d8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	f003 0320 	and.w	r3, r3, #32
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d007      	beq.n	8008700 <HAL_UART_IRQHandler+0x11c>
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa1d 	bl	8008b3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870a:	2b40      	cmp	r3, #64	; 0x40
 800870c:	bf0c      	ite	eq
 800870e:	2301      	moveq	r3, #1
 8008710:	2300      	movne	r3, #0
 8008712:	b2db      	uxtb	r3, r3
 8008714:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871a:	f003 0308 	and.w	r3, r3, #8
 800871e:	2b00      	cmp	r3, #0
 8008720:	d102      	bne.n	8008728 <HAL_UART_IRQHandler+0x144>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d031      	beq.n	800878c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f966 	bl	80089fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008738:	2b40      	cmp	r3, #64	; 0x40
 800873a:	d123      	bne.n	8008784 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	695a      	ldr	r2, [r3, #20]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800874a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008750:	2b00      	cmp	r3, #0
 8008752:	d013      	beq.n	800877c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008758:	4a21      	ldr	r2, [pc, #132]	; (80087e0 <HAL_UART_IRQHandler+0x1fc>)
 800875a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008760:	4618      	mov	r0, r3
 8008762:	f7fb ff13 	bl	800458c <HAL_DMA_Abort_IT>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d016      	beq.n	800879a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008776:	4610      	mov	r0, r2
 8008778:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800877a:	e00e      	b.n	800879a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f859 	bl	8008834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008782:	e00a      	b.n	800879a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f855 	bl	8008834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800878a:	e006      	b.n	800879a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f851 	bl	8008834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008798:	e01e      	b.n	80087d8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800879a:	bf00      	nop
    return;
 800879c:	e01c      	b.n	80087d8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d008      	beq.n	80087ba <HAL_UART_IRQHandler+0x1d6>
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f953 	bl	8008a5e <UART_Transmit_IT>
    return;
 80087b8:	e00f      	b.n	80087da <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00a      	beq.n	80087da <HAL_UART_IRQHandler+0x1f6>
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d005      	beq.n	80087da <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f99b 	bl	8008b0a <UART_EndTransmit_IT>
    return;
 80087d4:	bf00      	nop
 80087d6:	e000      	b.n	80087da <HAL_UART_IRQHandler+0x1f6>
    return;
 80087d8:	bf00      	nop
  }
}
 80087da:	3720      	adds	r7, #32
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	08008a37 	.word	0x08008a37

080087e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008854:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008860:	2b00      	cmp	r3, #0
 8008862:	d113      	bne.n	800888c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	695a      	ldr	r2, [r3, #20]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008878:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008888:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800888a:	e002      	b.n	8008892 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7ff ffa9 	bl	80087e4 <HAL_UART_TxCpltCallback>
}
 8008892:	bf00      	nop
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f7ff ffa5 	bl	80087f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ae:	bf00      	nop
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d11e      	bne.n	8008910 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088e6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	695a      	ldr	r2, [r3, #20]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 0201 	bic.w	r2, r2, #1
 80088f6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	695a      	ldr	r2, [r3, #20]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008906:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2220      	movs	r2, #32
 800890c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f7ff ff7b 	bl	800880c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008916:	bf00      	nop
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f7ff ff77 	bl	8008820 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008932:	bf00      	nop
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008956:	2b80      	cmp	r3, #128	; 0x80
 8008958:	bf0c      	ite	eq
 800895a:	2301      	moveq	r3, #1
 800895c:	2300      	movne	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b21      	cmp	r3, #33	; 0x21
 800896c:	d108      	bne.n	8008980 <UART_DMAError+0x46>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d005      	beq.n	8008980 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	2200      	movs	r2, #0
 8008978:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800897a:	68b8      	ldr	r0, [r7, #8]
 800897c:	f000 f827 	bl	80089ce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898a:	2b40      	cmp	r3, #64	; 0x40
 800898c:	bf0c      	ite	eq
 800898e:	2301      	moveq	r3, #1
 8008990:	2300      	movne	r3, #0
 8008992:	b2db      	uxtb	r3, r3
 8008994:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b22      	cmp	r3, #34	; 0x22
 80089a0:	d108      	bne.n	80089b4 <UART_DMAError+0x7a>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d005      	beq.n	80089b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2200      	movs	r2, #0
 80089ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80089ae:	68b8      	ldr	r0, [r7, #8]
 80089b0:	f000 f823 	bl	80089fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b8:	f043 0210 	orr.w	r2, r3, #16
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089c0:	68b8      	ldr	r0, [r7, #8]
 80089c2:	f7ff ff37 	bl	8008834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089c6:	bf00      	nop
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b083      	sub	sp, #12
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80089e4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2220      	movs	r2, #32
 80089ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80089ee:	bf00      	nop
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b083      	sub	sp, #12
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68da      	ldr	r2, [r3, #12]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a10:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	695a      	ldr	r2, [r3, #20]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 0201 	bic.w	r2, r2, #1
 8008a20:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008a2a:	bf00      	nop
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f7ff feef 	bl	8008834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a56:	bf00      	nop
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b085      	sub	sp, #20
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b21      	cmp	r3, #33	; 0x21
 8008a70:	d144      	bne.n	8008afc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a7a:	d11a      	bne.n	8008ab2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a90:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d105      	bne.n	8008aa6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	1c9a      	adds	r2, r3, #2
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	621a      	str	r2, [r3, #32]
 8008aa4:	e00e      	b.n	8008ac4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	621a      	str	r2, [r3, #32]
 8008ab0:	e008      	b.n	8008ac4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	1c59      	adds	r1, r3, #1
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	6211      	str	r1, [r2, #32]
 8008abc:	781a      	ldrb	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	3b01      	subs	r3, #1
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10f      	bne.n	8008af8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ae6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68da      	ldr	r2, [r3, #12]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008af6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	e000      	b.n	8008afe <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008afc:	2302      	movs	r3, #2
  }
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68da      	ldr	r2, [r3, #12]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7ff fe5a 	bl	80087e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b22      	cmp	r3, #34	; 0x22
 8008b4c:	d171      	bne.n	8008c32 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b56:	d123      	bne.n	8008ba0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10e      	bne.n	8008b84 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7c:	1c9a      	adds	r2, r3, #2
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	629a      	str	r2, [r3, #40]	; 0x28
 8008b82:	e029      	b.n	8008bd8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b98:	1c5a      	adds	r2, r3, #1
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	629a      	str	r2, [r3, #40]	; 0x28
 8008b9e:	e01b      	b.n	8008bd8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6858      	ldr	r0, [r3, #4]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb2:	1c59      	adds	r1, r3, #1
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	6291      	str	r1, [r2, #40]	; 0x28
 8008bb8:	b2c2      	uxtb	r2, r0
 8008bba:	701a      	strb	r2, [r3, #0]
 8008bbc:	e00c      	b.n	8008bd8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bca:	1c58      	adds	r0, r3, #1
 8008bcc:	6879      	ldr	r1, [r7, #4]
 8008bce:	6288      	str	r0, [r1, #40]	; 0x28
 8008bd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008bd4:	b2d2      	uxtb	r2, r2
 8008bd6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	3b01      	subs	r3, #1
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	4619      	mov	r1, r3
 8008be6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d120      	bne.n	8008c2e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68da      	ldr	r2, [r3, #12]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f022 0220 	bic.w	r2, r2, #32
 8008bfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68da      	ldr	r2, [r3, #12]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	695a      	ldr	r2, [r3, #20]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f022 0201 	bic.w	r2, r2, #1
 8008c1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7ff fdf1 	bl	800880c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e002      	b.n	8008c34 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	e000      	b.n	8008c34 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008c32:	2302      	movs	r3, #2
  }
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c40:	b085      	sub	sp, #20
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689a      	ldr	r2, [r3, #8]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	431a      	orrs	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	69db      	ldr	r3, [r3, #28]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008c7e:	f023 030c 	bic.w	r3, r3, #12
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	6812      	ldr	r2, [r2, #0]
 8008c86:	68f9      	ldr	r1, [r7, #12]
 8008c88:	430b      	orrs	r3, r1
 8008c8a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	699a      	ldr	r2, [r3, #24]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008caa:	f040 818b 	bne.w	8008fc4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4ac1      	ldr	r2, [pc, #772]	; (8008fb8 <UART_SetConfig+0x37c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d005      	beq.n	8008cc4 <UART_SetConfig+0x88>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4abf      	ldr	r2, [pc, #764]	; (8008fbc <UART_SetConfig+0x380>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	f040 80bd 	bne.w	8008e3e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008cc4:	f7fe fbaa 	bl	800741c <HAL_RCC_GetPCLK2Freq>
 8008cc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	461d      	mov	r5, r3
 8008cce:	f04f 0600 	mov.w	r6, #0
 8008cd2:	46a8      	mov	r8, r5
 8008cd4:	46b1      	mov	r9, r6
 8008cd6:	eb18 0308 	adds.w	r3, r8, r8
 8008cda:	eb49 0409 	adc.w	r4, r9, r9
 8008cde:	4698      	mov	r8, r3
 8008ce0:	46a1      	mov	r9, r4
 8008ce2:	eb18 0805 	adds.w	r8, r8, r5
 8008ce6:	eb49 0906 	adc.w	r9, r9, r6
 8008cea:	f04f 0100 	mov.w	r1, #0
 8008cee:	f04f 0200 	mov.w	r2, #0
 8008cf2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008cf6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008cfa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008cfe:	4688      	mov	r8, r1
 8008d00:	4691      	mov	r9, r2
 8008d02:	eb18 0005 	adds.w	r0, r8, r5
 8008d06:	eb49 0106 	adc.w	r1, r9, r6
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	461d      	mov	r5, r3
 8008d10:	f04f 0600 	mov.w	r6, #0
 8008d14:	196b      	adds	r3, r5, r5
 8008d16:	eb46 0406 	adc.w	r4, r6, r6
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	4623      	mov	r3, r4
 8008d1e:	f7f8 f825 	bl	8000d6c <__aeabi_uldivmod>
 8008d22:	4603      	mov	r3, r0
 8008d24:	460c      	mov	r4, r1
 8008d26:	461a      	mov	r2, r3
 8008d28:	4ba5      	ldr	r3, [pc, #660]	; (8008fc0 <UART_SetConfig+0x384>)
 8008d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d2e:	095b      	lsrs	r3, r3, #5
 8008d30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	461d      	mov	r5, r3
 8008d38:	f04f 0600 	mov.w	r6, #0
 8008d3c:	46a9      	mov	r9, r5
 8008d3e:	46b2      	mov	sl, r6
 8008d40:	eb19 0309 	adds.w	r3, r9, r9
 8008d44:	eb4a 040a 	adc.w	r4, sl, sl
 8008d48:	4699      	mov	r9, r3
 8008d4a:	46a2      	mov	sl, r4
 8008d4c:	eb19 0905 	adds.w	r9, r9, r5
 8008d50:	eb4a 0a06 	adc.w	sl, sl, r6
 8008d54:	f04f 0100 	mov.w	r1, #0
 8008d58:	f04f 0200 	mov.w	r2, #0
 8008d5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d68:	4689      	mov	r9, r1
 8008d6a:	4692      	mov	sl, r2
 8008d6c:	eb19 0005 	adds.w	r0, r9, r5
 8008d70:	eb4a 0106 	adc.w	r1, sl, r6
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	461d      	mov	r5, r3
 8008d7a:	f04f 0600 	mov.w	r6, #0
 8008d7e:	196b      	adds	r3, r5, r5
 8008d80:	eb46 0406 	adc.w	r4, r6, r6
 8008d84:	461a      	mov	r2, r3
 8008d86:	4623      	mov	r3, r4
 8008d88:	f7f7 fff0 	bl	8000d6c <__aeabi_uldivmod>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	461a      	mov	r2, r3
 8008d92:	4b8b      	ldr	r3, [pc, #556]	; (8008fc0 <UART_SetConfig+0x384>)
 8008d94:	fba3 1302 	umull	r1, r3, r3, r2
 8008d98:	095b      	lsrs	r3, r3, #5
 8008d9a:	2164      	movs	r1, #100	; 0x64
 8008d9c:	fb01 f303 	mul.w	r3, r1, r3
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	3332      	adds	r3, #50	; 0x32
 8008da6:	4a86      	ldr	r2, [pc, #536]	; (8008fc0 <UART_SetConfig+0x384>)
 8008da8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dac:	095b      	lsrs	r3, r3, #5
 8008dae:	005b      	lsls	r3, r3, #1
 8008db0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008db4:	4498      	add	r8, r3
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	461d      	mov	r5, r3
 8008dba:	f04f 0600 	mov.w	r6, #0
 8008dbe:	46a9      	mov	r9, r5
 8008dc0:	46b2      	mov	sl, r6
 8008dc2:	eb19 0309 	adds.w	r3, r9, r9
 8008dc6:	eb4a 040a 	adc.w	r4, sl, sl
 8008dca:	4699      	mov	r9, r3
 8008dcc:	46a2      	mov	sl, r4
 8008dce:	eb19 0905 	adds.w	r9, r9, r5
 8008dd2:	eb4a 0a06 	adc.w	sl, sl, r6
 8008dd6:	f04f 0100 	mov.w	r1, #0
 8008dda:	f04f 0200 	mov.w	r2, #0
 8008dde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008de2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008de6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008dea:	4689      	mov	r9, r1
 8008dec:	4692      	mov	sl, r2
 8008dee:	eb19 0005 	adds.w	r0, r9, r5
 8008df2:	eb4a 0106 	adc.w	r1, sl, r6
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	461d      	mov	r5, r3
 8008dfc:	f04f 0600 	mov.w	r6, #0
 8008e00:	196b      	adds	r3, r5, r5
 8008e02:	eb46 0406 	adc.w	r4, r6, r6
 8008e06:	461a      	mov	r2, r3
 8008e08:	4623      	mov	r3, r4
 8008e0a:	f7f7 ffaf 	bl	8000d6c <__aeabi_uldivmod>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	460c      	mov	r4, r1
 8008e12:	461a      	mov	r2, r3
 8008e14:	4b6a      	ldr	r3, [pc, #424]	; (8008fc0 <UART_SetConfig+0x384>)
 8008e16:	fba3 1302 	umull	r1, r3, r3, r2
 8008e1a:	095b      	lsrs	r3, r3, #5
 8008e1c:	2164      	movs	r1, #100	; 0x64
 8008e1e:	fb01 f303 	mul.w	r3, r1, r3
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	00db      	lsls	r3, r3, #3
 8008e26:	3332      	adds	r3, #50	; 0x32
 8008e28:	4a65      	ldr	r2, [pc, #404]	; (8008fc0 <UART_SetConfig+0x384>)
 8008e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e2e:	095b      	lsrs	r3, r3, #5
 8008e30:	f003 0207 	and.w	r2, r3, #7
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4442      	add	r2, r8
 8008e3a:	609a      	str	r2, [r3, #8]
 8008e3c:	e26f      	b.n	800931e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e3e:	f7fe fad9 	bl	80073f4 <HAL_RCC_GetPCLK1Freq>
 8008e42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	461d      	mov	r5, r3
 8008e48:	f04f 0600 	mov.w	r6, #0
 8008e4c:	46a8      	mov	r8, r5
 8008e4e:	46b1      	mov	r9, r6
 8008e50:	eb18 0308 	adds.w	r3, r8, r8
 8008e54:	eb49 0409 	adc.w	r4, r9, r9
 8008e58:	4698      	mov	r8, r3
 8008e5a:	46a1      	mov	r9, r4
 8008e5c:	eb18 0805 	adds.w	r8, r8, r5
 8008e60:	eb49 0906 	adc.w	r9, r9, r6
 8008e64:	f04f 0100 	mov.w	r1, #0
 8008e68:	f04f 0200 	mov.w	r2, #0
 8008e6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008e70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008e74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008e78:	4688      	mov	r8, r1
 8008e7a:	4691      	mov	r9, r2
 8008e7c:	eb18 0005 	adds.w	r0, r8, r5
 8008e80:	eb49 0106 	adc.w	r1, r9, r6
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	461d      	mov	r5, r3
 8008e8a:	f04f 0600 	mov.w	r6, #0
 8008e8e:	196b      	adds	r3, r5, r5
 8008e90:	eb46 0406 	adc.w	r4, r6, r6
 8008e94:	461a      	mov	r2, r3
 8008e96:	4623      	mov	r3, r4
 8008e98:	f7f7 ff68 	bl	8000d6c <__aeabi_uldivmod>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	4b47      	ldr	r3, [pc, #284]	; (8008fc0 <UART_SetConfig+0x384>)
 8008ea4:	fba3 2302 	umull	r2, r3, r3, r2
 8008ea8:	095b      	lsrs	r3, r3, #5
 8008eaa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	461d      	mov	r5, r3
 8008eb2:	f04f 0600 	mov.w	r6, #0
 8008eb6:	46a9      	mov	r9, r5
 8008eb8:	46b2      	mov	sl, r6
 8008eba:	eb19 0309 	adds.w	r3, r9, r9
 8008ebe:	eb4a 040a 	adc.w	r4, sl, sl
 8008ec2:	4699      	mov	r9, r3
 8008ec4:	46a2      	mov	sl, r4
 8008ec6:	eb19 0905 	adds.w	r9, r9, r5
 8008eca:	eb4a 0a06 	adc.w	sl, sl, r6
 8008ece:	f04f 0100 	mov.w	r1, #0
 8008ed2:	f04f 0200 	mov.w	r2, #0
 8008ed6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008eda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ede:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ee2:	4689      	mov	r9, r1
 8008ee4:	4692      	mov	sl, r2
 8008ee6:	eb19 0005 	adds.w	r0, r9, r5
 8008eea:	eb4a 0106 	adc.w	r1, sl, r6
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	461d      	mov	r5, r3
 8008ef4:	f04f 0600 	mov.w	r6, #0
 8008ef8:	196b      	adds	r3, r5, r5
 8008efa:	eb46 0406 	adc.w	r4, r6, r6
 8008efe:	461a      	mov	r2, r3
 8008f00:	4623      	mov	r3, r4
 8008f02:	f7f7 ff33 	bl	8000d6c <__aeabi_uldivmod>
 8008f06:	4603      	mov	r3, r0
 8008f08:	460c      	mov	r4, r1
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	4b2c      	ldr	r3, [pc, #176]	; (8008fc0 <UART_SetConfig+0x384>)
 8008f0e:	fba3 1302 	umull	r1, r3, r3, r2
 8008f12:	095b      	lsrs	r3, r3, #5
 8008f14:	2164      	movs	r1, #100	; 0x64
 8008f16:	fb01 f303 	mul.w	r3, r1, r3
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	00db      	lsls	r3, r3, #3
 8008f1e:	3332      	adds	r3, #50	; 0x32
 8008f20:	4a27      	ldr	r2, [pc, #156]	; (8008fc0 <UART_SetConfig+0x384>)
 8008f22:	fba2 2303 	umull	r2, r3, r2, r3
 8008f26:	095b      	lsrs	r3, r3, #5
 8008f28:	005b      	lsls	r3, r3, #1
 8008f2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f2e:	4498      	add	r8, r3
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	461d      	mov	r5, r3
 8008f34:	f04f 0600 	mov.w	r6, #0
 8008f38:	46a9      	mov	r9, r5
 8008f3a:	46b2      	mov	sl, r6
 8008f3c:	eb19 0309 	adds.w	r3, r9, r9
 8008f40:	eb4a 040a 	adc.w	r4, sl, sl
 8008f44:	4699      	mov	r9, r3
 8008f46:	46a2      	mov	sl, r4
 8008f48:	eb19 0905 	adds.w	r9, r9, r5
 8008f4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008f50:	f04f 0100 	mov.w	r1, #0
 8008f54:	f04f 0200 	mov.w	r2, #0
 8008f58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f64:	4689      	mov	r9, r1
 8008f66:	4692      	mov	sl, r2
 8008f68:	eb19 0005 	adds.w	r0, r9, r5
 8008f6c:	eb4a 0106 	adc.w	r1, sl, r6
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	461d      	mov	r5, r3
 8008f76:	f04f 0600 	mov.w	r6, #0
 8008f7a:	196b      	adds	r3, r5, r5
 8008f7c:	eb46 0406 	adc.w	r4, r6, r6
 8008f80:	461a      	mov	r2, r3
 8008f82:	4623      	mov	r3, r4
 8008f84:	f7f7 fef2 	bl	8000d6c <__aeabi_uldivmod>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <UART_SetConfig+0x384>)
 8008f90:	fba3 1302 	umull	r1, r3, r3, r2
 8008f94:	095b      	lsrs	r3, r3, #5
 8008f96:	2164      	movs	r1, #100	; 0x64
 8008f98:	fb01 f303 	mul.w	r3, r1, r3
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	3332      	adds	r3, #50	; 0x32
 8008fa2:	4a07      	ldr	r2, [pc, #28]	; (8008fc0 <UART_SetConfig+0x384>)
 8008fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa8:	095b      	lsrs	r3, r3, #5
 8008faa:	f003 0207 	and.w	r2, r3, #7
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4442      	add	r2, r8
 8008fb4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008fb6:	e1b2      	b.n	800931e <UART_SetConfig+0x6e2>
 8008fb8:	40011000 	.word	0x40011000
 8008fbc:	40011400 	.word	0x40011400
 8008fc0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4ad7      	ldr	r2, [pc, #860]	; (8009328 <UART_SetConfig+0x6ec>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d005      	beq.n	8008fda <UART_SetConfig+0x39e>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4ad6      	ldr	r2, [pc, #856]	; (800932c <UART_SetConfig+0x6f0>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	f040 80d1 	bne.w	800917c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008fda:	f7fe fa1f 	bl	800741c <HAL_RCC_GetPCLK2Freq>
 8008fde:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	469a      	mov	sl, r3
 8008fe4:	f04f 0b00 	mov.w	fp, #0
 8008fe8:	46d0      	mov	r8, sl
 8008fea:	46d9      	mov	r9, fp
 8008fec:	eb18 0308 	adds.w	r3, r8, r8
 8008ff0:	eb49 0409 	adc.w	r4, r9, r9
 8008ff4:	4698      	mov	r8, r3
 8008ff6:	46a1      	mov	r9, r4
 8008ff8:	eb18 080a 	adds.w	r8, r8, sl
 8008ffc:	eb49 090b 	adc.w	r9, r9, fp
 8009000:	f04f 0100 	mov.w	r1, #0
 8009004:	f04f 0200 	mov.w	r2, #0
 8009008:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800900c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009010:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009014:	4688      	mov	r8, r1
 8009016:	4691      	mov	r9, r2
 8009018:	eb1a 0508 	adds.w	r5, sl, r8
 800901c:	eb4b 0609 	adc.w	r6, fp, r9
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	4619      	mov	r1, r3
 8009026:	f04f 0200 	mov.w	r2, #0
 800902a:	f04f 0300 	mov.w	r3, #0
 800902e:	f04f 0400 	mov.w	r4, #0
 8009032:	0094      	lsls	r4, r2, #2
 8009034:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009038:	008b      	lsls	r3, r1, #2
 800903a:	461a      	mov	r2, r3
 800903c:	4623      	mov	r3, r4
 800903e:	4628      	mov	r0, r5
 8009040:	4631      	mov	r1, r6
 8009042:	f7f7 fe93 	bl	8000d6c <__aeabi_uldivmod>
 8009046:	4603      	mov	r3, r0
 8009048:	460c      	mov	r4, r1
 800904a:	461a      	mov	r2, r3
 800904c:	4bb8      	ldr	r3, [pc, #736]	; (8009330 <UART_SetConfig+0x6f4>)
 800904e:	fba3 2302 	umull	r2, r3, r3, r2
 8009052:	095b      	lsrs	r3, r3, #5
 8009054:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	469b      	mov	fp, r3
 800905c:	f04f 0c00 	mov.w	ip, #0
 8009060:	46d9      	mov	r9, fp
 8009062:	46e2      	mov	sl, ip
 8009064:	eb19 0309 	adds.w	r3, r9, r9
 8009068:	eb4a 040a 	adc.w	r4, sl, sl
 800906c:	4699      	mov	r9, r3
 800906e:	46a2      	mov	sl, r4
 8009070:	eb19 090b 	adds.w	r9, r9, fp
 8009074:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009078:	f04f 0100 	mov.w	r1, #0
 800907c:	f04f 0200 	mov.w	r2, #0
 8009080:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009084:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009088:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800908c:	4689      	mov	r9, r1
 800908e:	4692      	mov	sl, r2
 8009090:	eb1b 0509 	adds.w	r5, fp, r9
 8009094:	eb4c 060a 	adc.w	r6, ip, sl
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	4619      	mov	r1, r3
 800909e:	f04f 0200 	mov.w	r2, #0
 80090a2:	f04f 0300 	mov.w	r3, #0
 80090a6:	f04f 0400 	mov.w	r4, #0
 80090aa:	0094      	lsls	r4, r2, #2
 80090ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80090b0:	008b      	lsls	r3, r1, #2
 80090b2:	461a      	mov	r2, r3
 80090b4:	4623      	mov	r3, r4
 80090b6:	4628      	mov	r0, r5
 80090b8:	4631      	mov	r1, r6
 80090ba:	f7f7 fe57 	bl	8000d6c <__aeabi_uldivmod>
 80090be:	4603      	mov	r3, r0
 80090c0:	460c      	mov	r4, r1
 80090c2:	461a      	mov	r2, r3
 80090c4:	4b9a      	ldr	r3, [pc, #616]	; (8009330 <UART_SetConfig+0x6f4>)
 80090c6:	fba3 1302 	umull	r1, r3, r3, r2
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	2164      	movs	r1, #100	; 0x64
 80090ce:	fb01 f303 	mul.w	r3, r1, r3
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	011b      	lsls	r3, r3, #4
 80090d6:	3332      	adds	r3, #50	; 0x32
 80090d8:	4a95      	ldr	r2, [pc, #596]	; (8009330 <UART_SetConfig+0x6f4>)
 80090da:	fba2 2303 	umull	r2, r3, r2, r3
 80090de:	095b      	lsrs	r3, r3, #5
 80090e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090e4:	4498      	add	r8, r3
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	469b      	mov	fp, r3
 80090ea:	f04f 0c00 	mov.w	ip, #0
 80090ee:	46d9      	mov	r9, fp
 80090f0:	46e2      	mov	sl, ip
 80090f2:	eb19 0309 	adds.w	r3, r9, r9
 80090f6:	eb4a 040a 	adc.w	r4, sl, sl
 80090fa:	4699      	mov	r9, r3
 80090fc:	46a2      	mov	sl, r4
 80090fe:	eb19 090b 	adds.w	r9, r9, fp
 8009102:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009106:	f04f 0100 	mov.w	r1, #0
 800910a:	f04f 0200 	mov.w	r2, #0
 800910e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009112:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009116:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800911a:	4689      	mov	r9, r1
 800911c:	4692      	mov	sl, r2
 800911e:	eb1b 0509 	adds.w	r5, fp, r9
 8009122:	eb4c 060a 	adc.w	r6, ip, sl
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	4619      	mov	r1, r3
 800912c:	f04f 0200 	mov.w	r2, #0
 8009130:	f04f 0300 	mov.w	r3, #0
 8009134:	f04f 0400 	mov.w	r4, #0
 8009138:	0094      	lsls	r4, r2, #2
 800913a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800913e:	008b      	lsls	r3, r1, #2
 8009140:	461a      	mov	r2, r3
 8009142:	4623      	mov	r3, r4
 8009144:	4628      	mov	r0, r5
 8009146:	4631      	mov	r1, r6
 8009148:	f7f7 fe10 	bl	8000d6c <__aeabi_uldivmod>
 800914c:	4603      	mov	r3, r0
 800914e:	460c      	mov	r4, r1
 8009150:	461a      	mov	r2, r3
 8009152:	4b77      	ldr	r3, [pc, #476]	; (8009330 <UART_SetConfig+0x6f4>)
 8009154:	fba3 1302 	umull	r1, r3, r3, r2
 8009158:	095b      	lsrs	r3, r3, #5
 800915a:	2164      	movs	r1, #100	; 0x64
 800915c:	fb01 f303 	mul.w	r3, r1, r3
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	3332      	adds	r3, #50	; 0x32
 8009166:	4a72      	ldr	r2, [pc, #456]	; (8009330 <UART_SetConfig+0x6f4>)
 8009168:	fba2 2303 	umull	r2, r3, r2, r3
 800916c:	095b      	lsrs	r3, r3, #5
 800916e:	f003 020f 	and.w	r2, r3, #15
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4442      	add	r2, r8
 8009178:	609a      	str	r2, [r3, #8]
 800917a:	e0d0      	b.n	800931e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800917c:	f7fe f93a 	bl	80073f4 <HAL_RCC_GetPCLK1Freq>
 8009180:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	469a      	mov	sl, r3
 8009186:	f04f 0b00 	mov.w	fp, #0
 800918a:	46d0      	mov	r8, sl
 800918c:	46d9      	mov	r9, fp
 800918e:	eb18 0308 	adds.w	r3, r8, r8
 8009192:	eb49 0409 	adc.w	r4, r9, r9
 8009196:	4698      	mov	r8, r3
 8009198:	46a1      	mov	r9, r4
 800919a:	eb18 080a 	adds.w	r8, r8, sl
 800919e:	eb49 090b 	adc.w	r9, r9, fp
 80091a2:	f04f 0100 	mov.w	r1, #0
 80091a6:	f04f 0200 	mov.w	r2, #0
 80091aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80091ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80091b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80091b6:	4688      	mov	r8, r1
 80091b8:	4691      	mov	r9, r2
 80091ba:	eb1a 0508 	adds.w	r5, sl, r8
 80091be:	eb4b 0609 	adc.w	r6, fp, r9
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	4619      	mov	r1, r3
 80091c8:	f04f 0200 	mov.w	r2, #0
 80091cc:	f04f 0300 	mov.w	r3, #0
 80091d0:	f04f 0400 	mov.w	r4, #0
 80091d4:	0094      	lsls	r4, r2, #2
 80091d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80091da:	008b      	lsls	r3, r1, #2
 80091dc:	461a      	mov	r2, r3
 80091de:	4623      	mov	r3, r4
 80091e0:	4628      	mov	r0, r5
 80091e2:	4631      	mov	r1, r6
 80091e4:	f7f7 fdc2 	bl	8000d6c <__aeabi_uldivmod>
 80091e8:	4603      	mov	r3, r0
 80091ea:	460c      	mov	r4, r1
 80091ec:	461a      	mov	r2, r3
 80091ee:	4b50      	ldr	r3, [pc, #320]	; (8009330 <UART_SetConfig+0x6f4>)
 80091f0:	fba3 2302 	umull	r2, r3, r3, r2
 80091f4:	095b      	lsrs	r3, r3, #5
 80091f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	469b      	mov	fp, r3
 80091fe:	f04f 0c00 	mov.w	ip, #0
 8009202:	46d9      	mov	r9, fp
 8009204:	46e2      	mov	sl, ip
 8009206:	eb19 0309 	adds.w	r3, r9, r9
 800920a:	eb4a 040a 	adc.w	r4, sl, sl
 800920e:	4699      	mov	r9, r3
 8009210:	46a2      	mov	sl, r4
 8009212:	eb19 090b 	adds.w	r9, r9, fp
 8009216:	eb4a 0a0c 	adc.w	sl, sl, ip
 800921a:	f04f 0100 	mov.w	r1, #0
 800921e:	f04f 0200 	mov.w	r2, #0
 8009222:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009226:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800922a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800922e:	4689      	mov	r9, r1
 8009230:	4692      	mov	sl, r2
 8009232:	eb1b 0509 	adds.w	r5, fp, r9
 8009236:	eb4c 060a 	adc.w	r6, ip, sl
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	4619      	mov	r1, r3
 8009240:	f04f 0200 	mov.w	r2, #0
 8009244:	f04f 0300 	mov.w	r3, #0
 8009248:	f04f 0400 	mov.w	r4, #0
 800924c:	0094      	lsls	r4, r2, #2
 800924e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009252:	008b      	lsls	r3, r1, #2
 8009254:	461a      	mov	r2, r3
 8009256:	4623      	mov	r3, r4
 8009258:	4628      	mov	r0, r5
 800925a:	4631      	mov	r1, r6
 800925c:	f7f7 fd86 	bl	8000d6c <__aeabi_uldivmod>
 8009260:	4603      	mov	r3, r0
 8009262:	460c      	mov	r4, r1
 8009264:	461a      	mov	r2, r3
 8009266:	4b32      	ldr	r3, [pc, #200]	; (8009330 <UART_SetConfig+0x6f4>)
 8009268:	fba3 1302 	umull	r1, r3, r3, r2
 800926c:	095b      	lsrs	r3, r3, #5
 800926e:	2164      	movs	r1, #100	; 0x64
 8009270:	fb01 f303 	mul.w	r3, r1, r3
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	011b      	lsls	r3, r3, #4
 8009278:	3332      	adds	r3, #50	; 0x32
 800927a:	4a2d      	ldr	r2, [pc, #180]	; (8009330 <UART_SetConfig+0x6f4>)
 800927c:	fba2 2303 	umull	r2, r3, r2, r3
 8009280:	095b      	lsrs	r3, r3, #5
 8009282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009286:	4498      	add	r8, r3
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	469b      	mov	fp, r3
 800928c:	f04f 0c00 	mov.w	ip, #0
 8009290:	46d9      	mov	r9, fp
 8009292:	46e2      	mov	sl, ip
 8009294:	eb19 0309 	adds.w	r3, r9, r9
 8009298:	eb4a 040a 	adc.w	r4, sl, sl
 800929c:	4699      	mov	r9, r3
 800929e:	46a2      	mov	sl, r4
 80092a0:	eb19 090b 	adds.w	r9, r9, fp
 80092a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80092a8:	f04f 0100 	mov.w	r1, #0
 80092ac:	f04f 0200 	mov.w	r2, #0
 80092b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80092b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80092bc:	4689      	mov	r9, r1
 80092be:	4692      	mov	sl, r2
 80092c0:	eb1b 0509 	adds.w	r5, fp, r9
 80092c4:	eb4c 060a 	adc.w	r6, ip, sl
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	4619      	mov	r1, r3
 80092ce:	f04f 0200 	mov.w	r2, #0
 80092d2:	f04f 0300 	mov.w	r3, #0
 80092d6:	f04f 0400 	mov.w	r4, #0
 80092da:	0094      	lsls	r4, r2, #2
 80092dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80092e0:	008b      	lsls	r3, r1, #2
 80092e2:	461a      	mov	r2, r3
 80092e4:	4623      	mov	r3, r4
 80092e6:	4628      	mov	r0, r5
 80092e8:	4631      	mov	r1, r6
 80092ea:	f7f7 fd3f 	bl	8000d6c <__aeabi_uldivmod>
 80092ee:	4603      	mov	r3, r0
 80092f0:	460c      	mov	r4, r1
 80092f2:	461a      	mov	r2, r3
 80092f4:	4b0e      	ldr	r3, [pc, #56]	; (8009330 <UART_SetConfig+0x6f4>)
 80092f6:	fba3 1302 	umull	r1, r3, r3, r2
 80092fa:	095b      	lsrs	r3, r3, #5
 80092fc:	2164      	movs	r1, #100	; 0x64
 80092fe:	fb01 f303 	mul.w	r3, r1, r3
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	011b      	lsls	r3, r3, #4
 8009306:	3332      	adds	r3, #50	; 0x32
 8009308:	4a09      	ldr	r2, [pc, #36]	; (8009330 <UART_SetConfig+0x6f4>)
 800930a:	fba2 2303 	umull	r2, r3, r2, r3
 800930e:	095b      	lsrs	r3, r3, #5
 8009310:	f003 020f 	and.w	r2, r3, #15
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4442      	add	r2, r8
 800931a:	609a      	str	r2, [r3, #8]
}
 800931c:	e7ff      	b.n	800931e <UART_SetConfig+0x6e2>
 800931e:	bf00      	nop
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009328:	40011000 	.word	0x40011000
 800932c:	40011400 	.word	0x40011400
 8009330:	51eb851f 	.word	0x51eb851f

08009334 <calloc>:
 8009334:	4b02      	ldr	r3, [pc, #8]	; (8009340 <calloc+0xc>)
 8009336:	460a      	mov	r2, r1
 8009338:	4601      	mov	r1, r0
 800933a:	6818      	ldr	r0, [r3, #0]
 800933c:	f000 b83f 	b.w	80093be <_calloc_r>
 8009340:	20000058 	.word	0x20000058

08009344 <__errno>:
 8009344:	4b01      	ldr	r3, [pc, #4]	; (800934c <__errno+0x8>)
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	20000058 	.word	0x20000058

08009350 <__libc_init_array>:
 8009350:	b570      	push	{r4, r5, r6, lr}
 8009352:	4e0d      	ldr	r6, [pc, #52]	; (8009388 <__libc_init_array+0x38>)
 8009354:	4c0d      	ldr	r4, [pc, #52]	; (800938c <__libc_init_array+0x3c>)
 8009356:	1ba4      	subs	r4, r4, r6
 8009358:	10a4      	asrs	r4, r4, #2
 800935a:	2500      	movs	r5, #0
 800935c:	42a5      	cmp	r5, r4
 800935e:	d109      	bne.n	8009374 <__libc_init_array+0x24>
 8009360:	4e0b      	ldr	r6, [pc, #44]	; (8009390 <__libc_init_array+0x40>)
 8009362:	4c0c      	ldr	r4, [pc, #48]	; (8009394 <__libc_init_array+0x44>)
 8009364:	f001 f946 	bl	800a5f4 <_init>
 8009368:	1ba4      	subs	r4, r4, r6
 800936a:	10a4      	asrs	r4, r4, #2
 800936c:	2500      	movs	r5, #0
 800936e:	42a5      	cmp	r5, r4
 8009370:	d105      	bne.n	800937e <__libc_init_array+0x2e>
 8009372:	bd70      	pop	{r4, r5, r6, pc}
 8009374:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009378:	4798      	blx	r3
 800937a:	3501      	adds	r5, #1
 800937c:	e7ee      	b.n	800935c <__libc_init_array+0xc>
 800937e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009382:	4798      	blx	r3
 8009384:	3501      	adds	r5, #1
 8009386:	e7f2      	b.n	800936e <__libc_init_array+0x1e>
 8009388:	0800a680 	.word	0x0800a680
 800938c:	0800a680 	.word	0x0800a680
 8009390:	0800a680 	.word	0x0800a680
 8009394:	0800a684 	.word	0x0800a684

08009398 <memcpy>:
 8009398:	b510      	push	{r4, lr}
 800939a:	1e43      	subs	r3, r0, #1
 800939c:	440a      	add	r2, r1
 800939e:	4291      	cmp	r1, r2
 80093a0:	d100      	bne.n	80093a4 <memcpy+0xc>
 80093a2:	bd10      	pop	{r4, pc}
 80093a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093ac:	e7f7      	b.n	800939e <memcpy+0x6>

080093ae <memset>:
 80093ae:	4402      	add	r2, r0
 80093b0:	4603      	mov	r3, r0
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d100      	bne.n	80093b8 <memset+0xa>
 80093b6:	4770      	bx	lr
 80093b8:	f803 1b01 	strb.w	r1, [r3], #1
 80093bc:	e7f9      	b.n	80093b2 <memset+0x4>

080093be <_calloc_r>:
 80093be:	b538      	push	{r3, r4, r5, lr}
 80093c0:	fb02 f401 	mul.w	r4, r2, r1
 80093c4:	4621      	mov	r1, r4
 80093c6:	f000 f809 	bl	80093dc <_malloc_r>
 80093ca:	4605      	mov	r5, r0
 80093cc:	b118      	cbz	r0, 80093d6 <_calloc_r+0x18>
 80093ce:	4622      	mov	r2, r4
 80093d0:	2100      	movs	r1, #0
 80093d2:	f7ff ffec 	bl	80093ae <memset>
 80093d6:	4628      	mov	r0, r5
 80093d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080093dc <_malloc_r>:
 80093dc:	b570      	push	{r4, r5, r6, lr}
 80093de:	1ccd      	adds	r5, r1, #3
 80093e0:	f025 0503 	bic.w	r5, r5, #3
 80093e4:	3508      	adds	r5, #8
 80093e6:	2d0c      	cmp	r5, #12
 80093e8:	bf38      	it	cc
 80093ea:	250c      	movcc	r5, #12
 80093ec:	2d00      	cmp	r5, #0
 80093ee:	4606      	mov	r6, r0
 80093f0:	db01      	blt.n	80093f6 <_malloc_r+0x1a>
 80093f2:	42a9      	cmp	r1, r5
 80093f4:	d903      	bls.n	80093fe <_malloc_r+0x22>
 80093f6:	230c      	movs	r3, #12
 80093f8:	6033      	str	r3, [r6, #0]
 80093fa:	2000      	movs	r0, #0
 80093fc:	bd70      	pop	{r4, r5, r6, pc}
 80093fe:	f000 f857 	bl	80094b0 <__malloc_lock>
 8009402:	4a21      	ldr	r2, [pc, #132]	; (8009488 <_malloc_r+0xac>)
 8009404:	6814      	ldr	r4, [r2, #0]
 8009406:	4621      	mov	r1, r4
 8009408:	b991      	cbnz	r1, 8009430 <_malloc_r+0x54>
 800940a:	4c20      	ldr	r4, [pc, #128]	; (800948c <_malloc_r+0xb0>)
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	b91b      	cbnz	r3, 8009418 <_malloc_r+0x3c>
 8009410:	4630      	mov	r0, r6
 8009412:	f000 f83d 	bl	8009490 <_sbrk_r>
 8009416:	6020      	str	r0, [r4, #0]
 8009418:	4629      	mov	r1, r5
 800941a:	4630      	mov	r0, r6
 800941c:	f000 f838 	bl	8009490 <_sbrk_r>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d124      	bne.n	800946e <_malloc_r+0x92>
 8009424:	230c      	movs	r3, #12
 8009426:	6033      	str	r3, [r6, #0]
 8009428:	4630      	mov	r0, r6
 800942a:	f000 f842 	bl	80094b2 <__malloc_unlock>
 800942e:	e7e4      	b.n	80093fa <_malloc_r+0x1e>
 8009430:	680b      	ldr	r3, [r1, #0]
 8009432:	1b5b      	subs	r3, r3, r5
 8009434:	d418      	bmi.n	8009468 <_malloc_r+0x8c>
 8009436:	2b0b      	cmp	r3, #11
 8009438:	d90f      	bls.n	800945a <_malloc_r+0x7e>
 800943a:	600b      	str	r3, [r1, #0]
 800943c:	50cd      	str	r5, [r1, r3]
 800943e:	18cc      	adds	r4, r1, r3
 8009440:	4630      	mov	r0, r6
 8009442:	f000 f836 	bl	80094b2 <__malloc_unlock>
 8009446:	f104 000b 	add.w	r0, r4, #11
 800944a:	1d23      	adds	r3, r4, #4
 800944c:	f020 0007 	bic.w	r0, r0, #7
 8009450:	1ac3      	subs	r3, r0, r3
 8009452:	d0d3      	beq.n	80093fc <_malloc_r+0x20>
 8009454:	425a      	negs	r2, r3
 8009456:	50e2      	str	r2, [r4, r3]
 8009458:	e7d0      	b.n	80093fc <_malloc_r+0x20>
 800945a:	428c      	cmp	r4, r1
 800945c:	684b      	ldr	r3, [r1, #4]
 800945e:	bf16      	itet	ne
 8009460:	6063      	strne	r3, [r4, #4]
 8009462:	6013      	streq	r3, [r2, #0]
 8009464:	460c      	movne	r4, r1
 8009466:	e7eb      	b.n	8009440 <_malloc_r+0x64>
 8009468:	460c      	mov	r4, r1
 800946a:	6849      	ldr	r1, [r1, #4]
 800946c:	e7cc      	b.n	8009408 <_malloc_r+0x2c>
 800946e:	1cc4      	adds	r4, r0, #3
 8009470:	f024 0403 	bic.w	r4, r4, #3
 8009474:	42a0      	cmp	r0, r4
 8009476:	d005      	beq.n	8009484 <_malloc_r+0xa8>
 8009478:	1a21      	subs	r1, r4, r0
 800947a:	4630      	mov	r0, r6
 800947c:	f000 f808 	bl	8009490 <_sbrk_r>
 8009480:	3001      	adds	r0, #1
 8009482:	d0cf      	beq.n	8009424 <_malloc_r+0x48>
 8009484:	6025      	str	r5, [r4, #0]
 8009486:	e7db      	b.n	8009440 <_malloc_r+0x64>
 8009488:	20000234 	.word	0x20000234
 800948c:	20000238 	.word	0x20000238

08009490 <_sbrk_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4c06      	ldr	r4, [pc, #24]	; (80094ac <_sbrk_r+0x1c>)
 8009494:	2300      	movs	r3, #0
 8009496:	4605      	mov	r5, r0
 8009498:	4608      	mov	r0, r1
 800949a:	6023      	str	r3, [r4, #0]
 800949c:	f7fa fd54 	bl	8003f48 <_sbrk>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_sbrk_r+0x1a>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_sbrk_r+0x1a>
 80094a8:	602b      	str	r3, [r5, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	200004a0 	.word	0x200004a0

080094b0 <__malloc_lock>:
 80094b0:	4770      	bx	lr

080094b2 <__malloc_unlock>:
 80094b2:	4770      	bx	lr

080094b4 <round>:
 80094b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b6:	ec57 6b10 	vmov	r6, r7, d0
 80094ba:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80094be:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80094c2:	2c13      	cmp	r4, #19
 80094c4:	463b      	mov	r3, r7
 80094c6:	463d      	mov	r5, r7
 80094c8:	dc17      	bgt.n	80094fa <round+0x46>
 80094ca:	2c00      	cmp	r4, #0
 80094cc:	da09      	bge.n	80094e2 <round+0x2e>
 80094ce:	3401      	adds	r4, #1
 80094d0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80094d4:	d103      	bne.n	80094de <round+0x2a>
 80094d6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80094da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80094de:	2100      	movs	r1, #0
 80094e0:	e02c      	b.n	800953c <round+0x88>
 80094e2:	4a18      	ldr	r2, [pc, #96]	; (8009544 <round+0x90>)
 80094e4:	4122      	asrs	r2, r4
 80094e6:	4217      	tst	r7, r2
 80094e8:	d100      	bne.n	80094ec <round+0x38>
 80094ea:	b19e      	cbz	r6, 8009514 <round+0x60>
 80094ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80094f0:	4123      	asrs	r3, r4
 80094f2:	442b      	add	r3, r5
 80094f4:	ea23 0302 	bic.w	r3, r3, r2
 80094f8:	e7f1      	b.n	80094de <round+0x2a>
 80094fa:	2c33      	cmp	r4, #51	; 0x33
 80094fc:	dd0d      	ble.n	800951a <round+0x66>
 80094fe:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009502:	d107      	bne.n	8009514 <round+0x60>
 8009504:	4630      	mov	r0, r6
 8009506:	4639      	mov	r1, r7
 8009508:	ee10 2a10 	vmov	r2, s0
 800950c:	f7f6 fe6a 	bl	80001e4 <__adddf3>
 8009510:	4606      	mov	r6, r0
 8009512:	460f      	mov	r7, r1
 8009514:	ec47 6b10 	vmov	d0, r6, r7
 8009518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800951a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800951e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009522:	40d0      	lsrs	r0, r2
 8009524:	4206      	tst	r6, r0
 8009526:	d0f5      	beq.n	8009514 <round+0x60>
 8009528:	2201      	movs	r2, #1
 800952a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800952e:	fa02 f404 	lsl.w	r4, r2, r4
 8009532:	1931      	adds	r1, r6, r4
 8009534:	bf28      	it	cs
 8009536:	189b      	addcs	r3, r3, r2
 8009538:	ea21 0100 	bic.w	r1, r1, r0
 800953c:	461f      	mov	r7, r3
 800953e:	460e      	mov	r6, r1
 8009540:	e7e8      	b.n	8009514 <round+0x60>
 8009542:	bf00      	nop
 8009544:	000fffff 	.word	0x000fffff

08009548 <pow>:
 8009548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954c:	ed2d 8b04 	vpush	{d8-d9}
 8009550:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009824 <pow+0x2dc>
 8009554:	b08d      	sub	sp, #52	; 0x34
 8009556:	ec57 6b10 	vmov	r6, r7, d0
 800955a:	ec55 4b11 	vmov	r4, r5, d1
 800955e:	f000 f963 	bl	8009828 <__ieee754_pow>
 8009562:	f999 3000 	ldrsb.w	r3, [r9]
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	3301      	adds	r3, #1
 800956a:	eeb0 8a40 	vmov.f32	s16, s0
 800956e:	eef0 8a60 	vmov.f32	s17, s1
 8009572:	46c8      	mov	r8, r9
 8009574:	d05f      	beq.n	8009636 <pow+0xee>
 8009576:	4622      	mov	r2, r4
 8009578:	462b      	mov	r3, r5
 800957a:	4620      	mov	r0, r4
 800957c:	4629      	mov	r1, r5
 800957e:	f7f7 fa81 	bl	8000a84 <__aeabi_dcmpun>
 8009582:	4683      	mov	fp, r0
 8009584:	2800      	cmp	r0, #0
 8009586:	d156      	bne.n	8009636 <pow+0xee>
 8009588:	4632      	mov	r2, r6
 800958a:	463b      	mov	r3, r7
 800958c:	4630      	mov	r0, r6
 800958e:	4639      	mov	r1, r7
 8009590:	f7f7 fa78 	bl	8000a84 <__aeabi_dcmpun>
 8009594:	9001      	str	r0, [sp, #4]
 8009596:	b1e8      	cbz	r0, 80095d4 <pow+0x8c>
 8009598:	2200      	movs	r2, #0
 800959a:	2300      	movs	r3, #0
 800959c:	4620      	mov	r0, r4
 800959e:	4629      	mov	r1, r5
 80095a0:	f7f7 fa3e 	bl	8000a20 <__aeabi_dcmpeq>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d046      	beq.n	8009636 <pow+0xee>
 80095a8:	2301      	movs	r3, #1
 80095aa:	9302      	str	r3, [sp, #8]
 80095ac:	4b96      	ldr	r3, [pc, #600]	; (8009808 <pow+0x2c0>)
 80095ae:	9303      	str	r3, [sp, #12]
 80095b0:	4b96      	ldr	r3, [pc, #600]	; (800980c <pow+0x2c4>)
 80095b2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80095b6:	2200      	movs	r2, #0
 80095b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80095bc:	9b00      	ldr	r3, [sp, #0]
 80095be:	2b02      	cmp	r3, #2
 80095c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80095c4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80095c8:	d033      	beq.n	8009632 <pow+0xea>
 80095ca:	a802      	add	r0, sp, #8
 80095cc:	f000 fefb 	bl	800a3c6 <matherr>
 80095d0:	bb48      	cbnz	r0, 8009626 <pow+0xde>
 80095d2:	e05d      	b.n	8009690 <pow+0x148>
 80095d4:	f04f 0a00 	mov.w	sl, #0
 80095d8:	f04f 0b00 	mov.w	fp, #0
 80095dc:	4652      	mov	r2, sl
 80095de:	465b      	mov	r3, fp
 80095e0:	4630      	mov	r0, r6
 80095e2:	4639      	mov	r1, r7
 80095e4:	f7f7 fa1c 	bl	8000a20 <__aeabi_dcmpeq>
 80095e8:	ec4b ab19 	vmov	d9, sl, fp
 80095ec:	2800      	cmp	r0, #0
 80095ee:	d054      	beq.n	800969a <pow+0x152>
 80095f0:	4652      	mov	r2, sl
 80095f2:	465b      	mov	r3, fp
 80095f4:	4620      	mov	r0, r4
 80095f6:	4629      	mov	r1, r5
 80095f8:	f7f7 fa12 	bl	8000a20 <__aeabi_dcmpeq>
 80095fc:	4680      	mov	r8, r0
 80095fe:	b318      	cbz	r0, 8009648 <pow+0x100>
 8009600:	2301      	movs	r3, #1
 8009602:	9302      	str	r3, [sp, #8]
 8009604:	4b80      	ldr	r3, [pc, #512]	; (8009808 <pow+0x2c0>)
 8009606:	9303      	str	r3, [sp, #12]
 8009608:	9b01      	ldr	r3, [sp, #4]
 800960a:	930a      	str	r3, [sp, #40]	; 0x28
 800960c:	9b00      	ldr	r3, [sp, #0]
 800960e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009612:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009616:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d0d5      	beq.n	80095ca <pow+0x82>
 800961e:	4b7b      	ldr	r3, [pc, #492]	; (800980c <pow+0x2c4>)
 8009620:	2200      	movs	r2, #0
 8009622:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009628:	b11b      	cbz	r3, 8009632 <pow+0xea>
 800962a:	f7ff fe8b 	bl	8009344 <__errno>
 800962e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009630:	6003      	str	r3, [r0, #0]
 8009632:	ed9d 8b08 	vldr	d8, [sp, #32]
 8009636:	eeb0 0a48 	vmov.f32	s0, s16
 800963a:	eef0 0a68 	vmov.f32	s1, s17
 800963e:	b00d      	add	sp, #52	; 0x34
 8009640:	ecbd 8b04 	vpop	{d8-d9}
 8009644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009648:	ec45 4b10 	vmov	d0, r4, r5
 800964c:	f000 feb3 	bl	800a3b6 <finite>
 8009650:	2800      	cmp	r0, #0
 8009652:	d0f0      	beq.n	8009636 <pow+0xee>
 8009654:	4652      	mov	r2, sl
 8009656:	465b      	mov	r3, fp
 8009658:	4620      	mov	r0, r4
 800965a:	4629      	mov	r1, r5
 800965c:	f7f7 f9ea 	bl	8000a34 <__aeabi_dcmplt>
 8009660:	2800      	cmp	r0, #0
 8009662:	d0e8      	beq.n	8009636 <pow+0xee>
 8009664:	2301      	movs	r3, #1
 8009666:	9302      	str	r3, [sp, #8]
 8009668:	4b67      	ldr	r3, [pc, #412]	; (8009808 <pow+0x2c0>)
 800966a:	9303      	str	r3, [sp, #12]
 800966c:	f999 3000 	ldrsb.w	r3, [r9]
 8009670:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009674:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009678:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800967c:	b913      	cbnz	r3, 8009684 <pow+0x13c>
 800967e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009682:	e7a2      	b.n	80095ca <pow+0x82>
 8009684:	4962      	ldr	r1, [pc, #392]	; (8009810 <pow+0x2c8>)
 8009686:	2000      	movs	r0, #0
 8009688:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800968c:	2b02      	cmp	r3, #2
 800968e:	d19c      	bne.n	80095ca <pow+0x82>
 8009690:	f7ff fe58 	bl	8009344 <__errno>
 8009694:	2321      	movs	r3, #33	; 0x21
 8009696:	6003      	str	r3, [r0, #0]
 8009698:	e7c5      	b.n	8009626 <pow+0xde>
 800969a:	eeb0 0a48 	vmov.f32	s0, s16
 800969e:	eef0 0a68 	vmov.f32	s1, s17
 80096a2:	f000 fe88 	bl	800a3b6 <finite>
 80096a6:	9000      	str	r0, [sp, #0]
 80096a8:	2800      	cmp	r0, #0
 80096aa:	f040 8081 	bne.w	80097b0 <pow+0x268>
 80096ae:	ec47 6b10 	vmov	d0, r6, r7
 80096b2:	f000 fe80 	bl	800a3b6 <finite>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d07a      	beq.n	80097b0 <pow+0x268>
 80096ba:	ec45 4b10 	vmov	d0, r4, r5
 80096be:	f000 fe7a 	bl	800a3b6 <finite>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d074      	beq.n	80097b0 <pow+0x268>
 80096c6:	ec53 2b18 	vmov	r2, r3, d8
 80096ca:	ee18 0a10 	vmov	r0, s16
 80096ce:	4619      	mov	r1, r3
 80096d0:	f7f7 f9d8 	bl	8000a84 <__aeabi_dcmpun>
 80096d4:	f999 9000 	ldrsb.w	r9, [r9]
 80096d8:	4b4b      	ldr	r3, [pc, #300]	; (8009808 <pow+0x2c0>)
 80096da:	b1b0      	cbz	r0, 800970a <pow+0x1c2>
 80096dc:	2201      	movs	r2, #1
 80096de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096e2:	9b00      	ldr	r3, [sp, #0]
 80096e4:	930a      	str	r3, [sp, #40]	; 0x28
 80096e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80096ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80096ee:	f1b9 0f00 	cmp.w	r9, #0
 80096f2:	d0c4      	beq.n	800967e <pow+0x136>
 80096f4:	4652      	mov	r2, sl
 80096f6:	465b      	mov	r3, fp
 80096f8:	4650      	mov	r0, sl
 80096fa:	4659      	mov	r1, fp
 80096fc:	f7f7 f852 	bl	80007a4 <__aeabi_ddiv>
 8009700:	f1b9 0f02 	cmp.w	r9, #2
 8009704:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009708:	e7c1      	b.n	800968e <pow+0x146>
 800970a:	2203      	movs	r2, #3
 800970c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009710:	900a      	str	r0, [sp, #40]	; 0x28
 8009712:	4629      	mov	r1, r5
 8009714:	4620      	mov	r0, r4
 8009716:	2200      	movs	r2, #0
 8009718:	4b3e      	ldr	r3, [pc, #248]	; (8009814 <pow+0x2cc>)
 800971a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800971e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009722:	f7f6 ff15 	bl	8000550 <__aeabi_dmul>
 8009726:	4604      	mov	r4, r0
 8009728:	460d      	mov	r5, r1
 800972a:	f1b9 0f00 	cmp.w	r9, #0
 800972e:	d124      	bne.n	800977a <pow+0x232>
 8009730:	4b39      	ldr	r3, [pc, #228]	; (8009818 <pow+0x2d0>)
 8009732:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009736:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800973a:	4630      	mov	r0, r6
 800973c:	4652      	mov	r2, sl
 800973e:	465b      	mov	r3, fp
 8009740:	4639      	mov	r1, r7
 8009742:	f7f7 f977 	bl	8000a34 <__aeabi_dcmplt>
 8009746:	2800      	cmp	r0, #0
 8009748:	d056      	beq.n	80097f8 <pow+0x2b0>
 800974a:	ec45 4b10 	vmov	d0, r4, r5
 800974e:	f000 fe47 	bl	800a3e0 <rint>
 8009752:	4622      	mov	r2, r4
 8009754:	462b      	mov	r3, r5
 8009756:	ec51 0b10 	vmov	r0, r1, d0
 800975a:	f7f7 f961 	bl	8000a20 <__aeabi_dcmpeq>
 800975e:	b920      	cbnz	r0, 800976a <pow+0x222>
 8009760:	4b2e      	ldr	r3, [pc, #184]	; (800981c <pow+0x2d4>)
 8009762:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009766:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800976a:	f998 3000 	ldrsb.w	r3, [r8]
 800976e:	2b02      	cmp	r3, #2
 8009770:	d142      	bne.n	80097f8 <pow+0x2b0>
 8009772:	f7ff fde7 	bl	8009344 <__errno>
 8009776:	2322      	movs	r3, #34	; 0x22
 8009778:	e78d      	b.n	8009696 <pow+0x14e>
 800977a:	4b29      	ldr	r3, [pc, #164]	; (8009820 <pow+0x2d8>)
 800977c:	2200      	movs	r2, #0
 800977e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009782:	4630      	mov	r0, r6
 8009784:	4652      	mov	r2, sl
 8009786:	465b      	mov	r3, fp
 8009788:	4639      	mov	r1, r7
 800978a:	f7f7 f953 	bl	8000a34 <__aeabi_dcmplt>
 800978e:	2800      	cmp	r0, #0
 8009790:	d0eb      	beq.n	800976a <pow+0x222>
 8009792:	ec45 4b10 	vmov	d0, r4, r5
 8009796:	f000 fe23 	bl	800a3e0 <rint>
 800979a:	4622      	mov	r2, r4
 800979c:	462b      	mov	r3, r5
 800979e:	ec51 0b10 	vmov	r0, r1, d0
 80097a2:	f7f7 f93d 	bl	8000a20 <__aeabi_dcmpeq>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d1df      	bne.n	800976a <pow+0x222>
 80097aa:	2200      	movs	r2, #0
 80097ac:	4b18      	ldr	r3, [pc, #96]	; (8009810 <pow+0x2c8>)
 80097ae:	e7da      	b.n	8009766 <pow+0x21e>
 80097b0:	2200      	movs	r2, #0
 80097b2:	2300      	movs	r3, #0
 80097b4:	ec51 0b18 	vmov	r0, r1, d8
 80097b8:	f7f7 f932 	bl	8000a20 <__aeabi_dcmpeq>
 80097bc:	2800      	cmp	r0, #0
 80097be:	f43f af3a 	beq.w	8009636 <pow+0xee>
 80097c2:	ec47 6b10 	vmov	d0, r6, r7
 80097c6:	f000 fdf6 	bl	800a3b6 <finite>
 80097ca:	2800      	cmp	r0, #0
 80097cc:	f43f af33 	beq.w	8009636 <pow+0xee>
 80097d0:	ec45 4b10 	vmov	d0, r4, r5
 80097d4:	f000 fdef 	bl	800a3b6 <finite>
 80097d8:	2800      	cmp	r0, #0
 80097da:	f43f af2c 	beq.w	8009636 <pow+0xee>
 80097de:	2304      	movs	r3, #4
 80097e0:	9302      	str	r3, [sp, #8]
 80097e2:	4b09      	ldr	r3, [pc, #36]	; (8009808 <pow+0x2c0>)
 80097e4:	9303      	str	r3, [sp, #12]
 80097e6:	2300      	movs	r3, #0
 80097e8:	930a      	str	r3, [sp, #40]	; 0x28
 80097ea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80097ee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80097f2:	ed8d 9b08 	vstr	d9, [sp, #32]
 80097f6:	e7b8      	b.n	800976a <pow+0x222>
 80097f8:	a802      	add	r0, sp, #8
 80097fa:	f000 fde4 	bl	800a3c6 <matherr>
 80097fe:	2800      	cmp	r0, #0
 8009800:	f47f af11 	bne.w	8009626 <pow+0xde>
 8009804:	e7b5      	b.n	8009772 <pow+0x22a>
 8009806:	bf00      	nop
 8009808:	0800a630 	.word	0x0800a630
 800980c:	3ff00000 	.word	0x3ff00000
 8009810:	fff00000 	.word	0xfff00000
 8009814:	3fe00000 	.word	0x3fe00000
 8009818:	47efffff 	.word	0x47efffff
 800981c:	c7efffff 	.word	0xc7efffff
 8009820:	7ff00000 	.word	0x7ff00000
 8009824:	200000bc 	.word	0x200000bc

08009828 <__ieee754_pow>:
 8009828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982c:	b091      	sub	sp, #68	; 0x44
 800982e:	ed8d 1b00 	vstr	d1, [sp]
 8009832:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009836:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800983a:	ea58 0302 	orrs.w	r3, r8, r2
 800983e:	ec57 6b10 	vmov	r6, r7, d0
 8009842:	f000 84be 	beq.w	800a1c2 <__ieee754_pow+0x99a>
 8009846:	4b7a      	ldr	r3, [pc, #488]	; (8009a30 <__ieee754_pow+0x208>)
 8009848:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800984c:	429c      	cmp	r4, r3
 800984e:	463d      	mov	r5, r7
 8009850:	ee10 aa10 	vmov	sl, s0
 8009854:	dc09      	bgt.n	800986a <__ieee754_pow+0x42>
 8009856:	d103      	bne.n	8009860 <__ieee754_pow+0x38>
 8009858:	b93e      	cbnz	r6, 800986a <__ieee754_pow+0x42>
 800985a:	45a0      	cmp	r8, r4
 800985c:	dc0d      	bgt.n	800987a <__ieee754_pow+0x52>
 800985e:	e001      	b.n	8009864 <__ieee754_pow+0x3c>
 8009860:	4598      	cmp	r8, r3
 8009862:	dc02      	bgt.n	800986a <__ieee754_pow+0x42>
 8009864:	4598      	cmp	r8, r3
 8009866:	d10e      	bne.n	8009886 <__ieee754_pow+0x5e>
 8009868:	b16a      	cbz	r2, 8009886 <__ieee754_pow+0x5e>
 800986a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800986e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009872:	ea54 030a 	orrs.w	r3, r4, sl
 8009876:	f000 84a4 	beq.w	800a1c2 <__ieee754_pow+0x99a>
 800987a:	486e      	ldr	r0, [pc, #440]	; (8009a34 <__ieee754_pow+0x20c>)
 800987c:	b011      	add	sp, #68	; 0x44
 800987e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009882:	f000 bda5 	b.w	800a3d0 <nan>
 8009886:	2d00      	cmp	r5, #0
 8009888:	da53      	bge.n	8009932 <__ieee754_pow+0x10a>
 800988a:	4b6b      	ldr	r3, [pc, #428]	; (8009a38 <__ieee754_pow+0x210>)
 800988c:	4598      	cmp	r8, r3
 800988e:	dc4d      	bgt.n	800992c <__ieee754_pow+0x104>
 8009890:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009894:	4598      	cmp	r8, r3
 8009896:	dd4c      	ble.n	8009932 <__ieee754_pow+0x10a>
 8009898:	ea4f 5328 	mov.w	r3, r8, asr #20
 800989c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80098a0:	2b14      	cmp	r3, #20
 80098a2:	dd26      	ble.n	80098f2 <__ieee754_pow+0xca>
 80098a4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80098a8:	fa22 f103 	lsr.w	r1, r2, r3
 80098ac:	fa01 f303 	lsl.w	r3, r1, r3
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d13e      	bne.n	8009932 <__ieee754_pow+0x10a>
 80098b4:	f001 0101 	and.w	r1, r1, #1
 80098b8:	f1c1 0b02 	rsb	fp, r1, #2
 80098bc:	2a00      	cmp	r2, #0
 80098be:	d15b      	bne.n	8009978 <__ieee754_pow+0x150>
 80098c0:	4b5b      	ldr	r3, [pc, #364]	; (8009a30 <__ieee754_pow+0x208>)
 80098c2:	4598      	cmp	r8, r3
 80098c4:	d124      	bne.n	8009910 <__ieee754_pow+0xe8>
 80098c6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80098ca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80098ce:	ea53 030a 	orrs.w	r3, r3, sl
 80098d2:	f000 8476 	beq.w	800a1c2 <__ieee754_pow+0x99a>
 80098d6:	4b59      	ldr	r3, [pc, #356]	; (8009a3c <__ieee754_pow+0x214>)
 80098d8:	429c      	cmp	r4, r3
 80098da:	dd2d      	ble.n	8009938 <__ieee754_pow+0x110>
 80098dc:	f1b9 0f00 	cmp.w	r9, #0
 80098e0:	f280 8473 	bge.w	800a1ca <__ieee754_pow+0x9a2>
 80098e4:	2000      	movs	r0, #0
 80098e6:	2100      	movs	r1, #0
 80098e8:	ec41 0b10 	vmov	d0, r0, r1
 80098ec:	b011      	add	sp, #68	; 0x44
 80098ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f2:	2a00      	cmp	r2, #0
 80098f4:	d13e      	bne.n	8009974 <__ieee754_pow+0x14c>
 80098f6:	f1c3 0314 	rsb	r3, r3, #20
 80098fa:	fa48 f103 	asr.w	r1, r8, r3
 80098fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009902:	4543      	cmp	r3, r8
 8009904:	f040 8469 	bne.w	800a1da <__ieee754_pow+0x9b2>
 8009908:	f001 0101 	and.w	r1, r1, #1
 800990c:	f1c1 0b02 	rsb	fp, r1, #2
 8009910:	4b4b      	ldr	r3, [pc, #300]	; (8009a40 <__ieee754_pow+0x218>)
 8009912:	4598      	cmp	r8, r3
 8009914:	d118      	bne.n	8009948 <__ieee754_pow+0x120>
 8009916:	f1b9 0f00 	cmp.w	r9, #0
 800991a:	f280 845a 	bge.w	800a1d2 <__ieee754_pow+0x9aa>
 800991e:	4948      	ldr	r1, [pc, #288]	; (8009a40 <__ieee754_pow+0x218>)
 8009920:	4632      	mov	r2, r6
 8009922:	463b      	mov	r3, r7
 8009924:	2000      	movs	r0, #0
 8009926:	f7f6 ff3d 	bl	80007a4 <__aeabi_ddiv>
 800992a:	e7dd      	b.n	80098e8 <__ieee754_pow+0xc0>
 800992c:	f04f 0b02 	mov.w	fp, #2
 8009930:	e7c4      	b.n	80098bc <__ieee754_pow+0x94>
 8009932:	f04f 0b00 	mov.w	fp, #0
 8009936:	e7c1      	b.n	80098bc <__ieee754_pow+0x94>
 8009938:	f1b9 0f00 	cmp.w	r9, #0
 800993c:	dad2      	bge.n	80098e4 <__ieee754_pow+0xbc>
 800993e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009942:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009946:	e7cf      	b.n	80098e8 <__ieee754_pow+0xc0>
 8009948:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800994c:	d106      	bne.n	800995c <__ieee754_pow+0x134>
 800994e:	4632      	mov	r2, r6
 8009950:	463b      	mov	r3, r7
 8009952:	4610      	mov	r0, r2
 8009954:	4619      	mov	r1, r3
 8009956:	f7f6 fdfb 	bl	8000550 <__aeabi_dmul>
 800995a:	e7c5      	b.n	80098e8 <__ieee754_pow+0xc0>
 800995c:	4b39      	ldr	r3, [pc, #228]	; (8009a44 <__ieee754_pow+0x21c>)
 800995e:	4599      	cmp	r9, r3
 8009960:	d10a      	bne.n	8009978 <__ieee754_pow+0x150>
 8009962:	2d00      	cmp	r5, #0
 8009964:	db08      	blt.n	8009978 <__ieee754_pow+0x150>
 8009966:	ec47 6b10 	vmov	d0, r6, r7
 800996a:	b011      	add	sp, #68	; 0x44
 800996c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009970:	f000 bc68 	b.w	800a244 <__ieee754_sqrt>
 8009974:	f04f 0b00 	mov.w	fp, #0
 8009978:	ec47 6b10 	vmov	d0, r6, r7
 800997c:	f000 fd12 	bl	800a3a4 <fabs>
 8009980:	ec51 0b10 	vmov	r0, r1, d0
 8009984:	f1ba 0f00 	cmp.w	sl, #0
 8009988:	d127      	bne.n	80099da <__ieee754_pow+0x1b2>
 800998a:	b124      	cbz	r4, 8009996 <__ieee754_pow+0x16e>
 800998c:	4b2c      	ldr	r3, [pc, #176]	; (8009a40 <__ieee754_pow+0x218>)
 800998e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009992:	429a      	cmp	r2, r3
 8009994:	d121      	bne.n	80099da <__ieee754_pow+0x1b2>
 8009996:	f1b9 0f00 	cmp.w	r9, #0
 800999a:	da05      	bge.n	80099a8 <__ieee754_pow+0x180>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	2000      	movs	r0, #0
 80099a2:	4927      	ldr	r1, [pc, #156]	; (8009a40 <__ieee754_pow+0x218>)
 80099a4:	f7f6 fefe 	bl	80007a4 <__aeabi_ddiv>
 80099a8:	2d00      	cmp	r5, #0
 80099aa:	da9d      	bge.n	80098e8 <__ieee754_pow+0xc0>
 80099ac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80099b0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80099b4:	ea54 030b 	orrs.w	r3, r4, fp
 80099b8:	d108      	bne.n	80099cc <__ieee754_pow+0x1a4>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4610      	mov	r0, r2
 80099c0:	4619      	mov	r1, r3
 80099c2:	f7f6 fc0d 	bl	80001e0 <__aeabi_dsub>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	e7ac      	b.n	8009926 <__ieee754_pow+0xfe>
 80099cc:	f1bb 0f01 	cmp.w	fp, #1
 80099d0:	d18a      	bne.n	80098e8 <__ieee754_pow+0xc0>
 80099d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099d6:	4619      	mov	r1, r3
 80099d8:	e786      	b.n	80098e8 <__ieee754_pow+0xc0>
 80099da:	0fed      	lsrs	r5, r5, #31
 80099dc:	1e6b      	subs	r3, r5, #1
 80099de:	930d      	str	r3, [sp, #52]	; 0x34
 80099e0:	ea5b 0303 	orrs.w	r3, fp, r3
 80099e4:	d102      	bne.n	80099ec <__ieee754_pow+0x1c4>
 80099e6:	4632      	mov	r2, r6
 80099e8:	463b      	mov	r3, r7
 80099ea:	e7e8      	b.n	80099be <__ieee754_pow+0x196>
 80099ec:	4b16      	ldr	r3, [pc, #88]	; (8009a48 <__ieee754_pow+0x220>)
 80099ee:	4598      	cmp	r8, r3
 80099f0:	f340 80fe 	ble.w	8009bf0 <__ieee754_pow+0x3c8>
 80099f4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80099f8:	4598      	cmp	r8, r3
 80099fa:	dd0a      	ble.n	8009a12 <__ieee754_pow+0x1ea>
 80099fc:	4b0f      	ldr	r3, [pc, #60]	; (8009a3c <__ieee754_pow+0x214>)
 80099fe:	429c      	cmp	r4, r3
 8009a00:	dc0d      	bgt.n	8009a1e <__ieee754_pow+0x1f6>
 8009a02:	f1b9 0f00 	cmp.w	r9, #0
 8009a06:	f6bf af6d 	bge.w	80098e4 <__ieee754_pow+0xbc>
 8009a0a:	a307      	add	r3, pc, #28	; (adr r3, 8009a28 <__ieee754_pow+0x200>)
 8009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a10:	e79f      	b.n	8009952 <__ieee754_pow+0x12a>
 8009a12:	4b0e      	ldr	r3, [pc, #56]	; (8009a4c <__ieee754_pow+0x224>)
 8009a14:	429c      	cmp	r4, r3
 8009a16:	ddf4      	ble.n	8009a02 <__ieee754_pow+0x1da>
 8009a18:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <__ieee754_pow+0x218>)
 8009a1a:	429c      	cmp	r4, r3
 8009a1c:	dd18      	ble.n	8009a50 <__ieee754_pow+0x228>
 8009a1e:	f1b9 0f00 	cmp.w	r9, #0
 8009a22:	dcf2      	bgt.n	8009a0a <__ieee754_pow+0x1e2>
 8009a24:	e75e      	b.n	80098e4 <__ieee754_pow+0xbc>
 8009a26:	bf00      	nop
 8009a28:	8800759c 	.word	0x8800759c
 8009a2c:	7e37e43c 	.word	0x7e37e43c
 8009a30:	7ff00000 	.word	0x7ff00000
 8009a34:	0800a633 	.word	0x0800a633
 8009a38:	433fffff 	.word	0x433fffff
 8009a3c:	3fefffff 	.word	0x3fefffff
 8009a40:	3ff00000 	.word	0x3ff00000
 8009a44:	3fe00000 	.word	0x3fe00000
 8009a48:	41e00000 	.word	0x41e00000
 8009a4c:	3feffffe 	.word	0x3feffffe
 8009a50:	2200      	movs	r2, #0
 8009a52:	4b63      	ldr	r3, [pc, #396]	; (8009be0 <__ieee754_pow+0x3b8>)
 8009a54:	f7f6 fbc4 	bl	80001e0 <__aeabi_dsub>
 8009a58:	a355      	add	r3, pc, #340	; (adr r3, 8009bb0 <__ieee754_pow+0x388>)
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	4604      	mov	r4, r0
 8009a60:	460d      	mov	r5, r1
 8009a62:	f7f6 fd75 	bl	8000550 <__aeabi_dmul>
 8009a66:	a354      	add	r3, pc, #336	; (adr r3, 8009bb8 <__ieee754_pow+0x390>)
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	4606      	mov	r6, r0
 8009a6e:	460f      	mov	r7, r1
 8009a70:	4620      	mov	r0, r4
 8009a72:	4629      	mov	r1, r5
 8009a74:	f7f6 fd6c 	bl	8000550 <__aeabi_dmul>
 8009a78:	2200      	movs	r2, #0
 8009a7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a7e:	4b59      	ldr	r3, [pc, #356]	; (8009be4 <__ieee754_pow+0x3bc>)
 8009a80:	4620      	mov	r0, r4
 8009a82:	4629      	mov	r1, r5
 8009a84:	f7f6 fd64 	bl	8000550 <__aeabi_dmul>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	a14c      	add	r1, pc, #304	; (adr r1, 8009bc0 <__ieee754_pow+0x398>)
 8009a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a92:	f7f6 fba5 	bl	80001e0 <__aeabi_dsub>
 8009a96:	4622      	mov	r2, r4
 8009a98:	462b      	mov	r3, r5
 8009a9a:	f7f6 fd59 	bl	8000550 <__aeabi_dmul>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	4950      	ldr	r1, [pc, #320]	; (8009be8 <__ieee754_pow+0x3c0>)
 8009aa6:	f7f6 fb9b 	bl	80001e0 <__aeabi_dsub>
 8009aaa:	4622      	mov	r2, r4
 8009aac:	462b      	mov	r3, r5
 8009aae:	4680      	mov	r8, r0
 8009ab0:	4689      	mov	r9, r1
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	4629      	mov	r1, r5
 8009ab6:	f7f6 fd4b 	bl	8000550 <__aeabi_dmul>
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	4640      	mov	r0, r8
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	f7f6 fd45 	bl	8000550 <__aeabi_dmul>
 8009ac6:	a340      	add	r3, pc, #256	; (adr r3, 8009bc8 <__ieee754_pow+0x3a0>)
 8009ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009acc:	f7f6 fd40 	bl	8000550 <__aeabi_dmul>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ad8:	f7f6 fb82 	bl	80001e0 <__aeabi_dsub>
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	460d      	mov	r5, r1
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	f7f6 fb7c 	bl	80001e4 <__adddf3>
 8009aec:	2000      	movs	r0, #0
 8009aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009af2:	4632      	mov	r2, r6
 8009af4:	463b      	mov	r3, r7
 8009af6:	f7f6 fb73 	bl	80001e0 <__aeabi_dsub>
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	4620      	mov	r0, r4
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7f6 fb6d 	bl	80001e0 <__aeabi_dsub>
 8009b06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b08:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	4606      	mov	r6, r0
 8009b10:	460f      	mov	r7, r1
 8009b12:	f040 81eb 	bne.w	8009eec <__ieee754_pow+0x6c4>
 8009b16:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009bd0 <__ieee754_pow+0x3a8>
 8009b1a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009b1e:	2400      	movs	r4, #0
 8009b20:	4622      	mov	r2, r4
 8009b22:	462b      	mov	r3, r5
 8009b24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b2c:	f7f6 fb58 	bl	80001e0 <__aeabi_dsub>
 8009b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b34:	f7f6 fd0c 	bl	8000550 <__aeabi_dmul>
 8009b38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b3c:	4680      	mov	r8, r0
 8009b3e:	4689      	mov	r9, r1
 8009b40:	4630      	mov	r0, r6
 8009b42:	4639      	mov	r1, r7
 8009b44:	f7f6 fd04 	bl	8000550 <__aeabi_dmul>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4640      	mov	r0, r8
 8009b4e:	4649      	mov	r1, r9
 8009b50:	f7f6 fb48 	bl	80001e4 <__adddf3>
 8009b54:	4622      	mov	r2, r4
 8009b56:	462b      	mov	r3, r5
 8009b58:	4680      	mov	r8, r0
 8009b5a:	4689      	mov	r9, r1
 8009b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b60:	f7f6 fcf6 	bl	8000550 <__aeabi_dmul>
 8009b64:	460b      	mov	r3, r1
 8009b66:	4604      	mov	r4, r0
 8009b68:	460d      	mov	r5, r1
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	4640      	mov	r0, r8
 8009b70:	e9cd 4500 	strd	r4, r5, [sp]
 8009b74:	f7f6 fb36 	bl	80001e4 <__adddf3>
 8009b78:	4b1c      	ldr	r3, [pc, #112]	; (8009bec <__ieee754_pow+0x3c4>)
 8009b7a:	4299      	cmp	r1, r3
 8009b7c:	4606      	mov	r6, r0
 8009b7e:	460f      	mov	r7, r1
 8009b80:	468b      	mov	fp, r1
 8009b82:	f340 82f7 	ble.w	800a174 <__ieee754_pow+0x94c>
 8009b86:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009b8a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009b8e:	4303      	orrs	r3, r0
 8009b90:	f000 81ea 	beq.w	8009f68 <__ieee754_pow+0x740>
 8009b94:	a310      	add	r3, pc, #64	; (adr r3, 8009bd8 <__ieee754_pow+0x3b0>)
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b9e:	f7f6 fcd7 	bl	8000550 <__aeabi_dmul>
 8009ba2:	a30d      	add	r3, pc, #52	; (adr r3, 8009bd8 <__ieee754_pow+0x3b0>)
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	e6d5      	b.n	8009956 <__ieee754_pow+0x12e>
 8009baa:	bf00      	nop
 8009bac:	f3af 8000 	nop.w
 8009bb0:	60000000 	.word	0x60000000
 8009bb4:	3ff71547 	.word	0x3ff71547
 8009bb8:	f85ddf44 	.word	0xf85ddf44
 8009bbc:	3e54ae0b 	.word	0x3e54ae0b
 8009bc0:	55555555 	.word	0x55555555
 8009bc4:	3fd55555 	.word	0x3fd55555
 8009bc8:	652b82fe 	.word	0x652b82fe
 8009bcc:	3ff71547 	.word	0x3ff71547
 8009bd0:	00000000 	.word	0x00000000
 8009bd4:	bff00000 	.word	0xbff00000
 8009bd8:	8800759c 	.word	0x8800759c
 8009bdc:	7e37e43c 	.word	0x7e37e43c
 8009be0:	3ff00000 	.word	0x3ff00000
 8009be4:	3fd00000 	.word	0x3fd00000
 8009be8:	3fe00000 	.word	0x3fe00000
 8009bec:	408fffff 	.word	0x408fffff
 8009bf0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009bf4:	f04f 0200 	mov.w	r2, #0
 8009bf8:	da05      	bge.n	8009c06 <__ieee754_pow+0x3de>
 8009bfa:	4bd3      	ldr	r3, [pc, #844]	; (8009f48 <__ieee754_pow+0x720>)
 8009bfc:	f7f6 fca8 	bl	8000550 <__aeabi_dmul>
 8009c00:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009c04:	460c      	mov	r4, r1
 8009c06:	1523      	asrs	r3, r4, #20
 8009c08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009c0c:	4413      	add	r3, r2
 8009c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c10:	4bce      	ldr	r3, [pc, #824]	; (8009f4c <__ieee754_pow+0x724>)
 8009c12:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009c16:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009c1a:	429c      	cmp	r4, r3
 8009c1c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009c20:	dd08      	ble.n	8009c34 <__ieee754_pow+0x40c>
 8009c22:	4bcb      	ldr	r3, [pc, #812]	; (8009f50 <__ieee754_pow+0x728>)
 8009c24:	429c      	cmp	r4, r3
 8009c26:	f340 815e 	ble.w	8009ee6 <__ieee754_pow+0x6be>
 8009c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c30:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009c34:	f04f 0a00 	mov.w	sl, #0
 8009c38:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009c3c:	930c      	str	r3, [sp, #48]	; 0x30
 8009c3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c40:	4bc4      	ldr	r3, [pc, #784]	; (8009f54 <__ieee754_pow+0x72c>)
 8009c42:	4413      	add	r3, r2
 8009c44:	ed93 7b00 	vldr	d7, [r3]
 8009c48:	4629      	mov	r1, r5
 8009c4a:	ec53 2b17 	vmov	r2, r3, d7
 8009c4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009c56:	f7f6 fac3 	bl	80001e0 <__aeabi_dsub>
 8009c5a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c5e:	4606      	mov	r6, r0
 8009c60:	460f      	mov	r7, r1
 8009c62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c66:	f7f6 fabd 	bl	80001e4 <__adddf3>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	2000      	movs	r0, #0
 8009c70:	49b9      	ldr	r1, [pc, #740]	; (8009f58 <__ieee754_pow+0x730>)
 8009c72:	f7f6 fd97 	bl	80007a4 <__aeabi_ddiv>
 8009c76:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4630      	mov	r0, r6
 8009c80:	4639      	mov	r1, r7
 8009c82:	f7f6 fc65 	bl	8000550 <__aeabi_dmul>
 8009c86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c8a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009c8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009c92:	2300      	movs	r3, #0
 8009c94:	9302      	str	r3, [sp, #8]
 8009c96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009c9a:	106d      	asrs	r5, r5, #1
 8009c9c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009ca0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009caa:	4640      	mov	r0, r8
 8009cac:	4649      	mov	r1, r9
 8009cae:	4614      	mov	r4, r2
 8009cb0:	461d      	mov	r5, r3
 8009cb2:	f7f6 fc4d 	bl	8000550 <__aeabi_dmul>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	460b      	mov	r3, r1
 8009cba:	4630      	mov	r0, r6
 8009cbc:	4639      	mov	r1, r7
 8009cbe:	f7f6 fa8f 	bl	80001e0 <__aeabi_dsub>
 8009cc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	460f      	mov	r7, r1
 8009cca:	4620      	mov	r0, r4
 8009ccc:	4629      	mov	r1, r5
 8009cce:	f7f6 fa87 	bl	80001e0 <__aeabi_dsub>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009cda:	f7f6 fa81 	bl	80001e0 <__aeabi_dsub>
 8009cde:	4642      	mov	r2, r8
 8009ce0:	464b      	mov	r3, r9
 8009ce2:	f7f6 fc35 	bl	8000550 <__aeabi_dmul>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4630      	mov	r0, r6
 8009cec:	4639      	mov	r1, r7
 8009cee:	f7f6 fa77 	bl	80001e0 <__aeabi_dsub>
 8009cf2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009cf6:	f7f6 fc2b 	bl	8000550 <__aeabi_dmul>
 8009cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d02:	4610      	mov	r0, r2
 8009d04:	4619      	mov	r1, r3
 8009d06:	f7f6 fc23 	bl	8000550 <__aeabi_dmul>
 8009d0a:	a37b      	add	r3, pc, #492	; (adr r3, 8009ef8 <__ieee754_pow+0x6d0>)
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	4604      	mov	r4, r0
 8009d12:	460d      	mov	r5, r1
 8009d14:	f7f6 fc1c 	bl	8000550 <__aeabi_dmul>
 8009d18:	a379      	add	r3, pc, #484	; (adr r3, 8009f00 <__ieee754_pow+0x6d8>)
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	f7f6 fa61 	bl	80001e4 <__adddf3>
 8009d22:	4622      	mov	r2, r4
 8009d24:	462b      	mov	r3, r5
 8009d26:	f7f6 fc13 	bl	8000550 <__aeabi_dmul>
 8009d2a:	a377      	add	r3, pc, #476	; (adr r3, 8009f08 <__ieee754_pow+0x6e0>)
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	f7f6 fa58 	bl	80001e4 <__adddf3>
 8009d34:	4622      	mov	r2, r4
 8009d36:	462b      	mov	r3, r5
 8009d38:	f7f6 fc0a 	bl	8000550 <__aeabi_dmul>
 8009d3c:	a374      	add	r3, pc, #464	; (adr r3, 8009f10 <__ieee754_pow+0x6e8>)
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	f7f6 fa4f 	bl	80001e4 <__adddf3>
 8009d46:	4622      	mov	r2, r4
 8009d48:	462b      	mov	r3, r5
 8009d4a:	f7f6 fc01 	bl	8000550 <__aeabi_dmul>
 8009d4e:	a372      	add	r3, pc, #456	; (adr r3, 8009f18 <__ieee754_pow+0x6f0>)
 8009d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d54:	f7f6 fa46 	bl	80001e4 <__adddf3>
 8009d58:	4622      	mov	r2, r4
 8009d5a:	462b      	mov	r3, r5
 8009d5c:	f7f6 fbf8 	bl	8000550 <__aeabi_dmul>
 8009d60:	a36f      	add	r3, pc, #444	; (adr r3, 8009f20 <__ieee754_pow+0x6f8>)
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	f7f6 fa3d 	bl	80001e4 <__adddf3>
 8009d6a:	4622      	mov	r2, r4
 8009d6c:	4606      	mov	r6, r0
 8009d6e:	460f      	mov	r7, r1
 8009d70:	462b      	mov	r3, r5
 8009d72:	4620      	mov	r0, r4
 8009d74:	4629      	mov	r1, r5
 8009d76:	f7f6 fbeb 	bl	8000550 <__aeabi_dmul>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4630      	mov	r0, r6
 8009d80:	4639      	mov	r1, r7
 8009d82:	f7f6 fbe5 	bl	8000550 <__aeabi_dmul>
 8009d86:	4642      	mov	r2, r8
 8009d88:	4604      	mov	r4, r0
 8009d8a:	460d      	mov	r5, r1
 8009d8c:	464b      	mov	r3, r9
 8009d8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d92:	f7f6 fa27 	bl	80001e4 <__adddf3>
 8009d96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d9a:	f7f6 fbd9 	bl	8000550 <__aeabi_dmul>
 8009d9e:	4622      	mov	r2, r4
 8009da0:	462b      	mov	r3, r5
 8009da2:	f7f6 fa1f 	bl	80001e4 <__adddf3>
 8009da6:	4642      	mov	r2, r8
 8009da8:	4606      	mov	r6, r0
 8009daa:	460f      	mov	r7, r1
 8009dac:	464b      	mov	r3, r9
 8009dae:	4640      	mov	r0, r8
 8009db0:	4649      	mov	r1, r9
 8009db2:	f7f6 fbcd 	bl	8000550 <__aeabi_dmul>
 8009db6:	2200      	movs	r2, #0
 8009db8:	4b68      	ldr	r3, [pc, #416]	; (8009f5c <__ieee754_pow+0x734>)
 8009dba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009dbe:	f7f6 fa11 	bl	80001e4 <__adddf3>
 8009dc2:	4632      	mov	r2, r6
 8009dc4:	463b      	mov	r3, r7
 8009dc6:	f7f6 fa0d 	bl	80001e4 <__adddf3>
 8009dca:	9802      	ldr	r0, [sp, #8]
 8009dcc:	460d      	mov	r5, r1
 8009dce:	4604      	mov	r4, r0
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4640      	mov	r0, r8
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	f7f6 fbba 	bl	8000550 <__aeabi_dmul>
 8009ddc:	2200      	movs	r2, #0
 8009dde:	4680      	mov	r8, r0
 8009de0:	4689      	mov	r9, r1
 8009de2:	4b5e      	ldr	r3, [pc, #376]	; (8009f5c <__ieee754_pow+0x734>)
 8009de4:	4620      	mov	r0, r4
 8009de6:	4629      	mov	r1, r5
 8009de8:	f7f6 f9fa 	bl	80001e0 <__aeabi_dsub>
 8009dec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009df0:	f7f6 f9f6 	bl	80001e0 <__aeabi_dsub>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	4630      	mov	r0, r6
 8009dfa:	4639      	mov	r1, r7
 8009dfc:	f7f6 f9f0 	bl	80001e0 <__aeabi_dsub>
 8009e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e04:	f7f6 fba4 	bl	8000550 <__aeabi_dmul>
 8009e08:	4622      	mov	r2, r4
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	460f      	mov	r7, r1
 8009e0e:	462b      	mov	r3, r5
 8009e10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e14:	f7f6 fb9c 	bl	8000550 <__aeabi_dmul>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	4639      	mov	r1, r7
 8009e20:	f7f6 f9e0 	bl	80001e4 <__adddf3>
 8009e24:	4606      	mov	r6, r0
 8009e26:	460f      	mov	r7, r1
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4640      	mov	r0, r8
 8009e2e:	4649      	mov	r1, r9
 8009e30:	f7f6 f9d8 	bl	80001e4 <__adddf3>
 8009e34:	9802      	ldr	r0, [sp, #8]
 8009e36:	a33c      	add	r3, pc, #240	; (adr r3, 8009f28 <__ieee754_pow+0x700>)
 8009e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	460d      	mov	r5, r1
 8009e40:	f7f6 fb86 	bl	8000550 <__aeabi_dmul>
 8009e44:	4642      	mov	r2, r8
 8009e46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e4a:	464b      	mov	r3, r9
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	4629      	mov	r1, r5
 8009e50:	f7f6 f9c6 	bl	80001e0 <__aeabi_dsub>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4630      	mov	r0, r6
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	f7f6 f9c0 	bl	80001e0 <__aeabi_dsub>
 8009e60:	a333      	add	r3, pc, #204	; (adr r3, 8009f30 <__ieee754_pow+0x708>)
 8009e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e66:	f7f6 fb73 	bl	8000550 <__aeabi_dmul>
 8009e6a:	a333      	add	r3, pc, #204	; (adr r3, 8009f38 <__ieee754_pow+0x710>)
 8009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e70:	4606      	mov	r6, r0
 8009e72:	460f      	mov	r7, r1
 8009e74:	4620      	mov	r0, r4
 8009e76:	4629      	mov	r1, r5
 8009e78:	f7f6 fb6a 	bl	8000550 <__aeabi_dmul>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4630      	mov	r0, r6
 8009e82:	4639      	mov	r1, r7
 8009e84:	f7f6 f9ae 	bl	80001e4 <__adddf3>
 8009e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e8a:	4b35      	ldr	r3, [pc, #212]	; (8009f60 <__ieee754_pow+0x738>)
 8009e8c:	4413      	add	r3, r2
 8009e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e92:	f7f6 f9a7 	bl	80001e4 <__adddf3>
 8009e96:	4604      	mov	r4, r0
 8009e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e9a:	460d      	mov	r5, r1
 8009e9c:	f7f6 faee 	bl	800047c <__aeabi_i2d>
 8009ea0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ea2:	4b30      	ldr	r3, [pc, #192]	; (8009f64 <__ieee754_pow+0x73c>)
 8009ea4:	4413      	add	r3, r2
 8009ea6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009eaa:	4606      	mov	r6, r0
 8009eac:	460f      	mov	r7, r1
 8009eae:	4622      	mov	r2, r4
 8009eb0:	462b      	mov	r3, r5
 8009eb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009eb6:	f7f6 f995 	bl	80001e4 <__adddf3>
 8009eba:	4642      	mov	r2, r8
 8009ebc:	464b      	mov	r3, r9
 8009ebe:	f7f6 f991 	bl	80001e4 <__adddf3>
 8009ec2:	4632      	mov	r2, r6
 8009ec4:	463b      	mov	r3, r7
 8009ec6:	f7f6 f98d 	bl	80001e4 <__adddf3>
 8009eca:	9802      	ldr	r0, [sp, #8]
 8009ecc:	4632      	mov	r2, r6
 8009ece:	463b      	mov	r3, r7
 8009ed0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ed4:	f7f6 f984 	bl	80001e0 <__aeabi_dsub>
 8009ed8:	4642      	mov	r2, r8
 8009eda:	464b      	mov	r3, r9
 8009edc:	f7f6 f980 	bl	80001e0 <__aeabi_dsub>
 8009ee0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ee4:	e607      	b.n	8009af6 <__ieee754_pow+0x2ce>
 8009ee6:	f04f 0a01 	mov.w	sl, #1
 8009eea:	e6a5      	b.n	8009c38 <__ieee754_pow+0x410>
 8009eec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009f40 <__ieee754_pow+0x718>
 8009ef0:	e613      	b.n	8009b1a <__ieee754_pow+0x2f2>
 8009ef2:	bf00      	nop
 8009ef4:	f3af 8000 	nop.w
 8009ef8:	4a454eef 	.word	0x4a454eef
 8009efc:	3fca7e28 	.word	0x3fca7e28
 8009f00:	93c9db65 	.word	0x93c9db65
 8009f04:	3fcd864a 	.word	0x3fcd864a
 8009f08:	a91d4101 	.word	0xa91d4101
 8009f0c:	3fd17460 	.word	0x3fd17460
 8009f10:	518f264d 	.word	0x518f264d
 8009f14:	3fd55555 	.word	0x3fd55555
 8009f18:	db6fabff 	.word	0xdb6fabff
 8009f1c:	3fdb6db6 	.word	0x3fdb6db6
 8009f20:	33333303 	.word	0x33333303
 8009f24:	3fe33333 	.word	0x3fe33333
 8009f28:	e0000000 	.word	0xe0000000
 8009f2c:	3feec709 	.word	0x3feec709
 8009f30:	dc3a03fd 	.word	0xdc3a03fd
 8009f34:	3feec709 	.word	0x3feec709
 8009f38:	145b01f5 	.word	0x145b01f5
 8009f3c:	be3e2fe0 	.word	0xbe3e2fe0
 8009f40:	00000000 	.word	0x00000000
 8009f44:	3ff00000 	.word	0x3ff00000
 8009f48:	43400000 	.word	0x43400000
 8009f4c:	0003988e 	.word	0x0003988e
 8009f50:	000bb679 	.word	0x000bb679
 8009f54:	0800a638 	.word	0x0800a638
 8009f58:	3ff00000 	.word	0x3ff00000
 8009f5c:	40080000 	.word	0x40080000
 8009f60:	0800a658 	.word	0x0800a658
 8009f64:	0800a648 	.word	0x0800a648
 8009f68:	a3b4      	add	r3, pc, #720	; (adr r3, 800a23c <__ieee754_pow+0xa14>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	4640      	mov	r0, r8
 8009f70:	4649      	mov	r1, r9
 8009f72:	f7f6 f937 	bl	80001e4 <__adddf3>
 8009f76:	4622      	mov	r2, r4
 8009f78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f7c:	462b      	mov	r3, r5
 8009f7e:	4630      	mov	r0, r6
 8009f80:	4639      	mov	r1, r7
 8009f82:	f7f6 f92d 	bl	80001e0 <__aeabi_dsub>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f8e:	f7f6 fd6f 	bl	8000a70 <__aeabi_dcmpgt>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	f47f adfe 	bne.w	8009b94 <__ieee754_pow+0x36c>
 8009f98:	4aa3      	ldr	r2, [pc, #652]	; (800a228 <__ieee754_pow+0xa00>)
 8009f9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	f340 810a 	ble.w	800a1b8 <__ieee754_pow+0x990>
 8009fa4:	151b      	asrs	r3, r3, #20
 8009fa6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009faa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009fae:	fa4a f303 	asr.w	r3, sl, r3
 8009fb2:	445b      	add	r3, fp
 8009fb4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009fb8:	4e9c      	ldr	r6, [pc, #624]	; (800a22c <__ieee754_pow+0xa04>)
 8009fba:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009fbe:	4116      	asrs	r6, r2
 8009fc0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	ea23 0106 	bic.w	r1, r3, r6
 8009fca:	f1c2 0214 	rsb	r2, r2, #20
 8009fce:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009fd2:	fa4a fa02 	asr.w	sl, sl, r2
 8009fd6:	f1bb 0f00 	cmp.w	fp, #0
 8009fda:	4602      	mov	r2, r0
 8009fdc:	460b      	mov	r3, r1
 8009fde:	4620      	mov	r0, r4
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	bfb8      	it	lt
 8009fe4:	f1ca 0a00 	rsblt	sl, sl, #0
 8009fe8:	f7f6 f8fa 	bl	80001e0 <__aeabi_dsub>
 8009fec:	e9cd 0100 	strd	r0, r1, [sp]
 8009ff0:	4642      	mov	r2, r8
 8009ff2:	464b      	mov	r3, r9
 8009ff4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ff8:	f7f6 f8f4 	bl	80001e4 <__adddf3>
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	a378      	add	r3, pc, #480	; (adr r3, 800a1e0 <__ieee754_pow+0x9b8>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	4604      	mov	r4, r0
 800a006:	460d      	mov	r5, r1
 800a008:	f7f6 faa2 	bl	8000550 <__aeabi_dmul>
 800a00c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a010:	4606      	mov	r6, r0
 800a012:	460f      	mov	r7, r1
 800a014:	4620      	mov	r0, r4
 800a016:	4629      	mov	r1, r5
 800a018:	f7f6 f8e2 	bl	80001e0 <__aeabi_dsub>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4640      	mov	r0, r8
 800a022:	4649      	mov	r1, r9
 800a024:	f7f6 f8dc 	bl	80001e0 <__aeabi_dsub>
 800a028:	a36f      	add	r3, pc, #444	; (adr r3, 800a1e8 <__ieee754_pow+0x9c0>)
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	f7f6 fa8f 	bl	8000550 <__aeabi_dmul>
 800a032:	a36f      	add	r3, pc, #444	; (adr r3, 800a1f0 <__ieee754_pow+0x9c8>)
 800a034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a038:	4680      	mov	r8, r0
 800a03a:	4689      	mov	r9, r1
 800a03c:	4620      	mov	r0, r4
 800a03e:	4629      	mov	r1, r5
 800a040:	f7f6 fa86 	bl	8000550 <__aeabi_dmul>
 800a044:	4602      	mov	r2, r0
 800a046:	460b      	mov	r3, r1
 800a048:	4640      	mov	r0, r8
 800a04a:	4649      	mov	r1, r9
 800a04c:	f7f6 f8ca 	bl	80001e4 <__adddf3>
 800a050:	4604      	mov	r4, r0
 800a052:	460d      	mov	r5, r1
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4630      	mov	r0, r6
 800a05a:	4639      	mov	r1, r7
 800a05c:	f7f6 f8c2 	bl	80001e4 <__adddf3>
 800a060:	4632      	mov	r2, r6
 800a062:	463b      	mov	r3, r7
 800a064:	4680      	mov	r8, r0
 800a066:	4689      	mov	r9, r1
 800a068:	f7f6 f8ba 	bl	80001e0 <__aeabi_dsub>
 800a06c:	4602      	mov	r2, r0
 800a06e:	460b      	mov	r3, r1
 800a070:	4620      	mov	r0, r4
 800a072:	4629      	mov	r1, r5
 800a074:	f7f6 f8b4 	bl	80001e0 <__aeabi_dsub>
 800a078:	4642      	mov	r2, r8
 800a07a:	4606      	mov	r6, r0
 800a07c:	460f      	mov	r7, r1
 800a07e:	464b      	mov	r3, r9
 800a080:	4640      	mov	r0, r8
 800a082:	4649      	mov	r1, r9
 800a084:	f7f6 fa64 	bl	8000550 <__aeabi_dmul>
 800a088:	a35b      	add	r3, pc, #364	; (adr r3, 800a1f8 <__ieee754_pow+0x9d0>)
 800a08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08e:	4604      	mov	r4, r0
 800a090:	460d      	mov	r5, r1
 800a092:	f7f6 fa5d 	bl	8000550 <__aeabi_dmul>
 800a096:	a35a      	add	r3, pc, #360	; (adr r3, 800a200 <__ieee754_pow+0x9d8>)
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	f7f6 f8a0 	bl	80001e0 <__aeabi_dsub>
 800a0a0:	4622      	mov	r2, r4
 800a0a2:	462b      	mov	r3, r5
 800a0a4:	f7f6 fa54 	bl	8000550 <__aeabi_dmul>
 800a0a8:	a357      	add	r3, pc, #348	; (adr r3, 800a208 <__ieee754_pow+0x9e0>)
 800a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ae:	f7f6 f899 	bl	80001e4 <__adddf3>
 800a0b2:	4622      	mov	r2, r4
 800a0b4:	462b      	mov	r3, r5
 800a0b6:	f7f6 fa4b 	bl	8000550 <__aeabi_dmul>
 800a0ba:	a355      	add	r3, pc, #340	; (adr r3, 800a210 <__ieee754_pow+0x9e8>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	f7f6 f88e 	bl	80001e0 <__aeabi_dsub>
 800a0c4:	4622      	mov	r2, r4
 800a0c6:	462b      	mov	r3, r5
 800a0c8:	f7f6 fa42 	bl	8000550 <__aeabi_dmul>
 800a0cc:	a352      	add	r3, pc, #328	; (adr r3, 800a218 <__ieee754_pow+0x9f0>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	f7f6 f887 	bl	80001e4 <__adddf3>
 800a0d6:	4622      	mov	r2, r4
 800a0d8:	462b      	mov	r3, r5
 800a0da:	f7f6 fa39 	bl	8000550 <__aeabi_dmul>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	f7f6 f87b 	bl	80001e0 <__aeabi_dsub>
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	460d      	mov	r5, r1
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	f7f6 fa2b 	bl	8000550 <__aeabi_dmul>
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	e9cd 0100 	strd	r0, r1, [sp]
 800a100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a104:	4620      	mov	r0, r4
 800a106:	4629      	mov	r1, r5
 800a108:	f7f6 f86a 	bl	80001e0 <__aeabi_dsub>
 800a10c:	4602      	mov	r2, r0
 800a10e:	460b      	mov	r3, r1
 800a110:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a114:	f7f6 fb46 	bl	80007a4 <__aeabi_ddiv>
 800a118:	4632      	mov	r2, r6
 800a11a:	4604      	mov	r4, r0
 800a11c:	460d      	mov	r5, r1
 800a11e:	463b      	mov	r3, r7
 800a120:	4640      	mov	r0, r8
 800a122:	4649      	mov	r1, r9
 800a124:	f7f6 fa14 	bl	8000550 <__aeabi_dmul>
 800a128:	4632      	mov	r2, r6
 800a12a:	463b      	mov	r3, r7
 800a12c:	f7f6 f85a 	bl	80001e4 <__adddf3>
 800a130:	4602      	mov	r2, r0
 800a132:	460b      	mov	r3, r1
 800a134:	4620      	mov	r0, r4
 800a136:	4629      	mov	r1, r5
 800a138:	f7f6 f852 	bl	80001e0 <__aeabi_dsub>
 800a13c:	4642      	mov	r2, r8
 800a13e:	464b      	mov	r3, r9
 800a140:	f7f6 f84e 	bl	80001e0 <__aeabi_dsub>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	2000      	movs	r0, #0
 800a14a:	4939      	ldr	r1, [pc, #228]	; (800a230 <__ieee754_pow+0xa08>)
 800a14c:	f7f6 f848 	bl	80001e0 <__aeabi_dsub>
 800a150:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a154:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	da2f      	bge.n	800a1be <__ieee754_pow+0x996>
 800a15e:	4650      	mov	r0, sl
 800a160:	ec43 2b10 	vmov	d0, r2, r3
 800a164:	f000 f9c0 	bl	800a4e8 <scalbn>
 800a168:	ec51 0b10 	vmov	r0, r1, d0
 800a16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a170:	f7ff bbf1 	b.w	8009956 <__ieee754_pow+0x12e>
 800a174:	4b2f      	ldr	r3, [pc, #188]	; (800a234 <__ieee754_pow+0xa0c>)
 800a176:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a17a:	429e      	cmp	r6, r3
 800a17c:	f77f af0c 	ble.w	8009f98 <__ieee754_pow+0x770>
 800a180:	4b2d      	ldr	r3, [pc, #180]	; (800a238 <__ieee754_pow+0xa10>)
 800a182:	440b      	add	r3, r1
 800a184:	4303      	orrs	r3, r0
 800a186:	d00b      	beq.n	800a1a0 <__ieee754_pow+0x978>
 800a188:	a325      	add	r3, pc, #148	; (adr r3, 800a220 <__ieee754_pow+0x9f8>)
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a192:	f7f6 f9dd 	bl	8000550 <__aeabi_dmul>
 800a196:	a322      	add	r3, pc, #136	; (adr r3, 800a220 <__ieee754_pow+0x9f8>)
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	f7ff bbdb 	b.w	8009956 <__ieee754_pow+0x12e>
 800a1a0:	4622      	mov	r2, r4
 800a1a2:	462b      	mov	r3, r5
 800a1a4:	f7f6 f81c 	bl	80001e0 <__aeabi_dsub>
 800a1a8:	4642      	mov	r2, r8
 800a1aa:	464b      	mov	r3, r9
 800a1ac:	f7f6 fc56 	bl	8000a5c <__aeabi_dcmpge>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	f43f aef1 	beq.w	8009f98 <__ieee754_pow+0x770>
 800a1b6:	e7e7      	b.n	800a188 <__ieee754_pow+0x960>
 800a1b8:	f04f 0a00 	mov.w	sl, #0
 800a1bc:	e718      	b.n	8009ff0 <__ieee754_pow+0x7c8>
 800a1be:	4621      	mov	r1, r4
 800a1c0:	e7d4      	b.n	800a16c <__ieee754_pow+0x944>
 800a1c2:	2000      	movs	r0, #0
 800a1c4:	491a      	ldr	r1, [pc, #104]	; (800a230 <__ieee754_pow+0xa08>)
 800a1c6:	f7ff bb8f 	b.w	80098e8 <__ieee754_pow+0xc0>
 800a1ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1ce:	f7ff bb8b 	b.w	80098e8 <__ieee754_pow+0xc0>
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	4639      	mov	r1, r7
 800a1d6:	f7ff bb87 	b.w	80098e8 <__ieee754_pow+0xc0>
 800a1da:	4693      	mov	fp, r2
 800a1dc:	f7ff bb98 	b.w	8009910 <__ieee754_pow+0xe8>
 800a1e0:	00000000 	.word	0x00000000
 800a1e4:	3fe62e43 	.word	0x3fe62e43
 800a1e8:	fefa39ef 	.word	0xfefa39ef
 800a1ec:	3fe62e42 	.word	0x3fe62e42
 800a1f0:	0ca86c39 	.word	0x0ca86c39
 800a1f4:	be205c61 	.word	0xbe205c61
 800a1f8:	72bea4d0 	.word	0x72bea4d0
 800a1fc:	3e663769 	.word	0x3e663769
 800a200:	c5d26bf1 	.word	0xc5d26bf1
 800a204:	3ebbbd41 	.word	0x3ebbbd41
 800a208:	af25de2c 	.word	0xaf25de2c
 800a20c:	3f11566a 	.word	0x3f11566a
 800a210:	16bebd93 	.word	0x16bebd93
 800a214:	3f66c16c 	.word	0x3f66c16c
 800a218:	5555553e 	.word	0x5555553e
 800a21c:	3fc55555 	.word	0x3fc55555
 800a220:	c2f8f359 	.word	0xc2f8f359
 800a224:	01a56e1f 	.word	0x01a56e1f
 800a228:	3fe00000 	.word	0x3fe00000
 800a22c:	000fffff 	.word	0x000fffff
 800a230:	3ff00000 	.word	0x3ff00000
 800a234:	4090cbff 	.word	0x4090cbff
 800a238:	3f6f3400 	.word	0x3f6f3400
 800a23c:	652b82fe 	.word	0x652b82fe
 800a240:	3c971547 	.word	0x3c971547

0800a244 <__ieee754_sqrt>:
 800a244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a248:	4955      	ldr	r1, [pc, #340]	; (800a3a0 <__ieee754_sqrt+0x15c>)
 800a24a:	ec55 4b10 	vmov	r4, r5, d0
 800a24e:	43a9      	bics	r1, r5
 800a250:	462b      	mov	r3, r5
 800a252:	462a      	mov	r2, r5
 800a254:	d112      	bne.n	800a27c <__ieee754_sqrt+0x38>
 800a256:	ee10 2a10 	vmov	r2, s0
 800a25a:	ee10 0a10 	vmov	r0, s0
 800a25e:	4629      	mov	r1, r5
 800a260:	f7f6 f976 	bl	8000550 <__aeabi_dmul>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	4620      	mov	r0, r4
 800a26a:	4629      	mov	r1, r5
 800a26c:	f7f5 ffba 	bl	80001e4 <__adddf3>
 800a270:	4604      	mov	r4, r0
 800a272:	460d      	mov	r5, r1
 800a274:	ec45 4b10 	vmov	d0, r4, r5
 800a278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a27c:	2d00      	cmp	r5, #0
 800a27e:	ee10 0a10 	vmov	r0, s0
 800a282:	4621      	mov	r1, r4
 800a284:	dc0f      	bgt.n	800a2a6 <__ieee754_sqrt+0x62>
 800a286:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a28a:	4330      	orrs	r0, r6
 800a28c:	d0f2      	beq.n	800a274 <__ieee754_sqrt+0x30>
 800a28e:	b155      	cbz	r5, 800a2a6 <__ieee754_sqrt+0x62>
 800a290:	ee10 2a10 	vmov	r2, s0
 800a294:	4620      	mov	r0, r4
 800a296:	4629      	mov	r1, r5
 800a298:	f7f5 ffa2 	bl	80001e0 <__aeabi_dsub>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	f7f6 fa80 	bl	80007a4 <__aeabi_ddiv>
 800a2a4:	e7e4      	b.n	800a270 <__ieee754_sqrt+0x2c>
 800a2a6:	151b      	asrs	r3, r3, #20
 800a2a8:	d073      	beq.n	800a392 <__ieee754_sqrt+0x14e>
 800a2aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a2ae:	07dd      	lsls	r5, r3, #31
 800a2b0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a2b4:	bf48      	it	mi
 800a2b6:	0fc8      	lsrmi	r0, r1, #31
 800a2b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a2bc:	bf44      	itt	mi
 800a2be:	0049      	lslmi	r1, r1, #1
 800a2c0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a2c4:	2500      	movs	r5, #0
 800a2c6:	1058      	asrs	r0, r3, #1
 800a2c8:	0fcb      	lsrs	r3, r1, #31
 800a2ca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a2ce:	0049      	lsls	r1, r1, #1
 800a2d0:	2316      	movs	r3, #22
 800a2d2:	462c      	mov	r4, r5
 800a2d4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a2d8:	19a7      	adds	r7, r4, r6
 800a2da:	4297      	cmp	r7, r2
 800a2dc:	bfde      	ittt	le
 800a2de:	19bc      	addle	r4, r7, r6
 800a2e0:	1bd2      	suble	r2, r2, r7
 800a2e2:	19ad      	addle	r5, r5, r6
 800a2e4:	0fcf      	lsrs	r7, r1, #31
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a2ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a2f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a2f4:	d1f0      	bne.n	800a2d8 <__ieee754_sqrt+0x94>
 800a2f6:	f04f 0c20 	mov.w	ip, #32
 800a2fa:	469e      	mov	lr, r3
 800a2fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a300:	42a2      	cmp	r2, r4
 800a302:	eb06 070e 	add.w	r7, r6, lr
 800a306:	dc02      	bgt.n	800a30e <__ieee754_sqrt+0xca>
 800a308:	d112      	bne.n	800a330 <__ieee754_sqrt+0xec>
 800a30a:	428f      	cmp	r7, r1
 800a30c:	d810      	bhi.n	800a330 <__ieee754_sqrt+0xec>
 800a30e:	2f00      	cmp	r7, #0
 800a310:	eb07 0e06 	add.w	lr, r7, r6
 800a314:	da42      	bge.n	800a39c <__ieee754_sqrt+0x158>
 800a316:	f1be 0f00 	cmp.w	lr, #0
 800a31a:	db3f      	blt.n	800a39c <__ieee754_sqrt+0x158>
 800a31c:	f104 0801 	add.w	r8, r4, #1
 800a320:	1b12      	subs	r2, r2, r4
 800a322:	428f      	cmp	r7, r1
 800a324:	bf88      	it	hi
 800a326:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a32a:	1bc9      	subs	r1, r1, r7
 800a32c:	4433      	add	r3, r6
 800a32e:	4644      	mov	r4, r8
 800a330:	0052      	lsls	r2, r2, #1
 800a332:	f1bc 0c01 	subs.w	ip, ip, #1
 800a336:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a33a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a33e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a342:	d1dd      	bne.n	800a300 <__ieee754_sqrt+0xbc>
 800a344:	430a      	orrs	r2, r1
 800a346:	d006      	beq.n	800a356 <__ieee754_sqrt+0x112>
 800a348:	1c5c      	adds	r4, r3, #1
 800a34a:	bf13      	iteet	ne
 800a34c:	3301      	addne	r3, #1
 800a34e:	3501      	addeq	r5, #1
 800a350:	4663      	moveq	r3, ip
 800a352:	f023 0301 	bicne.w	r3, r3, #1
 800a356:	106a      	asrs	r2, r5, #1
 800a358:	085b      	lsrs	r3, r3, #1
 800a35a:	07e9      	lsls	r1, r5, #31
 800a35c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a360:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a364:	bf48      	it	mi
 800a366:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a36a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a36e:	461c      	mov	r4, r3
 800a370:	e780      	b.n	800a274 <__ieee754_sqrt+0x30>
 800a372:	0aca      	lsrs	r2, r1, #11
 800a374:	3815      	subs	r0, #21
 800a376:	0549      	lsls	r1, r1, #21
 800a378:	2a00      	cmp	r2, #0
 800a37a:	d0fa      	beq.n	800a372 <__ieee754_sqrt+0x12e>
 800a37c:	02d6      	lsls	r6, r2, #11
 800a37e:	d50a      	bpl.n	800a396 <__ieee754_sqrt+0x152>
 800a380:	f1c3 0420 	rsb	r4, r3, #32
 800a384:	fa21 f404 	lsr.w	r4, r1, r4
 800a388:	1e5d      	subs	r5, r3, #1
 800a38a:	4099      	lsls	r1, r3
 800a38c:	4322      	orrs	r2, r4
 800a38e:	1b43      	subs	r3, r0, r5
 800a390:	e78b      	b.n	800a2aa <__ieee754_sqrt+0x66>
 800a392:	4618      	mov	r0, r3
 800a394:	e7f0      	b.n	800a378 <__ieee754_sqrt+0x134>
 800a396:	0052      	lsls	r2, r2, #1
 800a398:	3301      	adds	r3, #1
 800a39a:	e7ef      	b.n	800a37c <__ieee754_sqrt+0x138>
 800a39c:	46a0      	mov	r8, r4
 800a39e:	e7bf      	b.n	800a320 <__ieee754_sqrt+0xdc>
 800a3a0:	7ff00000 	.word	0x7ff00000

0800a3a4 <fabs>:
 800a3a4:	ec51 0b10 	vmov	r0, r1, d0
 800a3a8:	ee10 2a10 	vmov	r2, s0
 800a3ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3b0:	ec43 2b10 	vmov	d0, r2, r3
 800a3b4:	4770      	bx	lr

0800a3b6 <finite>:
 800a3b6:	ee10 3a90 	vmov	r3, s1
 800a3ba:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a3be:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a3c2:	0fc0      	lsrs	r0, r0, #31
 800a3c4:	4770      	bx	lr

0800a3c6 <matherr>:
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	4770      	bx	lr
 800a3ca:	0000      	movs	r0, r0
 800a3cc:	0000      	movs	r0, r0
	...

0800a3d0 <nan>:
 800a3d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a3d8 <nan+0x8>
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	00000000 	.word	0x00000000
 800a3dc:	7ff80000 	.word	0x7ff80000

0800a3e0 <rint>:
 800a3e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3e2:	ec51 0b10 	vmov	r0, r1, d0
 800a3e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a3ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a3ee:	2e13      	cmp	r6, #19
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	ee10 4a10 	vmov	r4, s0
 800a3f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a3fa:	dc56      	bgt.n	800a4aa <rint+0xca>
 800a3fc:	2e00      	cmp	r6, #0
 800a3fe:	da2b      	bge.n	800a458 <rint+0x78>
 800a400:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a404:	4302      	orrs	r2, r0
 800a406:	d023      	beq.n	800a450 <rint+0x70>
 800a408:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a40c:	4302      	orrs	r2, r0
 800a40e:	4254      	negs	r4, r2
 800a410:	4314      	orrs	r4, r2
 800a412:	0c4b      	lsrs	r3, r1, #17
 800a414:	0b24      	lsrs	r4, r4, #12
 800a416:	045b      	lsls	r3, r3, #17
 800a418:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a41c:	ea44 0103 	orr.w	r1, r4, r3
 800a420:	460b      	mov	r3, r1
 800a422:	492f      	ldr	r1, [pc, #188]	; (800a4e0 <rint+0x100>)
 800a424:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a428:	e9d1 6700 	ldrd	r6, r7, [r1]
 800a42c:	4602      	mov	r2, r0
 800a42e:	4639      	mov	r1, r7
 800a430:	4630      	mov	r0, r6
 800a432:	f7f5 fed7 	bl	80001e4 <__adddf3>
 800a436:	e9cd 0100 	strd	r0, r1, [sp]
 800a43a:	463b      	mov	r3, r7
 800a43c:	4632      	mov	r2, r6
 800a43e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a442:	f7f5 fecd 	bl	80001e0 <__aeabi_dsub>
 800a446:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a44a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a44e:	4639      	mov	r1, r7
 800a450:	ec41 0b10 	vmov	d0, r0, r1
 800a454:	b003      	add	sp, #12
 800a456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a458:	4a22      	ldr	r2, [pc, #136]	; (800a4e4 <rint+0x104>)
 800a45a:	4132      	asrs	r2, r6
 800a45c:	ea01 0702 	and.w	r7, r1, r2
 800a460:	4307      	orrs	r7, r0
 800a462:	d0f5      	beq.n	800a450 <rint+0x70>
 800a464:	0852      	lsrs	r2, r2, #1
 800a466:	4011      	ands	r1, r2
 800a468:	430c      	orrs	r4, r1
 800a46a:	d00b      	beq.n	800a484 <rint+0xa4>
 800a46c:	ea23 0202 	bic.w	r2, r3, r2
 800a470:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a474:	2e13      	cmp	r6, #19
 800a476:	fa43 f306 	asr.w	r3, r3, r6
 800a47a:	bf0c      	ite	eq
 800a47c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a480:	2400      	movne	r4, #0
 800a482:	4313      	orrs	r3, r2
 800a484:	4916      	ldr	r1, [pc, #88]	; (800a4e0 <rint+0x100>)
 800a486:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a48a:	4622      	mov	r2, r4
 800a48c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a490:	4620      	mov	r0, r4
 800a492:	4629      	mov	r1, r5
 800a494:	f7f5 fea6 	bl	80001e4 <__adddf3>
 800a498:	e9cd 0100 	strd	r0, r1, [sp]
 800a49c:	4622      	mov	r2, r4
 800a49e:	462b      	mov	r3, r5
 800a4a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4a4:	f7f5 fe9c 	bl	80001e0 <__aeabi_dsub>
 800a4a8:	e7d2      	b.n	800a450 <rint+0x70>
 800a4aa:	2e33      	cmp	r6, #51	; 0x33
 800a4ac:	dd07      	ble.n	800a4be <rint+0xde>
 800a4ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a4b2:	d1cd      	bne.n	800a450 <rint+0x70>
 800a4b4:	ee10 2a10 	vmov	r2, s0
 800a4b8:	f7f5 fe94 	bl	80001e4 <__adddf3>
 800a4bc:	e7c8      	b.n	800a450 <rint+0x70>
 800a4be:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800a4c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4c6:	40f2      	lsrs	r2, r6
 800a4c8:	4210      	tst	r0, r2
 800a4ca:	d0c1      	beq.n	800a450 <rint+0x70>
 800a4cc:	0852      	lsrs	r2, r2, #1
 800a4ce:	4210      	tst	r0, r2
 800a4d0:	bf1f      	itttt	ne
 800a4d2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a4d6:	ea20 0202 	bicne.w	r2, r0, r2
 800a4da:	4134      	asrne	r4, r6
 800a4dc:	4314      	orrne	r4, r2
 800a4de:	e7d1      	b.n	800a484 <rint+0xa4>
 800a4e0:	0800a668 	.word	0x0800a668
 800a4e4:	000fffff 	.word	0x000fffff

0800a4e8 <scalbn>:
 800a4e8:	b570      	push	{r4, r5, r6, lr}
 800a4ea:	ec55 4b10 	vmov	r4, r5, d0
 800a4ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	462b      	mov	r3, r5
 800a4f6:	b9aa      	cbnz	r2, 800a524 <scalbn+0x3c>
 800a4f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a4fc:	4323      	orrs	r3, r4
 800a4fe:	d03b      	beq.n	800a578 <scalbn+0x90>
 800a500:	4b31      	ldr	r3, [pc, #196]	; (800a5c8 <scalbn+0xe0>)
 800a502:	4629      	mov	r1, r5
 800a504:	2200      	movs	r2, #0
 800a506:	ee10 0a10 	vmov	r0, s0
 800a50a:	f7f6 f821 	bl	8000550 <__aeabi_dmul>
 800a50e:	4b2f      	ldr	r3, [pc, #188]	; (800a5cc <scalbn+0xe4>)
 800a510:	429e      	cmp	r6, r3
 800a512:	4604      	mov	r4, r0
 800a514:	460d      	mov	r5, r1
 800a516:	da12      	bge.n	800a53e <scalbn+0x56>
 800a518:	a327      	add	r3, pc, #156	; (adr r3, 800a5b8 <scalbn+0xd0>)
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	f7f6 f817 	bl	8000550 <__aeabi_dmul>
 800a522:	e009      	b.n	800a538 <scalbn+0x50>
 800a524:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a528:	428a      	cmp	r2, r1
 800a52a:	d10c      	bne.n	800a546 <scalbn+0x5e>
 800a52c:	ee10 2a10 	vmov	r2, s0
 800a530:	4620      	mov	r0, r4
 800a532:	4629      	mov	r1, r5
 800a534:	f7f5 fe56 	bl	80001e4 <__adddf3>
 800a538:	4604      	mov	r4, r0
 800a53a:	460d      	mov	r5, r1
 800a53c:	e01c      	b.n	800a578 <scalbn+0x90>
 800a53e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a542:	460b      	mov	r3, r1
 800a544:	3a36      	subs	r2, #54	; 0x36
 800a546:	4432      	add	r2, r6
 800a548:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a54c:	428a      	cmp	r2, r1
 800a54e:	dd0b      	ble.n	800a568 <scalbn+0x80>
 800a550:	ec45 4b11 	vmov	d1, r4, r5
 800a554:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a5c0 <scalbn+0xd8>
 800a558:	f000 f83c 	bl	800a5d4 <copysign>
 800a55c:	a318      	add	r3, pc, #96	; (adr r3, 800a5c0 <scalbn+0xd8>)
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	ec51 0b10 	vmov	r0, r1, d0
 800a566:	e7da      	b.n	800a51e <scalbn+0x36>
 800a568:	2a00      	cmp	r2, #0
 800a56a:	dd08      	ble.n	800a57e <scalbn+0x96>
 800a56c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a570:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a574:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a578:	ec45 4b10 	vmov	d0, r4, r5
 800a57c:	bd70      	pop	{r4, r5, r6, pc}
 800a57e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a582:	da0d      	bge.n	800a5a0 <scalbn+0xb8>
 800a584:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a588:	429e      	cmp	r6, r3
 800a58a:	ec45 4b11 	vmov	d1, r4, r5
 800a58e:	dce1      	bgt.n	800a554 <scalbn+0x6c>
 800a590:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a5b8 <scalbn+0xd0>
 800a594:	f000 f81e 	bl	800a5d4 <copysign>
 800a598:	a307      	add	r3, pc, #28	; (adr r3, 800a5b8 <scalbn+0xd0>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	e7e0      	b.n	800a562 <scalbn+0x7a>
 800a5a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a5a4:	3236      	adds	r2, #54	; 0x36
 800a5a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a5aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	4b06      	ldr	r3, [pc, #24]	; (800a5d0 <scalbn+0xe8>)
 800a5b6:	e7b2      	b.n	800a51e <scalbn+0x36>
 800a5b8:	c2f8f359 	.word	0xc2f8f359
 800a5bc:	01a56e1f 	.word	0x01a56e1f
 800a5c0:	8800759c 	.word	0x8800759c
 800a5c4:	7e37e43c 	.word	0x7e37e43c
 800a5c8:	43500000 	.word	0x43500000
 800a5cc:	ffff3cb0 	.word	0xffff3cb0
 800a5d0:	3c900000 	.word	0x3c900000

0800a5d4 <copysign>:
 800a5d4:	ec51 0b10 	vmov	r0, r1, d0
 800a5d8:	ee11 0a90 	vmov	r0, s3
 800a5dc:	ee10 2a10 	vmov	r2, s0
 800a5e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a5e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a5e8:	ea41 0300 	orr.w	r3, r1, r0
 800a5ec:	ec43 2b10 	vmov	d0, r2, r3
 800a5f0:	4770      	bx	lr
	...

0800a5f4 <_init>:
 800a5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f6:	bf00      	nop
 800a5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5fa:	bc08      	pop	{r3}
 800a5fc:	469e      	mov	lr, r3
 800a5fe:	4770      	bx	lr

0800a600 <_fini>:
 800a600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a602:	bf00      	nop
 800a604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a606:	bc08      	pop	{r3}
 800a608:	469e      	mov	lr, r3
 800a60a:	4770      	bx	lr
