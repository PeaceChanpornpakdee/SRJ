
SRJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1f4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a390  0800a390  0001a390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3f8  0800a3f8  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3f8  0800a3f8  0001a3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a400  0800a400  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a400  0800a400  0001a400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a404  0800a404  0001a404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800a408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  200000b0  0800a4b8  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  0800a4b8  00020474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f358  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dfd  00000000  00000000  0002f438  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  00031238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec8  00000000  00000000  000321c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016e0c  00000000  00000000  00033088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad15  00000000  00000000  00049e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090735  00000000  00000000  00054ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e52de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004844  00000000  00000000  000e535c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b0 	.word	0x200000b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a374 	.word	0x0800a374

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000b4 	.word	0x200000b4
 80001d4:	0800a374 	.word	0x0800a374

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	d1ed      	bne.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d80:	f000 b972 	b.w	8001068 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9e08      	ldr	r6, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	4688      	mov	r8, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d14b      	bne.n	8000e42 <__udivmoddi4+0xa6>
 8000daa:	428a      	cmp	r2, r1
 8000dac:	4615      	mov	r5, r2
 8000dae:	d967      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	b14a      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db6:	f1c2 0720 	rsb	r7, r2, #32
 8000dba:	fa01 f302 	lsl.w	r3, r1, r2
 8000dbe:	fa20 f707 	lsr.w	r7, r0, r7
 8000dc2:	4095      	lsls	r5, r2
 8000dc4:	ea47 0803 	orr.w	r8, r7, r3
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000dd4:	fa1f fc85 	uxth.w	ip, r5
 8000dd8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ddc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de0:	fb07 f10c 	mul.w	r1, r7, ip
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18eb      	adds	r3, r5, r3
 8000dea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000dee:	f080 811b 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8118 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000df8:	3f02      	subs	r7, #2
 8000dfa:	442b      	add	r3, r5
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e10:	45a4      	cmp	ip, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	f080 8107 	bcs.w	800102c <__udivmoddi4+0x290>
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	f240 8104 	bls.w	800102c <__udivmoddi4+0x290>
 8000e24:	3802      	subs	r0, #2
 8000e26:	442c      	add	r4, r5
 8000e28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e2c:	eba4 040c 	sub.w	r4, r4, ip
 8000e30:	2700      	movs	r7, #0
 8000e32:	b11e      	cbz	r6, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d909      	bls.n	8000e5a <__udivmoddi4+0xbe>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	f000 80eb 	beq.w	8001022 <__udivmoddi4+0x286>
 8000e4c:	2700      	movs	r7, #0
 8000e4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000e52:	4638      	mov	r0, r7
 8000e54:	4639      	mov	r1, r7
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	fab3 f783 	clz	r7, r3
 8000e5e:	2f00      	cmp	r7, #0
 8000e60:	d147      	bne.n	8000ef2 <__udivmoddi4+0x156>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d302      	bcc.n	8000e6c <__udivmoddi4+0xd0>
 8000e66:	4282      	cmp	r2, r0
 8000e68:	f200 80fa 	bhi.w	8001060 <__udivmoddi4+0x2c4>
 8000e6c:	1a84      	subs	r4, r0, r2
 8000e6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e72:	2001      	movs	r0, #1
 8000e74:	4698      	mov	r8, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d0e0      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000e7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000e7e:	e7dd      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000e80:	b902      	cbnz	r2, 8000e84 <__udivmoddi4+0xe8>
 8000e82:	deff      	udf	#255	; 0xff
 8000e84:	fab2 f282 	clz	r2, r2
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	f040 808f 	bne.w	8000fac <__udivmoddi4+0x210>
 8000e8e:	1b49      	subs	r1, r1, r5
 8000e90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e94:	fa1f f885 	uxth.w	r8, r5
 8000e98:	2701      	movs	r7, #1
 8000e9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e9e:	0c23      	lsrs	r3, r4, #16
 8000ea0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ea4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea8:	fb08 f10c 	mul.w	r1, r8, ip
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0x124>
 8000eb0:	18eb      	adds	r3, r5, r3
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x122>
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	f200 80cd 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1a59      	subs	r1, r3, r1
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ecc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x14c>
 8000ed8:	192c      	adds	r4, r5, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x14a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80b6 	bhi.w	8001052 <__udivmoddi4+0x2b6>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e79f      	b.n	8000e32 <__udivmoddi4+0x96>
 8000ef2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ef6:	40bb      	lsls	r3, r7
 8000ef8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000efc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000f00:	fa01 f407 	lsl.w	r4, r1, r7
 8000f04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000f08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000f0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000f10:	4325      	orrs	r5, r4
 8000f12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000f16:	0c2c      	lsrs	r4, r5, #16
 8000f18:	fb08 3319 	mls	r3, r8, r9, r3
 8000f1c:	fa1f fa8e 	uxth.w	sl, lr
 8000f20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f24:	fb09 f40a 	mul.w	r4, r9, sl
 8000f28:	429c      	cmp	r4, r3
 8000f2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000f2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b0>
 8000f34:	eb1e 0303 	adds.w	r3, lr, r3
 8000f38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f3c:	f080 8087 	bcs.w	800104e <__udivmoddi4+0x2b2>
 8000f40:	429c      	cmp	r4, r3
 8000f42:	f240 8084 	bls.w	800104e <__udivmoddi4+0x2b2>
 8000f46:	f1a9 0902 	sub.w	r9, r9, #2
 8000f4a:	4473      	add	r3, lr
 8000f4c:	1b1b      	subs	r3, r3, r4
 8000f4e:	b2ad      	uxth	r5, r5
 8000f50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f54:	fb08 3310 	mls	r3, r8, r0, r3
 8000f58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f60:	45a2      	cmp	sl, r4
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1da>
 8000f64:	eb1e 0404 	adds.w	r4, lr, r4
 8000f68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f6c:	d26b      	bcs.n	8001046 <__udivmoddi4+0x2aa>
 8000f6e:	45a2      	cmp	sl, r4
 8000f70:	d969      	bls.n	8001046 <__udivmoddi4+0x2aa>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4474      	add	r4, lr
 8000f76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7e:	eba4 040a 	sub.w	r4, r4, sl
 8000f82:	454c      	cmp	r4, r9
 8000f84:	46c2      	mov	sl, r8
 8000f86:	464b      	mov	r3, r9
 8000f88:	d354      	bcc.n	8001034 <__udivmoddi4+0x298>
 8000f8a:	d051      	beq.n	8001030 <__udivmoddi4+0x294>
 8000f8c:	2e00      	cmp	r6, #0
 8000f8e:	d069      	beq.n	8001064 <__udivmoddi4+0x2c8>
 8000f90:	ebb1 050a 	subs.w	r5, r1, sl
 8000f94:	eb64 0403 	sbc.w	r4, r4, r3
 8000f98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f9c:	40fd      	lsrs	r5, r7
 8000f9e:	40fc      	lsrs	r4, r7
 8000fa0:	ea4c 0505 	orr.w	r5, ip, r5
 8000fa4:	e9c6 5400 	strd	r5, r4, [r6]
 8000fa8:	2700      	movs	r7, #0
 8000faa:	e747      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000fac:	f1c2 0320 	rsb	r3, r2, #32
 8000fb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000fb4:	4095      	lsls	r5, r2
 8000fb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000fba:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fc2:	4338      	orrs	r0, r7
 8000fc4:	0c01      	lsrs	r1, r0, #16
 8000fc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fca:	fa1f f885 	uxth.w	r8, r5
 8000fce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd6:	fb07 f308 	mul.w	r3, r7, r8
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d907      	bls.n	8000ff2 <__udivmoddi4+0x256>
 8000fe2:	1869      	adds	r1, r5, r1
 8000fe4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000fe8:	d22f      	bcs.n	800104a <__udivmoddi4+0x2ae>
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d92d      	bls.n	800104a <__udivmoddi4+0x2ae>
 8000fee:	3f02      	subs	r7, #2
 8000ff0:	4429      	add	r1, r5
 8000ff2:	1acb      	subs	r3, r1, r3
 8000ff4:	b281      	uxth	r1, r0
 8000ff6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ffa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ffe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001002:	fb00 f308 	mul.w	r3, r0, r8
 8001006:	428b      	cmp	r3, r1
 8001008:	d907      	bls.n	800101a <__udivmoddi4+0x27e>
 800100a:	1869      	adds	r1, r5, r1
 800100c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8001010:	d217      	bcs.n	8001042 <__udivmoddi4+0x2a6>
 8001012:	428b      	cmp	r3, r1
 8001014:	d915      	bls.n	8001042 <__udivmoddi4+0x2a6>
 8001016:	3802      	subs	r0, #2
 8001018:	4429      	add	r1, r5
 800101a:	1ac9      	subs	r1, r1, r3
 800101c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001020:	e73b      	b.n	8000e9a <__udivmoddi4+0xfe>
 8001022:	4637      	mov	r7, r6
 8001024:	4630      	mov	r0, r6
 8001026:	e709      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001028:	4607      	mov	r7, r0
 800102a:	e6e7      	b.n	8000dfc <__udivmoddi4+0x60>
 800102c:	4618      	mov	r0, r3
 800102e:	e6fb      	b.n	8000e28 <__udivmoddi4+0x8c>
 8001030:	4541      	cmp	r1, r8
 8001032:	d2ab      	bcs.n	8000f8c <__udivmoddi4+0x1f0>
 8001034:	ebb8 0a02 	subs.w	sl, r8, r2
 8001038:	eb69 020e 	sbc.w	r2, r9, lr
 800103c:	3801      	subs	r0, #1
 800103e:	4613      	mov	r3, r2
 8001040:	e7a4      	b.n	8000f8c <__udivmoddi4+0x1f0>
 8001042:	4660      	mov	r0, ip
 8001044:	e7e9      	b.n	800101a <__udivmoddi4+0x27e>
 8001046:	4618      	mov	r0, r3
 8001048:	e795      	b.n	8000f76 <__udivmoddi4+0x1da>
 800104a:	4667      	mov	r7, ip
 800104c:	e7d1      	b.n	8000ff2 <__udivmoddi4+0x256>
 800104e:	4681      	mov	r9, r0
 8001050:	e77c      	b.n	8000f4c <__udivmoddi4+0x1b0>
 8001052:	3802      	subs	r0, #2
 8001054:	442c      	add	r4, r5
 8001056:	e747      	b.n	8000ee8 <__udivmoddi4+0x14c>
 8001058:	f1ac 0c02 	sub.w	ip, ip, #2
 800105c:	442b      	add	r3, r5
 800105e:	e72f      	b.n	8000ec0 <__udivmoddi4+0x124>
 8001060:	4638      	mov	r0, r7
 8001062:	e708      	b.n	8000e76 <__udivmoddi4+0xda>
 8001064:	4637      	mov	r7, r6
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0xa0>

08001068 <__aeabi_idiv0>:
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	0000      	movs	r0, r0
	...

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f002 fe9d 	bl	8003db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f935 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107e:	f000 fb73 	bl	8001768 <MX_GPIO_Init>
  MX_DMA_Init();
 8001082:	f000 fb49 	bl	8001718 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001086:	f000 fb1b 	bl	80016c0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800108a:	f000 f995 	bl	80013b8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800108e:	f000 f9c1 	bl	8001414 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001092:	f000 fa63 	bl	800155c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001096:	f000 fa15 	bl	80014c4 <MX_TIM2_Init>
  MX_TIM4_Init();
 800109a:	f000 fac3 	bl	8001624 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  UART2.huart = &huart2;
 800109e:	4b7a      	ldr	r3, [pc, #488]	; (8001288 <main+0x218>)
 80010a0:	4a7a      	ldr	r2, [pc, #488]	; (800128c <main+0x21c>)
 80010a2:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 80010a4:	4b78      	ldr	r3, [pc, #480]	; (8001288 <main+0x218>)
 80010a6:	22ff      	movs	r2, #255	; 0xff
 80010a8:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 80010aa:	4b77      	ldr	r3, [pc, #476]	; (8001288 <main+0x218>)
 80010ac:	22ff      	movs	r2, #255	; 0xff
 80010ae:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 80010b0:	4875      	ldr	r0, [pc, #468]	; (8001288 <main+0x218>)
 80010b2:	f001 feaf 	bl	8002e14 <UARTInit>
  UARTResetStart(&UART2);
 80010b6:	4874      	ldr	r0, [pc, #464]	; (8001288 <main+0x218>)
 80010b8:	f001 fed4 	bl	8002e64 <UARTResetStart>

  HAL_TIM_Base_Start_IT(&htim2);
 80010bc:	4874      	ldr	r0, [pc, #464]	; (8001290 <main+0x220>)
 80010be:	f006 f8d0 	bl	8007262 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 80010c2:	4874      	ldr	r0, [pc, #464]	; (8001294 <main+0x224>)
 80010c4:	f006 f8a9 	bl	800721a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010c8:	2100      	movs	r1, #0
 80010ca:	4872      	ldr	r0, [pc, #456]	; (8001294 <main+0x224>)
 80010cc:	f006 f918 	bl	8007300 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010d0:	2104      	movs	r1, #4
 80010d2:	4870      	ldr	r0, [pc, #448]	; (8001294 <main+0x224>)
 80010d4:	f006 f914 	bl	8007300 <HAL_TIM_PWM_Start>
  HomeMode = 10;
 80010d8:	4b6f      	ldr	r3, [pc, #444]	; (8001298 <main+0x228>)
 80010da:	220a      	movs	r2, #10
 80010dc:	701a      	strb	r2, [r3, #0]
  SetHome();
 80010de:	f000 fc3f 	bl	8001960 <SetHome>
  /////////////////////////////////////////////////////////////
  while (1)
  {


	  if (micros() - Timestamp >= 10000) //10000us = 0.01s = 100Hz
 80010e2:	f000 fbff 	bl	80018e4 <micros>
 80010e6:	460a      	mov	r2, r1
 80010e8:	4601      	mov	r1, r0
 80010ea:	4b6c      	ldr	r3, [pc, #432]	; (800129c <main+0x22c>)
 80010ec:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80010f0:	460b      	mov	r3, r1
 80010f2:	4614      	mov	r4, r2
 80010f4:	ebb3 030b 	subs.w	r3, r3, fp
 80010f8:	eb64 040c 	sbc.w	r4, r4, ip
 80010fc:	f242 710f 	movw	r1, #9999	; 0x270f
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	42a2      	cmp	r2, r4
 8001106:	bf08      	it	eq
 8001108:	4299      	cmpeq	r1, r3
 800110a:	d2ea      	bcs.n	80010e2 <main+0x72>
	  {
		  Timestamp = micros();
 800110c:	f000 fbea 	bl	80018e4 <micros>
 8001110:	4603      	mov	r3, r0
 8001112:	460c      	mov	r4, r1
 8001114:	4a61      	ldr	r2, [pc, #388]	; (800129c <main+0x22c>)
 8001116:	e9c2 3400 	strd	r3, r4, [r2]

		  if(UART_Flow2_Ack)
 800111a:	4b61      	ldr	r3, [pc, #388]	; (80012a0 <main+0x230>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d037      	beq.n	8001192 <main+0x122>
		  {
			while(1)
			{
				while(1)
				{
					InputChar = UARTReadChar(&UART2);
 8001122:	4859      	ldr	r0, [pc, #356]	; (8001288 <main+0x218>)
 8001124:	f001 fec2 	bl	8002eac <UARTReadChar>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4b5d      	ldr	r3, [pc, #372]	; (80012a4 <main+0x234>)
 800112e:	801a      	strh	r2, [r3, #0]
					if(InputChar != -1)
 8001130:	4b5c      	ldr	r3, [pc, #368]	; (80012a4 <main+0x234>)
 8001132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800113a:	d0f2      	beq.n	8001122 <main+0xb2>
					{
						InputByte = (uint8_t)InputChar;
 800113c:	4b59      	ldr	r3, [pc, #356]	; (80012a4 <main+0x234>)
 800113e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b58      	ldr	r3, [pc, #352]	; (80012a8 <main+0x238>)
 8001146:	701a      	strb	r2, [r3, #0]
						ak[0] = InputByte;
 8001148:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <main+0x238>)
 800114a:	781a      	ldrb	r2, [r3, #0]
 800114c:	4b57      	ldr	r3, [pc, #348]	; (80012ac <main+0x23c>)
 800114e:	701a      	strb	r2, [r3, #0]
						break;
					}
				}
				while(1)
				{
					InputChar = UARTReadChar(&UART2);
 8001150:	484d      	ldr	r0, [pc, #308]	; (8001288 <main+0x218>)
 8001152:	f001 feab 	bl	8002eac <UARTReadChar>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4b52      	ldr	r3, [pc, #328]	; (80012a4 <main+0x234>)
 800115c:	801a      	strh	r2, [r3, #0]
					if(InputChar != -1)
 800115e:	4b51      	ldr	r3, [pc, #324]	; (80012a4 <main+0x234>)
 8001160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001168:	d0f2      	beq.n	8001150 <main+0xe0>
					{
						InputByte = (uint8_t)InputChar;
 800116a:	4b4e      	ldr	r3, [pc, #312]	; (80012a4 <main+0x234>)
 800116c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b4d      	ldr	r3, [pc, #308]	; (80012a8 <main+0x238>)
 8001174:	701a      	strb	r2, [r3, #0]
						ak[1] = InputByte;
 8001176:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <main+0x238>)
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <main+0x23c>)
 800117c:	705a      	strb	r2, [r3, #1]
						break;
 800117e:	bf00      	nop
					}
				}
				if(ak[0] == 'X' && ak[1] == 'u')
 8001180:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <main+0x23c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b58      	cmp	r3, #88	; 0x58
 8001186:	d1cc      	bne.n	8001122 <main+0xb2>
 8001188:	4b48      	ldr	r3, [pc, #288]	; (80012ac <main+0x23c>)
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	2b75      	cmp	r3, #117	; 0x75
 800118e:	d003      	beq.n	8001198 <main+0x128>
			while(1)
 8001190:	e7c7      	b.n	8001122 <main+0xb2>
				}
			}
		  }
		  else
		  {
			  UART_Protocal();
 8001192:	f002 f83f 	bl	8003214 <UART_Protocal>
 8001196:	e000      	b.n	800119a <main+0x12a>
					break;
 8001198:	bf00      	nop
		  }

		  //----------------------------------------------

		  if(Laser)
 800119a:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <main+0x240>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d04a      	beq.n	8001238 <main+0x1c8>
		  {
			  if (micros() - LaserTimestamp >= 5000000) //5000000us = 5s
 80011a2:	f000 fb9f 	bl	80018e4 <micros>
 80011a6:	460a      	mov	r2, r1
 80011a8:	4601      	mov	r1, r0
 80011aa:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <main+0x244>)
 80011ac:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80011b0:	460b      	mov	r3, r1
 80011b2:	4614      	mov	r4, r2
 80011b4:	ebb3 030b 	subs.w	r3, r3, fp
 80011b8:	eb64 040c 	sbc.w	r4, r4, ip
 80011bc:	a230      	add	r2, pc, #192	; (adr r2, 8001280 <main+0x210>)
 80011be:	e9d2 1200 	ldrd	r1, r2, [r2]
 80011c2:	42a2      	cmp	r2, r4
 80011c4:	bf08      	it	eq
 80011c6:	4299      	cmpeq	r1, r3
 80011c8:	d257      	bcs.n	800127a <main+0x20a>
			  {
				  if(Goal_Mode == 3)
 80011ca:	4b3b      	ldr	r3, [pc, #236]	; (80012b8 <main+0x248>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d128      	bne.n	8001224 <main+0x1b4>
				  {
					  if(Current_Multi_Station == Multi_Station_Amount-1)
 80011d2:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <main+0x24c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <main+0x250>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	3b01      	subs	r3, #1
 80011de:	429a      	cmp	r2, r3
 80011e0:	d102      	bne.n	80011e8 <main+0x178>
					  {
						  UART_Ack2();
 80011e2:	f001 ff41 	bl	8003068 <UART_Ack2>
 80011e6:	e01f      	b.n	8001228 <main+0x1b8>
					  }
					  else
					  {
						  Current_Multi_Station += 1;
 80011e8:	4b34      	ldr	r3, [pc, #208]	; (80012bc <main+0x24c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <main+0x24c>)
 80011f2:	701a      	strb	r2, [r3, #0]
						  angle = Multi_Station_Angle[ Multi_Station[Current_Multi_Station] ];
 80011f4:	4b31      	ldr	r3, [pc, #196]	; (80012bc <main+0x24c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <main+0x254>)
 80011fc:	5c9b      	ldrb	r3, [r3, r2]
 80011fe:	461a      	mov	r2, r3
 8001200:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <main+0x258>)
 8001202:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <main+0x25c>)
 8001210:	edc3 7a00 	vstr	s15, [r3]
						  Lastest_Angle = Current_Angle;
 8001214:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <main+0x260>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a2e      	ldr	r2, [pc, #184]	; (80012d4 <main+0x264>)
 800121a:	6013      	str	r3, [r2, #0]
						  Run = 1;
 800121c:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <main+0x268>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e001      	b.n	8001228 <main+0x1b8>
					  }
				  }
				  else
				  {
					  UART_Ack2();
 8001224:	f001 ff20 	bl	8003068 <UART_Ack2>
				  }
				  Laser = 0;
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <main+0x240>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
				  t = 0;
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <main+0x26c>)
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e020      	b.n	800127a <main+0x20a>
			  }
		  }

		  else if(Run)
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <main+0x268>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d010      	beq.n	8001262 <main+0x1f2>
		  {
			  RobotArm_Position = EncoderPosition_Update();
 8001240:	f000 fc5a 	bl	8001af8 <EncoderPosition_Update>
 8001244:	4603      	mov	r3, r0
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <main+0x270>)
 800124a:	801a      	strh	r2, [r3, #0]
			  EncoderVelocity_Update();
 800124c:	f000 fc60 	bl	8001b10 <EncoderVelocity_Update>
			  planning();
 8001250:	f000 ffce 	bl	80021f0 <planning>
			  kalmanfilter();
 8001254:	f000 fd04 	bl	8001c60 <kalmanfilter>
			  pid();
 8001258:	f001 fb9c 	bl	8002994 <pid>
			  MotorDrive();
 800125c:	f000 fb5c 	bl	8001918 <MotorDrive>
 8001260:	e00b      	b.n	800127a <main+0x20a>
		  }

		  else if(Home)
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <main+0x274>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <main+0x20a>
		  {
			  RobotArm_Position = EncoderPosition_Update();
 800126a:	f000 fc45 	bl	8001af8 <EncoderPosition_Update>
 800126e:	4603      	mov	r3, r0
 8001270:	b29a      	uxth	r2, r3
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <main+0x270>)
 8001274:	801a      	strh	r2, [r3, #0]
			  SetHome();
 8001276:	f000 fb73 	bl	8001960 <SetHome>
		  }

		  NucleoCheck();
 800127a:	f000 faf3 	bl	8001864 <NucleoCheck>
	  if (micros() - Timestamp >= 10000) //10000us = 0.01s = 100Hz
 800127e:	e730      	b.n	80010e2 <main+0x72>
 8001280:	004c4b3f 	.word	0x004c4b3f
 8001284:	00000000 	.word	0x00000000
 8001288:	2000018c 	.word	0x2000018c
 800128c:	2000042c 	.word	0x2000042c
 8001290:	200003ec 	.word	0x200003ec
 8001294:	2000030c 	.word	0x2000030c
 8001298:	200000f0 	.word	0x200000f0
 800129c:	200000d8 	.word	0x200000d8
 80012a0:	200001ec 	.word	0x200001ec
 80012a4:	200001c6 	.word	0x200001c6
 80012a8:	200001c8 	.word	0x200001c8
 80012ac:	200001b4 	.word	0x200001b4
 80012b0:	200001b8 	.word	0x200001b8
 80012b4:	200000e8 	.word	0x200000e8
 80012b8:	20000020 	.word	0x20000020
 80012bc:	200001ad 	.word	0x200001ad
 80012c0:	200001e8 	.word	0x200001e8
 80012c4:	200001d8 	.word	0x200001d8
 80012c8:	20000024 	.word	0x20000024
 80012cc:	2000017c 	.word	0x2000017c
 80012d0:	200001a8 	.word	0x200001a8
 80012d4:	200001a4 	.word	0x200001a4
 80012d8:	200001b6 	.word	0x200001b6
 80012dc:	20000160 	.word	0x20000160
 80012e0:	200000f8 	.word	0x200000f8
 80012e4:	200001b7 	.word	0x200001b7

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	; 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2230      	movs	r2, #48	; 0x30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f007 ff19 	bl	800912e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <SystemClock_Config+0xc8>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <SystemClock_Config+0xc8>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <SystemClock_Config+0xc8>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <SystemClock_Config+0xcc>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <SystemClock_Config+0xcc>)
 8001332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <SystemClock_Config+0xcc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134c:	2310      	movs	r3, #16
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001350:	2302      	movs	r3, #2
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001354:	2300      	movs	r3, #0
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001358:	2308      	movs	r3, #8
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001360:	2302      	movs	r3, #2
 8001362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001364:	2304      	movs	r3, #4
 8001366:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	4618      	mov	r0, r3
 800136e:	f005 fac7 	bl	8006900 <HAL_RCC_OscConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001378:	f002 fa14 	bl	80037a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	2302      	movs	r3, #2
 8001382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	2103      	movs	r1, #3
 8001398:	4618      	mov	r0, r3
 800139a:	f005 fd21 	bl	8006de0 <HAL_RCC_ClockConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013a4:	f002 f9fe 	bl	80037a4 <Error_Handler>
  }
}
 80013a8:	bf00      	nop
 80013aa:	3750      	adds	r7, #80	; 0x50
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_I2C1_Init+0x54>)
 80013be:	4a14      	ldr	r2, [pc, #80]	; (8001410 <MX_I2C1_Init+0x58>)
 80013c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <MX_I2C1_Init+0x54>)
 80013c4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80013c8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_I2C1_Init+0x54>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_I2C1_Init+0x54>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <MX_I2C1_Init+0x54>)
 80013d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_I2C1_Init+0x54>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_I2C1_Init+0x54>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_I2C1_Init+0x54>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_I2C1_Init+0x54>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_I2C1_Init+0x54>)
 80013f8:	f003 fbee 	bl	8004bd8 <HAL_I2C_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001402:	f002 f9cf 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002b4 	.word	0x200002b4
 8001410:	40005400 	.word	0x40005400

08001414 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	; 0x30
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2224      	movs	r2, #36	; 0x24
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f007 fe83 	bl	800912e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001432:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <MX_TIM1_Init+0xac>)
 8001434:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <MX_TIM1_Init+0xa8>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001444:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001448:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <MX_TIM1_Init+0xa8>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800145c:	2303      	movs	r3, #3
 800145e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001464:	2301      	movs	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001470:	2302      	movs	r3, #2
 8001472:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001474:	2301      	movs	r3, #1
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	4619      	mov	r1, r3
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001488:	f005 ff6c 	bl	8007364 <HAL_TIM_Encoder_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001492:	f002 f987 	bl	80037a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <MX_TIM1_Init+0xa8>)
 80014a4:	f006 fda2 	bl	8007fec <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80014ae:	f002 f979 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3730      	adds	r7, #48	; 0x30
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200003ac 	.word	0x200003ac
 80014c0:	40010000 	.word	0x40010000

080014c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_TIM2_Init+0x94>)
 80014e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <MX_TIM2_Init+0x94>)
 80014ea:	2263      	movs	r2, #99	; 0x63
 80014ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_TIM2_Init+0x94>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <MX_TIM2_Init+0x94>)
 80014f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <MX_TIM2_Init+0x94>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <MX_TIM2_Init+0x94>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <MX_TIM2_Init+0x94>)
 800150a:	f005 fe5b 	bl	80071c4 <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001514:	f002 f946 	bl	80037a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <MX_TIM2_Init+0x94>)
 8001526:	f006 f9b5 	bl	8007894 <HAL_TIM_ConfigClockSource>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001530:	f002 f938 	bl	80037a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_TIM2_Init+0x94>)
 8001542:	f006 fd53 	bl	8007fec <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800154c:	f002 f92a 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200003ec 	.word	0x200003ec

0800155c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800157e:	4b27      	ldr	r3, [pc, #156]	; (800161c <MX_TIM3_Init+0xc0>)
 8001580:	4a27      	ldr	r2, [pc, #156]	; (8001620 <MX_TIM3_Init+0xc4>)
 8001582:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001584:	4b25      	ldr	r3, [pc, #148]	; (800161c <MX_TIM3_Init+0xc0>)
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <MX_TIM3_Init+0xc0>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <MX_TIM3_Init+0xc0>)
 8001592:	f242 7210 	movw	r2, #10000	; 0x2710
 8001596:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <MX_TIM3_Init+0xc0>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <MX_TIM3_Init+0xc0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015a4:	481d      	ldr	r0, [pc, #116]	; (800161c <MX_TIM3_Init+0xc0>)
 80015a6:	f005 fe80 	bl	80072aa <HAL_TIM_PWM_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80015b0:	f002 f8f8 	bl	80037a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	4619      	mov	r1, r3
 80015c2:	4816      	ldr	r0, [pc, #88]	; (800161c <MX_TIM3_Init+0xc0>)
 80015c4:	f006 fd12 	bl	8007fec <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80015ce:	f002 f8e9 	bl	80037a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d2:	2360      	movs	r3, #96	; 0x60
 80015d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	4619      	mov	r1, r3
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <MX_TIM3_Init+0xc0>)
 80015ea:	f006 f88d 	bl	8007708 <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80015f4:	f002 f8d6 	bl	80037a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2204      	movs	r2, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <MX_TIM3_Init+0xc0>)
 8001600:	f006 f882 	bl	8007708 <HAL_TIM_PWM_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800160a:	f002 f8cb 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <MX_TIM3_Init+0xc0>)
 8001610:	f002 f9fa 	bl	8003a08 <HAL_TIM_MspPostInit>

}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000030c 	.word	0x2000030c
 8001620:	40000400 	.word	0x40000400

08001624 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	463b      	mov	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <MX_TIM4_Init+0x94>)
 8001642:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <MX_TIM4_Init+0x98>)
 8001644:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <MX_TIM4_Init+0x94>)
 8001648:	2263      	movs	r2, #99	; 0x63
 800164a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_TIM4_Init+0x94>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <MX_TIM4_Init+0x94>)
 8001654:	f242 7210 	movw	r2, #10000	; 0x2710
 8001658:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_TIM4_Init+0x94>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_TIM4_Init+0x94>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001666:	4814      	ldr	r0, [pc, #80]	; (80016b8 <MX_TIM4_Init+0x94>)
 8001668:	f005 fdac 	bl	80071c4 <HAL_TIM_Base_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001672:	f002 f897 	bl	80037a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	4619      	mov	r1, r3
 8001682:	480d      	ldr	r0, [pc, #52]	; (80016b8 <MX_TIM4_Init+0x94>)
 8001684:	f006 f906 	bl	8007894 <HAL_TIM_ConfigClockSource>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800168e:	f002 f889 	bl	80037a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800169a:	463b      	mov	r3, r7
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	; (80016b8 <MX_TIM4_Init+0x94>)
 80016a0:	f006 fca4 	bl	8007fec <HAL_TIMEx_MasterConfigSynchronization>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80016aa:	f002 f87b 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000270 	.word	0x20000270
 80016bc:	40000800 	.word	0x40000800

080016c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016c6:	4a13      	ldr	r2, [pc, #76]	; (8001714 <MX_USART2_UART_Init+0x54>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016cc:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80016d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016fc:	f006 fcf8 	bl	80080f0 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001706:	f002 f84d 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000042c 	.word	0x2000042c
 8001714:	40004400 	.word	0x40004400

08001718 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <MX_DMA_Init+0x4c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <MX_DMA_Init+0x4c>)
 8001728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <MX_DMA_Init+0x4c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	2010      	movs	r0, #16
 8001740:	f002 fca7 	bl	8004092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001744:	2010      	movs	r0, #16
 8001746:	f002 fcc0 	bl	80040ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2011      	movs	r0, #17
 8001750:	f002 fc9f 	bl	8004092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001754:	2011      	movs	r0, #17
 8001756:	f002 fcb8 	bl	80040ca <HAL_NVIC_EnableIRQ>

}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800

08001768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	4b33      	ldr	r3, [pc, #204]	; (8001850 <MX_GPIO_Init+0xe8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a32      	ldr	r2, [pc, #200]	; (8001850 <MX_GPIO_Init+0xe8>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b30      	ldr	r3, [pc, #192]	; (8001850 <MX_GPIO_Init+0xe8>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a2b      	ldr	r2, [pc, #172]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b29      	ldr	r3, [pc, #164]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	4b25      	ldr	r3, [pc, #148]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a24      	ldr	r2, [pc, #144]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2120      	movs	r1, #32
 80017f2:	4818      	ldr	r0, [pc, #96]	; (8001854 <MX_GPIO_Init+0xec>)
 80017f4:	f003 f9bc 	bl	8004b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <MX_GPIO_Init+0xf0>)
 8001800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4813      	ldr	r0, [pc, #76]	; (800185c <MX_GPIO_Init+0xf4>)
 800180e:	f003 f815 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001812:	2320      	movs	r3, #32
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	480a      	ldr	r0, [pc, #40]	; (8001854 <MX_GPIO_Init+0xec>)
 800182a:	f003 f807 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800182e:	2330      	movs	r3, #48	; 0x30
 8001830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4807      	ldr	r0, [pc, #28]	; (8001860 <MX_GPIO_Init+0xf8>)
 8001842:	f002 fffb 	bl	800483c <HAL_GPIO_Init>

}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	; 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000
 8001858:	10210000 	.word	0x10210000
 800185c:	40020800 	.word	0x40020800
 8001860:	40020400 	.word	0x40020400

08001864 <NucleoCheck>:

/* USER CODE BEGIN 4 */
//******************************************************************

void NucleoCheck()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	ButtonArray[1] = ButtonArray[0];
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <NucleoCheck+0x3c>)
 800186a:	781a      	ldrb	r2, [r3, #0]
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <NucleoCheck+0x3c>)
 800186e:	705a      	strb	r2, [r3, #1]
	ButtonArray[0] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001874:	480b      	ldr	r0, [pc, #44]	; (80018a4 <NucleoCheck+0x40>)
 8001876:	f003 f963 	bl	8004b40 <HAL_GPIO_ReadPin>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <NucleoCheck+0x3c>)
 8001880:	701a      	strb	r2, [r3, #0]

	if(ButtonArray[0]==1 && ButtonArray[1]==0) //When Released Button
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <NucleoCheck+0x3c>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d107      	bne.n	800189a <NucleoCheck+0x36>
 800188a:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <NucleoCheck+0x3c>)
 800188c:	785b      	ldrb	r3, [r3, #1]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d103      	bne.n	800189a <NucleoCheck+0x36>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001892:	2120      	movs	r1, #32
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <NucleoCheck+0x44>)
 8001896:	f003 f984 	bl	8004ba2 <HAL_GPIO_TogglePin>
	}
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000000 	.word	0x20000000
 80018a4:	40020800 	.word	0x40020800
 80018a8:	40020000 	.word	0x40020000

080018ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018ac:	b490      	push	{r4, r7}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d109      	bne.n	80018d0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018be:	e9d3 1200 	ldrd	r1, r2, [r3]
 80018c2:	f111 33ff 	adds.w	r3, r1, #4294967295	; 0xffffffff
 80018c6:	f142 0400 	adc.w	r4, r2, #0
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018cc:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc90      	pop	{r4, r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200003ec 	.word	0x200003ec
 80018e0:	200000d0 	.word	0x200000d0

080018e4 <micros>:

uint64_t micros()
{
 80018e4:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80018e8:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <micros+0x2c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <micros+0x30>)
 80018f8:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80018fc:	eb1b 0301 	adds.w	r3, fp, r1
 8001900:	eb4c 0402 	adc.w	r4, ip, r2
}
 8001904:	4618      	mov	r0, r3
 8001906:	4621      	mov	r1, r4
 8001908:	46bd      	mov	sp, r7
 800190a:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800190e:	4770      	bx	lr
 8001910:	200003ec 	.word	0x200003ec
 8001914:	200000d0 	.word	0x200000d0

08001918 <MotorDrive>:
	ProxiArray[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
	ProxiArray[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
}

void MotorDrive()
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
	if(PWMOut >= 0)
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MotorDrive+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db09      	blt.n	8001938 <MotorDrive+0x20>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWMOut);
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MotorDrive+0x40>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <MotorDrive+0x44>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <MotorDrive+0x44>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2200      	movs	r2, #0
 8001934:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, -PWMOut);
	}
}
 8001936:	e009      	b.n	800194c <MotorDrive+0x34>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <MotorDrive+0x44>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2200      	movs	r2, #0
 800193e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, -PWMOut);
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <MotorDrive+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	425a      	negs	r2, r3
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <MotorDrive+0x44>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	200000f4 	.word	0x200000f4
 800195c:	2000030c 	.word	0x2000030c

08001960 <SetHome>:

void SetHome()
{
 8001960:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001964:	af00      	add	r7, sp, #0
	if(HomeMode == 1)
 8001966:	4b5a      	ldr	r3, [pc, #360]	; (8001ad0 <SetHome+0x170>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d11e      	bne.n	80019ac <SetHome+0x4c>
	{
		PWMOut = 750;
 800196e:	4b59      	ldr	r3, [pc, #356]	; (8001ad4 <SetHome+0x174>)
 8001970:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001974:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001976:	f7ff ffcf 	bl	8001918 <MotorDrive>
		if (micros() - HomeTimestamp >= 200000) //200000us = 0.2s
 800197a:	f7ff ffb3 	bl	80018e4 <micros>
 800197e:	460a      	mov	r2, r1
 8001980:	4601      	mov	r1, r0
 8001982:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <SetHome+0x178>)
 8001984:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001988:	460b      	mov	r3, r1
 800198a:	4614      	mov	r4, r2
 800198c:	ebb3 030b 	subs.w	r3, r3, fp
 8001990:	eb64 040c 	sbc.w	r4, r4, ip
 8001994:	4951      	ldr	r1, [pc, #324]	; (8001adc <SetHome+0x17c>)
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	42a2      	cmp	r2, r4
 800199c:	bf08      	it	eq
 800199e:	4299      	cmpeq	r1, r3
 80019a0:	f080 8092 	bcs.w	8001ac8 <SetHome+0x168>
		{
			HomeMode = 2;
 80019a4:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <SetHome+0x170>)
 80019a6:	2202      	movs	r2, #2
 80019a8:	701a      	strb	r2, [r3, #0]
		MotorDrive();
		HAL_Delay(500);
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
		HomeMode = 0;
	}
}
 80019aa:	e08d      	b.n	8001ac8 <SetHome+0x168>
	else if(HomeMode == 2)
 80019ac:	4b48      	ldr	r3, [pc, #288]	; (8001ad0 <SetHome+0x170>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d10f      	bne.n	80019d4 <SetHome+0x74>
		PWMOut = -2500;
 80019b4:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <SetHome+0x174>)
 80019b6:	4a4a      	ldr	r2, [pc, #296]	; (8001ae0 <SetHome+0x180>)
 80019b8:	601a      	str	r2, [r3, #0]
		MotorDrive();
 80019ba:	f7ff ffad 	bl	8001918 <MotorDrive>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0)
 80019be:	2110      	movs	r1, #16
 80019c0:	4848      	ldr	r0, [pc, #288]	; (8001ae4 <SetHome+0x184>)
 80019c2:	f003 f8bd 	bl	8004b40 <HAL_GPIO_ReadPin>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d17d      	bne.n	8001ac8 <SetHome+0x168>
			HomeMode = 3;
 80019cc:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <SetHome+0x170>)
 80019ce:	2203      	movs	r2, #3
 80019d0:	701a      	strb	r2, [r3, #0]
}
 80019d2:	e079      	b.n	8001ac8 <SetHome+0x168>
	else if(HomeMode == 3)
 80019d4:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <SetHome+0x170>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d116      	bne.n	8001a0a <SetHome+0xaa>
		PWMOut = -600;
 80019dc:	4b3d      	ldr	r3, [pc, #244]	; (8001ad4 <SetHome+0x174>)
 80019de:	4a42      	ldr	r2, [pc, #264]	; (8001ae8 <SetHome+0x188>)
 80019e0:	601a      	str	r2, [r3, #0]
		MotorDrive();
 80019e2:	f7ff ff99 	bl	8001918 <MotorDrive>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0)
 80019e6:	2120      	movs	r1, #32
 80019e8:	483e      	ldr	r0, [pc, #248]	; (8001ae4 <SetHome+0x184>)
 80019ea:	f003 f8a9 	bl	8004b40 <HAL_GPIO_ReadPin>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d169      	bne.n	8001ac8 <SetHome+0x168>
			HomeMode = 4;
 80019f4:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <SetHome+0x170>)
 80019f6:	2204      	movs	r2, #4
 80019f8:	701a      	strb	r2, [r3, #0]
			HomeTimestamp = micros();
 80019fa:	f7ff ff73 	bl	80018e4 <micros>
 80019fe:	4603      	mov	r3, r0
 8001a00:	460c      	mov	r4, r1
 8001a02:	4a35      	ldr	r2, [pc, #212]	; (8001ad8 <SetHome+0x178>)
 8001a04:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001a08:	e05e      	b.n	8001ac8 <SetHome+0x168>
	else if(HomeMode == 4)
 8001a0a:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <SetHome+0x170>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d123      	bne.n	8001a5a <SetHome+0xfa>
		PWMOut = 0;
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <SetHome+0x174>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001a18:	f7ff ff7e 	bl	8001918 <MotorDrive>
		if (micros() - HomeTimestamp >= 500000) //500000us = 0.5s
 8001a1c:	f7ff ff62 	bl	80018e4 <micros>
 8001a20:	460a      	mov	r2, r1
 8001a22:	4601      	mov	r1, r0
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <SetHome+0x178>)
 8001a26:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4614      	mov	r4, r2
 8001a2e:	ebb3 030b 	subs.w	r3, r3, fp
 8001a32:	eb64 040c 	sbc.w	r4, r4, ip
 8001a36:	492d      	ldr	r1, [pc, #180]	; (8001aec <SetHome+0x18c>)
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	42a2      	cmp	r2, r4
 8001a3e:	bf08      	it	eq
 8001a40:	4299      	cmpeq	r1, r3
 8001a42:	d241      	bcs.n	8001ac8 <SetHome+0x168>
			htim1.Instance->CNT = 0;
 8001a44:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <SetHome+0x190>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24
			HomeMode = 0;
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <SetHome+0x170>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
			Home = 0;
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <SetHome+0x194>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
}
 8001a58:	e036      	b.n	8001ac8 <SetHome+0x168>
	else if(HomeMode == 10)
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <SetHome+0x170>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b0a      	cmp	r3, #10
 8001a60:	d132      	bne.n	8001ac8 <SetHome+0x168>
		PWMOut = 750;
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <SetHome+0x174>)
 8001a64:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a68:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001a6a:	f7ff ff55 	bl	8001918 <MotorDrive>
		HAL_Delay(200);
 8001a6e:	20c8      	movs	r0, #200	; 0xc8
 8001a70:	f002 fa12 	bl	8003e98 <HAL_Delay>
		PWMOut = -2500;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <SetHome+0x174>)
 8001a76:	4a1a      	ldr	r2, [pc, #104]	; (8001ae0 <SetHome+0x180>)
 8001a78:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8001a7a:	e001      	b.n	8001a80 <SetHome+0x120>
			MotorDrive();
 8001a7c:	f7ff ff4c 	bl	8001918 <MotorDrive>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8001a80:	2110      	movs	r1, #16
 8001a82:	4818      	ldr	r0, [pc, #96]	; (8001ae4 <SetHome+0x184>)
 8001a84:	f003 f85c 	bl	8004b40 <HAL_GPIO_ReadPin>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d0f6      	beq.n	8001a7c <SetHome+0x11c>
		PWMOut = -600;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <SetHome+0x174>)
 8001a90:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <SetHome+0x188>)
 8001a92:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1)
 8001a94:	e001      	b.n	8001a9a <SetHome+0x13a>
			MotorDrive();
 8001a96:	f7ff ff3f 	bl	8001918 <MotorDrive>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1)
 8001a9a:	2120      	movs	r1, #32
 8001a9c:	4811      	ldr	r0, [pc, #68]	; (8001ae4 <SetHome+0x184>)
 8001a9e:	f003 f84f 	bl	8004b40 <HAL_GPIO_ReadPin>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d0f6      	beq.n	8001a96 <SetHome+0x136>
		PWMOut = 0;
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <SetHome+0x174>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001aae:	f7ff ff33 	bl	8001918 <MotorDrive>
		HAL_Delay(500);
 8001ab2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab6:	f002 f9ef 	bl	8003e98 <HAL_Delay>
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001aba:	213c      	movs	r1, #60	; 0x3c
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <SetHome+0x190>)
 8001abe:	f005 fce3 	bl	8007488 <HAL_TIM_Encoder_Start>
		HomeMode = 0;
 8001ac2:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <SetHome+0x170>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001ace:	bf00      	nop
 8001ad0:	200000f0 	.word	0x200000f0
 8001ad4:	200000f4 	.word	0x200000f4
 8001ad8:	200000e0 	.word	0x200000e0
 8001adc:	00030d3f 	.word	0x00030d3f
 8001ae0:	fffff63c 	.word	0xfffff63c
 8001ae4:	40020400 	.word	0x40020400
 8001ae8:	fffffda8 	.word	0xfffffda8
 8001aec:	0007a11f 	.word	0x0007a11f
 8001af0:	200003ac 	.word	0x200003ac
 8001af4:	200001b7 	.word	0x200001b7

08001af8 <EncoderPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 3600
#define  MAX_ENCODER_PERIOD 7200

uint32_t EncoderPosition_Update()
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
	return HTIM_ENCODER.Instance->CNT;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <EncoderPosition_Update+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	200003ac 	.word	0x200003ac

08001b10 <EncoderVelocity_Update>:

float EncoderVelocity_Update()
{   static uint32_t EncoderLastPosition = 0;
 8001b10:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001b14:	ed2d 8b02 	vpush	{d8}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
	static uint64_t EncoderLastTimestamp = 0;
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001b1c:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <EncoderVelocity_Update+0x138>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8001b24:	f7ff fede 	bl	80018e4 <micros>
 8001b28:	e9c7 0102 	strd	r0, r1, [r7, #8]
	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;
	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001b2c:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <EncoderVelocity_Update+0x13c>)
 8001b2e:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001b32:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b36:	460b      	mov	r3, r1
 8001b38:	4614      	mov	r4, r2
 8001b3a:	ebb3 030b 	subs.w	r3, r3, fp
 8001b3e:	eb64 040c 	sbc.w	r4, r4, ip
 8001b42:	e9c7 3400 	strd	r3, r4, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8001b46:	4b42      	ldr	r3, [pc, #264]	; (8001c50 <EncoderVelocity_Update+0x140>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	617b      	str	r3, [r7, #20]
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001b56:	db04      	blt.n	8001b62 <EncoderVelocity_Update+0x52>
	{EncoderPositionDiff -= MAX_ENCODER_PERIOD;}
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e008      	b.n	8001b74 <EncoderVelocity_Update+0x64>
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	425b      	negs	r3, r3
 8001b66:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001b6a:	db03      	blt.n	8001b74 <EncoderVelocity_Update+0x64>
	{EncoderPositionDiff += MAX_ENCODER_PERIOD;}
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001b72:	617b      	str	r3, [r7, #20]
	EncoderLastPosition = EncoderNowPosition;
 8001b74:	4a36      	ldr	r2, [pc, #216]	; (8001c50 <EncoderVelocity_Update+0x140>)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8001b7a:	4a34      	ldr	r2, [pc, #208]	; (8001c4c <EncoderVelocity_Update+0x13c>)
 8001b7c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b80:	e9c2 3400 	strd	r3, r4, [r2]
	raw =(float)(EncoderPositionDiff * 1000000.00) / (float) EncoderTimeDiff;
 8001b84:	6978      	ldr	r0, [r7, #20]
 8001b86:	f7fe fc79 	bl	800047c <__aeabi_i2d>
 8001b8a:	a329      	add	r3, pc, #164	; (adr r3, 8001c30 <EncoderVelocity_Update+0x120>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe fcde 	bl	8000550 <__aeabi_dmul>
 8001b94:	4603      	mov	r3, r0
 8001b96:	460c      	mov	r4, r1
 8001b98:	4618      	mov	r0, r3
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	f7fe ff88 	bl	8000ab0 <__aeabi_d2f>
 8001ba0:	ee08 0a10 	vmov	s16, r0
 8001ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ba8:	f7ff f89a 	bl	8000ce0 <__aeabi_ul2f>
 8001bac:	ee07 0a10 	vmov	s14, r0
 8001bb0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <EncoderVelocity_Update+0x144>)
 8001bb6:	edc3 7a00 	vstr	s15, [r3]
	rad = raw* 0.05*2.00*3.141592/360.00;
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <EncoderVelocity_Update+0x144>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fc6e 	bl	80004a0 <__aeabi_f2d>
 8001bc4:	a31c      	add	r3, pc, #112	; (adr r3, 8001c38 <EncoderVelocity_Update+0x128>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fcc1 	bl	8000550 <__aeabi_dmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	f7fe fb03 	bl	80001e4 <__adddf3>
 8001bde:	4603      	mov	r3, r0
 8001be0:	460c      	mov	r4, r1
 8001be2:	4618      	mov	r0, r3
 8001be4:	4621      	mov	r1, r4
 8001be6:	a316      	add	r3, pc, #88	; (adr r3, 8001c40 <EncoderVelocity_Update+0x130>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe fcb0 	bl	8000550 <__aeabi_dmul>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	460c      	mov	r4, r1
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <EncoderVelocity_Update+0x148>)
 8001bfe:	f7fe fdd1 	bl	80007a4 <__aeabi_ddiv>
 8001c02:	4603      	mov	r3, r0
 8001c04:	460c      	mov	r4, r1
 8001c06:	4618      	mov	r0, r3
 8001c08:	4621      	mov	r1, r4
 8001c0a:	f7fe ff51 	bl	8000ab0 <__aeabi_d2f>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <EncoderVelocity_Update+0x14c>)
 8001c12:	601a      	str	r2, [r3, #0]
	return  rad;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <EncoderVelocity_Update+0x14c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	ee07 3a90 	vmov	s15, r3
}
 8001c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	ecbd 8b02 	vpop	{d8}
 8001c28:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001c2c:	f3af 8000 	nop.w
 8001c30:	00000000 	.word	0x00000000
 8001c34:	412e8480 	.word	0x412e8480
 8001c38:	9999999a 	.word	0x9999999a
 8001c3c:	3fa99999 	.word	0x3fa99999
 8001c40:	fc8b007a 	.word	0xfc8b007a
 8001c44:	400921fa 	.word	0x400921fa
 8001c48:	200003ac 	.word	0x200003ac
 8001c4c:	200001f0 	.word	0x200001f0
 8001c50:	200001f8 	.word	0x200001f8
 8001c54:	20000104 	.word	0x20000104
 8001c58:	40768000 	.word	0x40768000
 8001c5c:	20000100 	.word	0x20000100

08001c60 <kalmanfilter>:

void kalmanfilter()
{    Q = pow(a,2);
 8001c60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4bd6      	ldr	r3, [pc, #856]	; (8001fc0 <kalmanfilter+0x360>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc18 	bl	80004a0 <__aeabi_f2d>
 8001c70:	4603      	mov	r3, r0
 8001c72:	460c      	mov	r4, r1
 8001c74:	ed9f 1bce 	vldr	d1, [pc, #824]	; 8001fb0 <kalmanfilter+0x350>
 8001c78:	ec44 3b10 	vmov	d0, r3, r4
 8001c7c:	f007 fb24 	bl	80092c8 <pow>
 8001c80:	ec54 3b10 	vmov	r3, r4, d0
 8001c84:	4618      	mov	r0, r3
 8001c86:	4621      	mov	r1, r4
 8001c88:	f7fe ff12 	bl	8000ab0 <__aeabi_d2f>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4bcd      	ldr	r3, [pc, #820]	; (8001fc4 <kalmanfilter+0x364>)
 8001c90:	601a      	str	r2, [r3, #0]
	 R = pow(w,2);
 8001c92:	4bcd      	ldr	r3, [pc, #820]	; (8001fc8 <kalmanfilter+0x368>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fc02 	bl	80004a0 <__aeabi_f2d>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	460c      	mov	r4, r1
 8001ca0:	ed9f 1bc3 	vldr	d1, [pc, #780]	; 8001fb0 <kalmanfilter+0x350>
 8001ca4:	ec44 3b10 	vmov	d0, r3, r4
 8001ca8:	f007 fb0e 	bl	80092c8 <pow>
 8001cac:	ec54 3b10 	vmov	r3, r4, d0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	f7fe fefc 	bl	8000ab0 <__aeabi_d2f>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4bc4      	ldr	r3, [pc, #784]	; (8001fcc <kalmanfilter+0x36c>)
 8001cbc:	601a      	str	r2, [r3, #0]
	 theta_est = theta_pd + omega_pd*dt1;
 8001cbe:	4bc4      	ldr	r3, [pc, #784]	; (8001fd0 <kalmanfilter+0x370>)
 8001cc0:	ed93 7a00 	vldr	s14, [r3]
 8001cc4:	4bc3      	ldr	r3, [pc, #780]	; (8001fd4 <kalmanfilter+0x374>)
 8001cc6:	edd3 7a00 	vldr	s15, [r3]
 8001cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cce:	4bc2      	ldr	r3, [pc, #776]	; (8001fd8 <kalmanfilter+0x378>)
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd8:	4bc0      	ldr	r3, [pc, #768]	; (8001fdc <kalmanfilter+0x37c>)
 8001cda:	edc3 7a00 	vstr	s15, [r3]
	 omega_est = omega_pd;
 8001cde:	4bbc      	ldr	r3, [pc, #752]	; (8001fd0 <kalmanfilter+0x370>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4abf      	ldr	r2, [pc, #764]	; (8001fe0 <kalmanfilter+0x380>)
 8001ce4:	6013      	str	r3, [r2, #0]
	 y = (rad-omega_est);
 8001ce6:	4bbf      	ldr	r3, [pc, #764]	; (8001fe4 <kalmanfilter+0x384>)
 8001ce8:	ed93 7a00 	vldr	s14, [r3]
 8001cec:	4bbc      	ldr	r3, [pc, #752]	; (8001fe0 <kalmanfilter+0x380>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf6:	4bbc      	ldr	r3, [pc, #752]	; (8001fe8 <kalmanfilter+0x388>)
 8001cf8:	edc3 7a00 	vstr	s15, [r3]

    p11 = p11 + dt1*p21+ (Q*pow(dt1,4))/4 + (pow(dt1,2))*(p12+dt1*p22)/dt1;
 8001cfc:	4bb5      	ldr	r3, [pc, #724]	; (8001fd4 <kalmanfilter+0x374>)
 8001cfe:	ed93 7a00 	vldr	s14, [r3]
 8001d02:	4bba      	ldr	r3, [pc, #744]	; (8001fec <kalmanfilter+0x38c>)
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d0c:	4bb8      	ldr	r3, [pc, #736]	; (8001ff0 <kalmanfilter+0x390>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d16:	ee17 0a90 	vmov	r0, s15
 8001d1a:	f7fe fbc1 	bl	80004a0 <__aeabi_f2d>
 8001d1e:	4604      	mov	r4, r0
 8001d20:	460d      	mov	r5, r1
 8001d22:	4ba8      	ldr	r3, [pc, #672]	; (8001fc4 <kalmanfilter+0x364>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fbba 	bl	80004a0 <__aeabi_f2d>
 8001d2c:	4680      	mov	r8, r0
 8001d2e:	4689      	mov	r9, r1
 8001d30:	4ba8      	ldr	r3, [pc, #672]	; (8001fd4 <kalmanfilter+0x374>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fbb3 	bl	80004a0 <__aeabi_f2d>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	ed9f 1b9e 	vldr	d1, [pc, #632]	; 8001fb8 <kalmanfilter+0x358>
 8001d42:	ec43 2b10 	vmov	d0, r2, r3
 8001d46:	f007 fabf 	bl	80092c8 <pow>
 8001d4a:	ec53 2b10 	vmov	r2, r3, d0
 8001d4e:	4640      	mov	r0, r8
 8001d50:	4649      	mov	r1, r9
 8001d52:	f7fe fbfd 	bl	8000550 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	4ba4      	ldr	r3, [pc, #656]	; (8001ff4 <kalmanfilter+0x394>)
 8001d64:	f7fe fd1e 	bl	80007a4 <__aeabi_ddiv>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	4629      	mov	r1, r5
 8001d70:	f7fe fa38 	bl	80001e4 <__adddf3>
 8001d74:	4603      	mov	r3, r0
 8001d76:	460c      	mov	r4, r1
 8001d78:	4625      	mov	r5, r4
 8001d7a:	461c      	mov	r4, r3
 8001d7c:	4b95      	ldr	r3, [pc, #596]	; (8001fd4 <kalmanfilter+0x374>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fb8d 	bl	80004a0 <__aeabi_f2d>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8001fb0 <kalmanfilter+0x350>
 8001d8e:	ec43 2b10 	vmov	d0, r2, r3
 8001d92:	f007 fa99 	bl	80092c8 <pow>
 8001d96:	ec59 8b10 	vmov	r8, r9, d0
 8001d9a:	4b8e      	ldr	r3, [pc, #568]	; (8001fd4 <kalmanfilter+0x374>)
 8001d9c:	ed93 7a00 	vldr	s14, [r3]
 8001da0:	4b95      	ldr	r3, [pc, #596]	; (8001ff8 <kalmanfilter+0x398>)
 8001da2:	edd3 7a00 	vldr	s15, [r3]
 8001da6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001daa:	4b94      	ldr	r3, [pc, #592]	; (8001ffc <kalmanfilter+0x39c>)
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db4:	ee17 0a90 	vmov	r0, s15
 8001db8:	f7fe fb72 	bl	80004a0 <__aeabi_f2d>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4640      	mov	r0, r8
 8001dc2:	4649      	mov	r1, r9
 8001dc4:	f7fe fbc4 	bl	8000550 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4690      	mov	r8, r2
 8001dce:	4699      	mov	r9, r3
 8001dd0:	4b80      	ldr	r3, [pc, #512]	; (8001fd4 <kalmanfilter+0x374>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fb63 	bl	80004a0 <__aeabi_f2d>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4640      	mov	r0, r8
 8001de0:	4649      	mov	r1, r9
 8001de2:	f7fe fcdf 	bl	80007a4 <__aeabi_ddiv>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4620      	mov	r0, r4
 8001dec:	4629      	mov	r1, r5
 8001dee:	f7fe f9f9 	bl	80001e4 <__adddf3>
 8001df2:	4603      	mov	r3, r0
 8001df4:	460c      	mov	r4, r1
 8001df6:	4618      	mov	r0, r3
 8001df8:	4621      	mov	r1, r4
 8001dfa:	f7fe fe59 	bl	8000ab0 <__aeabi_d2f>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	4b7b      	ldr	r3, [pc, #492]	; (8001ff0 <kalmanfilter+0x390>)
 8001e02:	601a      	str	r2, [r3, #0]
    p12 = p12 + dt1*p22 + (Q*dt1*pow(dt1,2))/2;
 8001e04:	4b73      	ldr	r3, [pc, #460]	; (8001fd4 <kalmanfilter+0x374>)
 8001e06:	ed93 7a00 	vldr	s14, [r3]
 8001e0a:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <kalmanfilter+0x398>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e14:	4b79      	ldr	r3, [pc, #484]	; (8001ffc <kalmanfilter+0x39c>)
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1e:	ee17 0a90 	vmov	r0, s15
 8001e22:	f7fe fb3d 	bl	80004a0 <__aeabi_f2d>
 8001e26:	4604      	mov	r4, r0
 8001e28:	460d      	mov	r5, r1
 8001e2a:	4b66      	ldr	r3, [pc, #408]	; (8001fc4 <kalmanfilter+0x364>)
 8001e2c:	ed93 7a00 	vldr	s14, [r3]
 8001e30:	4b68      	ldr	r3, [pc, #416]	; (8001fd4 <kalmanfilter+0x374>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3a:	ee17 0a90 	vmov	r0, s15
 8001e3e:	f7fe fb2f 	bl	80004a0 <__aeabi_f2d>
 8001e42:	4680      	mov	r8, r0
 8001e44:	4689      	mov	r9, r1
 8001e46:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <kalmanfilter+0x374>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb28 	bl	80004a0 <__aeabi_f2d>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8001fb0 <kalmanfilter+0x350>
 8001e58:	ec43 2b10 	vmov	d0, r2, r3
 8001e5c:	f007 fa34 	bl	80092c8 <pow>
 8001e60:	ec53 2b10 	vmov	r2, r3, d0
 8001e64:	4640      	mov	r0, r8
 8001e66:	4649      	mov	r1, r9
 8001e68:	f7fe fb72 	bl	8000550 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e7c:	f7fe fc92 	bl	80007a4 <__aeabi_ddiv>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4620      	mov	r0, r4
 8001e86:	4629      	mov	r1, r5
 8001e88:	f7fe f9ac 	bl	80001e4 <__adddf3>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	460c      	mov	r4, r1
 8001e90:	4618      	mov	r0, r3
 8001e92:	4621      	mov	r1, r4
 8001e94:	f7fe fe0c 	bl	8000ab0 <__aeabi_d2f>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <kalmanfilter+0x39c>)
 8001e9c:	601a      	str	r2, [r3, #0]
    p21 = (2*dt1*p21+Q*pow(dt1,4) + 2*p22*pow(dt1,2))/(2*dt1);
 8001e9e:	4b4d      	ldr	r3, [pc, #308]	; (8001fd4 <kalmanfilter+0x374>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ea8:	4b50      	ldr	r3, [pc, #320]	; (8001fec <kalmanfilter+0x38c>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb2:	ee17 0a90 	vmov	r0, s15
 8001eb6:	f7fe faf3 	bl	80004a0 <__aeabi_f2d>
 8001eba:	4604      	mov	r4, r0
 8001ebc:	460d      	mov	r5, r1
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <kalmanfilter+0x364>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe faec 	bl	80004a0 <__aeabi_f2d>
 8001ec8:	4680      	mov	r8, r0
 8001eca:	4689      	mov	r9, r1
 8001ecc:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <kalmanfilter+0x374>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fae5 	bl	80004a0 <__aeabi_f2d>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8001fb8 <kalmanfilter+0x358>
 8001ede:	ec43 2b10 	vmov	d0, r2, r3
 8001ee2:	f007 f9f1 	bl	80092c8 <pow>
 8001ee6:	ec53 2b10 	vmov	r2, r3, d0
 8001eea:	4640      	mov	r0, r8
 8001eec:	4649      	mov	r1, r9
 8001eee:	f7fe fb2f 	bl	8000550 <__aeabi_dmul>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	4629      	mov	r1, r5
 8001efa:	f7fe f973 	bl	80001e4 <__adddf3>
 8001efe:	4603      	mov	r3, r0
 8001f00:	460c      	mov	r4, r1
 8001f02:	4625      	mov	r5, r4
 8001f04:	461c      	mov	r4, r3
 8001f06:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <kalmanfilter+0x398>)
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f10:	ee17 0a90 	vmov	r0, s15
 8001f14:	f7fe fac4 	bl	80004a0 <__aeabi_f2d>
 8001f18:	4680      	mov	r8, r0
 8001f1a:	4689      	mov	r9, r1
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <kalmanfilter+0x374>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fabd 	bl	80004a0 <__aeabi_f2d>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001fb0 <kalmanfilter+0x350>
 8001f2e:	ec43 2b10 	vmov	d0, r2, r3
 8001f32:	f007 f9c9 	bl	80092c8 <pow>
 8001f36:	ec53 2b10 	vmov	r2, r3, d0
 8001f3a:	4640      	mov	r0, r8
 8001f3c:	4649      	mov	r1, r9
 8001f3e:	f7fe fb07 	bl	8000550 <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4620      	mov	r0, r4
 8001f48:	4629      	mov	r1, r5
 8001f4a:	f7fe f94b 	bl	80001e4 <__adddf3>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	460c      	mov	r4, r1
 8001f52:	4625      	mov	r5, r4
 8001f54:	461c      	mov	r4, r3
 8001f56:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <kalmanfilter+0x374>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f60:	ee17 0a90 	vmov	r0, s15
 8001f64:	f7fe fa9c 	bl	80004a0 <__aeabi_f2d>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	4629      	mov	r1, r5
 8001f70:	f7fe fc18 	bl	80007a4 <__aeabi_ddiv>
 8001f74:	4603      	mov	r3, r0
 8001f76:	460c      	mov	r4, r1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	f7fe fd98 	bl	8000ab0 <__aeabi_d2f>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <kalmanfilter+0x38c>)
 8001f84:	601a      	str	r2, [r3, #0]
    p22 = Q*pow(dt1,2)+p22;
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <kalmanfilter+0x364>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fa88 	bl	80004a0 <__aeabi_f2d>
 8001f90:	4604      	mov	r4, r0
 8001f92:	460d      	mov	r5, r1
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <kalmanfilter+0x374>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fa81 	bl	80004a0 <__aeabi_f2d>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	ed9f 1b03 	vldr	d1, [pc, #12]	; 8001fb0 <kalmanfilter+0x350>
 8001fa6:	ec43 2b10 	vmov	d0, r2, r3
 8001faa:	f007 f98d 	bl	80092c8 <pow>
 8001fae:	e027      	b.n	8002000 <kalmanfilter+0x3a0>
 8001fb0:	00000000 	.word	0x00000000
 8001fb4:	40000000 	.word	0x40000000
 8001fb8:	00000000 	.word	0x00000000
 8001fbc:	40100000 	.word	0x40100000
 8001fc0:	2000000c 	.word	0x2000000c
 8001fc4:	20000108 	.word	0x20000108
 8001fc8:	20000010 	.word	0x20000010
 8001fcc:	2000010c 	.word	0x2000010c
 8001fd0:	20000130 	.word	0x20000130
 8001fd4:	20000014 	.word	0x20000014
 8001fd8:	20000118 	.word	0x20000118
 8001fdc:	20000110 	.word	0x20000110
 8001fe0:	20000114 	.word	0x20000114
 8001fe4:	20000100 	.word	0x20000100
 8001fe8:	2000011c 	.word	0x2000011c
 8001fec:	20000128 	.word	0x20000128
 8001ff0:	20000120 	.word	0x20000120
 8001ff4:	40100000 	.word	0x40100000
 8001ff8:	2000012c 	.word	0x2000012c
 8001ffc:	20000124 	.word	0x20000124
 8002000:	ec53 2b10 	vmov	r2, r3, d0
 8002004:	4620      	mov	r0, r4
 8002006:	4629      	mov	r1, r5
 8002008:	f7fe faa2 	bl	8000550 <__aeabi_dmul>
 800200c:	4603      	mov	r3, r0
 800200e:	460c      	mov	r4, r1
 8002010:	4625      	mov	r5, r4
 8002012:	461c      	mov	r4, r3
 8002014:	4b6a      	ldr	r3, [pc, #424]	; (80021c0 <kalmanfilter+0x560>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fa41 	bl	80004a0 <__aeabi_f2d>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4620      	mov	r0, r4
 8002024:	4629      	mov	r1, r5
 8002026:	f7fe f8dd 	bl	80001e4 <__adddf3>
 800202a:	4603      	mov	r3, r0
 800202c:	460c      	mov	r4, r1
 800202e:	4618      	mov	r0, r3
 8002030:	4621      	mov	r1, r4
 8002032:	f7fe fd3d 	bl	8000ab0 <__aeabi_d2f>
 8002036:	4602      	mov	r2, r0
 8002038:	4b61      	ldr	r3, [pc, #388]	; (80021c0 <kalmanfilter+0x560>)
 800203a:	601a      	str	r2, [r3, #0]

    theta_est+= (p12*y)/(R+p22);
 800203c:	4b61      	ldr	r3, [pc, #388]	; (80021c4 <kalmanfilter+0x564>)
 800203e:	ed93 7a00 	vldr	s14, [r3]
 8002042:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <kalmanfilter+0x568>)
 8002044:	edd3 7a00 	vldr	s15, [r3]
 8002048:	ee67 6a27 	vmul.f32	s13, s14, s15
 800204c:	4b5f      	ldr	r3, [pc, #380]	; (80021cc <kalmanfilter+0x56c>)
 800204e:	ed93 7a00 	vldr	s14, [r3]
 8002052:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <kalmanfilter+0x560>)
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002060:	4b5b      	ldr	r3, [pc, #364]	; (80021d0 <kalmanfilter+0x570>)
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206a:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <kalmanfilter+0x570>)
 800206c:	edc3 7a00 	vstr	s15, [r3]
    omega_est+= (p22*y)/(R+p22);
 8002070:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <kalmanfilter+0x560>)
 8002072:	ed93 7a00 	vldr	s14, [r3]
 8002076:	4b54      	ldr	r3, [pc, #336]	; (80021c8 <kalmanfilter+0x568>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002080:	4b52      	ldr	r3, [pc, #328]	; (80021cc <kalmanfilter+0x56c>)
 8002082:	ed93 7a00 	vldr	s14, [r3]
 8002086:	4b4e      	ldr	r3, [pc, #312]	; (80021c0 <kalmanfilter+0x560>)
 8002088:	edd3 7a00 	vldr	s15, [r3]
 800208c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002094:	4b4f      	ldr	r3, [pc, #316]	; (80021d4 <kalmanfilter+0x574>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209e:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <kalmanfilter+0x574>)
 80020a0:	edc3 7a00 	vstr	s15, [r3]

    p11=p11-(p12*p21)/(R+p22);
 80020a4:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <kalmanfilter+0x578>)
 80020a6:	ed93 7a00 	vldr	s14, [r3]
 80020aa:	4b46      	ldr	r3, [pc, #280]	; (80021c4 <kalmanfilter+0x564>)
 80020ac:	edd3 6a00 	vldr	s13, [r3]
 80020b0:	4b4a      	ldr	r3, [pc, #296]	; (80021dc <kalmanfilter+0x57c>)
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80020ba:	4b44      	ldr	r3, [pc, #272]	; (80021cc <kalmanfilter+0x56c>)
 80020bc:	edd3 6a00 	vldr	s13, [r3]
 80020c0:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <kalmanfilter+0x560>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020ca:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80020ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d2:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <kalmanfilter+0x578>)
 80020d4:	edc3 7a00 	vstr	s15, [r3]
    p12=p12-(p22*p21)/(R+p22);
 80020d8:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <kalmanfilter+0x564>)
 80020da:	ed93 7a00 	vldr	s14, [r3]
 80020de:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <kalmanfilter+0x560>)
 80020e0:	edd3 6a00 	vldr	s13, [r3]
 80020e4:	4b3d      	ldr	r3, [pc, #244]	; (80021dc <kalmanfilter+0x57c>)
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80020ee:	4b37      	ldr	r3, [pc, #220]	; (80021cc <kalmanfilter+0x56c>)
 80020f0:	edd3 6a00 	vldr	s13, [r3]
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <kalmanfilter+0x560>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020fe:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002106:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <kalmanfilter+0x564>)
 8002108:	edc3 7a00 	vstr	s15, [r3]
    p21=-p21*(p22/(R+p22)-1);
 800210c:	4b33      	ldr	r3, [pc, #204]	; (80021dc <kalmanfilter+0x57c>)
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	eeb1 7a67 	vneg.f32	s14, s15
 8002116:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <kalmanfilter+0x560>)
 8002118:	ed93 6a00 	vldr	s12, [r3]
 800211c:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <kalmanfilter+0x56c>)
 800211e:	edd3 6a00 	vldr	s13, [r3]
 8002122:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <kalmanfilter+0x560>)
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800212c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002134:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213c:	4b27      	ldr	r3, [pc, #156]	; (80021dc <kalmanfilter+0x57c>)
 800213e:	edc3 7a00 	vstr	s15, [r3]
    p22=-p22*(p22/(R+p22)-1);
 8002142:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <kalmanfilter+0x560>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	eeb1 7a67 	vneg.f32	s14, s15
 800214c:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <kalmanfilter+0x560>)
 800214e:	ed93 6a00 	vldr	s12, [r3]
 8002152:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <kalmanfilter+0x56c>)
 8002154:	edd3 6a00 	vldr	s13, [r3]
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <kalmanfilter+0x560>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002162:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800216a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800216e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <kalmanfilter+0x560>)
 8002174:	edc3 7a00 	vstr	s15, [r3]

    theta_pd=theta_est;
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <kalmanfilter+0x570>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a18      	ldr	r2, [pc, #96]	; (80021e0 <kalmanfilter+0x580>)
 800217e:	6013      	str	r3, [r2, #0]
    omega_pd=omega_est;
 8002180:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <kalmanfilter+0x574>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a17      	ldr	r2, [pc, #92]	; (80021e4 <kalmanfilter+0x584>)
 8002186:	6013      	str	r3, [r2, #0]

    kalman_theta=(float)(theta_est*57.2958);
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <kalmanfilter+0x570>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f987 	bl	80004a0 <__aeabi_f2d>
 8002192:	a309      	add	r3, pc, #36	; (adr r3, 80021b8 <kalmanfilter+0x558>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe f9da 	bl	8000550 <__aeabi_dmul>
 800219c:	4603      	mov	r3, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	4618      	mov	r0, r3
 80021a2:	4621      	mov	r1, r4
 80021a4:	f7fe fc84 	bl	8000ab0 <__aeabi_d2f>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <kalmanfilter+0x588>)
 80021ac:	601a      	str	r2, [r3, #0]
}
 80021ae:	bf00      	nop
 80021b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021b4:	f3af 8000 	nop.w
 80021b8:	c63f1412 	.word	0xc63f1412
 80021bc:	404ca5dc 	.word	0x404ca5dc
 80021c0:	2000012c 	.word	0x2000012c
 80021c4:	20000124 	.word	0x20000124
 80021c8:	2000011c 	.word	0x2000011c
 80021cc:	2000010c 	.word	0x2000010c
 80021d0:	20000110 	.word	0x20000110
 80021d4:	20000114 	.word	0x20000114
 80021d8:	20000120 	.word	0x20000120
 80021dc:	20000128 	.word	0x20000128
 80021e0:	20000118 	.word	0x20000118
 80021e4:	20000130 	.word	0x20000130
 80021e8:	20000180 	.word	0x20000180
 80021ec:	00000000 	.word	0x00000000

080021f0 <planning>:

void planning()
{
 80021f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021f4:	af00      	add	r7, sp, #0
  t=t+0.01;
 80021f6:	4bba      	ldr	r3, [pc, #744]	; (80024e0 <planning+0x2f0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe f950 	bl	80004a0 <__aeabi_f2d>
 8002200:	a3ab      	add	r3, pc, #684	; (adr r3, 80024b0 <planning+0x2c0>)
 8002202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002206:	f7fd ffed 	bl	80001e4 <__adddf3>
 800220a:	4603      	mov	r3, r0
 800220c:	460c      	mov	r4, r1
 800220e:	4618      	mov	r0, r3
 8002210:	4621      	mov	r1, r4
 8002212:	f7fe fc4d 	bl	8000ab0 <__aeabi_d2f>
 8002216:	4602      	mov	r2, r0
 8002218:	4bb1      	ldr	r3, [pc, #708]	; (80024e0 <planning+0x2f0>)
 800221a:	601a      	str	r2, [r3, #0]
  Vmax = Max_Speed * 0.10472 * 0.9;     //rad/s
 800221c:	4bb1      	ldr	r3, [pc, #708]	; (80024e4 <planning+0x2f4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f93d 	bl	80004a0 <__aeabi_f2d>
 8002226:	a3a4      	add	r3, pc, #656	; (adr r3, 80024b8 <planning+0x2c8>)
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f7fe f990 	bl	8000550 <__aeabi_dmul>
 8002230:	4603      	mov	r3, r0
 8002232:	460c      	mov	r4, r1
 8002234:	4618      	mov	r0, r3
 8002236:	4621      	mov	r1, r4
 8002238:	a3a1      	add	r3, pc, #644	; (adr r3, 80024c0 <planning+0x2d0>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f7fe f987 	bl	8000550 <__aeabi_dmul>
 8002242:	4603      	mov	r3, r0
 8002244:	460c      	mov	r4, r1
 8002246:	4618      	mov	r0, r3
 8002248:	4621      	mov	r1, r4
 800224a:	f7fe fc31 	bl	8000ab0 <__aeabi_d2f>
 800224e:	4602      	mov	r2, r0
 8002250:	4ba5      	ldr	r3, [pc, #660]	; (80024e8 <planning+0x2f8>)
 8002252:	601a      	str	r2, [r3, #0]
  sb = angle*0.0174533;           //degree -> rad
 8002254:	4ba5      	ldr	r3, [pc, #660]	; (80024ec <planning+0x2fc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f921 	bl	80004a0 <__aeabi_f2d>
 800225e:	a39a      	add	r3, pc, #616	; (adr r3, 80024c8 <planning+0x2d8>)
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	f7fe f974 	bl	8000550 <__aeabi_dmul>
 8002268:	4603      	mov	r3, r0
 800226a:	460c      	mov	r4, r1
 800226c:	4618      	mov	r0, r3
 800226e:	4621      	mov	r1, r4
 8002270:	f7fe fc1e 	bl	8000ab0 <__aeabi_d2f>
 8002274:	4602      	mov	r2, r0
 8002276:	4b9e      	ldr	r3, [pc, #632]	; (80024f0 <planning+0x300>)
 8002278:	601a      	str	r2, [r3, #0]
  sa = Lastest_Angle * 0.0174533; //degree -> rad
 800227a:	4b9e      	ldr	r3, [pc, #632]	; (80024f4 <planning+0x304>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f90e 	bl	80004a0 <__aeabi_f2d>
 8002284:	a390      	add	r3, pc, #576	; (adr r3, 80024c8 <planning+0x2d8>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	f7fe f961 	bl	8000550 <__aeabi_dmul>
 800228e:	4603      	mov	r3, r0
 8002290:	460c      	mov	r4, r1
 8002292:	4618      	mov	r0, r3
 8002294:	4621      	mov	r1, r4
 8002296:	f7fe fc0b 	bl	8000ab0 <__aeabi_d2f>
 800229a:	4602      	mov	r2, r0
 800229c:	4b96      	ldr	r3, [pc, #600]	; (80024f8 <planning+0x308>)
 800229e:	601a      	str	r2, [r3, #0]

  if(sb < sa) { reverse = 1; distance = Lastest_Angle - angle; tf = 15.00*(sa-sb)/(8.00*Vmax); }
 80022a0:	4b93      	ldr	r3, [pc, #588]	; (80024f0 <planning+0x300>)
 80022a2:	ed93 7a00 	vldr	s14, [r3]
 80022a6:	4b94      	ldr	r3, [pc, #592]	; (80024f8 <planning+0x308>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	d53c      	bpl.n	8002330 <planning+0x140>
 80022b6:	4b91      	ldr	r3, [pc, #580]	; (80024fc <planning+0x30c>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	4b8d      	ldr	r3, [pc, #564]	; (80024f4 <planning+0x304>)
 80022be:	ed93 7a00 	vldr	s14, [r3]
 80022c2:	4b8a      	ldr	r3, [pc, #552]	; (80024ec <planning+0x2fc>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022cc:	4b8c      	ldr	r3, [pc, #560]	; (8002500 <planning+0x310>)
 80022ce:	edc3 7a00 	vstr	s15, [r3]
 80022d2:	4b89      	ldr	r3, [pc, #548]	; (80024f8 <planning+0x308>)
 80022d4:	ed93 7a00 	vldr	s14, [r3]
 80022d8:	4b85      	ldr	r3, [pc, #532]	; (80024f0 <planning+0x300>)
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e2:	ee17 0a90 	vmov	r0, s15
 80022e6:	f7fe f8db 	bl	80004a0 <__aeabi_f2d>
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	4b85      	ldr	r3, [pc, #532]	; (8002504 <planning+0x314>)
 80022f0:	f7fe f92e 	bl	8000550 <__aeabi_dmul>
 80022f4:	4603      	mov	r3, r0
 80022f6:	460c      	mov	r4, r1
 80022f8:	4625      	mov	r5, r4
 80022fa:	461c      	mov	r4, r3
 80022fc:	4b7a      	ldr	r3, [pc, #488]	; (80024e8 <planning+0x2f8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f8cd 	bl	80004a0 <__aeabi_f2d>
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	4b7f      	ldr	r3, [pc, #508]	; (8002508 <planning+0x318>)
 800230c:	f7fe f920 	bl	8000550 <__aeabi_dmul>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4620      	mov	r0, r4
 8002316:	4629      	mov	r1, r5
 8002318:	f7fe fa44 	bl	80007a4 <__aeabi_ddiv>
 800231c:	4603      	mov	r3, r0
 800231e:	460c      	mov	r4, r1
 8002320:	4618      	mov	r0, r3
 8002322:	4621      	mov	r1, r4
 8002324:	f7fe fbc4 	bl	8000ab0 <__aeabi_d2f>
 8002328:	4602      	mov	r2, r0
 800232a:	4b78      	ldr	r3, [pc, #480]	; (800250c <planning+0x31c>)
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	e03b      	b.n	80023a8 <planning+0x1b8>
  else        { reverse = 0; distance = angle - Lastest_Angle; tf = 15.00*(sb-sa)/(8.00*Vmax); }
 8002330:	4b72      	ldr	r3, [pc, #456]	; (80024fc <planning+0x30c>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
 8002336:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <planning+0x2fc>)
 8002338:	ed93 7a00 	vldr	s14, [r3]
 800233c:	4b6d      	ldr	r3, [pc, #436]	; (80024f4 <planning+0x304>)
 800233e:	edd3 7a00 	vldr	s15, [r3]
 8002342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002346:	4b6e      	ldr	r3, [pc, #440]	; (8002500 <planning+0x310>)
 8002348:	edc3 7a00 	vstr	s15, [r3]
 800234c:	4b68      	ldr	r3, [pc, #416]	; (80024f0 <planning+0x300>)
 800234e:	ed93 7a00 	vldr	s14, [r3]
 8002352:	4b69      	ldr	r3, [pc, #420]	; (80024f8 <planning+0x308>)
 8002354:	edd3 7a00 	vldr	s15, [r3]
 8002358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235c:	ee17 0a90 	vmov	r0, s15
 8002360:	f7fe f89e 	bl	80004a0 <__aeabi_f2d>
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	4b66      	ldr	r3, [pc, #408]	; (8002504 <planning+0x314>)
 800236a:	f7fe f8f1 	bl	8000550 <__aeabi_dmul>
 800236e:	4603      	mov	r3, r0
 8002370:	460c      	mov	r4, r1
 8002372:	4625      	mov	r5, r4
 8002374:	461c      	mov	r4, r3
 8002376:	4b5c      	ldr	r3, [pc, #368]	; (80024e8 <planning+0x2f8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe f890 	bl	80004a0 <__aeabi_f2d>
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	4b60      	ldr	r3, [pc, #384]	; (8002508 <planning+0x318>)
 8002386:	f7fe f8e3 	bl	8000550 <__aeabi_dmul>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4620      	mov	r0, r4
 8002390:	4629      	mov	r1, r5
 8002392:	f7fe fa07 	bl	80007a4 <__aeabi_ddiv>
 8002396:	4603      	mov	r3, r0
 8002398:	460c      	mov	r4, r1
 800239a:	4618      	mov	r0, r3
 800239c:	4621      	mov	r1, r4
 800239e:	f7fe fb87 	bl	8000ab0 <__aeabi_d2f>
 80023a2:	4602      	mov	r2, r0
 80023a4:	4b59      	ldr	r3, [pc, #356]	; (800250c <planning+0x31c>)
 80023a6:	601a      	str	r2, [r3, #0]

  if (distance <=30)
 80023a8:	4b55      	ldr	r3, [pc, #340]	; (8002500 <planning+0x310>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80023b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ba:	d802      	bhi.n	80023c2 <planning+0x1d2>
  { flag_case = 3; }
 80023bc:	4b54      	ldr	r3, [pc, #336]	; (8002510 <planning+0x320>)
 80023be:	2203      	movs	r2, #3
 80023c0:	701a      	strb	r2, [r3, #0]

  if (distance > 30 && distance <=60)
 80023c2:	4b4f      	ldr	r3, [pc, #316]	; (8002500 <planning+0x310>)
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80023cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	dd0c      	ble.n	80023f0 <planning+0x200>
 80023d6:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <planning+0x310>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002514 <planning+0x324>
 80023e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	d802      	bhi.n	80023f0 <planning+0x200>
  { flag_case = 4; }
 80023ea:	4b49      	ldr	r3, [pc, #292]	; (8002510 <planning+0x320>)
 80023ec:	2204      	movs	r2, #4
 80023ee:	701a      	strb	r2, [r3, #0]

  if (distance > 60 && distance <=90)
 80023f0:	4b43      	ldr	r3, [pc, #268]	; (8002500 <planning+0x310>)
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002514 <planning+0x324>
 80023fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	dd0c      	ble.n	800241e <planning+0x22e>
 8002404:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <planning+0x310>)
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002518 <planning+0x328>
 800240e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002416:	d802      	bhi.n	800241e <planning+0x22e>
  { flag_case = 5; }
 8002418:	4b3d      	ldr	r3, [pc, #244]	; (8002510 <planning+0x320>)
 800241a:	2205      	movs	r2, #5
 800241c:	701a      	strb	r2, [r3, #0]

  if (distance > 90){
 800241e:	4b38      	ldr	r3, [pc, #224]	; (8002500 <planning+0x310>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002518 <planning+0x328>
 8002428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002430:	dc00      	bgt.n	8002434 <planning+0x244>
	  if(t<=tf){
		  sbf =  a3*pow(t,3)+a4*pow(t,4)+a5*pow(t,5);
		  vb= (float)((3*a3*pow(t,2))+(4*a4*pow(t,3))+(5*a5*pow(t,4)));}
	  else { vb=0; }
  }
}
 8002432:	e274      	b.n	800291e <planning+0x72e>
	  flag_case = 2;
 8002434:	4b36      	ldr	r3, [pc, #216]	; (8002510 <planning+0x320>)
 8002436:	2202      	movs	r2, #2
 8002438:	701a      	strb	r2, [r3, #0]
	  if(0.5>=(5.7335*(sb-sa)/(pow(tf,2))))  //check accerelation
 800243a:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <planning+0x300>)
 800243c:	ed93 7a00 	vldr	s14, [r3]
 8002440:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <planning+0x308>)
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800244a:	ee17 0a90 	vmov	r0, s15
 800244e:	f7fe f827 	bl	80004a0 <__aeabi_f2d>
 8002452:	a31f      	add	r3, pc, #124	; (adr r3, 80024d0 <planning+0x2e0>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe f87a 	bl	8000550 <__aeabi_dmul>
 800245c:	4603      	mov	r3, r0
 800245e:	460c      	mov	r4, r1
 8002460:	4625      	mov	r5, r4
 8002462:	461c      	mov	r4, r3
 8002464:	4b29      	ldr	r3, [pc, #164]	; (800250c <planning+0x31c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f819 	bl	80004a0 <__aeabi_f2d>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80024d8 <planning+0x2e8>
 8002476:	ec43 2b10 	vmov	d0, r2, r3
 800247a:	f006 ff25 	bl	80092c8 <pow>
 800247e:	ec53 2b10 	vmov	r2, r3, d0
 8002482:	4620      	mov	r0, r4
 8002484:	4629      	mov	r1, r5
 8002486:	f7fe f98d 	bl	80007a4 <__aeabi_ddiv>
 800248a:	4603      	mov	r3, r0
 800248c:	460c      	mov	r4, r1
 800248e:	4618      	mov	r0, r3
 8002490:	4621      	mov	r1, r4
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	4b21      	ldr	r3, [pc, #132]	; (800251c <planning+0x32c>)
 8002498:	f7fe fad6 	bl	8000a48 <__aeabi_dcmple>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d03e      	beq.n	8002520 <planning+0x330>
	  {tf=tf;}
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <planning+0x31c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a19      	ldr	r2, [pc, #100]	; (800250c <planning+0x31c>)
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e068      	b.n	800257e <planning+0x38e>
 80024ac:	f3af 8000 	nop.w
 80024b0:	47ae147b 	.word	0x47ae147b
 80024b4:	3f847ae1 	.word	0x3f847ae1
 80024b8:	0f3cb3e5 	.word	0x0f3cb3e5
 80024bc:	3fbaceee 	.word	0x3fbaceee
 80024c0:	cccccccd 	.word	0xcccccccd
 80024c4:	3feccccc 	.word	0x3feccccc
 80024c8:	22d4405f 	.word	0x22d4405f
 80024cc:	3f91df47 	.word	0x3f91df47
 80024d0:	9fbe76c9 	.word	0x9fbe76c9
 80024d4:	4016ef1a 	.word	0x4016ef1a
 80024d8:	00000000 	.word	0x00000000
 80024dc:	40000000 	.word	0x40000000
 80024e0:	20000160 	.word	0x20000160
 80024e4:	200001bc 	.word	0x200001bc
 80024e8:	20000164 	.word	0x20000164
 80024ec:	2000017c 	.word	0x2000017c
 80024f0:	2000014c 	.word	0x2000014c
 80024f4:	200001a4 	.word	0x200001a4
 80024f8:	20000150 	.word	0x20000150
 80024fc:	20000185 	.word	0x20000185
 8002500:	20000188 	.word	0x20000188
 8002504:	402e0000 	.word	0x402e0000
 8002508:	40200000 	.word	0x40200000
 800250c:	20000154 	.word	0x20000154
 8002510:	20000184 	.word	0x20000184
 8002514:	42700000 	.word	0x42700000
 8002518:	42b40000 	.word	0x42b40000
 800251c:	3fe00000 	.word	0x3fe00000
	  else{tf=pow((5.7335*(sb-sa)/0.5),0.5);}
 8002520:	4bd9      	ldr	r3, [pc, #868]	; (8002888 <planning+0x698>)
 8002522:	ed93 7a00 	vldr	s14, [r3]
 8002526:	4bd9      	ldr	r3, [pc, #868]	; (800288c <planning+0x69c>)
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002530:	ee17 0a90 	vmov	r0, s15
 8002534:	f7fd ffb4 	bl	80004a0 <__aeabi_f2d>
 8002538:	a3c7      	add	r3, pc, #796	; (adr r3, 8002858 <planning+0x668>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f7fe f807 	bl	8000550 <__aeabi_dmul>
 8002542:	4603      	mov	r3, r0
 8002544:	460c      	mov	r4, r1
 8002546:	4618      	mov	r0, r3
 8002548:	4621      	mov	r1, r4
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	4bd0      	ldr	r3, [pc, #832]	; (8002890 <planning+0x6a0>)
 8002550:	f7fe f928 	bl	80007a4 <__aeabi_ddiv>
 8002554:	4603      	mov	r3, r0
 8002556:	460c      	mov	r4, r1
 8002558:	ec44 3b17 	vmov	d7, r3, r4
 800255c:	ed9f 1bc0 	vldr	d1, [pc, #768]	; 8002860 <planning+0x670>
 8002560:	eeb0 0a47 	vmov.f32	s0, s14
 8002564:	eef0 0a67 	vmov.f32	s1, s15
 8002568:	f006 feae 	bl	80092c8 <pow>
 800256c:	ec54 3b10 	vmov	r3, r4, d0
 8002570:	4618      	mov	r0, r3
 8002572:	4621      	mov	r1, r4
 8002574:	f7fe fa9c 	bl	8000ab0 <__aeabi_d2f>
 8002578:	4602      	mov	r2, r0
 800257a:	4bc6      	ldr	r3, [pc, #792]	; (8002894 <planning+0x6a4>)
 800257c:	601a      	str	r2, [r3, #0]
	  a0=0;
 800257e:	4bc6      	ldr	r3, [pc, #792]	; (8002898 <planning+0x6a8>)
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
	  a1=0;
 8002586:	4bc5      	ldr	r3, [pc, #788]	; (800289c <planning+0x6ac>)
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
	  a2=0;
 800258e:	4bc4      	ldr	r3, [pc, #784]	; (80028a0 <planning+0x6b0>)
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
	  a3= 10.00*(sb-sa)/(pow(tf,3));
 8002596:	4bbc      	ldr	r3, [pc, #752]	; (8002888 <planning+0x698>)
 8002598:	ed93 7a00 	vldr	s14, [r3]
 800259c:	4bbb      	ldr	r3, [pc, #748]	; (800288c <planning+0x69c>)
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a6:	ee17 0a90 	vmov	r0, s15
 80025aa:	f7fd ff79 	bl	80004a0 <__aeabi_f2d>
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	4bbc      	ldr	r3, [pc, #752]	; (80028a4 <planning+0x6b4>)
 80025b4:	f7fd ffcc 	bl	8000550 <__aeabi_dmul>
 80025b8:	4603      	mov	r3, r0
 80025ba:	460c      	mov	r4, r1
 80025bc:	4625      	mov	r5, r4
 80025be:	461c      	mov	r4, r3
 80025c0:	4bb4      	ldr	r3, [pc, #720]	; (8002894 <planning+0x6a4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd ff6b 	bl	80004a0 <__aeabi_f2d>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	ed9f 1ba6 	vldr	d1, [pc, #664]	; 8002868 <planning+0x678>
 80025d2:	ec43 2b10 	vmov	d0, r2, r3
 80025d6:	f006 fe77 	bl	80092c8 <pow>
 80025da:	ec53 2b10 	vmov	r2, r3, d0
 80025de:	4620      	mov	r0, r4
 80025e0:	4629      	mov	r1, r5
 80025e2:	f7fe f8df 	bl	80007a4 <__aeabi_ddiv>
 80025e6:	4603      	mov	r3, r0
 80025e8:	460c      	mov	r4, r1
 80025ea:	4618      	mov	r0, r3
 80025ec:	4621      	mov	r1, r4
 80025ee:	f7fe fa5f 	bl	8000ab0 <__aeabi_d2f>
 80025f2:	4602      	mov	r2, r0
 80025f4:	4bac      	ldr	r3, [pc, #688]	; (80028a8 <planning+0x6b8>)
 80025f6:	601a      	str	r2, [r3, #0]
	  a4= -15.00*(sb-sa)/(pow(tf,4));
 80025f8:	4ba3      	ldr	r3, [pc, #652]	; (8002888 <planning+0x698>)
 80025fa:	ed93 7a00 	vldr	s14, [r3]
 80025fe:	4ba3      	ldr	r3, [pc, #652]	; (800288c <planning+0x69c>)
 8002600:	edd3 7a00 	vldr	s15, [r3]
 8002604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002608:	ee17 0a90 	vmov	r0, s15
 800260c:	f7fd ff48 	bl	80004a0 <__aeabi_f2d>
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	4ba5      	ldr	r3, [pc, #660]	; (80028ac <planning+0x6bc>)
 8002616:	f7fd ff9b 	bl	8000550 <__aeabi_dmul>
 800261a:	4603      	mov	r3, r0
 800261c:	460c      	mov	r4, r1
 800261e:	4625      	mov	r5, r4
 8002620:	461c      	mov	r4, r3
 8002622:	4b9c      	ldr	r3, [pc, #624]	; (8002894 <planning+0x6a4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ff3a 	bl	80004a0 <__aeabi_f2d>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	ed9f 1b8f 	vldr	d1, [pc, #572]	; 8002870 <planning+0x680>
 8002634:	ec43 2b10 	vmov	d0, r2, r3
 8002638:	f006 fe46 	bl	80092c8 <pow>
 800263c:	ec53 2b10 	vmov	r2, r3, d0
 8002640:	4620      	mov	r0, r4
 8002642:	4629      	mov	r1, r5
 8002644:	f7fe f8ae 	bl	80007a4 <__aeabi_ddiv>
 8002648:	4603      	mov	r3, r0
 800264a:	460c      	mov	r4, r1
 800264c:	4618      	mov	r0, r3
 800264e:	4621      	mov	r1, r4
 8002650:	f7fe fa2e 	bl	8000ab0 <__aeabi_d2f>
 8002654:	4602      	mov	r2, r0
 8002656:	4b96      	ldr	r3, [pc, #600]	; (80028b0 <planning+0x6c0>)
 8002658:	601a      	str	r2, [r3, #0]
	  a5= 6.00*(sb-sa)/(pow(tf,5));
 800265a:	4b8b      	ldr	r3, [pc, #556]	; (8002888 <planning+0x698>)
 800265c:	ed93 7a00 	vldr	s14, [r3]
 8002660:	4b8a      	ldr	r3, [pc, #552]	; (800288c <planning+0x69c>)
 8002662:	edd3 7a00 	vldr	s15, [r3]
 8002666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266a:	ee17 0a90 	vmov	r0, s15
 800266e:	f7fd ff17 	bl	80004a0 <__aeabi_f2d>
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	4b8f      	ldr	r3, [pc, #572]	; (80028b4 <planning+0x6c4>)
 8002678:	f7fd ff6a 	bl	8000550 <__aeabi_dmul>
 800267c:	4603      	mov	r3, r0
 800267e:	460c      	mov	r4, r1
 8002680:	4625      	mov	r5, r4
 8002682:	461c      	mov	r4, r3
 8002684:	4b83      	ldr	r3, [pc, #524]	; (8002894 <planning+0x6a4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd ff09 	bl	80004a0 <__aeabi_f2d>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8002878 <planning+0x688>
 8002696:	ec43 2b10 	vmov	d0, r2, r3
 800269a:	f006 fe15 	bl	80092c8 <pow>
 800269e:	ec53 2b10 	vmov	r2, r3, d0
 80026a2:	4620      	mov	r0, r4
 80026a4:	4629      	mov	r1, r5
 80026a6:	f7fe f87d 	bl	80007a4 <__aeabi_ddiv>
 80026aa:	4603      	mov	r3, r0
 80026ac:	460c      	mov	r4, r1
 80026ae:	4618      	mov	r0, r3
 80026b0:	4621      	mov	r1, r4
 80026b2:	f7fe f9fd 	bl	8000ab0 <__aeabi_d2f>
 80026b6:	4602      	mov	r2, r0
 80026b8:	4b7f      	ldr	r3, [pc, #508]	; (80028b8 <planning+0x6c8>)
 80026ba:	601a      	str	r2, [r3, #0]
	  if(t<=tf){
 80026bc:	4b7f      	ldr	r3, [pc, #508]	; (80028bc <planning+0x6cc>)
 80026be:	ed93 7a00 	vldr	s14, [r3]
 80026c2:	4b74      	ldr	r3, [pc, #464]	; (8002894 <planning+0x6a4>)
 80026c4:	edd3 7a00 	vldr	s15, [r3]
 80026c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	f200 8121 	bhi.w	8002916 <planning+0x726>
		  sbf =  a3*pow(t,3)+a4*pow(t,4)+a5*pow(t,5);
 80026d4:	4b74      	ldr	r3, [pc, #464]	; (80028a8 <planning+0x6b8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd fee1 	bl	80004a0 <__aeabi_f2d>
 80026de:	4604      	mov	r4, r0
 80026e0:	460d      	mov	r5, r1
 80026e2:	4b76      	ldr	r3, [pc, #472]	; (80028bc <planning+0x6cc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd feda 	bl	80004a0 <__aeabi_f2d>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8002868 <planning+0x678>
 80026f4:	ec43 2b10 	vmov	d0, r2, r3
 80026f8:	f006 fde6 	bl	80092c8 <pow>
 80026fc:	ec53 2b10 	vmov	r2, r3, d0
 8002700:	4620      	mov	r0, r4
 8002702:	4629      	mov	r1, r5
 8002704:	f7fd ff24 	bl	8000550 <__aeabi_dmul>
 8002708:	4603      	mov	r3, r0
 800270a:	460c      	mov	r4, r1
 800270c:	4625      	mov	r5, r4
 800270e:	461c      	mov	r4, r3
 8002710:	4b67      	ldr	r3, [pc, #412]	; (80028b0 <planning+0x6c0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd fec3 	bl	80004a0 <__aeabi_f2d>
 800271a:	4680      	mov	r8, r0
 800271c:	4689      	mov	r9, r1
 800271e:	4b67      	ldr	r3, [pc, #412]	; (80028bc <planning+0x6cc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fd febc 	bl	80004a0 <__aeabi_f2d>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8002870 <planning+0x680>
 8002730:	ec43 2b10 	vmov	d0, r2, r3
 8002734:	f006 fdc8 	bl	80092c8 <pow>
 8002738:	ec53 2b10 	vmov	r2, r3, d0
 800273c:	4640      	mov	r0, r8
 800273e:	4649      	mov	r1, r9
 8002740:	f7fd ff06 	bl	8000550 <__aeabi_dmul>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4620      	mov	r0, r4
 800274a:	4629      	mov	r1, r5
 800274c:	f7fd fd4a 	bl	80001e4 <__adddf3>
 8002750:	4603      	mov	r3, r0
 8002752:	460c      	mov	r4, r1
 8002754:	4625      	mov	r5, r4
 8002756:	461c      	mov	r4, r3
 8002758:	4b57      	ldr	r3, [pc, #348]	; (80028b8 <planning+0x6c8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd fe9f 	bl	80004a0 <__aeabi_f2d>
 8002762:	4680      	mov	r8, r0
 8002764:	4689      	mov	r9, r1
 8002766:	4b55      	ldr	r3, [pc, #340]	; (80028bc <planning+0x6cc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fe98 	bl	80004a0 <__aeabi_f2d>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8002878 <planning+0x688>
 8002778:	ec43 2b10 	vmov	d0, r2, r3
 800277c:	f006 fda4 	bl	80092c8 <pow>
 8002780:	ec53 2b10 	vmov	r2, r3, d0
 8002784:	4640      	mov	r0, r8
 8002786:	4649      	mov	r1, r9
 8002788:	f7fd fee2 	bl	8000550 <__aeabi_dmul>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4620      	mov	r0, r4
 8002792:	4629      	mov	r1, r5
 8002794:	f7fd fd26 	bl	80001e4 <__adddf3>
 8002798:	4603      	mov	r3, r0
 800279a:	460c      	mov	r4, r1
 800279c:	4618      	mov	r0, r3
 800279e:	4621      	mov	r1, r4
 80027a0:	f7fe f986 	bl	8000ab0 <__aeabi_d2f>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <planning+0x6d0>)
 80027a8:	601a      	str	r2, [r3, #0]
		  vb= (float)((3*a3*pow(t,2))+(4*a4*pow(t,3))+(5*a5*pow(t,4)));}
 80027aa:	4b3f      	ldr	r3, [pc, #252]	; (80028a8 <planning+0x6b8>)
 80027ac:	edd3 7a00 	vldr	s15, [r3]
 80027b0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80027b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027b8:	ee17 0a90 	vmov	r0, s15
 80027bc:	f7fd fe70 	bl	80004a0 <__aeabi_f2d>
 80027c0:	4604      	mov	r4, r0
 80027c2:	460d      	mov	r5, r1
 80027c4:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <planning+0x6cc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fd fe69 	bl	80004a0 <__aeabi_f2d>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8002880 <planning+0x690>
 80027d6:	ec43 2b10 	vmov	d0, r2, r3
 80027da:	f006 fd75 	bl	80092c8 <pow>
 80027de:	ec53 2b10 	vmov	r2, r3, d0
 80027e2:	4620      	mov	r0, r4
 80027e4:	4629      	mov	r1, r5
 80027e6:	f7fd feb3 	bl	8000550 <__aeabi_dmul>
 80027ea:	4603      	mov	r3, r0
 80027ec:	460c      	mov	r4, r1
 80027ee:	4625      	mov	r5, r4
 80027f0:	461c      	mov	r4, r3
 80027f2:	4b2f      	ldr	r3, [pc, #188]	; (80028b0 <planning+0x6c0>)
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80027fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002800:	ee17 0a90 	vmov	r0, s15
 8002804:	f7fd fe4c 	bl	80004a0 <__aeabi_f2d>
 8002808:	4680      	mov	r8, r0
 800280a:	4689      	mov	r9, r1
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <planning+0x6cc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fe45 	bl	80004a0 <__aeabi_f2d>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8002868 <planning+0x678>
 800281e:	ec43 2b10 	vmov	d0, r2, r3
 8002822:	f006 fd51 	bl	80092c8 <pow>
 8002826:	ec53 2b10 	vmov	r2, r3, d0
 800282a:	4640      	mov	r0, r8
 800282c:	4649      	mov	r1, r9
 800282e:	f7fd fe8f 	bl	8000550 <__aeabi_dmul>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4620      	mov	r0, r4
 8002838:	4629      	mov	r1, r5
 800283a:	f7fd fcd3 	bl	80001e4 <__adddf3>
 800283e:	4603      	mov	r3, r0
 8002840:	460c      	mov	r4, r1
 8002842:	4625      	mov	r5, r4
 8002844:	461c      	mov	r4, r3
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <planning+0x6c8>)
 8002848:	edd3 7a00 	vldr	s15, [r3]
 800284c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002854:	e036      	b.n	80028c4 <planning+0x6d4>
 8002856:	bf00      	nop
 8002858:	9fbe76c9 	.word	0x9fbe76c9
 800285c:	4016ef1a 	.word	0x4016ef1a
 8002860:	00000000 	.word	0x00000000
 8002864:	3fe00000 	.word	0x3fe00000
 8002868:	00000000 	.word	0x00000000
 800286c:	40080000 	.word	0x40080000
 8002870:	00000000 	.word	0x00000000
 8002874:	40100000 	.word	0x40100000
 8002878:	00000000 	.word	0x00000000
 800287c:	40140000 	.word	0x40140000
 8002880:	00000000 	.word	0x00000000
 8002884:	40000000 	.word	0x40000000
 8002888:	2000014c 	.word	0x2000014c
 800288c:	20000150 	.word	0x20000150
 8002890:	3fe00000 	.word	0x3fe00000
 8002894:	20000154 	.word	0x20000154
 8002898:	20000134 	.word	0x20000134
 800289c:	20000138 	.word	0x20000138
 80028a0:	2000013c 	.word	0x2000013c
 80028a4:	40240000 	.word	0x40240000
 80028a8:	20000140 	.word	0x20000140
 80028ac:	c02e0000 	.word	0xc02e0000
 80028b0:	20000144 	.word	0x20000144
 80028b4:	40180000 	.word	0x40180000
 80028b8:	20000148 	.word	0x20000148
 80028bc:	20000160 	.word	0x20000160
 80028c0:	2000015c 	.word	0x2000015c
 80028c4:	ee17 0a90 	vmov	r0, s15
 80028c8:	f7fd fdea 	bl	80004a0 <__aeabi_f2d>
 80028cc:	4680      	mov	r8, r0
 80028ce:	4689      	mov	r9, r1
 80028d0:	4b17      	ldr	r3, [pc, #92]	; (8002930 <planning+0x740>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fd fde3 	bl	80004a0 <__aeabi_f2d>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002928 <planning+0x738>
 80028e2:	ec43 2b10 	vmov	d0, r2, r3
 80028e6:	f006 fcef 	bl	80092c8 <pow>
 80028ea:	ec53 2b10 	vmov	r2, r3, d0
 80028ee:	4640      	mov	r0, r8
 80028f0:	4649      	mov	r1, r9
 80028f2:	f7fd fe2d 	bl	8000550 <__aeabi_dmul>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4620      	mov	r0, r4
 80028fc:	4629      	mov	r1, r5
 80028fe:	f7fd fc71 	bl	80001e4 <__adddf3>
 8002902:	4603      	mov	r3, r0
 8002904:	460c      	mov	r4, r1
 8002906:	4618      	mov	r0, r3
 8002908:	4621      	mov	r1, r4
 800290a:	f7fe f8d1 	bl	8000ab0 <__aeabi_d2f>
 800290e:	4602      	mov	r2, r0
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <planning+0x744>)
 8002912:	601a      	str	r2, [r3, #0]
}
 8002914:	e003      	b.n	800291e <planning+0x72e>
	  else { vb=0; }
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <planning+0x744>)
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
}
 800291e:	bf00      	nop
 8002920:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002924:	f3af 8000 	nop.w
 8002928:	00000000 	.word	0x00000000
 800292c:	40100000 	.word	0x40100000
 8002930:	20000160 	.word	0x20000160
 8002934:	20000158 	.word	0x20000158

08002938 <ReachGoal>:

void ReachGoal()
{
 8002938:	b598      	push	{r3, r4, r7, lr}
 800293a:	af00      	add	r7, sp, #0
	omega_est = 0;
 800293c:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <ReachGoal+0x40>)
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
	PWMOut=0;
 8002944:	4b0d      	ldr	r3, [pc, #52]	; (800297c <ReachGoal+0x44>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
	MotorDrive();
 800294a:	f7fe ffe5 	bl	8001918 <MotorDrive>
	Run=0;
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <ReachGoal+0x48>)
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_IT(&hi2c1, EndeffAddress, LaserOpenCommand, 1);
 8002954:	2301      	movs	r3, #1
 8002956:	4a0b      	ldr	r2, [pc, #44]	; (8002984 <ReachGoal+0x4c>)
 8002958:	2146      	movs	r1, #70	; 0x46
 800295a:	480b      	ldr	r0, [pc, #44]	; (8002988 <ReachGoal+0x50>)
 800295c:	f002 fa74 	bl	8004e48 <HAL_I2C_Master_Transmit_IT>
	Laser = 1;
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <ReachGoal+0x54>)
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
	LaserTimestamp = micros();
 8002966:	f7fe ffbd 	bl	80018e4 <micros>
 800296a:	4603      	mov	r3, r0
 800296c:	460c      	mov	r4, r1
 800296e:	4a08      	ldr	r2, [pc, #32]	; (8002990 <ReachGoal+0x58>)
 8002970:	e9c2 3400 	strd	r3, r4, [r2]
}
 8002974:	bf00      	nop
 8002976:	bd98      	pop	{r3, r4, r7, pc}
 8002978:	20000114 	.word	0x20000114
 800297c:	200000f4 	.word	0x200000f4
 8002980:	200001b6 	.word	0x200001b6
 8002984:	20000018 	.word	0x20000018
 8002988:	200002b4 	.word	0x200002b4
 800298c:	200001b8 	.word	0x200001b8
 8002990:	200000e8 	.word	0x200000e8

08002994 <pid>:


void pid()
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
	if  (flag_case == 2)
 8002998:	4bb0      	ldr	r3, [pc, #704]	; (8002c5c <pid+0x2c8>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b02      	cmp	r3, #2
 800299e:	f040 80bf 	bne.w	8002b20 <pid+0x18c>
	{
		 error = vb-omega_est;
 80029a2:	4baf      	ldr	r3, [pc, #700]	; (8002c60 <pid+0x2cc>)
 80029a4:	ed93 7a00 	vldr	s14, [r3]
 80029a8:	4bae      	ldr	r3, [pc, #696]	; (8002c64 <pid+0x2d0>)
 80029aa:	edd3 7a00 	vldr	s15, [r3]
 80029ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b2:	4bad      	ldr	r3, [pc, #692]	; (8002c68 <pid+0x2d4>)
 80029b4:	edc3 7a00 	vstr	s15, [r3]
		 p = (error);
 80029b8:	4bab      	ldr	r3, [pc, #684]	; (8002c68 <pid+0x2d4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4aab      	ldr	r2, [pc, #684]	; (8002c6c <pid+0x2d8>)
 80029be:	6013      	str	r3, [r2, #0]
		 i = i+error;
 80029c0:	4bab      	ldr	r3, [pc, #684]	; (8002c70 <pid+0x2dc>)
 80029c2:	ed93 7a00 	vldr	s14, [r3]
 80029c6:	4ba8      	ldr	r3, [pc, #672]	; (8002c68 <pid+0x2d4>)
 80029c8:	edd3 7a00 	vldr	s15, [r3]
 80029cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d0:	4ba7      	ldr	r3, [pc, #668]	; (8002c70 <pid+0x2dc>)
 80029d2:	edc3 7a00 	vstr	s15, [r3]
		 d = error - pre_error;
 80029d6:	4ba4      	ldr	r3, [pc, #656]	; (8002c68 <pid+0x2d4>)
 80029d8:	ed93 7a00 	vldr	s14, [r3]
 80029dc:	4ba5      	ldr	r3, [pc, #660]	; (8002c74 <pid+0x2e0>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e6:	4ba4      	ldr	r3, [pc, #656]	; (8002c78 <pid+0x2e4>)
 80029e8:	edc3 7a00 	vstr	s15, [r3]
		 pre_error = error;
 80029ec:	4b9e      	ldr	r3, [pc, #632]	; (8002c68 <pid+0x2d4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4aa0      	ldr	r2, [pc, #640]	; (8002c74 <pid+0x2e0>)
 80029f2:	6013      	str	r3, [r2, #0]
		 PWMOut =195+( (p*K_P)+(i*K_I)+(d*K_D));
 80029f4:	4b9d      	ldr	r3, [pc, #628]	; (8002c6c <pid+0x2d8>)
 80029f6:	ed93 7a00 	vldr	s14, [r3]
 80029fa:	4ba0      	ldr	r3, [pc, #640]	; (8002c7c <pid+0x2e8>)
 80029fc:	edd3 7a00 	vldr	s15, [r3]
 8002a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a04:	4b9a      	ldr	r3, [pc, #616]	; (8002c70 <pid+0x2dc>)
 8002a06:	edd3 6a00 	vldr	s13, [r3]
 8002a0a:	4b9d      	ldr	r3, [pc, #628]	; (8002c80 <pid+0x2ec>)
 8002a0c:	edd3 7a00 	vldr	s15, [r3]
 8002a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a18:	4b97      	ldr	r3, [pc, #604]	; (8002c78 <pid+0x2e4>)
 8002a1a:	edd3 6a00 	vldr	s13, [r3]
 8002a1e:	4b99      	ldr	r3, [pc, #612]	; (8002c84 <pid+0x2f0>)
 8002a20:	edd3 7a00 	vldr	s15, [r3]
 8002a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2c:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002c88 <pid+0x2f4>
 8002a30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a38:	ee17 2a90 	vmov	r2, s15
 8002a3c:	4b93      	ldr	r3, [pc, #588]	; (8002c8c <pid+0x2f8>)
 8002a3e:	601a      	str	r2, [r3, #0]

		 if(vb==0)
 8002a40:	4b87      	ldr	r3, [pc, #540]	; (8002c60 <pid+0x2cc>)
 8002a42:	edd3 7a00 	vldr	s15, [r3]
 8002a46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4e:	f040 81d1 	bne.w	8002df4 <pid+0x460>
		 {
			if(reverse)
 8002a52:	4b8f      	ldr	r3, [pc, #572]	; (8002c90 <pid+0x2fc>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d027      	beq.n	8002aaa <pid+0x116>
			{
				if((RobotArm_Position) < (uint16_t)(angle*20))
 8002a5a:	4b8e      	ldr	r3, [pc, #568]	; (8002c94 <pid+0x300>)
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a6c:	ee17 3a90 	vmov	r3, s15
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	4b89      	ldr	r3, [pc, #548]	; (8002c98 <pid+0x304>)
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d903      	bls.n	8002a82 <pid+0xee>
				{
					PWMOut=400;
 8002a7a:	4b84      	ldr	r3, [pc, #528]	; (8002c8c <pid+0x2f8>)
 8002a7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002a80:	601a      	str	r2, [r3, #0]
				}
				if((RobotArm_Position) > (uint16_t)(angle*20))
 8002a82:	4b84      	ldr	r3, [pc, #528]	; (8002c94 <pid+0x300>)
 8002a84:	edd3 7a00 	vldr	s15, [r3]
 8002a88:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a94:	ee17 3a90 	vmov	r3, s15
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	4b7f      	ldr	r3, [pc, #508]	; (8002c98 <pid+0x304>)
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d22a      	bcs.n	8002af8 <pid+0x164>
				{
					PWMOut=-1000;
 8002aa2:	4b7a      	ldr	r3, [pc, #488]	; (8002c8c <pid+0x2f8>)
 8002aa4:	4a7d      	ldr	r2, [pc, #500]	; (8002c9c <pid+0x308>)
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e026      	b.n	8002af8 <pid+0x164>
				}
			}
			else
			{
				if((RobotArm_Position) < (uint16_t)(angle*20))
 8002aaa:	4b7a      	ldr	r3, [pc, #488]	; (8002c94 <pid+0x300>)
 8002aac:	edd3 7a00 	vldr	s15, [r3]
 8002ab0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002abc:	ee17 3a90 	vmov	r3, s15
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	4b75      	ldr	r3, [pc, #468]	; (8002c98 <pid+0x304>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d903      	bls.n	8002ad2 <pid+0x13e>
				{
					PWMOut=1000;
 8002aca:	4b70      	ldr	r3, [pc, #448]	; (8002c8c <pid+0x2f8>)
 8002acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ad0:	601a      	str	r2, [r3, #0]
				}
				if((RobotArm_Position) > (uint16_t)(angle*20))
 8002ad2:	4b70      	ldr	r3, [pc, #448]	; (8002c94 <pid+0x300>)
 8002ad4:	edd3 7a00 	vldr	s15, [r3]
 8002ad8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae4:	ee17 3a90 	vmov	r3, s15
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	4b6b      	ldr	r3, [pc, #428]	; (8002c98 <pid+0x304>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d202      	bcs.n	8002af8 <pid+0x164>
				{
					PWMOut=-400;
 8002af2:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <pid+0x2f8>)
 8002af4:	4a6a      	ldr	r2, [pc, #424]	; (8002ca0 <pid+0x30c>)
 8002af6:	601a      	str	r2, [r3, #0]
				}
			}

			if((RobotArm_Position) == (uint16_t)(angle*20))
 8002af8:	4b66      	ldr	r3, [pc, #408]	; (8002c94 <pid+0x300>)
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b0a:	ee17 3a90 	vmov	r3, s15
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	4b61      	ldr	r3, [pc, #388]	; (8002c98 <pid+0x304>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	f040 816d 	bne.w	8002df4 <pid+0x460>
			{
				ReachGoal();
 8002b1a:	f7ff ff0d 	bl	8002938 <ReachGoal>
		if((RobotArm_Position) == (uint16_t)(angle*20))
		{
			ReachGoal();
		}
	}
}
 8002b1e:	e169      	b.n	8002df4 <pid+0x460>
	else if (flag_case == 3)
 8002b20:	4b4e      	ldr	r3, [pc, #312]	; (8002c5c <pid+0x2c8>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d166      	bne.n	8002bf6 <pid+0x262>
		if(reverse)
 8002b28:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <pid+0x2fc>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d027      	beq.n	8002b80 <pid+0x1ec>
			if((RobotArm_Position) < (uint16_t)(angle*20))
 8002b30:	4b58      	ldr	r3, [pc, #352]	; (8002c94 <pid+0x300>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b42:	ee17 3a90 	vmov	r3, s15
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <pid+0x304>)
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d903      	bls.n	8002b58 <pid+0x1c4>
				PWMOut=400;
 8002b50:	4b4e      	ldr	r3, [pc, #312]	; (8002c8c <pid+0x2f8>)
 8002b52:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b56:	601a      	str	r2, [r3, #0]
			if((RobotArm_Position) > (uint16_t)(angle*20))
 8002b58:	4b4e      	ldr	r3, [pc, #312]	; (8002c94 <pid+0x300>)
 8002b5a:	edd3 7a00 	vldr	s15, [r3]
 8002b5e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b6a:	ee17 3a90 	vmov	r3, s15
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	4b49      	ldr	r3, [pc, #292]	; (8002c98 <pid+0x304>)
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d22a      	bcs.n	8002bce <pid+0x23a>
				PWMOut=-1000;
 8002b78:	4b44      	ldr	r3, [pc, #272]	; (8002c8c <pid+0x2f8>)
 8002b7a:	4a48      	ldr	r2, [pc, #288]	; (8002c9c <pid+0x308>)
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e026      	b.n	8002bce <pid+0x23a>
			if((RobotArm_Position) < (uint16_t)(angle*20))
 8002b80:	4b44      	ldr	r3, [pc, #272]	; (8002c94 <pid+0x300>)
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b92:	ee17 3a90 	vmov	r3, s15
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	4b3f      	ldr	r3, [pc, #252]	; (8002c98 <pid+0x304>)
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d903      	bls.n	8002ba8 <pid+0x214>
				PWMOut=1000;
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <pid+0x2f8>)
 8002ba2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ba6:	601a      	str	r2, [r3, #0]
			if((RobotArm_Position) > (uint16_t)(angle*20))
 8002ba8:	4b3a      	ldr	r3, [pc, #232]	; (8002c94 <pid+0x300>)
 8002baa:	edd3 7a00 	vldr	s15, [r3]
 8002bae:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bba:	ee17 3a90 	vmov	r3, s15
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	4b35      	ldr	r3, [pc, #212]	; (8002c98 <pid+0x304>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d202      	bcs.n	8002bce <pid+0x23a>
				PWMOut=-400;
 8002bc8:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <pid+0x2f8>)
 8002bca:	4a35      	ldr	r2, [pc, #212]	; (8002ca0 <pid+0x30c>)
 8002bcc:	601a      	str	r2, [r3, #0]
		if((RobotArm_Position) == (uint16_t)(angle*20))
 8002bce:	4b31      	ldr	r3, [pc, #196]	; (8002c94 <pid+0x300>)
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be0:	ee17 3a90 	vmov	r3, s15
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <pid+0x304>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	f040 8102 	bne.w	8002df4 <pid+0x460>
			ReachGoal();
 8002bf0:	f7ff fea2 	bl	8002938 <ReachGoal>
}
 8002bf4:	e0fe      	b.n	8002df4 <pid+0x460>
	else if (flag_case == 4)
 8002bf6:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <pid+0x2c8>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	f040 808f 	bne.w	8002d1e <pid+0x38a>
		if(reverse)
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <pid+0x2fc>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d04f      	beq.n	8002ca8 <pid+0x314>
			if((RobotArm_Position) < (uint16_t)(angle*20))
 8002c08:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <pid+0x300>)
 8002c0a:	edd3 7a00 	vldr	s15, [r3]
 8002c0e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c1a:	ee17 3a90 	vmov	r3, s15
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <pid+0x304>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d904      	bls.n	8002c32 <pid+0x29e>
				PWMOut=300;
 8002c28:	4b18      	ldr	r3, [pc, #96]	; (8002c8c <pid+0x2f8>)
 8002c2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e062      	b.n	8002cf8 <pid+0x364>
			else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002c32:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <pid+0x300>)
 8002c34:	edd3 7a00 	vldr	s15, [r3]
 8002c38:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c44:	ee17 3a90 	vmov	r3, s15
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <pid+0x304>)
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d252      	bcs.n	8002cf8 <pid+0x364>
				PWMOut=-1500;
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <pid+0x2f8>)
 8002c54:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <pid+0x310>)
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e04e      	b.n	8002cf8 <pid+0x364>
 8002c5a:	bf00      	nop
 8002c5c:	20000184 	.word	0x20000184
 8002c60:	20000158 	.word	0x20000158
 8002c64:	20000114 	.word	0x20000114
 8002c68:	20000178 	.word	0x20000178
 8002c6c:	20000168 	.word	0x20000168
 8002c70:	2000016c 	.word	0x2000016c
 8002c74:	20000174 	.word	0x20000174
 8002c78:	20000170 	.word	0x20000170
 8002c7c:	20000004 	.word	0x20000004
 8002c80:	20000008 	.word	0x20000008
 8002c84:	200000fc 	.word	0x200000fc
 8002c88:	43430000 	.word	0x43430000
 8002c8c:	200000f4 	.word	0x200000f4
 8002c90:	20000185 	.word	0x20000185
 8002c94:	2000017c 	.word	0x2000017c
 8002c98:	200000f8 	.word	0x200000f8
 8002c9c:	fffffc18 	.word	0xfffffc18
 8002ca0:	fffffe70 	.word	0xfffffe70
 8002ca4:	fffffa24 	.word	0xfffffa24
			if((RobotArm_Position) < (uint16_t)(angle*20))
 8002ca8:	4b53      	ldr	r3, [pc, #332]	; (8002df8 <pid+0x464>)
 8002caa:	edd3 7a00 	vldr	s15, [r3]
 8002cae:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cba:	ee17 3a90 	vmov	r3, s15
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	4b4e      	ldr	r3, [pc, #312]	; (8002dfc <pid+0x468>)
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d904      	bls.n	8002cd2 <pid+0x33e>
				PWMOut=1500;
 8002cc8:	4b4d      	ldr	r3, [pc, #308]	; (8002e00 <pid+0x46c>)
 8002cca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	e012      	b.n	8002cf8 <pid+0x364>
			else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002cd2:	4b49      	ldr	r3, [pc, #292]	; (8002df8 <pid+0x464>)
 8002cd4:	edd3 7a00 	vldr	s15, [r3]
 8002cd8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ce4:	ee17 3a90 	vmov	r3, s15
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	4b44      	ldr	r3, [pc, #272]	; (8002dfc <pid+0x468>)
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d202      	bcs.n	8002cf8 <pid+0x364>
				PWMOut=-300;
 8002cf2:	4b43      	ldr	r3, [pc, #268]	; (8002e00 <pid+0x46c>)
 8002cf4:	4a43      	ldr	r2, [pc, #268]	; (8002e04 <pid+0x470>)
 8002cf6:	601a      	str	r2, [r3, #0]
		if((RobotArm_Position) == (uint16_t)(angle*20))
 8002cf8:	4b3f      	ldr	r3, [pc, #252]	; (8002df8 <pid+0x464>)
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d0a:	ee17 3a90 	vmov	r3, s15
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	4b3a      	ldr	r3, [pc, #232]	; (8002dfc <pid+0x468>)
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d16d      	bne.n	8002df4 <pid+0x460>
			ReachGoal();
 8002d18:	f7ff fe0e 	bl	8002938 <ReachGoal>
}
 8002d1c:	e06a      	b.n	8002df4 <pid+0x460>
	else if (flag_case == 5)
 8002d1e:	4b3a      	ldr	r3, [pc, #232]	; (8002e08 <pid+0x474>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b05      	cmp	r3, #5
 8002d24:	d166      	bne.n	8002df4 <pid+0x460>
		if(reverse)
 8002d26:	4b39      	ldr	r3, [pc, #228]	; (8002e0c <pid+0x478>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d028      	beq.n	8002d80 <pid+0x3ec>
			if((RobotArm_Position) < (uint16_t)(angle*20))
 8002d2e:	4b32      	ldr	r3, [pc, #200]	; (8002df8 <pid+0x464>)
 8002d30:	edd3 7a00 	vldr	s15, [r3]
 8002d34:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d40:	ee17 3a90 	vmov	r3, s15
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <pid+0x468>)
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d904      	bls.n	8002d58 <pid+0x3c4>
				PWMOut=300;
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <pid+0x46c>)
 8002d50:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e03b      	b.n	8002dd0 <pid+0x43c>
			else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002d58:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <pid+0x464>)
 8002d5a:	edd3 7a00 	vldr	s15, [r3]
 8002d5e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d6a:	ee17 3a90 	vmov	r3, s15
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <pid+0x468>)
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d22b      	bcs.n	8002dd0 <pid+0x43c>
				PWMOut=-1600;
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <pid+0x46c>)
 8002d7a:	4a25      	ldr	r2, [pc, #148]	; (8002e10 <pid+0x47c>)
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e027      	b.n	8002dd0 <pid+0x43c>
			if((RobotArm_Position) < (uint16_t)(angle*20))
 8002d80:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <pid+0x464>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d92:	ee17 3a90 	vmov	r3, s15
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <pid+0x468>)
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d904      	bls.n	8002daa <pid+0x416>
				PWMOut=1600;
 8002da0:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <pid+0x46c>)
 8002da2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	e012      	b.n	8002dd0 <pid+0x43c>
			else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <pid+0x464>)
 8002dac:	edd3 7a00 	vldr	s15, [r3]
 8002db0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dbc:	ee17 3a90 	vmov	r3, s15
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <pid+0x468>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d202      	bcs.n	8002dd0 <pid+0x43c>
				PWMOut=-300;
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <pid+0x46c>)
 8002dcc:	4a0d      	ldr	r2, [pc, #52]	; (8002e04 <pid+0x470>)
 8002dce:	601a      	str	r2, [r3, #0]
		if((RobotArm_Position) == (uint16_t)(angle*20))
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <pid+0x464>)
 8002dd2:	edd3 7a00 	vldr	s15, [r3]
 8002dd6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002dda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002de2:	ee17 3a90 	vmov	r3, s15
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <pid+0x468>)
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d101      	bne.n	8002df4 <pid+0x460>
			ReachGoal();
 8002df0:	f7ff fda2 	bl	8002938 <ReachGoal>
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	2000017c 	.word	0x2000017c
 8002dfc:	200000f8 	.word	0x200000f8
 8002e00:	200000f4 	.word	0x200000f4
 8002e04:	fffffed4 	.word	0xfffffed4
 8002e08:	20000184 	.word	0x20000184
 8002e0c:	20000185 	.word	0x20000185
 8002e10:	fffff9c0 	.word	0xfffff9c0

08002e14 <UARTInit>:

void UARTInit(UARTStucrture *uart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <UARTInit+0x4c>)
 8002e1e:	88db      	ldrh	r3, [r3, #6]
 8002e20:	4619      	mov	r1, r3
 8002e22:	2001      	movs	r0, #1
 8002e24:	f006 f946 	bl	80090b4 <calloc>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <UARTInit+0x4c>)
 8002e32:	889b      	ldrh	r3, [r3, #4]
 8002e34:	4619      	mov	r1, r3
 8002e36:	2001      	movs	r0, #1
 8002e38:	f006 f93c 	bl	80090b4 <calloc>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461a      	mov	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	81da      	strh	r2, [r3, #14]

}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	2000018c 	.word	0x2000018c

08002e64 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6919      	ldr	r1, [r3, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	88db      	ldrh	r3, [r3, #6]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f005 f9f3 	bl	8008264 <HAL_UART_Receive_DMA>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	88db      	ldrh	r3, [r3, #6]
 8002e92:	461a      	mov	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	1ad3      	subs	r3, r2, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8002eb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eb8:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	8a9b      	ldrh	r3, [r3, #20]
 8002ebe:	461c      	mov	r4, r3
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ffe0 	bl	8002e86 <UARTGetRxHead>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	429c      	cmp	r4, r3
 8002eca:	d013      	beq.n	8002ef4 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	8a92      	ldrh	r2, [r2, #20]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	8a9b      	ldrh	r3, [r3, #20]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	88d2      	ldrh	r2, [r2, #6]
 8002ee4:	fb93 f1f2 	sdiv	r1, r3, r2
 8002ee8:	fb02 f201 	mul.w	r2, r2, r1
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8002ef4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd90      	pop	{r4, r7, pc}

08002f00 <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d13d      	bne.n	8002f92 <UARTTxDumpBuffer+0x92>
 8002f16:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <UARTTxDumpBuffer+0x9c>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d139      	bne.n	8002f92 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8002f1e:	4b1f      	ldr	r3, [pc, #124]	; (8002f9c <UARTTxDumpBuffer+0x9c>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	89da      	ldrh	r2, [r3, #14]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	899b      	ldrh	r3, [r3, #12]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d02d      	beq.n	8002f8c <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	89da      	ldrh	r2, [r3, #14]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d906      	bls.n	8002f4a <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	89da      	ldrh	r2, [r3, #14]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	e005      	b.n	8002f56 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	889a      	ldrh	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	8992      	ldrh	r2, [r2, #12]
 8002f64:	4413      	add	r3, r2
 8002f66:	89fa      	ldrh	r2, [r7, #14]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f005 f90f 	bl	800818c <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	899b      	ldrh	r3, [r3, #12]
 8002f72:	461a      	mov	r2, r3
 8002f74:	89fb      	ldrh	r3, [r7, #14]
 8002f76:	4413      	add	r3, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	8892      	ldrh	r2, [r2, #4]
 8002f7c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f80:	fb02 f201 	mul.w	r2, r2, r1
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <UARTTxDumpBuffer+0x9c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
	}
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200001fc 	.word	0x200001fc

08002fa0 <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	4613      	mov	r3, r2
 8002fac:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	889b      	ldrh	r3, [r3, #4]
 8002fb2:	88fa      	ldrh	r2, [r7, #6]
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	bf28      	it	cs
 8002fb8:	4613      	movcs	r3, r2
 8002fba:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002fbc:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	889b      	ldrh	r3, [r3, #4]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	89db      	ldrh	r3, [r3, #14]
 8002fc8:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	bfa8      	it	ge
 8002fce:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8002fd0:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	89d2      	ldrh	r2, [r2, #14]
 8002fda:	4413      	add	r3, r2
 8002fdc:	8aba      	ldrh	r2, [r7, #20]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f006 f899 	bl	8009118 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	89db      	ldrh	r3, [r3, #14]
 8002fea:	461a      	mov	r2, r3
 8002fec:	8afb      	ldrh	r3, [r7, #22]
 8002fee:	4413      	add	r3, r2
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	8892      	ldrh	r2, [r2, #4]
 8002ff4:	fb93 f1f2 	sdiv	r1, r3, r2
 8002ff8:	fb02 f201 	mul.w	r2, r2, r1
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8003004:	8afa      	ldrh	r2, [r7, #22]
 8003006:	8abb      	ldrh	r3, [r7, #20]
 8003008:	429a      	cmp	r2, r3
 800300a:	d00a      	beq.n	8003022 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6898      	ldr	r0, [r3, #8]
 8003010:	8abb      	ldrh	r3, [r7, #20]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8003016:	8afa      	ldrh	r2, [r7, #22]
 8003018:	8abb      	ldrh	r3, [r7, #20]
 800301a:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 800301c:	461a      	mov	r2, r3
 800301e:	f006 f87b 	bl	8009118 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7ff ff6c 	bl	8002f00 <UARTTxDumpBuffer>
}
 8003028:	bf00      	nop
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <UART_Ack1>:

void UART_Ack1()
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
	uint8_t temp[1];
	temp[0] = 'X'; //0x58
 8003036:	2358      	movs	r3, #88	; 0x58
 8003038:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 800303a:	1d3b      	adds	r3, r7, #4
 800303c:	2201      	movs	r2, #1
 800303e:	4619      	mov	r1, r3
 8003040:	4808      	ldr	r0, [pc, #32]	; (8003064 <UART_Ack1+0x34>)
 8003042:	f7ff ffad 	bl	8002fa0 <UARTTxWrite>
	HAL_Delay(1);
 8003046:	2001      	movs	r0, #1
 8003048:	f000 ff26 	bl	8003e98 <HAL_Delay>
	temp[0] = 'u'; //0b01110101
 800304c:	2375      	movs	r3, #117	; 0x75
 800304e:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 8003050:	1d3b      	adds	r3, r7, #4
 8003052:	2201      	movs	r2, #1
 8003054:	4619      	mov	r1, r3
 8003056:	4803      	ldr	r0, [pc, #12]	; (8003064 <UART_Ack1+0x34>)
 8003058:	f7ff ffa2 	bl	8002fa0 <UARTTxWrite>
	// HAL_Delay(1);
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	2000018c 	.word	0x2000018c

08003068 <UART_Ack2>:

void UART_Ack2()
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
	uint8_t temp[1];
	temp[0] = 'F'; //70
 800306e:	2346      	movs	r3, #70	; 0x46
 8003070:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	2201      	movs	r2, #1
 8003076:	4619      	mov	r1, r3
 8003078:	4808      	ldr	r0, [pc, #32]	; (800309c <UART_Ack2+0x34>)
 800307a:	f7ff ff91 	bl	8002fa0 <UARTTxWrite>
	HAL_Delay(1);
 800307e:	2001      	movs	r0, #1
 8003080:	f000 ff0a 	bl	8003e98 <HAL_Delay>
	temp[0] = 'n'; //0o156
 8003084:	236e      	movs	r3, #110	; 0x6e
 8003086:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 8003088:	1d3b      	adds	r3, r7, #4
 800308a:	2201      	movs	r2, #1
 800308c:	4619      	mov	r1, r3
 800308e:	4803      	ldr	r0, [pc, #12]	; (800309c <UART_Ack2+0x34>)
 8003090:	f7ff ff86 	bl	8002fa0 <UARTTxWrite>
	// HAL_Delay(1);
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	2000018c 	.word	0x2000018c

080030a0 <UART_Flow2>:

void UART_Flow2()
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
	Serial_Mode  = (0b10010000 | UART_Mode);
 80030a6:	4b4e      	ldr	r3, [pc, #312]	; (80031e0 <UART_Flow2+0x140>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	4b4c      	ldr	r3, [pc, #304]	; (80031e4 <UART_Flow2+0x144>)
 80030b2:	701a      	strb	r2, [r3, #0]
	Serial_Angle = (uint16_t)(Current_Angle * 10000 * pi / 180);
 80030b4:	4b4c      	ldr	r3, [pc, #304]	; (80031e8 <UART_Flow2+0x148>)
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80031ec <UART_Flow2+0x14c>
 80030be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030c2:	4b4b      	ldr	r3, [pc, #300]	; (80031f0 <UART_Flow2+0x150>)
 80030c4:	edd3 7a00 	vldr	s15, [r3]
 80030c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030cc:	eddf 6a49 	vldr	s13, [pc, #292]	; 80031f4 <UART_Flow2+0x154>
 80030d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030d8:	ee17 3a90 	vmov	r3, s15
 80030dc:	b29a      	uxth	r2, r3
 80030de:	4b46      	ldr	r3, [pc, #280]	; (80031f8 <UART_Flow2+0x158>)
 80030e0:	801a      	strh	r2, [r3, #0]
	Serial_Speed = (uint8_t) (Speed * 255 / 10);
 80030e2:	4b46      	ldr	r3, [pc, #280]	; (80031fc <UART_Flow2+0x15c>)
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003200 <UART_Flow2+0x160>
 80030ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030f0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80030f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8003100:	793b      	ldrb	r3, [r7, #4]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	4b3f      	ldr	r3, [pc, #252]	; (8003204 <UART_Flow2+0x164>)
 8003106:	701a      	strb	r2, [r3, #0]

	ChkSum = Serial_Mode;
 8003108:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <UART_Flow2+0x144>)
 800310a:	781a      	ldrb	r2, [r3, #0]
 800310c:	4b3e      	ldr	r3, [pc, #248]	; (8003208 <UART_Flow2+0x168>)
 800310e:	701a      	strb	r2, [r3, #0]

	uint8_t temp[1];
	temp[0] = Serial_Mode;
 8003110:	4b34      	ldr	r3, [pc, #208]	; (80031e4 <UART_Flow2+0x144>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	733b      	strb	r3, [r7, #12]
	UARTTxWrite(&UART2, temp, 1);
 8003116:	f107 030c 	add.w	r3, r7, #12
 800311a:	2201      	movs	r2, #1
 800311c:	4619      	mov	r1, r3
 800311e:	483b      	ldr	r0, [pc, #236]	; (800320c <UART_Flow2+0x16c>)
 8003120:	f7ff ff3e 	bl	8002fa0 <UARTTxWrite>
	HAL_Delay(1);
 8003124:	2001      	movs	r0, #1
 8003126:	f000 feb7 	bl	8003e98 <HAL_Delay>

	if(UART_Mode == 10) { temp[0] = (uint8_t)(Serial_Angle / 256); }
 800312a:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <UART_Flow2+0x140>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b0a      	cmp	r3, #10
 8003130:	d106      	bne.n	8003140 <UART_Flow2+0xa0>
 8003132:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <UART_Flow2+0x158>)
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	b29b      	uxth	r3, r3
 800313a:	b2db      	uxtb	r3, r3
 800313c:	733b      	strb	r3, [r7, #12]
 800313e:	e001      	b.n	8003144 <UART_Flow2+0xa4>
	else                { temp[0] = 0; }
 8003140:	2300      	movs	r3, #0
 8003142:	733b      	strb	r3, [r7, #12]
	ChkSum += temp[0];
 8003144:	7b3a      	ldrb	r2, [r7, #12]
 8003146:	4b30      	ldr	r3, [pc, #192]	; (8003208 <UART_Flow2+0x168>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	4413      	add	r3, r2
 800314c:	b2da      	uxtb	r2, r3
 800314e:	4b2e      	ldr	r3, [pc, #184]	; (8003208 <UART_Flow2+0x168>)
 8003150:	701a      	strb	r2, [r3, #0]
	UARTTxWrite(&UART2, temp, 1);
 8003152:	f107 030c 	add.w	r3, r7, #12
 8003156:	2201      	movs	r2, #1
 8003158:	4619      	mov	r1, r3
 800315a:	482c      	ldr	r0, [pc, #176]	; (800320c <UART_Flow2+0x16c>)
 800315c:	f7ff ff20 	bl	8002fa0 <UARTTxWrite>
	HAL_Delay(1);
 8003160:	2001      	movs	r0, #1
 8003162:	f000 fe99 	bl	8003e98 <HAL_Delay>

	if(UART_Mode == 9)       { temp[0] = Current_Station; }
 8003166:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <UART_Flow2+0x140>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b09      	cmp	r3, #9
 800316c:	d103      	bne.n	8003176 <UART_Flow2+0xd6>
 800316e:	4b28      	ldr	r3, [pc, #160]	; (8003210 <UART_Flow2+0x170>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	733b      	strb	r3, [r7, #12]
 8003174:	e00f      	b.n	8003196 <UART_Flow2+0xf6>
	else if(UART_Mode == 10) { temp[0] = (uint8_t)(Serial_Angle % 256); }
 8003176:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <UART_Flow2+0x140>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b0a      	cmp	r3, #10
 800317c:	d104      	bne.n	8003188 <UART_Flow2+0xe8>
 800317e:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <UART_Flow2+0x158>)
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	733b      	strb	r3, [r7, #12]
 8003186:	e006      	b.n	8003196 <UART_Flow2+0xf6>
	else if(UART_Mode == 11) { temp[0] = Serial_Speed; }
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <UART_Flow2+0x140>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b0b      	cmp	r3, #11
 800318e:	d102      	bne.n	8003196 <UART_Flow2+0xf6>
 8003190:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <UART_Flow2+0x164>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	733b      	strb	r3, [r7, #12]
	ChkSum += temp[0];
 8003196:	7b3a      	ldrb	r2, [r7, #12]
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <UART_Flow2+0x168>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	4413      	add	r3, r2
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <UART_Flow2+0x168>)
 80031a2:	701a      	strb	r2, [r3, #0]
	UARTTxWrite(&UART2, temp, 1);
 80031a4:	f107 030c 	add.w	r3, r7, #12
 80031a8:	2201      	movs	r2, #1
 80031aa:	4619      	mov	r1, r3
 80031ac:	4817      	ldr	r0, [pc, #92]	; (800320c <UART_Flow2+0x16c>)
 80031ae:	f7ff fef7 	bl	8002fa0 <UARTTxWrite>
	HAL_Delay(1);
 80031b2:	2001      	movs	r0, #1
 80031b4:	f000 fe70 	bl	8003e98 <HAL_Delay>

	ChkSum = ~(ChkSum);
 80031b8:	4b13      	ldr	r3, [pc, #76]	; (8003208 <UART_Flow2+0x168>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	43db      	mvns	r3, r3
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	4b11      	ldr	r3, [pc, #68]	; (8003208 <UART_Flow2+0x168>)
 80031c2:	701a      	strb	r2, [r3, #0]
	temp[0] = ChkSum;
 80031c4:	4b10      	ldr	r3, [pc, #64]	; (8003208 <UART_Flow2+0x168>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	733b      	strb	r3, [r7, #12]
	UARTTxWrite(&UART2, temp, 1);
 80031ca:	f107 030c 	add.w	r3, r7, #12
 80031ce:	2201      	movs	r2, #1
 80031d0:	4619      	mov	r1, r3
 80031d2:	480e      	ldr	r0, [pc, #56]	; (800320c <UART_Flow2+0x16c>)
 80031d4:	f7ff fee4 	bl	8002fa0 <UARTTxWrite>
	// HAL_Delay(1);
}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	200001ea 	.word	0x200001ea
 80031e4:	2000020c 	.word	0x2000020c
 80031e8:	200001a8 	.word	0x200001a8
 80031ec:	461c4000 	.word	0x461c4000
 80031f0:	2000001c 	.word	0x2000001c
 80031f4:	43340000 	.word	0x43340000
 80031f8:	20000308 	.word	0x20000308
 80031fc:	200001b0 	.word	0x200001b0
 8003200:	437f0000 	.word	0x437f0000
 8003204:	200002b0 	.word	0x200002b0
 8003208:	200001c9 	.word	0x200001c9
 800320c:	2000018c 	.word	0x2000018c
 8003210:	200001ac 	.word	0x200001ac

08003214 <UART_Protocal>:


void UART_Protocal()
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
	static ProtocalState State = Start;

	InputChar = UARTReadChar(&UART2);
 800321a:	48a3      	ldr	r0, [pc, #652]	; (80034a8 <UART_Protocal+0x294>)
 800321c:	f7ff fe46 	bl	8002eac <UARTReadChar>
 8003220:	4603      	mov	r3, r0
 8003222:	461a      	mov	r2, r3
 8003224:	4ba1      	ldr	r3, [pc, #644]	; (80034ac <UART_Protocal+0x298>)
 8003226:	801a      	strh	r2, [r3, #0]

	if (InputChar != -1)
 8003228:	4ba0      	ldr	r3, [pc, #640]	; (80034ac <UART_Protocal+0x298>)
 800322a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800322e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003232:	f000 8130 	beq.w	8003496 <UART_Protocal+0x282>
	{
		InputByte = (uint8_t)InputChar;
 8003236:	4b9d      	ldr	r3, [pc, #628]	; (80034ac <UART_Protocal+0x298>)
 8003238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4b9c      	ldr	r3, [pc, #624]	; (80034b0 <UART_Protocal+0x29c>)
 8003240:	701a      	strb	r2, [r3, #0]

		switch(State)
 8003242:	4b9c      	ldr	r3, [pc, #624]	; (80034b4 <UART_Protocal+0x2a0>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b07      	cmp	r3, #7
 8003248:	f200 8121 	bhi.w	800348e <UART_Protocal+0x27a>
 800324c:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <UART_Protocal+0x40>)
 800324e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003252:	bf00      	nop
 8003254:	08003275 	.word	0x08003275
 8003258:	0800330b 	.word	0x0800330b
 800325c:	0800333f 	.word	0x0800333f
 8003260:	0800334f 	.word	0x0800334f
 8003264:	0800335f 	.word	0x0800335f
 8003268:	080033a3 	.word	0x080033a3
 800326c:	080033b3 	.word	0x080033b3
 8003270:	0800340f 	.word	0x0800340f
		{
			case Start:
				if( ((InputByte>>4) & 0b00001111) == 0b00001001)
 8003274:	4b8e      	ldr	r3, [pc, #568]	; (80034b0 <UART_Protocal+0x29c>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	2b09      	cmp	r3, #9
 8003282:	d10a      	bne.n	800329a <UART_Protocal+0x86>
				{
					UART_Mode = InputByte & 0b00001111;
 8003284:	4b8a      	ldr	r3, [pc, #552]	; (80034b0 <UART_Protocal+0x29c>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4b8a      	ldr	r3, [pc, #552]	; (80034b8 <UART_Protocal+0x2a4>)
 8003290:	701a      	strb	r2, [r3, #0]
					UART_Mode_Print = UART_Mode;
 8003292:	4b89      	ldr	r3, [pc, #548]	; (80034b8 <UART_Protocal+0x2a4>)
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	4b89      	ldr	r3, [pc, #548]	; (80034bc <UART_Protocal+0x2a8>)
 8003298:	701a      	strb	r2, [r3, #0]
				}
				if(UART_Mode >=1 && UART_Mode <= 14)
 800329a:	4b87      	ldr	r3, [pc, #540]	; (80034b8 <UART_Protocal+0x2a4>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 80fb 	beq.w	800349a <UART_Protocal+0x286>
 80032a4:	4b84      	ldr	r3, [pc, #528]	; (80034b8 <UART_Protocal+0x2a4>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b0e      	cmp	r3, #14
 80032aa:	f200 80f6 	bhi.w	800349a <UART_Protocal+0x286>
				{

					if(UART_Mode == 2 || UART_Mode == 3 || UART_Mode >= 8)
 80032ae:	4b82      	ldr	r3, [pc, #520]	; (80034b8 <UART_Protocal+0x2a4>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d007      	beq.n	80032c6 <UART_Protocal+0xb2>
 80032b6:	4b80      	ldr	r3, [pc, #512]	; (80034b8 <UART_Protocal+0x2a4>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d003      	beq.n	80032c6 <UART_Protocal+0xb2>
 80032be:	4b7e      	ldr	r3, [pc, #504]	; (80034b8 <UART_Protocal+0x2a4>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b07      	cmp	r3, #7
 80032c4:	d903      	bls.n	80032ce <UART_Protocal+0xba>
					{
						State = Frame1_CheckSum;
 80032c6:	4b7b      	ldr	r3, [pc, #492]	; (80034b4 <UART_Protocal+0x2a0>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e01c      	b.n	8003308 <UART_Protocal+0xf4>
					}
					else if(UART_Mode == 1 || UART_Mode == 4 || UART_Mode == 5 || UART_Mode == 6)
 80032ce:	4b7a      	ldr	r3, [pc, #488]	; (80034b8 <UART_Protocal+0x2a4>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d00b      	beq.n	80032ee <UART_Protocal+0xda>
 80032d6:	4b78      	ldr	r3, [pc, #480]	; (80034b8 <UART_Protocal+0x2a4>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d007      	beq.n	80032ee <UART_Protocal+0xda>
 80032de:	4b76      	ldr	r3, [pc, #472]	; (80034b8 <UART_Protocal+0x2a4>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d003      	beq.n	80032ee <UART_Protocal+0xda>
 80032e6:	4b74      	ldr	r3, [pc, #464]	; (80034b8 <UART_Protocal+0x2a4>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d103      	bne.n	80032f6 <UART_Protocal+0xe2>
					{
						State = Frame2_Data1;
 80032ee:	4b71      	ldr	r3, [pc, #452]	; (80034b4 <UART_Protocal+0x2a0>)
 80032f0:	2202      	movs	r2, #2
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e008      	b.n	8003308 <UART_Protocal+0xf4>

					}
					else if(UART_Mode == 7)
 80032f6:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <UART_Protocal+0x2a4>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b07      	cmp	r3, #7
 80032fc:	f040 80cd 	bne.w	800349a <UART_Protocal+0x286>
					{
						State = Frame3_Station;
 8003300:	4b6c      	ldr	r3, [pc, #432]	; (80034b4 <UART_Protocal+0x2a0>)
 8003302:	2205      	movs	r2, #5
 8003304:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8003306:	e0c8      	b.n	800349a <UART_Protocal+0x286>
 8003308:	e0c7      	b.n	800349a <UART_Protocal+0x286>

			case Frame1_CheckSum:
				ChkSum = ~(0b10010000 | UART_Mode);
 800330a:	4b6b      	ldr	r3, [pc, #428]	; (80034b8 <UART_Protocal+0x2a4>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8003312:	b2db      	uxtb	r3, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	b2da      	uxtb	r2, r3
 8003318:	4b69      	ldr	r3, [pc, #420]	; (80034c0 <UART_Protocal+0x2ac>)
 800331a:	701a      	strb	r2, [r3, #0]
				if(InputByte == ChkSum)
 800331c:	4b64      	ldr	r3, [pc, #400]	; (80034b0 <UART_Protocal+0x29c>)
 800331e:	781a      	ldrb	r2, [r3, #0]
 8003320:	4b67      	ldr	r3, [pc, #412]	; (80034c0 <UART_Protocal+0x2ac>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d103      	bne.n	8003330 <UART_Protocal+0x11c>
				{
					UART_Ack1();
 8003328:	f7ff fe82 	bl	8003030 <UART_Ack1>
					UART_Execute();
 800332c:	f000 f8d4 	bl	80034d8 <UART_Execute>
				}
				ChkSum = 0;
 8003330:	4b63      	ldr	r3, [pc, #396]	; (80034c0 <UART_Protocal+0x2ac>)
 8003332:	2200      	movs	r2, #0
 8003334:	701a      	strb	r2, [r3, #0]
				State = Start;
 8003336:	4b5f      	ldr	r3, [pc, #380]	; (80034b4 <UART_Protocal+0x2a0>)
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
				break;
 800333c:	e0b0      	b.n	80034a0 <UART_Protocal+0x28c>

			case Frame2_Data1:
				Data_Frame2[0] = InputByte;
 800333e:	4b5c      	ldr	r3, [pc, #368]	; (80034b0 <UART_Protocal+0x29c>)
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	4b60      	ldr	r3, [pc, #384]	; (80034c4 <UART_Protocal+0x2b0>)
 8003344:	701a      	strb	r2, [r3, #0]
				State = Frame2_Data2;
 8003346:	4b5b      	ldr	r3, [pc, #364]	; (80034b4 <UART_Protocal+0x2a0>)
 8003348:	2203      	movs	r2, #3
 800334a:	701a      	strb	r2, [r3, #0]
				break;
 800334c:	e0a8      	b.n	80034a0 <UART_Protocal+0x28c>

			case Frame2_Data2:
				Data_Frame2[1] = InputByte;
 800334e:	4b58      	ldr	r3, [pc, #352]	; (80034b0 <UART_Protocal+0x29c>)
 8003350:	781a      	ldrb	r2, [r3, #0]
 8003352:	4b5c      	ldr	r3, [pc, #368]	; (80034c4 <UART_Protocal+0x2b0>)
 8003354:	705a      	strb	r2, [r3, #1]
				State = Frame2_CheckSum;
 8003356:	4b57      	ldr	r3, [pc, #348]	; (80034b4 <UART_Protocal+0x2a0>)
 8003358:	2204      	movs	r2, #4
 800335a:	701a      	strb	r2, [r3, #0]
				break;
 800335c:	e0a0      	b.n	80034a0 <UART_Protocal+0x28c>

			case Frame2_CheckSum:
				ChkSum = ~( (0b10010000 | UART_Mode) + Data_Frame2[0] + Data_Frame2[1] );
 800335e:	4b56      	ldr	r3, [pc, #344]	; (80034b8 <UART_Protocal+0x2a4>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8003366:	b2da      	uxtb	r2, r3
 8003368:	4b56      	ldr	r3, [pc, #344]	; (80034c4 <UART_Protocal+0x2b0>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	4413      	add	r3, r2
 800336e:	b2da      	uxtb	r2, r3
 8003370:	4b54      	ldr	r3, [pc, #336]	; (80034c4 <UART_Protocal+0x2b0>)
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	4413      	add	r3, r2
 8003376:	b2db      	uxtb	r3, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	b2da      	uxtb	r2, r3
 800337c:	4b50      	ldr	r3, [pc, #320]	; (80034c0 <UART_Protocal+0x2ac>)
 800337e:	701a      	strb	r2, [r3, #0]
				if(InputByte == ChkSum)
 8003380:	4b4b      	ldr	r3, [pc, #300]	; (80034b0 <UART_Protocal+0x29c>)
 8003382:	781a      	ldrb	r2, [r3, #0]
 8003384:	4b4e      	ldr	r3, [pc, #312]	; (80034c0 <UART_Protocal+0x2ac>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d103      	bne.n	8003394 <UART_Protocal+0x180>
				{
					UART_Ack1();
 800338c:	f7ff fe50 	bl	8003030 <UART_Ack1>
					UART_Execute();
 8003390:	f000 f8a2 	bl	80034d8 <UART_Execute>
				}
				ChkSum = 0;
 8003394:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <UART_Protocal+0x2ac>)
 8003396:	2200      	movs	r2, #0
 8003398:	701a      	strb	r2, [r3, #0]
				State = Start;
 800339a:	4b46      	ldr	r3, [pc, #280]	; (80034b4 <UART_Protocal+0x2a0>)
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
				break;
 80033a0:	e07e      	b.n	80034a0 <UART_Protocal+0x28c>

			case Frame3_Station:
				Multi_Station_Amount = InputByte;
 80033a2:	4b43      	ldr	r3, [pc, #268]	; (80034b0 <UART_Protocal+0x29c>)
 80033a4:	781a      	ldrb	r2, [r3, #0]
 80033a6:	4b48      	ldr	r3, [pc, #288]	; (80034c8 <UART_Protocal+0x2b4>)
 80033a8:	701a      	strb	r2, [r3, #0]
				State = Frame3_Data;
 80033aa:	4b42      	ldr	r3, [pc, #264]	; (80034b4 <UART_Protocal+0x2a0>)
 80033ac:	2206      	movs	r2, #6
 80033ae:	701a      	strb	r2, [r3, #0]
				break;
 80033b0:	e076      	b.n	80034a0 <UART_Protocal+0x28c>

			case Frame3_Data:
				Data_Frame3   [(int)Multi_Station_Current/2] = InputByte;
 80033b2:	4b46      	ldr	r3, [pc, #280]	; (80034cc <UART_Protocal+0x2b8>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	085b      	lsrs	r3, r3, #1
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	4b3c      	ldr	r3, [pc, #240]	; (80034b0 <UART_Protocal+0x29c>)
 80033be:	7819      	ldrb	r1, [r3, #0]
 80033c0:	4b43      	ldr	r3, [pc, #268]	; (80034d0 <UART_Protocal+0x2bc>)
 80033c2:	5499      	strb	r1, [r3, r2]
				Multi_Station [Multi_Station_Current]        = InputByte & 0b00001111;
 80033c4:	4b3a      	ldr	r3, [pc, #232]	; (80034b0 <UART_Protocal+0x29c>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	4a40      	ldr	r2, [pc, #256]	; (80034cc <UART_Protocal+0x2b8>)
 80033ca:	7812      	ldrb	r2, [r2, #0]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	b2d9      	uxtb	r1, r3
 80033d2:	4b40      	ldr	r3, [pc, #256]	; (80034d4 <UART_Protocal+0x2c0>)
 80033d4:	5499      	strb	r1, [r3, r2]
				Multi_Station [Multi_Station_Current+1] 	 = InputByte >> 4;
 80033d6:	4b36      	ldr	r3, [pc, #216]	; (80034b0 <UART_Protocal+0x29c>)
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	4b3c      	ldr	r3, [pc, #240]	; (80034cc <UART_Protocal+0x2b8>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	3301      	adds	r3, #1
 80033e0:	0912      	lsrs	r2, r2, #4
 80033e2:	b2d1      	uxtb	r1, r2
 80033e4:	4a3b      	ldr	r2, [pc, #236]	; (80034d4 <UART_Protocal+0x2c0>)
 80033e6:	54d1      	strb	r1, [r2, r3]
				Multi_Station_Current += 2;
 80033e8:	4b38      	ldr	r3, [pc, #224]	; (80034cc <UART_Protocal+0x2b8>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	3302      	adds	r3, #2
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	4b36      	ldr	r3, [pc, #216]	; (80034cc <UART_Protocal+0x2b8>)
 80033f2:	701a      	strb	r2, [r3, #0]
				if(Multi_Station_Current >= Multi_Station_Amount)
 80033f4:	4b35      	ldr	r3, [pc, #212]	; (80034cc <UART_Protocal+0x2b8>)
 80033f6:	781a      	ldrb	r2, [r3, #0]
 80033f8:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <UART_Protocal+0x2b4>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d34e      	bcc.n	800349e <UART_Protocal+0x28a>
				{
					Multi_Station_Current = 0;
 8003400:	4b32      	ldr	r3, [pc, #200]	; (80034cc <UART_Protocal+0x2b8>)
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
					State = Frame3_CheckSum;
 8003406:	4b2b      	ldr	r3, [pc, #172]	; (80034b4 <UART_Protocal+0x2a0>)
 8003408:	2207      	movs	r2, #7
 800340a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800340c:	e047      	b.n	800349e <UART_Protocal+0x28a>

			case Frame3_CheckSum:
				ChkSum = (0b10010000 | UART_Mode);
 800340e:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <UART_Protocal+0x2a4>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8003416:	b2da      	uxtb	r2, r3
 8003418:	4b29      	ldr	r3, [pc, #164]	; (80034c0 <UART_Protocal+0x2ac>)
 800341a:	701a      	strb	r2, [r3, #0]
				ChkSum += Multi_Station_Amount;
 800341c:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <UART_Protocal+0x2ac>)
 800341e:	781a      	ldrb	r2, [r3, #0]
 8003420:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <UART_Protocal+0x2b4>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	4413      	add	r3, r2
 8003426:	b2da      	uxtb	r2, r3
 8003428:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <UART_Protocal+0x2ac>)
 800342a:	701a      	strb	r2, [r3, #0]
				for(int i=0 ; i < (int)((Multi_Station_Amount+1)/2) ; i++)
 800342c:	2300      	movs	r3, #0
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	e00c      	b.n	800344c <UART_Protocal+0x238>
				{
					ChkSum += Data_Frame3[i];
 8003432:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <UART_Protocal+0x2bc>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4413      	add	r3, r2
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	4b21      	ldr	r3, [pc, #132]	; (80034c0 <UART_Protocal+0x2ac>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	4413      	add	r3, r2
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <UART_Protocal+0x2ac>)
 8003444:	701a      	strb	r2, [r3, #0]
				for(int i=0 ; i < (int)((Multi_Station_Amount+1)/2) ; i++)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3301      	adds	r3, #1
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <UART_Protocal+0x2b4>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	3301      	adds	r3, #1
 8003452:	0fda      	lsrs	r2, r3, #31
 8003454:	4413      	add	r3, r2
 8003456:	105b      	asrs	r3, r3, #1
 8003458:	461a      	mov	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4293      	cmp	r3, r2
 800345e:	dbe8      	blt.n	8003432 <UART_Protocal+0x21e>
				}
				ChkSum = ~(ChkSum);
 8003460:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <UART_Protocal+0x2ac>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	43db      	mvns	r3, r3
 8003466:	b2da      	uxtb	r2, r3
 8003468:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <UART_Protocal+0x2ac>)
 800346a:	701a      	strb	r2, [r3, #0]
				if(InputByte == ChkSum)
 800346c:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <UART_Protocal+0x29c>)
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <UART_Protocal+0x2ac>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d103      	bne.n	8003480 <UART_Protocal+0x26c>
				{
					UART_Ack1();
 8003478:	f7ff fdda 	bl	8003030 <UART_Ack1>
					UART_Execute();
 800347c:	f000 f82c 	bl	80034d8 <UART_Execute>
				}
				ChkSum = 0;
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <UART_Protocal+0x2ac>)
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
				State = Start;
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <UART_Protocal+0x2a0>)
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
				break;
 800348c:	e008      	b.n	80034a0 <UART_Protocal+0x28c>

			default:
				State = Start;
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <UART_Protocal+0x2a0>)
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]
				break;
 8003494:	e004      	b.n	80034a0 <UART_Protocal+0x28c>
		}
	}
 8003496:	bf00      	nop
 8003498:	e002      	b.n	80034a0 <UART_Protocal+0x28c>
				break;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <UART_Protocal+0x28c>
				break;
 800349e:	bf00      	nop

}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	2000018c 	.word	0x2000018c
 80034ac:	200001c6 	.word	0x200001c6
 80034b0:	200001c8 	.word	0x200001c8
 80034b4:	200001fd 	.word	0x200001fd
 80034b8:	200001ea 	.word	0x200001ea
 80034bc:	200001eb 	.word	0x200001eb
 80034c0:	200001c9 	.word	0x200001c9
 80034c4:	200001cc 	.word	0x200001cc
 80034c8:	200001e8 	.word	0x200001e8
 80034cc:	200001e9 	.word	0x200001e9
 80034d0:	200001d0 	.word	0x200001d0
 80034d4:	200001d8 	.word	0x200001d8

080034d8 <UART_Execute>:

void UART_Execute()
{
 80034d8:	b598      	push	{r3, r4, r7, lr}
 80034da:	af00      	add	r7, sp, #0
	switch(UART_Mode)
 80034dc:	4b96      	ldr	r3, [pc, #600]	; (8003738 <UART_Execute+0x260>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	2b0e      	cmp	r3, #14
 80034e4:	f200 8119 	bhi.w	800371a <UART_Execute+0x242>
 80034e8:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <UART_Execute+0x18>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	0800371b 	.word	0x0800371b
 80034f4:	0800352d 	.word	0x0800352d
 80034f8:	08003535 	.word	0x08003535
 80034fc:	0800353d 	.word	0x0800353d
 8003500:	08003569 	.word	0x08003569
 8003504:	080035e1 	.word	0x080035e1
 8003508:	08003613 	.word	0x08003613
 800350c:	08003649 	.word	0x08003649
 8003510:	08003659 	.word	0x08003659
 8003514:	0800365f 	.word	0x0800365f
 8003518:	0800369f 	.word	0x0800369f
 800351c:	080036ef 	.word	0x080036ef
 8003520:	080036f7 	.word	0x080036f7
 8003524:	080036ff 	.word	0x080036ff
 8003528:	0800371b 	.word	0x0800371b
	{
		case 1:
			break;
		case 2:
			MCU_Connected = 1;
 800352c:	4b83      	ldr	r3, [pc, #524]	; (800373c <UART_Execute+0x264>)
 800352e:	2201      	movs	r2, #1
 8003530:	701a      	strb	r2, [r3, #0]
			break;
 8003532:	e0f2      	b.n	800371a <UART_Execute+0x242>
		case 3:
			MCU_Connected = 0;
 8003534:	4b81      	ldr	r3, [pc, #516]	; (800373c <UART_Execute+0x264>)
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
			break;
 800353a:	e0ee      	b.n	800371a <UART_Execute+0x242>
		case 4:
			Max_Speed = Data_Frame2[1] * 10 / 255;
 800353c:	4b80      	ldr	r3, [pc, #512]	; (8003740 <UART_Execute+0x268>)
 800353e:	785b      	ldrb	r3, [r3, #1]
 8003540:	461a      	mov	r2, r3
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4a7e      	ldr	r2, [pc, #504]	; (8003744 <UART_Execute+0x26c>)
 800354c:	fb82 1203 	smull	r1, r2, r2, r3
 8003550:	441a      	add	r2, r3
 8003552:	11d2      	asrs	r2, r2, #7
 8003554:	17db      	asrs	r3, r3, #31
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003560:	4b79      	ldr	r3, [pc, #484]	; (8003748 <UART_Execute+0x270>)
 8003562:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003566:	e0d8      	b.n	800371a <UART_Execute+0x242>
		case 5:
			Goal_Mode = 1;
 8003568:	4b78      	ldr	r3, [pc, #480]	; (800374c <UART_Execute+0x274>)
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
			Goal_Angle = (Data_Frame2[0] * 256) + Data_Frame2[1];
 800356e:	4b74      	ldr	r3, [pc, #464]	; (8003740 <UART_Execute+0x268>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	4a72      	ldr	r2, [pc, #456]	; (8003740 <UART_Execute+0x268>)
 8003576:	7852      	ldrb	r2, [r2, #1]
 8003578:	4413      	add	r3, r2
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003582:	4b73      	ldr	r3, [pc, #460]	; (8003750 <UART_Execute+0x278>)
 8003584:	edc3 7a00 	vstr	s15, [r3]
			Goal_Angle = Goal_Angle / (pi * 10000) * 180.0;
 8003588:	4b71      	ldr	r3, [pc, #452]	; (8003750 <UART_Execute+0x278>)
 800358a:	edd3 6a00 	vldr	s13, [r3]
 800358e:	4b71      	ldr	r3, [pc, #452]	; (8003754 <UART_Execute+0x27c>)
 8003590:	edd3 7a00 	vldr	s15, [r3]
 8003594:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003758 <UART_Execute+0x280>
 8003598:	ee27 7a87 	vmul.f32	s14, s15, s14
 800359c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035a0:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800375c <UART_Execute+0x284>
 80035a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035a8:	4b69      	ldr	r3, [pc, #420]	; (8003750 <UART_Execute+0x278>)
 80035aa:	edc3 7a00 	vstr	s15, [r3]
			angle = round(Goal_Angle);
 80035ae:	4b68      	ldr	r3, [pc, #416]	; (8003750 <UART_Execute+0x278>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fc ff74 	bl	80004a0 <__aeabi_f2d>
 80035b8:	4603      	mov	r3, r0
 80035ba:	460c      	mov	r4, r1
 80035bc:	ec44 3b10 	vmov	d0, r3, r4
 80035c0:	f005 fe38 	bl	8009234 <round>
 80035c4:	ec54 3b10 	vmov	r3, r4, d0
 80035c8:	4618      	mov	r0, r3
 80035ca:	4621      	mov	r1, r4
 80035cc:	f7fd fa70 	bl	8000ab0 <__aeabi_d2f>
 80035d0:	4602      	mov	r2, r0
 80035d2:	4b63      	ldr	r3, [pc, #396]	; (8003760 <UART_Execute+0x288>)
 80035d4:	601a      	str	r2, [r3, #0]
			Lastest_Angle = Current_Angle;
 80035d6:	4b63      	ldr	r3, [pc, #396]	; (8003764 <UART_Execute+0x28c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a63      	ldr	r2, [pc, #396]	; (8003768 <UART_Execute+0x290>)
 80035dc:	6013      	str	r3, [r2, #0]
			break;
 80035de:	e09c      	b.n	800371a <UART_Execute+0x242>
		case 6:
			Goal_Mode = 2;
 80035e0:	4b5a      	ldr	r3, [pc, #360]	; (800374c <UART_Execute+0x274>)
 80035e2:	2202      	movs	r2, #2
 80035e4:	701a      	strb	r2, [r3, #0]
			Single_Station = Data_Frame2[1];
 80035e6:	4b56      	ldr	r3, [pc, #344]	; (8003740 <UART_Execute+0x268>)
 80035e8:	785a      	ldrb	r2, [r3, #1]
 80035ea:	4b60      	ldr	r3, [pc, #384]	; (800376c <UART_Execute+0x294>)
 80035ec:	701a      	strb	r2, [r3, #0]
			angle = Multi_Station_Angle[Single_Station];
 80035ee:	4b5f      	ldr	r3, [pc, #380]	; (800376c <UART_Execute+0x294>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b5e      	ldr	r3, [pc, #376]	; (8003770 <UART_Execute+0x298>)
 80035f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003602:	4b57      	ldr	r3, [pc, #348]	; (8003760 <UART_Execute+0x288>)
 8003604:	edc3 7a00 	vstr	s15, [r3]
			Lastest_Angle = Current_Angle;
 8003608:	4b56      	ldr	r3, [pc, #344]	; (8003764 <UART_Execute+0x28c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a56      	ldr	r2, [pc, #344]	; (8003768 <UART_Execute+0x290>)
 800360e:	6013      	str	r3, [r2, #0]
			break;
 8003610:	e083      	b.n	800371a <UART_Execute+0x242>
		case 7:
			Goal_Mode = 3;
 8003612:	4b4e      	ldr	r3, [pc, #312]	; (800374c <UART_Execute+0x274>)
 8003614:	2203      	movs	r2, #3
 8003616:	701a      	strb	r2, [r3, #0]
			Current_Multi_Station = 0;
 8003618:	4b56      	ldr	r3, [pc, #344]	; (8003774 <UART_Execute+0x29c>)
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
			angle = Multi_Station_Angle[ Multi_Station[Current_Multi_Station] ];
 800361e:	4b55      	ldr	r3, [pc, #340]	; (8003774 <UART_Execute+0x29c>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	4b54      	ldr	r3, [pc, #336]	; (8003778 <UART_Execute+0x2a0>)
 8003626:	5c9b      	ldrb	r3, [r3, r2]
 8003628:	461a      	mov	r2, r3
 800362a:	4b51      	ldr	r3, [pc, #324]	; (8003770 <UART_Execute+0x298>)
 800362c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003630:	ee07 3a90 	vmov	s15, r3
 8003634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003638:	4b49      	ldr	r3, [pc, #292]	; (8003760 <UART_Execute+0x288>)
 800363a:	edc3 7a00 	vstr	s15, [r3]
			Lastest_Angle = Current_Angle;
 800363e:	4b49      	ldr	r3, [pc, #292]	; (8003764 <UART_Execute+0x28c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a49      	ldr	r2, [pc, #292]	; (8003768 <UART_Execute+0x290>)
 8003644:	6013      	str	r3, [r2, #0]
			break;
 8003646:	e068      	b.n	800371a <UART_Execute+0x242>
		case 8:
			t = 0;
 8003648:	4b4c      	ldr	r3, [pc, #304]	; (800377c <UART_Execute+0x2a4>)
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
			Run = 1;
 8003650:	4b4b      	ldr	r3, [pc, #300]	; (8003780 <UART_Execute+0x2a8>)
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
			break;
 8003656:	e060      	b.n	800371a <UART_Execute+0x242>
		case 9:
			UART_Flow2();
 8003658:	f7ff fd22 	bl	80030a0 <UART_Flow2>
			break;
 800365c:	e05d      	b.n	800371a <UART_Execute+0x242>
		case 10:
			Current_Angle = ( EncoderPosition_Update() * 360.0 / 7200.0 );
 800365e:	f7fe fa4b 	bl	8001af8 <EncoderPosition_Update>
 8003662:	4603      	mov	r3, r0
 8003664:	4618      	mov	r0, r3
 8003666:	f7fc fef9 	bl	800045c <__aeabi_ui2d>
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	4b45      	ldr	r3, [pc, #276]	; (8003784 <UART_Execute+0x2ac>)
 8003670:	f7fc ff6e 	bl	8000550 <__aeabi_dmul>
 8003674:	4603      	mov	r3, r0
 8003676:	460c      	mov	r4, r1
 8003678:	4618      	mov	r0, r3
 800367a:	4621      	mov	r1, r4
 800367c:	a32a      	add	r3, pc, #168	; (adr r3, 8003728 <UART_Execute+0x250>)
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	f7fd f88f 	bl	80007a4 <__aeabi_ddiv>
 8003686:	4603      	mov	r3, r0
 8003688:	460c      	mov	r4, r1
 800368a:	4618      	mov	r0, r3
 800368c:	4621      	mov	r1, r4
 800368e:	f7fd fa0f 	bl	8000ab0 <__aeabi_d2f>
 8003692:	4602      	mov	r2, r0
 8003694:	4b33      	ldr	r3, [pc, #204]	; (8003764 <UART_Execute+0x28c>)
 8003696:	601a      	str	r2, [r3, #0]
			UART_Flow2();
 8003698:	f7ff fd02 	bl	80030a0 <UART_Flow2>
			break;
 800369c:	e03d      	b.n	800371a <UART_Execute+0x242>
		case 11:
			Speed = ( omega_est * 9.5493 );
 800369e:	4b3a      	ldr	r3, [pc, #232]	; (8003788 <UART_Execute+0x2b0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fc fefc 	bl	80004a0 <__aeabi_f2d>
 80036a8:	a321      	add	r3, pc, #132	; (adr r3, 8003730 <UART_Execute+0x258>)
 80036aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ae:	f7fc ff4f 	bl	8000550 <__aeabi_dmul>
 80036b2:	4603      	mov	r3, r0
 80036b4:	460c      	mov	r4, r1
 80036b6:	4618      	mov	r0, r3
 80036b8:	4621      	mov	r1, r4
 80036ba:	f7fd f9f9 	bl	8000ab0 <__aeabi_d2f>
 80036be:	4602      	mov	r2, r0
 80036c0:	4b32      	ldr	r3, [pc, #200]	; (800378c <UART_Execute+0x2b4>)
 80036c2:	601a      	str	r2, [r3, #0]
			if(Speed < 0) { Speed = 0 - Speed; }
 80036c4:	4b31      	ldr	r3, [pc, #196]	; (800378c <UART_Execute+0x2b4>)
 80036c6:	edd3 7a00 	vldr	s15, [r3]
 80036ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d2:	d509      	bpl.n	80036e8 <UART_Execute+0x210>
 80036d4:	4b2d      	ldr	r3, [pc, #180]	; (800378c <UART_Execute+0x2b4>)
 80036d6:	edd3 7a00 	vldr	s15, [r3]
 80036da:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003790 <UART_Execute+0x2b8>
 80036de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e2:	4b2a      	ldr	r3, [pc, #168]	; (800378c <UART_Execute+0x2b4>)
 80036e4:	edc3 7a00 	vstr	s15, [r3]
			UART_Flow2();
 80036e8:	f7ff fcda 	bl	80030a0 <UART_Flow2>
			break;
 80036ec:	e015      	b.n	800371a <UART_Execute+0x242>
		case 12:
			EndEff_Enable = 1;
 80036ee:	4b29      	ldr	r3, [pc, #164]	; (8003794 <UART_Execute+0x2bc>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
			break;
 80036f4:	e011      	b.n	800371a <UART_Execute+0x242>
		case 13:
			EndEff_Enable = 0;
 80036f6:	4b27      	ldr	r3, [pc, #156]	; (8003794 <UART_Execute+0x2bc>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
			break;
 80036fc:	e00d      	b.n	800371a <UART_Execute+0x242>
		case 14:
			Home = 1;
 80036fe:	4b26      	ldr	r3, [pc, #152]	; (8003798 <UART_Execute+0x2c0>)
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
			HomeMode = 1;
 8003704:	4b25      	ldr	r3, [pc, #148]	; (800379c <UART_Execute+0x2c4>)
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
			HomeTimestamp = micros();
 800370a:	f7fe f8eb 	bl	80018e4 <micros>
 800370e:	4603      	mov	r3, r0
 8003710:	460c      	mov	r4, r1
 8003712:	4a23      	ldr	r2, [pc, #140]	; (80037a0 <UART_Execute+0x2c8>)
 8003714:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8003718:	bf00      	nop
		case 15:
			break;
	}
	UART_Mode = 0;
 800371a:	4b07      	ldr	r3, [pc, #28]	; (8003738 <UART_Execute+0x260>)
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
}
 8003720:	bf00      	nop
 8003722:	bd98      	pop	{r3, r4, r7, pc}
 8003724:	f3af 8000 	nop.w
 8003728:	00000000 	.word	0x00000000
 800372c:	40bc2000 	.word	0x40bc2000
 8003730:	d97f62b7 	.word	0xd97f62b7
 8003734:	4023193d 	.word	0x4023193d
 8003738:	200001ea 	.word	0x200001ea
 800373c:	200001b9 	.word	0x200001b9
 8003740:	200001cc 	.word	0x200001cc
 8003744:	80808081 	.word	0x80808081
 8003748:	200001bc 	.word	0x200001bc
 800374c:	20000020 	.word	0x20000020
 8003750:	200001c0 	.word	0x200001c0
 8003754:	2000001c 	.word	0x2000001c
 8003758:	461c4000 	.word	0x461c4000
 800375c:	43340000 	.word	0x43340000
 8003760:	2000017c 	.word	0x2000017c
 8003764:	200001a8 	.word	0x200001a8
 8003768:	200001a4 	.word	0x200001a4
 800376c:	200001c4 	.word	0x200001c4
 8003770:	20000024 	.word	0x20000024
 8003774:	200001ad 	.word	0x200001ad
 8003778:	200001d8 	.word	0x200001d8
 800377c:	20000160 	.word	0x20000160
 8003780:	200001b6 	.word	0x200001b6
 8003784:	40768000 	.word	0x40768000
 8003788:	20000114 	.word	0x20000114
 800378c:	200001b0 	.word	0x200001b0
 8003790:	00000000 	.word	0x00000000
 8003794:	200001ba 	.word	0x200001ba
 8003798:	200001b7 	.word	0x200001b7
 800379c:	200000f0 	.word	0x200000f0
 80037a0:	200000e0 	.word	0x200000e0

080037a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037aa:	e7fe      	b.n	80037aa <Error_Handler+0x6>

080037ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	607b      	str	r3, [r7, #4]
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <HAL_MspInit+0x4c>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	4a0f      	ldr	r2, [pc, #60]	; (80037f8 <HAL_MspInit+0x4c>)
 80037bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c0:	6453      	str	r3, [r2, #68]	; 0x44
 80037c2:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <HAL_MspInit+0x4c>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_MspInit+0x4c>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	4a08      	ldr	r2, [pc, #32]	; (80037f8 <HAL_MspInit+0x4c>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037dc:	6413      	str	r3, [r2, #64]	; 0x40
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_MspInit+0x4c>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80037ea:	2007      	movs	r0, #7
 80037ec:	f000 fc46 	bl	800407c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40023800 	.word	0x40023800

080037fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	; 0x28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a21      	ldr	r2, [pc, #132]	; (80038a0 <HAL_I2C_MspInit+0xa4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d13b      	bne.n	8003896 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <HAL_I2C_MspInit+0xa8>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a1f      	ldr	r2, [pc, #124]	; (80038a4 <HAL_I2C_MspInit+0xa8>)
 8003828:	f043 0302 	orr.w	r3, r3, #2
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
 800382e:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <HAL_I2C_MspInit+0xa8>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800383a:	23c0      	movs	r3, #192	; 0xc0
 800383c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800383e:	2312      	movs	r3, #18
 8003840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003842:	2301      	movs	r3, #1
 8003844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003846:	2303      	movs	r3, #3
 8003848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800384a:	2304      	movs	r3, #4
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800384e:	f107 0314 	add.w	r3, r7, #20
 8003852:	4619      	mov	r1, r3
 8003854:	4814      	ldr	r0, [pc, #80]	; (80038a8 <HAL_I2C_MspInit+0xac>)
 8003856:	f000 fff1 	bl	800483c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <HAL_I2C_MspInit+0xa8>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <HAL_I2C_MspInit+0xa8>)
 8003864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003868:	6413      	str	r3, [r2, #64]	; 0x40
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <HAL_I2C_MspInit+0xa8>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003876:	2200      	movs	r2, #0
 8003878:	2100      	movs	r1, #0
 800387a:	201f      	movs	r0, #31
 800387c:	f000 fc09 	bl	8004092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003880:	201f      	movs	r0, #31
 8003882:	f000 fc22 	bl	80040ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003886:	2200      	movs	r2, #0
 8003888:	2100      	movs	r1, #0
 800388a:	2020      	movs	r0, #32
 800388c:	f000 fc01 	bl	8004092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003890:	2020      	movs	r0, #32
 8003892:	f000 fc1a 	bl	80040ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003896:	bf00      	nop
 8003898:	3728      	adds	r7, #40	; 0x28
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40005400 	.word	0x40005400
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40020400 	.word	0x40020400

080038ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a19      	ldr	r2, [pc, #100]	; (8003930 <HAL_TIM_Encoder_MspInit+0x84>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d12c      	bne.n	8003928 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	4b18      	ldr	r3, [pc, #96]	; (8003934 <HAL_TIM_Encoder_MspInit+0x88>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	4a17      	ldr	r2, [pc, #92]	; (8003934 <HAL_TIM_Encoder_MspInit+0x88>)
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	6453      	str	r3, [r2, #68]	; 0x44
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <HAL_TIM_Encoder_MspInit+0x88>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	4b11      	ldr	r3, [pc, #68]	; (8003934 <HAL_TIM_Encoder_MspInit+0x88>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	4a10      	ldr	r2, [pc, #64]	; (8003934 <HAL_TIM_Encoder_MspInit+0x88>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6313      	str	r3, [r2, #48]	; 0x30
 80038fa:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <HAL_TIM_Encoder_MspInit+0x88>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003906:	f44f 7340 	mov.w	r3, #768	; 0x300
 800390a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390c:	2302      	movs	r3, #2
 800390e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003910:	2300      	movs	r3, #0
 8003912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003914:	2300      	movs	r3, #0
 8003916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003918:	2301      	movs	r3, #1
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800391c:	f107 0314 	add.w	r3, r7, #20
 8003920:	4619      	mov	r1, r3
 8003922:	4805      	ldr	r0, [pc, #20]	; (8003938 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003924:	f000 ff8a 	bl	800483c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003928:	bf00      	nop
 800392a:	3728      	adds	r7, #40	; 0x28
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40010000 	.word	0x40010000
 8003934:	40023800 	.word	0x40023800
 8003938:	40020000 	.word	0x40020000

0800393c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394c:	d116      	bne.n	800397c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <HAL_TIM_Base_MspInit+0x80>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	4a19      	ldr	r2, [pc, #100]	; (80039bc <HAL_TIM_Base_MspInit+0x80>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6413      	str	r3, [r2, #64]	; 0x40
 800395e:	4b17      	ldr	r3, [pc, #92]	; (80039bc <HAL_TIM_Base_MspInit+0x80>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800396a:	2200      	movs	r2, #0
 800396c:	2100      	movs	r1, #0
 800396e:	201c      	movs	r0, #28
 8003970:	f000 fb8f 	bl	8004092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003974:	201c      	movs	r0, #28
 8003976:	f000 fba8 	bl	80040ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800397a:	e01a      	b.n	80039b2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a0f      	ldr	r2, [pc, #60]	; (80039c0 <HAL_TIM_Base_MspInit+0x84>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d115      	bne.n	80039b2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <HAL_TIM_Base_MspInit+0x80>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	4a0b      	ldr	r2, [pc, #44]	; (80039bc <HAL_TIM_Base_MspInit+0x80>)
 8003990:	f043 0304 	orr.w	r3, r3, #4
 8003994:	6413      	str	r3, [r2, #64]	; 0x40
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_TIM_Base_MspInit+0x80>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2100      	movs	r1, #0
 80039a6:	201e      	movs	r0, #30
 80039a8:	f000 fb73 	bl	8004092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039ac:	201e      	movs	r0, #30
 80039ae:	f000 fb8c 	bl	80040ca <HAL_NVIC_EnableIRQ>
}
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40000800 	.word	0x40000800

080039c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0b      	ldr	r2, [pc, #44]	; (8003a00 <HAL_TIM_PWM_MspInit+0x3c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d10d      	bne.n	80039f2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <HAL_TIM_PWM_MspInit+0x40>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <HAL_TIM_PWM_MspInit+0x40>)
 80039e0:	f043 0302 	orr.w	r3, r3, #2
 80039e4:	6413      	str	r3, [r2, #64]	; 0x40
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <HAL_TIM_PWM_MspInit+0x40>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40023800 	.word	0x40023800

08003a08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a10:	f107 030c 	add.w	r3, r7, #12
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
 8003a1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <HAL_TIM_MspPostInit+0x68>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d11d      	bne.n	8003a66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <HAL_TIM_MspPostInit+0x6c>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	4a10      	ldr	r2, [pc, #64]	; (8003a74 <HAL_TIM_MspPostInit+0x6c>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <HAL_TIM_MspPostInit+0x6c>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	60bb      	str	r3, [r7, #8]
 8003a44:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a46:	23c0      	movs	r3, #192	; 0xc0
 8003a48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a56:	2302      	movs	r3, #2
 8003a58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5a:	f107 030c 	add.w	r3, r7, #12
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4805      	ldr	r0, [pc, #20]	; (8003a78 <HAL_TIM_MspPostInit+0x70>)
 8003a62:	f000 feeb 	bl	800483c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003a66:	bf00      	nop
 8003a68:	3720      	adds	r7, #32
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40000400 	.word	0x40000400
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40020000 	.word	0x40020000

08003a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	; 0x28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a84:	f107 0314 	add.w	r3, r7, #20
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a4c      	ldr	r2, [pc, #304]	; (8003bcc <HAL_UART_MspInit+0x150>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	f040 8091 	bne.w	8003bc2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	4b4a      	ldr	r3, [pc, #296]	; (8003bd0 <HAL_UART_MspInit+0x154>)
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	4a49      	ldr	r2, [pc, #292]	; (8003bd0 <HAL_UART_MspInit+0x154>)
 8003aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aae:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab0:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <HAL_UART_MspInit+0x154>)
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	4b43      	ldr	r3, [pc, #268]	; (8003bd0 <HAL_UART_MspInit+0x154>)
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	4a42      	ldr	r2, [pc, #264]	; (8003bd0 <HAL_UART_MspInit+0x154>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6313      	str	r3, [r2, #48]	; 0x30
 8003acc:	4b40      	ldr	r3, [pc, #256]	; (8003bd0 <HAL_UART_MspInit+0x154>)
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ad8:	230c      	movs	r3, #12
 8003ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003adc:	2302      	movs	r3, #2
 8003ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ae8:	2307      	movs	r3, #7
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aec:	f107 0314 	add.w	r3, r7, #20
 8003af0:	4619      	mov	r1, r3
 8003af2:	4838      	ldr	r0, [pc, #224]	; (8003bd4 <HAL_UART_MspInit+0x158>)
 8003af4:	f000 fea2 	bl	800483c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003af8:	4b37      	ldr	r3, [pc, #220]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003afa:	4a38      	ldr	r2, [pc, #224]	; (8003bdc <HAL_UART_MspInit+0x160>)
 8003afc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003afe:	4b36      	ldr	r3, [pc, #216]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b04:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b06:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b0c:	4b32      	ldr	r3, [pc, #200]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b12:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b18:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b1a:	4b2f      	ldr	r3, [pc, #188]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b20:	4b2d      	ldr	r3, [pc, #180]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003b26:	4b2c      	ldr	r3, [pc, #176]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b2c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b2e:	4b2a      	ldr	r3, [pc, #168]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b34:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003b3a:	4827      	ldr	r0, [pc, #156]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b3c:	f000 fae0 	bl	8004100 <HAL_DMA_Init>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003b46:	f7ff fe2d 	bl	80037a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a22      	ldr	r2, [pc, #136]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b4e:	635a      	str	r2, [r3, #52]	; 0x34
 8003b50:	4a21      	ldr	r2, [pc, #132]	; (8003bd8 <HAL_UART_MspInit+0x15c>)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003b56:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b58:	4a22      	ldr	r2, [pc, #136]	; (8003be4 <HAL_UART_MspInit+0x168>)
 8003b5a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003b5c:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b62:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b64:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b66:	2240      	movs	r2, #64	; 0x40
 8003b68:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b70:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b76:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b78:	4b19      	ldr	r3, [pc, #100]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b7e:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003b84:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b90:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b96:	4812      	ldr	r0, [pc, #72]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003b98:	f000 fab2 	bl	8004100 <HAL_DMA_Init>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003ba2:	f7ff fdff 	bl	80037a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a0d      	ldr	r2, [pc, #52]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
 8003bac:	4a0c      	ldr	r2, [pc, #48]	; (8003be0 <HAL_UART_MspInit+0x164>)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	2026      	movs	r0, #38	; 0x26
 8003bb8:	f000 fa6b 	bl	8004092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bbc:	2026      	movs	r0, #38	; 0x26
 8003bbe:	f000 fa84 	bl	80040ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bc2:	bf00      	nop
 8003bc4:	3728      	adds	r7, #40	; 0x28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40004400 	.word	0x40004400
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40020000 	.word	0x40020000
 8003bd8:	20000210 	.word	0x20000210
 8003bdc:	40026088 	.word	0x40026088
 8003be0:	2000034c 	.word	0x2000034c
 8003be4:	400260a0 	.word	0x400260a0

08003be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bec:	e7fe      	b.n	8003bec <NMI_Handler+0x4>

08003bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bf2:	e7fe      	b.n	8003bf2 <HardFault_Handler+0x4>

08003bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bf8:	e7fe      	b.n	8003bf8 <MemManage_Handler+0x4>

08003bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bfe:	e7fe      	b.n	8003bfe <BusFault_Handler+0x4>

08003c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c04:	e7fe      	b.n	8003c04 <UsageFault_Handler+0x4>

08003c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c22:	b480      	push	{r7}
 8003c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c34:	f000 f910 	bl	8003e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c38:	bf00      	nop
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003c40:	4802      	ldr	r0, [pc, #8]	; (8003c4c <DMA1_Stream5_IRQHandler+0x10>)
 8003c42:	f000 fb85 	bl	8004350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000210 	.word	0x20000210

08003c50 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003c54:	4802      	ldr	r0, [pc, #8]	; (8003c60 <DMA1_Stream6_IRQHandler+0x10>)
 8003c56:	f000 fb7b 	bl	8004350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	2000034c 	.word	0x2000034c

08003c64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c68:	4802      	ldr	r0, [pc, #8]	; (8003c74 <TIM2_IRQHandler+0x10>)
 8003c6a:	f003 fc44 	bl	80074f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c6e:	bf00      	nop
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	200003ec 	.word	0x200003ec

08003c78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c7c:	4802      	ldr	r0, [pc, #8]	; (8003c88 <TIM4_IRQHandler+0x10>)
 8003c7e:	f003 fc3a 	bl	80074f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000270 	.word	0x20000270

08003c8c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c90:	4802      	ldr	r0, [pc, #8]	; (8003c9c <I2C1_EV_IRQHandler+0x10>)
 8003c92:	f001 f97f 	bl	8004f94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	200002b4 	.word	0x200002b4

08003ca0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003ca4:	4802      	ldr	r0, [pc, #8]	; (8003cb0 <I2C1_ER_IRQHandler+0x10>)
 8003ca6:	f001 fae2 	bl	800526e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	200002b4 	.word	0x200002b4

08003cb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003cb8:	4802      	ldr	r0, [pc, #8]	; (8003cc4 <USART2_IRQHandler+0x10>)
 8003cba:	f004 fb53 	bl	8008364 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	2000042c 	.word	0x2000042c

08003cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cd0:	4a14      	ldr	r2, [pc, #80]	; (8003d24 <_sbrk+0x5c>)
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <_sbrk+0x60>)
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cdc:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <_sbrk+0x64>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d102      	bne.n	8003cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <_sbrk+0x64>)
 8003ce6:	4a12      	ldr	r2, [pc, #72]	; (8003d30 <_sbrk+0x68>)
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <_sbrk+0x64>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d207      	bcs.n	8003d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cf8:	f005 f9e4 	bl	80090c4 <__errno>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	230c      	movs	r3, #12
 8003d00:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d06:	e009      	b.n	8003d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d08:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <_sbrk+0x64>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d0e:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <_sbrk+0x64>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4413      	add	r3, r2
 8003d16:	4a05      	ldr	r2, [pc, #20]	; (8003d2c <_sbrk+0x64>)
 8003d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20020000 	.word	0x20020000
 8003d28:	00000400 	.word	0x00000400
 8003d2c:	20000200 	.word	0x20000200
 8003d30:	20000478 	.word	0x20000478

08003d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d38:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <SystemInit+0x28>)
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3e:	4a07      	ldr	r2, [pc, #28]	; (8003d5c <SystemInit+0x28>)
 8003d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d48:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <SystemInit+0x28>)
 8003d4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d4e:	609a      	str	r2, [r3, #8]
#endif
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	e000ed00 	.word	0xe000ed00

08003d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d66:	e003      	b.n	8003d70 <LoopCopyDataInit>

08003d68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d6e:	3104      	adds	r1, #4

08003d70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d70:	480b      	ldr	r0, [pc, #44]	; (8003da0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d72:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d78:	d3f6      	bcc.n	8003d68 <CopyDataInit>
  ldr  r2, =_sbss
 8003d7a:	4a0b      	ldr	r2, [pc, #44]	; (8003da8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d7c:	e002      	b.n	8003d84 <LoopFillZerobss>

08003d7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d80:	f842 3b04 	str.w	r3, [r2], #4

08003d84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d84:	4b09      	ldr	r3, [pc, #36]	; (8003dac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d88:	d3f9      	bcc.n	8003d7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d8a:	f7ff ffd3 	bl	8003d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d8e:	f005 f99f 	bl	80090d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d92:	f7fd f96d 	bl	8001070 <main>
  bx  lr    
 8003d96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003d9c:	0800a408 	.word	0x0800a408
  ldr  r0, =_sdata
 8003da0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003da4:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8003da8:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8003dac:	20000474 	.word	0x20000474

08003db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003db0:	e7fe      	b.n	8003db0 <ADC_IRQHandler>
	...

08003db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003db8:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <HAL_Init+0x40>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a0d      	ldr	r2, [pc, #52]	; (8003df4 <HAL_Init+0x40>)
 8003dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_Init+0x40>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <HAL_Init+0x40>)
 8003dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dd0:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_Init+0x40>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <HAL_Init+0x40>)
 8003dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f000 f94d 	bl	800407c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003de2:	2000      	movs	r0, #0
 8003de4:	f000 f808 	bl	8003df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003de8:	f7ff fce0 	bl	80037ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40023c00 	.word	0x40023c00

08003df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e00:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <HAL_InitTick+0x54>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <HAL_InitTick+0x58>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f965 	bl	80040e6 <HAL_SYSTICK_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e00e      	b.n	8003e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b0f      	cmp	r3, #15
 8003e2a:	d80a      	bhi.n	8003e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e34:	f000 f92d 	bl	8004092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e38:	4a06      	ldr	r2, [pc, #24]	; (8003e54 <HAL_InitTick+0x5c>)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e000      	b.n	8003e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	2000003c 	.word	0x2000003c
 8003e50:	20000044 	.word	0x20000044
 8003e54:	20000040 	.word	0x20000040

08003e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_IncTick+0x20>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <HAL_IncTick+0x24>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4413      	add	r3, r2
 8003e68:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <HAL_IncTick+0x24>)
 8003e6a:	6013      	str	r3, [r2, #0]
}
 8003e6c:	bf00      	nop
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000044 	.word	0x20000044
 8003e7c:	2000046c 	.word	0x2000046c

08003e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return uwTick;
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <HAL_GetTick+0x14>)
 8003e86:	681b      	ldr	r3, [r3, #0]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	2000046c 	.word	0x2000046c

08003e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ea0:	f7ff ffee 	bl	8003e80 <HAL_GetTick>
 8003ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb0:	d005      	beq.n	8003ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_Delay+0x40>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ebe:	bf00      	nop
 8003ec0:	f7ff ffde 	bl	8003e80 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d8f7      	bhi.n	8003ec0 <HAL_Delay+0x28>
  {
  }
}
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000044 	.word	0x20000044

08003edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eec:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <__NVIC_SetPriorityGrouping+0x44>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f0e:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <__NVIC_SetPriorityGrouping+0x44>)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	60d3      	str	r3, [r2, #12]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	e000ed00 	.word	0xe000ed00

08003f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f28:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <__NVIC_GetPriorityGrouping+0x18>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	0a1b      	lsrs	r3, r3, #8
 8003f2e:	f003 0307 	and.w	r3, r3, #7
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	e000ed00 	.word	0xe000ed00

08003f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	db0b      	blt.n	8003f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	f003 021f 	and.w	r2, r3, #31
 8003f58:	4907      	ldr	r1, [pc, #28]	; (8003f78 <__NVIC_EnableIRQ+0x38>)
 8003f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	2001      	movs	r0, #1
 8003f62:	fa00 f202 	lsl.w	r2, r0, r2
 8003f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	e000e100 	.word	0xe000e100

08003f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	6039      	str	r1, [r7, #0]
 8003f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	db0a      	blt.n	8003fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	490c      	ldr	r1, [pc, #48]	; (8003fc8 <__NVIC_SetPriority+0x4c>)
 8003f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9a:	0112      	lsls	r2, r2, #4
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fa4:	e00a      	b.n	8003fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	4908      	ldr	r1, [pc, #32]	; (8003fcc <__NVIC_SetPriority+0x50>)
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	3b04      	subs	r3, #4
 8003fb4:	0112      	lsls	r2, r2, #4
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	440b      	add	r3, r1
 8003fba:	761a      	strb	r2, [r3, #24]
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000e100 	.word	0xe000e100
 8003fcc:	e000ed00 	.word	0xe000ed00

08003fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b089      	sub	sp, #36	; 0x24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f1c3 0307 	rsb	r3, r3, #7
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	bf28      	it	cs
 8003fee:	2304      	movcs	r3, #4
 8003ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	2b06      	cmp	r3, #6
 8003ff8:	d902      	bls.n	8004000 <NVIC_EncodePriority+0x30>
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	3b03      	subs	r3, #3
 8003ffe:	e000      	b.n	8004002 <NVIC_EncodePriority+0x32>
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43da      	mvns	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	401a      	ands	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004018:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	fa01 f303 	lsl.w	r3, r1, r3
 8004022:	43d9      	mvns	r1, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004028:	4313      	orrs	r3, r2
         );
}
 800402a:	4618      	mov	r0, r3
 800402c:	3724      	adds	r7, #36	; 0x24
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3b01      	subs	r3, #1
 8004044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004048:	d301      	bcc.n	800404e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800404a:	2301      	movs	r3, #1
 800404c:	e00f      	b.n	800406e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <SysTick_Config+0x40>)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3b01      	subs	r3, #1
 8004054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004056:	210f      	movs	r1, #15
 8004058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800405c:	f7ff ff8e 	bl	8003f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <SysTick_Config+0x40>)
 8004062:	2200      	movs	r2, #0
 8004064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004066:	4b04      	ldr	r3, [pc, #16]	; (8004078 <SysTick_Config+0x40>)
 8004068:	2207      	movs	r2, #7
 800406a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	e000e010 	.word	0xe000e010

0800407c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff ff29 	bl	8003edc <__NVIC_SetPriorityGrouping>
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004092:	b580      	push	{r7, lr}
 8004094:	b086      	sub	sp, #24
 8004096:	af00      	add	r7, sp, #0
 8004098:	4603      	mov	r3, r0
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040a4:	f7ff ff3e 	bl	8003f24 <__NVIC_GetPriorityGrouping>
 80040a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	6978      	ldr	r0, [r7, #20]
 80040b0:	f7ff ff8e 	bl	8003fd0 <NVIC_EncodePriority>
 80040b4:	4602      	mov	r2, r0
 80040b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ba:	4611      	mov	r1, r2
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff ff5d 	bl	8003f7c <__NVIC_SetPriority>
}
 80040c2:	bf00      	nop
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	4603      	mov	r3, r0
 80040d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff ff31 	bl	8003f40 <__NVIC_EnableIRQ>
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff ffa2 	bl	8004038 <SysTick_Config>
 80040f4:	4603      	mov	r3, r0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800410c:	f7ff feb8 	bl	8003e80 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e099      	b.n	8004250 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800413c:	e00f      	b.n	800415e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800413e:	f7ff fe9f 	bl	8003e80 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b05      	cmp	r3, #5
 800414a:	d908      	bls.n	800415e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2203      	movs	r2, #3
 8004156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e078      	b.n	8004250 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e8      	bne.n	800413e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4b38      	ldr	r3, [pc, #224]	; (8004258 <HAL_DMA_Init+0x158>)
 8004178:	4013      	ands	r3, r2
 800417a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800418a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004196:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d107      	bne.n	80041c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	4313      	orrs	r3, r2
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f023 0307 	bic.w	r3, r3, #7
 80041de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d117      	bne.n	8004222 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00e      	beq.n	8004222 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fa9f 	bl	8004748 <DMA_CheckFifoParam>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2240      	movs	r2, #64	; 0x40
 8004214:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800421e:	2301      	movs	r3, #1
 8004220:	e016      	b.n	8004250 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fa56 	bl	80046dc <DMA_CalcBaseAndBitshift>
 8004230:	4603      	mov	r3, r0
 8004232:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004238:	223f      	movs	r2, #63	; 0x3f
 800423a:	409a      	lsls	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	f010803f 	.word	0xf010803f

0800425c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_DMA_Start_IT+0x26>
 800427e:	2302      	movs	r3, #2
 8004280:	e040      	b.n	8004304 <HAL_DMA_Start_IT+0xa8>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	d12f      	bne.n	80042f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2202      	movs	r2, #2
 800429a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f9e8 	bl	8004680 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b4:	223f      	movs	r2, #63	; 0x3f
 80042b6:	409a      	lsls	r2, r3
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0216 	orr.w	r2, r2, #22
 80042ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0208 	orr.w	r2, r2, #8
 80042e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	e005      	b.n	8004302 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
 8004300:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004302:	7dfb      	ldrb	r3, [r7, #23]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d004      	beq.n	800432a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2280      	movs	r2, #128	; 0x80
 8004324:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e00c      	b.n	8004344 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2205      	movs	r2, #5
 800432e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0201 	bic.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800435c:	4b92      	ldr	r3, [pc, #584]	; (80045a8 <HAL_DMA_IRQHandler+0x258>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a92      	ldr	r2, [pc, #584]	; (80045ac <HAL_DMA_IRQHandler+0x25c>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	0a9b      	lsrs	r3, r3, #10
 8004368:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437a:	2208      	movs	r2, #8
 800437c:	409a      	lsls	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4013      	ands	r3, r2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01a      	beq.n	80043bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d013      	beq.n	80043bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0204 	bic.w	r2, r2, #4
 80043a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a8:	2208      	movs	r2, #8
 80043aa:	409a      	lsls	r2, r3
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b4:	f043 0201 	orr.w	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c0:	2201      	movs	r2, #1
 80043c2:	409a      	lsls	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d012      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00b      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043de:	2201      	movs	r2, #1
 80043e0:	409a      	lsls	r2, r3
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	f043 0202 	orr.w	r2, r3, #2
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f6:	2204      	movs	r2, #4
 80043f8:	409a      	lsls	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d012      	beq.n	8004428 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00b      	beq.n	8004428 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004414:	2204      	movs	r2, #4
 8004416:	409a      	lsls	r2, r3
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004420:	f043 0204 	orr.w	r2, r3, #4
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442c:	2210      	movs	r2, #16
 800442e:	409a      	lsls	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4013      	ands	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d043      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d03c      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444a:	2210      	movs	r2, #16
 800444c:	409a      	lsls	r2, r3
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d018      	beq.n	8004492 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d108      	bne.n	8004480 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d024      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4798      	blx	r3
 800447e:	e01f      	b.n	80044c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01b      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4798      	blx	r3
 8004490:	e016      	b.n	80044c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d107      	bne.n	80044b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0208 	bic.w	r2, r2, #8
 80044ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c4:	2220      	movs	r2, #32
 80044c6:	409a      	lsls	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 808e 	beq.w	80045ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8086 	beq.w	80045ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e6:	2220      	movs	r2, #32
 80044e8:	409a      	lsls	r2, r3
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d136      	bne.n	8004568 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0216 	bic.w	r2, r2, #22
 8004508:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004518:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d103      	bne.n	800452a <HAL_DMA_IRQHandler+0x1da>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0208 	bic.w	r2, r2, #8
 8004538:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453e:	223f      	movs	r2, #63	; 0x3f
 8004540:	409a      	lsls	r2, r3
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455a:	2b00      	cmp	r3, #0
 800455c:	d07d      	beq.n	800465a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
        }
        return;
 8004566:	e078      	b.n	800465a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01c      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d108      	bne.n	8004596 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004588:	2b00      	cmp	r3, #0
 800458a:	d030      	beq.n	80045ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	4798      	blx	r3
 8004594:	e02b      	b.n	80045ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d027      	beq.n	80045ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	4798      	blx	r3
 80045a6:	e022      	b.n	80045ee <HAL_DMA_IRQHandler+0x29e>
 80045a8:	2000003c 	.word	0x2000003c
 80045ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10f      	bne.n	80045de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0210 	bic.w	r2, r2, #16
 80045cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d032      	beq.n	800465c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d022      	beq.n	8004648 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2205      	movs	r2, #5
 8004606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	3301      	adds	r3, #1
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	429a      	cmp	r2, r3
 8004624:	d307      	bcc.n	8004636 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1f2      	bne.n	800461a <HAL_DMA_IRQHandler+0x2ca>
 8004634:	e000      	b.n	8004638 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004636:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	4798      	blx	r3
 8004658:	e000      	b.n	800465c <HAL_DMA_IRQHandler+0x30c>
        return;
 800465a:	bf00      	nop
    }
  }
}
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop

08004664 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004672:	b2db      	uxtb	r3, r3
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800469c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d108      	bne.n	80046c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046be:	e007      	b.n	80046d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	60da      	str	r2, [r3, #12]
}
 80046d0:	bf00      	nop
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	3b10      	subs	r3, #16
 80046ec:	4a14      	ldr	r2, [pc, #80]	; (8004740 <DMA_CalcBaseAndBitshift+0x64>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	091b      	lsrs	r3, r3, #4
 80046f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046f6:	4a13      	ldr	r2, [pc, #76]	; (8004744 <DMA_CalcBaseAndBitshift+0x68>)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b03      	cmp	r3, #3
 8004708:	d909      	bls.n	800471e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004712:	f023 0303 	bic.w	r3, r3, #3
 8004716:	1d1a      	adds	r2, r3, #4
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	659a      	str	r2, [r3, #88]	; 0x58
 800471c:	e007      	b.n	800472e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004726:	f023 0303 	bic.w	r3, r3, #3
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	aaaaaaab 	.word	0xaaaaaaab
 8004744:	0800a3a8 	.word	0x0800a3a8

08004748 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d11f      	bne.n	80047a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b03      	cmp	r3, #3
 8004766:	d855      	bhi.n	8004814 <DMA_CheckFifoParam+0xcc>
 8004768:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <DMA_CheckFifoParam+0x28>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	08004781 	.word	0x08004781
 8004774:	08004793 	.word	0x08004793
 8004778:	08004781 	.word	0x08004781
 800477c:	08004815 	.word	0x08004815
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d045      	beq.n	8004818 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004790:	e042      	b.n	8004818 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800479a:	d13f      	bne.n	800481c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a0:	e03c      	b.n	800481c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047aa:	d121      	bne.n	80047f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d836      	bhi.n	8004820 <DMA_CheckFifoParam+0xd8>
 80047b2:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <DMA_CheckFifoParam+0x70>)
 80047b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b8:	080047c9 	.word	0x080047c9
 80047bc:	080047cf 	.word	0x080047cf
 80047c0:	080047c9 	.word	0x080047c9
 80047c4:	080047e1 	.word	0x080047e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	73fb      	strb	r3, [r7, #15]
      break;
 80047cc:	e02f      	b.n	800482e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d024      	beq.n	8004824 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047de:	e021      	b.n	8004824 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047e8:	d11e      	bne.n	8004828 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047ee:	e01b      	b.n	8004828 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d902      	bls.n	80047fc <DMA_CheckFifoParam+0xb4>
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d003      	beq.n	8004802 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047fa:	e018      	b.n	800482e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004800:	e015      	b.n	800482e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00e      	beq.n	800482c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
      break;
 8004812:	e00b      	b.n	800482c <DMA_CheckFifoParam+0xe4>
      break;
 8004814:	bf00      	nop
 8004816:	e00a      	b.n	800482e <DMA_CheckFifoParam+0xe6>
      break;
 8004818:	bf00      	nop
 800481a:	e008      	b.n	800482e <DMA_CheckFifoParam+0xe6>
      break;
 800481c:	bf00      	nop
 800481e:	e006      	b.n	800482e <DMA_CheckFifoParam+0xe6>
      break;
 8004820:	bf00      	nop
 8004822:	e004      	b.n	800482e <DMA_CheckFifoParam+0xe6>
      break;
 8004824:	bf00      	nop
 8004826:	e002      	b.n	800482e <DMA_CheckFifoParam+0xe6>
      break;   
 8004828:	bf00      	nop
 800482a:	e000      	b.n	800482e <DMA_CheckFifoParam+0xe6>
      break;
 800482c:	bf00      	nop
    }
  } 
  
  return status; 
 800482e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800483c:	b480      	push	{r7}
 800483e:	b089      	sub	sp, #36	; 0x24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800484a:	2300      	movs	r3, #0
 800484c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800484e:	2300      	movs	r3, #0
 8004850:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	e159      	b.n	8004b0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004858:	2201      	movs	r2, #1
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4013      	ands	r3, r2
 800486a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	429a      	cmp	r2, r3
 8004872:	f040 8148 	bne.w	8004b06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d00b      	beq.n	8004896 <HAL_GPIO_Init+0x5a>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d007      	beq.n	8004896 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800488a:	2b11      	cmp	r3, #17
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b12      	cmp	r3, #18
 8004894:	d130      	bne.n	80048f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	2203      	movs	r2, #3
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4313      	orrs	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048cc:	2201      	movs	r2, #1
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	091b      	lsrs	r3, r3, #4
 80048e2:	f003 0201 	and.w	r2, r3, #1
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	2203      	movs	r2, #3
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d003      	beq.n	8004938 <HAL_GPIO_Init+0xfc>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b12      	cmp	r3, #18
 8004936:	d123      	bne.n	8004980 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	08da      	lsrs	r2, r3, #3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3208      	adds	r2, #8
 8004940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004944:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	220f      	movs	r2, #15
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4013      	ands	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	08da      	lsrs	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3208      	adds	r2, #8
 800497a:	69b9      	ldr	r1, [r7, #24]
 800497c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	2203      	movs	r2, #3
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4013      	ands	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 0203 	and.w	r2, r3, #3
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80a2 	beq.w	8004b06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	4b56      	ldr	r3, [pc, #344]	; (8004b20 <HAL_GPIO_Init+0x2e4>)
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	4a55      	ldr	r2, [pc, #340]	; (8004b20 <HAL_GPIO_Init+0x2e4>)
 80049cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049d0:	6453      	str	r3, [r2, #68]	; 0x44
 80049d2:	4b53      	ldr	r3, [pc, #332]	; (8004b20 <HAL_GPIO_Init+0x2e4>)
 80049d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049de:	4a51      	ldr	r2, [pc, #324]	; (8004b24 <HAL_GPIO_Init+0x2e8>)
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	089b      	lsrs	r3, r3, #2
 80049e4:	3302      	adds	r3, #2
 80049e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	220f      	movs	r2, #15
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43db      	mvns	r3, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4013      	ands	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a48      	ldr	r2, [pc, #288]	; (8004b28 <HAL_GPIO_Init+0x2ec>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d019      	beq.n	8004a3e <HAL_GPIO_Init+0x202>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a47      	ldr	r2, [pc, #284]	; (8004b2c <HAL_GPIO_Init+0x2f0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <HAL_GPIO_Init+0x1fe>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a46      	ldr	r2, [pc, #280]	; (8004b30 <HAL_GPIO_Init+0x2f4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00d      	beq.n	8004a36 <HAL_GPIO_Init+0x1fa>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a45      	ldr	r2, [pc, #276]	; (8004b34 <HAL_GPIO_Init+0x2f8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d007      	beq.n	8004a32 <HAL_GPIO_Init+0x1f6>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a44      	ldr	r2, [pc, #272]	; (8004b38 <HAL_GPIO_Init+0x2fc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d101      	bne.n	8004a2e <HAL_GPIO_Init+0x1f2>
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	e008      	b.n	8004a40 <HAL_GPIO_Init+0x204>
 8004a2e:	2307      	movs	r3, #7
 8004a30:	e006      	b.n	8004a40 <HAL_GPIO_Init+0x204>
 8004a32:	2303      	movs	r3, #3
 8004a34:	e004      	b.n	8004a40 <HAL_GPIO_Init+0x204>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e002      	b.n	8004a40 <HAL_GPIO_Init+0x204>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <HAL_GPIO_Init+0x204>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	f002 0203 	and.w	r2, r2, #3
 8004a46:	0092      	lsls	r2, r2, #2
 8004a48:	4093      	lsls	r3, r2
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a50:	4934      	ldr	r1, [pc, #208]	; (8004b24 <HAL_GPIO_Init+0x2e8>)
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	089b      	lsrs	r3, r3, #2
 8004a56:	3302      	adds	r3, #2
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a5e:	4b37      	ldr	r3, [pc, #220]	; (8004b3c <HAL_GPIO_Init+0x300>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	43db      	mvns	r3, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a82:	4a2e      	ldr	r2, [pc, #184]	; (8004b3c <HAL_GPIO_Init+0x300>)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a88:	4b2c      	ldr	r3, [pc, #176]	; (8004b3c <HAL_GPIO_Init+0x300>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	43db      	mvns	r3, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4013      	ands	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004aac:	4a23      	ldr	r2, [pc, #140]	; (8004b3c <HAL_GPIO_Init+0x300>)
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ab2:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <HAL_GPIO_Init+0x300>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	43db      	mvns	r3, r3
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ad6:	4a19      	ldr	r2, [pc, #100]	; (8004b3c <HAL_GPIO_Init+0x300>)
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004adc:	4b17      	ldr	r3, [pc, #92]	; (8004b3c <HAL_GPIO_Init+0x300>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b00:	4a0e      	ldr	r2, [pc, #56]	; (8004b3c <HAL_GPIO_Init+0x300>)
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	61fb      	str	r3, [r7, #28]
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	2b0f      	cmp	r3, #15
 8004b10:	f67f aea2 	bls.w	8004858 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b14:	bf00      	nop
 8004b16:	3724      	adds	r7, #36	; 0x24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40023800 	.word	0x40023800
 8004b24:	40013800 	.word	0x40013800
 8004b28:	40020000 	.word	0x40020000
 8004b2c:	40020400 	.word	0x40020400
 8004b30:	40020800 	.word	0x40020800
 8004b34:	40020c00 	.word	0x40020c00
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	40013c00 	.word	0x40013c00

08004b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	887b      	ldrh	r3, [r7, #2]
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
 8004b5c:	e001      	b.n	8004b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	807b      	strh	r3, [r7, #2]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b80:	787b      	ldrb	r3, [r7, #1]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b86:	887a      	ldrh	r2, [r7, #2]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b8c:	e003      	b.n	8004b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b8e:	887b      	ldrh	r3, [r7, #2]
 8004b90:	041a      	lsls	r2, r3, #16
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	619a      	str	r2, [r3, #24]
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695a      	ldr	r2, [r3, #20]
 8004bb2:	887b      	ldrh	r3, [r7, #2]
 8004bb4:	401a      	ands	r2, r3
 8004bb6:	887b      	ldrh	r3, [r7, #2]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d104      	bne.n	8004bc6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004bbc:	887b      	ldrh	r3, [r7, #2]
 8004bbe:	041a      	lsls	r2, r3, #16
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004bc4:	e002      	b.n	8004bcc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004bc6:	887a      	ldrh	r2, [r7, #2]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	619a      	str	r2, [r3, #24]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e11f      	b.n	8004e2a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fe fdfc 	bl	80037fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2224      	movs	r2, #36	; 0x24
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c3c:	f002 fa9a 	bl	8007174 <HAL_RCC_GetPCLK1Freq>
 8004c40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4a7b      	ldr	r2, [pc, #492]	; (8004e34 <HAL_I2C_Init+0x25c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d807      	bhi.n	8004c5c <HAL_I2C_Init+0x84>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a7a      	ldr	r2, [pc, #488]	; (8004e38 <HAL_I2C_Init+0x260>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	bf94      	ite	ls
 8004c54:	2301      	movls	r3, #1
 8004c56:	2300      	movhi	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	e006      	b.n	8004c6a <HAL_I2C_Init+0x92>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4a77      	ldr	r2, [pc, #476]	; (8004e3c <HAL_I2C_Init+0x264>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	bf94      	ite	ls
 8004c64:	2301      	movls	r3, #1
 8004c66:	2300      	movhi	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e0db      	b.n	8004e2a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a72      	ldr	r2, [pc, #456]	; (8004e40 <HAL_I2C_Init+0x268>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	0c9b      	lsrs	r3, r3, #18
 8004c7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4a64      	ldr	r2, [pc, #400]	; (8004e34 <HAL_I2C_Init+0x25c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d802      	bhi.n	8004cac <HAL_I2C_Init+0xd4>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	e009      	b.n	8004cc0 <HAL_I2C_Init+0xe8>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cb2:	fb02 f303 	mul.w	r3, r2, r3
 8004cb6:	4a63      	ldr	r2, [pc, #396]	; (8004e44 <HAL_I2C_Init+0x26c>)
 8004cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbc:	099b      	lsrs	r3, r3, #6
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	4956      	ldr	r1, [pc, #344]	; (8004e34 <HAL_I2C_Init+0x25c>)
 8004cdc:	428b      	cmp	r3, r1
 8004cde:	d80d      	bhi.n	8004cfc <HAL_I2C_Init+0x124>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1e59      	subs	r1, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	bf38      	it	cc
 8004cf8:	2304      	movcc	r3, #4
 8004cfa:	e04f      	b.n	8004d9c <HAL_I2C_Init+0x1c4>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d111      	bne.n	8004d28 <HAL_I2C_Init+0x150>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	1e58      	subs	r0, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6859      	ldr	r1, [r3, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	440b      	add	r3, r1
 8004d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d16:	3301      	adds	r3, #1
 8004d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bf0c      	ite	eq
 8004d20:	2301      	moveq	r3, #1
 8004d22:	2300      	movne	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	e012      	b.n	8004d4e <HAL_I2C_Init+0x176>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	1e58      	subs	r0, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6859      	ldr	r1, [r3, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	0099      	lsls	r1, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d3e:	3301      	adds	r3, #1
 8004d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bf0c      	ite	eq
 8004d48:	2301      	moveq	r3, #1
 8004d4a:	2300      	movne	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_I2C_Init+0x17e>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e022      	b.n	8004d9c <HAL_I2C_Init+0x1c4>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10e      	bne.n	8004d7c <HAL_I2C_Init+0x1a4>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1e58      	subs	r0, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6859      	ldr	r1, [r3, #4]
 8004d66:	460b      	mov	r3, r1
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	440b      	add	r3, r1
 8004d6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d70:	3301      	adds	r3, #1
 8004d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7a:	e00f      	b.n	8004d9c <HAL_I2C_Init+0x1c4>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1e58      	subs	r0, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6859      	ldr	r1, [r3, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	0099      	lsls	r1, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d92:	3301      	adds	r3, #1
 8004d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	6809      	ldr	r1, [r1, #0]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69da      	ldr	r2, [r3, #28]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004dca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6911      	ldr	r1, [r2, #16]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68d2      	ldr	r2, [r2, #12]
 8004dd6:	4311      	orrs	r1, r2
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695a      	ldr	r2, [r3, #20]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	000186a0 	.word	0x000186a0
 8004e38:	001e847f 	.word	0x001e847f
 8004e3c:	003d08ff 	.word	0x003d08ff
 8004e40:	431bde83 	.word	0x431bde83
 8004e44:	10624dd3 	.word	0x10624dd3

08004e48 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	461a      	mov	r2, r3
 8004e54:	460b      	mov	r3, r1
 8004e56:	817b      	strh	r3, [r7, #10]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	f040 8085 	bne.w	8004f78 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e6e:	4b46      	ldr	r3, [pc, #280]	; (8004f88 <HAL_I2C_Master_Transmit_IT+0x140>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	08db      	lsrs	r3, r3, #3
 8004e74:	4a45      	ldr	r2, [pc, #276]	; (8004f8c <HAL_I2C_Master_Transmit_IT+0x144>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	0a1a      	lsrs	r2, r3, #8
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	009a      	lsls	r2, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d116      	bne.n	8004ec2 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	f043 0220 	orr.w	r2, r3, #32
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e05b      	b.n	8004f7a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d0db      	beq.n	8004e88 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_I2C_Master_Transmit_IT+0x96>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e04d      	b.n	8004f7a <HAL_I2C_Master_Transmit_IT+0x132>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d007      	beq.n	8004f04 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2221      	movs	r2, #33	; 0x21
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2210      	movs	r2, #16
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	893a      	ldrh	r2, [r7, #8]
 8004f34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a13      	ldr	r2, [pc, #76]	; (8004f90 <HAL_I2C_Master_Transmit_IT+0x148>)
 8004f44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004f46:	897a      	ldrh	r2, [r7, #10]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f5a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004f72:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	e000      	b.n	8004f7a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8004f78:	2302      	movs	r3, #2
  }
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	2000003c 	.word	0x2000003c
 8004f8c:	14f8b589 	.word	0x14f8b589
 8004f90:	ffff0000 	.word	0xffff0000

08004f94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fbc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d003      	beq.n	8004fcc <HAL_I2C_EV_IRQHandler+0x38>
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	f040 80bd 	bne.w	8005146 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10d      	bne.n	8005002 <HAL_I2C_EV_IRQHandler+0x6e>
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004fec:	d003      	beq.n	8004ff6 <HAL_I2C_EV_IRQHandler+0x62>
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ff4:	d101      	bne.n	8004ffa <HAL_I2C_EV_IRQHandler+0x66>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <HAL_I2C_EV_IRQHandler+0x68>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	f000 812e 	beq.w	800525e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00c      	beq.n	8005026 <HAL_I2C_EV_IRQHandler+0x92>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	0a5b      	lsrs	r3, r3, #9
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b00      	cmp	r3, #0
 8005016:	d006      	beq.n	8005026 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f001 fc55 	bl	80068c8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fd62 	bl	8005ae8 <I2C_Master_SB>
 8005024:	e08e      	b.n	8005144 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	08db      	lsrs	r3, r3, #3
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <HAL_I2C_EV_IRQHandler+0xb2>
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	0a5b      	lsrs	r3, r3, #9
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fdd8 	bl	8005bf4 <I2C_Master_ADD10>
 8005044:	e07e      	b.n	8005144 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d009      	beq.n	8005066 <HAL_I2C_EV_IRQHandler+0xd2>
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	0a5b      	lsrs	r3, r3, #9
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fdf2 	bl	8005c48 <I2C_Master_ADDR>
 8005064:	e06e      	b.n	8005144 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	089b      	lsrs	r3, r3, #2
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d037      	beq.n	80050e2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800507c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005080:	f000 80ef 	beq.w	8005262 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	09db      	lsrs	r3, r3, #7
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00f      	beq.n	80050b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	0a9b      	lsrs	r3, r3, #10
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d009      	beq.n	80050b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	089b      	lsrs	r3, r3, #2
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d103      	bne.n	80050b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f9ef 	bl	800548c <I2C_MasterTransmit_TXE>
 80050ae:	e049      	b.n	8005144 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	089b      	lsrs	r3, r3, #2
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 80d2 	beq.w	8005262 <HAL_I2C_EV_IRQHandler+0x2ce>
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	0a5b      	lsrs	r3, r3, #9
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 80cb 	beq.w	8005262 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	2b10      	cmp	r3, #16
 80050d0:	d103      	bne.n	80050da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa76 	bl	80055c4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050d8:	e0c3      	b.n	8005262 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fada 	bl	8005694 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050e0:	e0bf      	b.n	8005262 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050f0:	f000 80b7 	beq.w	8005262 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	099b      	lsrs	r3, r3, #6
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00f      	beq.n	8005120 <HAL_I2C_EV_IRQHandler+0x18c>
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	0a9b      	lsrs	r3, r3, #10
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d009      	beq.n	8005120 <HAL_I2C_EV_IRQHandler+0x18c>
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	089b      	lsrs	r3, r3, #2
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d103      	bne.n	8005120 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fb4a 	bl	80057b2 <I2C_MasterReceive_RXNE>
 800511e:	e011      	b.n	8005144 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	089b      	lsrs	r3, r3, #2
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 809a 	beq.w	8005262 <HAL_I2C_EV_IRQHandler+0x2ce>
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	0a5b      	lsrs	r3, r3, #9
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 8093 	beq.w	8005262 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fbe9 	bl	8005914 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005142:	e08e      	b.n	8005262 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005144:	e08d      	b.n	8005262 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	2b00      	cmp	r3, #0
 800514c:	d004      	beq.n	8005158 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	e007      	b.n	8005168 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d012      	beq.n	800519a <HAL_I2C_EV_IRQHandler+0x206>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	0a5b      	lsrs	r3, r3, #9
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00c      	beq.n	800519a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005190:	69b9      	ldr	r1, [r7, #24]
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 ffa7 	bl	80060e6 <I2C_Slave_ADDR>
 8005198:	e066      	b.n	8005268 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <HAL_I2C_EV_IRQHandler+0x226>
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	0a5b      	lsrs	r3, r3, #9
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 ffdc 	bl	8006170 <I2C_Slave_STOPF>
 80051b8:	e056      	b.n	8005268 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051ba:	7bbb      	ldrb	r3, [r7, #14]
 80051bc:	2b21      	cmp	r3, #33	; 0x21
 80051be:	d002      	beq.n	80051c6 <HAL_I2C_EV_IRQHandler+0x232>
 80051c0:	7bbb      	ldrb	r3, [r7, #14]
 80051c2:	2b29      	cmp	r3, #41	; 0x29
 80051c4:	d125      	bne.n	8005212 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	09db      	lsrs	r3, r3, #7
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00f      	beq.n	80051f2 <HAL_I2C_EV_IRQHandler+0x25e>
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	0a9b      	lsrs	r3, r3, #10
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <HAL_I2C_EV_IRQHandler+0x25e>
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	089b      	lsrs	r3, r3, #2
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d103      	bne.n	80051f2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 febd 	bl	8005f6a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051f0:	e039      	b.n	8005266 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	089b      	lsrs	r3, r3, #2
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d033      	beq.n	8005266 <HAL_I2C_EV_IRQHandler+0x2d2>
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	0a5b      	lsrs	r3, r3, #9
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d02d      	beq.n	8005266 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 feea 	bl	8005fe4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005210:	e029      	b.n	8005266 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	099b      	lsrs	r3, r3, #6
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00f      	beq.n	800523e <HAL_I2C_EV_IRQHandler+0x2aa>
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	0a9b      	lsrs	r3, r3, #10
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d009      	beq.n	800523e <HAL_I2C_EV_IRQHandler+0x2aa>
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	089b      	lsrs	r3, r3, #2
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d103      	bne.n	800523e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fef5 	bl	8006026 <I2C_SlaveReceive_RXNE>
 800523c:	e014      	b.n	8005268 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	089b      	lsrs	r3, r3, #2
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00e      	beq.n	8005268 <HAL_I2C_EV_IRQHandler+0x2d4>
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	0a5b      	lsrs	r3, r3, #9
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d008      	beq.n	8005268 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 ff23 	bl	80060a2 <I2C_SlaveReceive_BTF>
 800525c:	e004      	b.n	8005268 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800525e:	bf00      	nop
 8005260:	e002      	b.n	8005268 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005262:	bf00      	nop
 8005264:	e000      	b.n	8005268 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005266:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b08a      	sub	sp, #40	; 0x28
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005286:	2300      	movs	r3, #0
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005290:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	0a1b      	lsrs	r3, r3, #8
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00e      	beq.n	80052bc <HAL_I2C_ER_IRQHandler+0x4e>
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	0a1b      	lsrs	r3, r3, #8
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	f043 0301 	orr.w	r3, r3, #1
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052ba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	0a5b      	lsrs	r3, r3, #9
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00e      	beq.n	80052e6 <HAL_I2C_ER_IRQHandler+0x78>
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	f043 0302 	orr.w	r3, r3, #2
 80052da:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80052e4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	0a9b      	lsrs	r3, r3, #10
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d03f      	beq.n	8005372 <HAL_I2C_ER_IRQHandler+0x104>
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	0a1b      	lsrs	r3, r3, #8
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d039      	beq.n	8005372 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80052fe:	7efb      	ldrb	r3, [r7, #27]
 8005300:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005310:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005318:	7ebb      	ldrb	r3, [r7, #26]
 800531a:	2b20      	cmp	r3, #32
 800531c:	d112      	bne.n	8005344 <HAL_I2C_ER_IRQHandler+0xd6>
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10f      	bne.n	8005344 <HAL_I2C_ER_IRQHandler+0xd6>
 8005324:	7cfb      	ldrb	r3, [r7, #19]
 8005326:	2b21      	cmp	r3, #33	; 0x21
 8005328:	d008      	beq.n	800533c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800532a:	7cfb      	ldrb	r3, [r7, #19]
 800532c:	2b29      	cmp	r3, #41	; 0x29
 800532e:	d005      	beq.n	800533c <HAL_I2C_ER_IRQHandler+0xce>
 8005330:	7cfb      	ldrb	r3, [r7, #19]
 8005332:	2b28      	cmp	r3, #40	; 0x28
 8005334:	d106      	bne.n	8005344 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b21      	cmp	r3, #33	; 0x21
 800533a:	d103      	bne.n	8005344 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f001 f847 	bl	80063d0 <I2C_Slave_AF>
 8005342:	e016      	b.n	8005372 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800534c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	f043 0304 	orr.w	r3, r3, #4
 8005354:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005356:	7efb      	ldrb	r3, [r7, #27]
 8005358:	2b10      	cmp	r3, #16
 800535a:	d002      	beq.n	8005362 <HAL_I2C_ER_IRQHandler+0xf4>
 800535c:	7efb      	ldrb	r3, [r7, #27]
 800535e:	2b40      	cmp	r3, #64	; 0x40
 8005360:	d107      	bne.n	8005372 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005370:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	0adb      	lsrs	r3, r3, #11
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00e      	beq.n	800539c <HAL_I2C_ER_IRQHandler+0x12e>
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	0a1b      	lsrs	r3, r3, #8
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d008      	beq.n	800539c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	f043 0308 	orr.w	r3, r3, #8
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800539a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d008      	beq.n	80053b4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f001 f87e 	bl	80064b0 <I2C_ITError>
  }
}
 80053b4:	bf00      	nop
 80053b6:	3728      	adds	r7, #40	; 0x28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	70fb      	strb	r3, [r7, #3]
 8005418:	4613      	mov	r3, r2
 800541a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d150      	bne.n	8005554 <I2C_MasterTransmit_TXE+0xc8>
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b21      	cmp	r3, #33	; 0x21
 80054b6:	d14d      	bne.n	8005554 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d01d      	beq.n	80054fa <I2C_MasterTransmit_TXE+0x6e>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d01a      	beq.n	80054fa <I2C_MasterTransmit_TXE+0x6e>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054ca:	d016      	beq.n	80054fa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054da:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2211      	movs	r2, #17
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff ff62 	bl	80053bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054f8:	e060      	b.n	80055bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005508:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005518:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	d107      	bne.n	8005544 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff ff7d 	bl	800543c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005542:	e03b      	b.n	80055bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff ff35 	bl	80053bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005552:	e033      	b.n	80055bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b21      	cmp	r3, #33	; 0x21
 8005558:	d005      	beq.n	8005566 <I2C_MasterTransmit_TXE+0xda>
 800555a:	7bbb      	ldrb	r3, [r7, #14]
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d12d      	bne.n	80055bc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b22      	cmp	r3, #34	; 0x22
 8005564:	d12a      	bne.n	80055bc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d108      	bne.n	8005582 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800557e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005580:	e01c      	b.n	80055bc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d103      	bne.n	8005596 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f880 	bl	8005694 <I2C_MemoryTransmit_TXE_BTF>
}
 8005594:	e012      	b.n	80055bc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	781a      	ldrb	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055ba:	e7ff      	b.n	80055bc <I2C_MasterTransmit_TXE+0x130>
 80055bc:	bf00      	nop
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b21      	cmp	r3, #33	; 0x21
 80055dc:	d156      	bne.n	800568c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d012      	beq.n	800560e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	781a      	ldrb	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b01      	subs	r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800560c:	e03e      	b.n	800568c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d01d      	beq.n	8005650 <I2C_MasterTransmit_BTF+0x8c>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b20      	cmp	r3, #32
 8005618:	d01a      	beq.n	8005650 <I2C_MasterTransmit_BTF+0x8c>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005620:	d016      	beq.n	8005650 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005630:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2211      	movs	r2, #17
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff feb7 	bl	80053bc <HAL_I2C_MasterTxCpltCallback>
}
 800564e:	e01d      	b.n	800568c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800565e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800566e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff fe98 	bl	80053bc <HAL_I2C_MasterTxCpltCallback>
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d11d      	bne.n	80056e8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d10b      	bne.n	80056cc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c4:	1c9a      	adds	r2, r3, #2
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80056ca:	e06e      	b.n	80057aa <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	121b      	asrs	r3, r3, #8
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80056e6:	e060      	b.n	80057aa <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d10b      	bne.n	8005708 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005706:	e050      	b.n	80057aa <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570c:	2b02      	cmp	r3, #2
 800570e:	d14c      	bne.n	80057aa <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	2b22      	cmp	r3, #34	; 0x22
 8005714:	d108      	bne.n	8005728 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005724:	601a      	str	r2, [r3, #0]
}
 8005726:	e040      	b.n	80057aa <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572c:	b29b      	uxth	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d015      	beq.n	800575e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	2b21      	cmp	r3, #33	; 0x21
 8005736:	d112      	bne.n	800575e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	781a      	ldrb	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005752:	b29b      	uxth	r3, r3
 8005754:	3b01      	subs	r3, #1
 8005756:	b29a      	uxth	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800575c:	e025      	b.n	80057aa <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d120      	bne.n	80057aa <I2C_MemoryTransmit_TXE_BTF+0x116>
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	2b21      	cmp	r3, #33	; 0x21
 800576c:	d11d      	bne.n	80057aa <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800577c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800578c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff fe49 	bl	800543c <HAL_I2C_MemTxCpltCallback>
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b22      	cmp	r3, #34	; 0x22
 80057c4:	f040 80a2 	bne.w	800590c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d921      	bls.n	800581a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b03      	cmp	r3, #3
 8005804:	f040 8082 	bne.w	800590c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005816:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005818:	e078      	b.n	800590c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581e:	2b02      	cmp	r3, #2
 8005820:	d074      	beq.n	800590c <I2C_MasterReceive_RXNE+0x15a>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d002      	beq.n	800582e <I2C_MasterReceive_RXNE+0x7c>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d16e      	bne.n	800590c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f001 f818 	bl	8006864 <I2C_WaitOnSTOPRequestThroughIT>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d142      	bne.n	80058c0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005848:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005858:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d10a      	bne.n	80058aa <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff fdd4 	bl	8005450 <HAL_I2C_MemRxCpltCallback>
}
 80058a8:	e030      	b.n	800590c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2212      	movs	r2, #18
 80058b6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff fd89 	bl	80053d0 <HAL_I2C_MasterRxCpltCallback>
}
 80058be:	e025      	b.n	800590c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff fdac 	bl	8005464 <HAL_I2C_ErrorCallback>
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005920:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b04      	cmp	r3, #4
 800592a:	d11b      	bne.n	8005964 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005962:	e0bd      	b.n	8005ae0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b03      	cmp	r3, #3
 800596c:	d129      	bne.n	80059c2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800597c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b04      	cmp	r3, #4
 8005982:	d00a      	beq.n	800599a <I2C_MasterReceive_BTF+0x86>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d007      	beq.n	800599a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005998:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80059c0:	e08e      	b.n	8005ae0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d176      	bne.n	8005aba <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d002      	beq.n	80059d8 <I2C_MasterReceive_BTF+0xc4>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	d108      	bne.n	80059ea <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	e019      	b.n	8005a1e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d002      	beq.n	80059f6 <I2C_MasterReceive_BTF+0xe2>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d108      	bne.n	8005a08 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	e00a      	b.n	8005a1e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d007      	beq.n	8005a1e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691a      	ldr	r2, [r3, #16]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005a78:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b40      	cmp	r3, #64	; 0x40
 8005a8c:	d10a      	bne.n	8005aa4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff fcd7 	bl	8005450 <HAL_I2C_MemRxCpltCallback>
}
 8005aa2:	e01d      	b.n	8005ae0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2212      	movs	r2, #18
 8005ab0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff fc8c 	bl	80053d0 <HAL_I2C_MasterRxCpltCallback>
}
 8005ab8:	e012      	b.n	8005ae0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	1c5a      	adds	r2, r3, #1
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005ae0:	bf00      	nop
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b40      	cmp	r3, #64	; 0x40
 8005afa:	d117      	bne.n	8005b2c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d109      	bne.n	8005b18 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b14:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005b16:	e067      	b.n	8005be8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	f043 0301 	orr.w	r3, r3, #1
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	611a      	str	r2, [r3, #16]
}
 8005b2a:	e05d      	b.n	8005be8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b34:	d133      	bne.n	8005b9e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b21      	cmp	r3, #33	; 0x21
 8005b40:	d109      	bne.n	8005b56 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b52:	611a      	str	r2, [r3, #16]
 8005b54:	e008      	b.n	8005b68 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	f043 0301 	orr.w	r3, r3, #1
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <I2C_Master_SB+0x92>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d108      	bne.n	8005b8c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d032      	beq.n	8005be8 <I2C_Master_SB+0x100>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d02d      	beq.n	8005be8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b9a:	605a      	str	r2, [r3, #4]
}
 8005b9c:	e024      	b.n	8005be8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10e      	bne.n	8005bc4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	11db      	asrs	r3, r3, #7
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f003 0306 	and.w	r3, r3, #6
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	f063 030f 	orn	r3, r3, #15
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	611a      	str	r2, [r3, #16]
}
 8005bc2:	e011      	b.n	8005be8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d10d      	bne.n	8005be8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	11db      	asrs	r3, r3, #7
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	f003 0306 	and.w	r3, r3, #6
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	f063 030e 	orn	r3, r3, #14
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	611a      	str	r2, [r3, #16]
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d103      	bne.n	8005c18 <I2C_Master_ADD10+0x24>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d011      	beq.n	8005c3c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d104      	bne.n	8005c2c <I2C_Master_ADD10+0x38>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d007      	beq.n	8005c3c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c3a:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b091      	sub	sp, #68	; 0x44
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b22      	cmp	r3, #34	; 0x22
 8005c70:	f040 8169 	bne.w	8005f46 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10f      	bne.n	8005c9c <I2C_Master_ADDR+0x54>
 8005c7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	d10b      	bne.n	8005c9c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c84:	2300      	movs	r3, #0
 8005c86:	633b      	str	r3, [r7, #48]	; 0x30
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	633b      	str	r3, [r7, #48]	; 0x30
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	e160      	b.n	8005f5e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d11d      	bne.n	8005ce0 <I2C_Master_ADDR+0x98>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005cac:	d118      	bne.n	8005ce0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cae:	2300      	movs	r3, #0
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cd2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	651a      	str	r2, [r3, #80]	; 0x50
 8005cde:	e13e      	b.n	8005f5e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d113      	bne.n	8005d12 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cea:	2300      	movs	r3, #0
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	e115      	b.n	8005f3e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	f040 808a 	bne.w	8005e32 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d24:	d137      	bne.n	8005d96 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d34:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d44:	d113      	bne.n	8005d6e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d54:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d56:	2300      	movs	r3, #0
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	e0e7      	b.n	8005f3e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d6e:	2300      	movs	r3, #0
 8005d70:	623b      	str	r3, [r7, #32]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	623b      	str	r3, [r7, #32]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	623b      	str	r3, [r7, #32]
 8005d82:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e0d3      	b.n	8005f3e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d02e      	beq.n	8005dfa <I2C_Master_ADDR+0x1b2>
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	d02b      	beq.n	8005dfa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da4:	2b12      	cmp	r3, #18
 8005da6:	d102      	bne.n	8005dae <I2C_Master_ADDR+0x166>
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d125      	bne.n	8005dfa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d00e      	beq.n	8005dd2 <I2C_Master_ADDR+0x18a>
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d00b      	beq.n	8005dd2 <I2C_Master_ADDR+0x18a>
 8005dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbc:	2b10      	cmp	r3, #16
 8005dbe:	d008      	beq.n	8005dd2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	e007      	b.n	8005de2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005de0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de2:	2300      	movs	r3, #0
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	61fb      	str	r3, [r7, #28]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	61fb      	str	r3, [r7, #28]
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	e0a1      	b.n	8005f3e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e08:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	e085      	b.n	8005f3e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d14d      	bne.n	8005ed8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d016      	beq.n	8005e70 <I2C_Master_ADDR+0x228>
 8005e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d013      	beq.n	8005e70 <I2C_Master_ADDR+0x228>
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	2b10      	cmp	r3, #16
 8005e4c:	d010      	beq.n	8005e70 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	e007      	b.n	8005e80 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e7e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8e:	d117      	bne.n	8005ec0 <I2C_Master_ADDR+0x278>
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e96:	d00b      	beq.n	8005eb0 <I2C_Master_ADDR+0x268>
 8005e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d008      	beq.n	8005eb0 <I2C_Master_ADDR+0x268>
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d005      	beq.n	8005eb0 <I2C_Master_ADDR+0x268>
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	2b10      	cmp	r3, #16
 8005ea8:	d002      	beq.n	8005eb0 <I2C_Master_ADDR+0x268>
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	d107      	bne.n	8005ec0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ebe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	e032      	b.n	8005f3e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ee6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ef6:	d117      	bne.n	8005f28 <I2C_Master_ADDR+0x2e0>
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005efe:	d00b      	beq.n	8005f18 <I2C_Master_ADDR+0x2d0>
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d008      	beq.n	8005f18 <I2C_Master_ADDR+0x2d0>
 8005f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d005      	beq.n	8005f18 <I2C_Master_ADDR+0x2d0>
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0e:	2b10      	cmp	r3, #16
 8005f10:	d002      	beq.n	8005f18 <I2C_Master_ADDR+0x2d0>
 8005f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d107      	bne.n	8005f28 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f26:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f28:	2300      	movs	r3, #0
 8005f2a:	613b      	str	r3, [r7, #16]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005f44:	e00b      	b.n	8005f5e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
}
 8005f5c:	e7ff      	b.n	8005f5e <I2C_Master_ADDR+0x316>
 8005f5e:	bf00      	nop
 8005f60:	3744      	adds	r7, #68	; 0x44
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f78:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d02b      	beq.n	8005fdc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	781a      	ldrb	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d114      	bne.n	8005fdc <I2C_SlaveTransmit_TXE+0x72>
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b29      	cmp	r3, #41	; 0x29
 8005fb6:	d111      	bne.n	8005fdc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2221      	movs	r2, #33	; 0x21
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2228      	movs	r2, #40	; 0x28
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff fa04 	bl	80053e4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d011      	beq.n	800601a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	781a      	ldrb	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006010:	b29b      	uxth	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006034:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d02c      	beq.n	800609a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d114      	bne.n	800609a <I2C_SlaveReceive_RXNE+0x74>
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	2b2a      	cmp	r3, #42	; 0x2a
 8006074:	d111      	bne.n	800609a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006084:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2222      	movs	r2, #34	; 0x22
 800608a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2228      	movs	r2, #40	; 0x28
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff f9af 	bl	80053f8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800609a:	bf00      	nop
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d012      	beq.n	80060da <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691a      	ldr	r2, [r3, #16]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006100:	2b28      	cmp	r3, #40	; 0x28
 8006102:	d127      	bne.n	8006154 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006112:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	089b      	lsrs	r3, r3, #2
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006120:	2301      	movs	r3, #1
 8006122:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	09db      	lsrs	r3, r3, #7
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d103      	bne.n	8006138 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	81bb      	strh	r3, [r7, #12]
 8006136:	e002      	b.n	800613e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006146:	89ba      	ldrh	r2, [r7, #12]
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff f95d 	bl	800540c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006152:	e008      	b.n	8006166 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0202 	mvn.w	r2, #2
 800615c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800618e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006190:	2300      	movs	r3, #0
 8006192:	60bb      	str	r3, [r7, #8]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	60bb      	str	r3, [r7, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0201 	orr.w	r2, r2, #1
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061bc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061cc:	d172      	bne.n	80062b4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	2b22      	cmp	r3, #34	; 0x22
 80061d2:	d002      	beq.n	80061da <I2C_Slave_STOPF+0x6a>
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	2b2a      	cmp	r3, #42	; 0x2a
 80061d8:	d135      	bne.n	8006246 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f043 0204 	orr.w	r2, r3, #4
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800620c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	4618      	mov	r0, r3
 8006214:	f7fe fa26 	bl	8004664 <HAL_DMA_GetState>
 8006218:	4603      	mov	r3, r0
 800621a:	2b01      	cmp	r3, #1
 800621c:	d049      	beq.n	80062b2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	4a69      	ldr	r2, [pc, #420]	; (80063c8 <I2C_Slave_STOPF+0x258>)
 8006224:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe f86e 	bl	800430c <HAL_DMA_Abort_IT>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d03d      	beq.n	80062b2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006240:	4610      	mov	r0, r2
 8006242:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006244:	e035      	b.n	80062b2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	b29a      	uxth	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d005      	beq.n	800626a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	f043 0204 	orr.w	r2, r3, #4
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006278:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627e:	4618      	mov	r0, r3
 8006280:	f7fe f9f0 	bl	8004664 <HAL_DMA_GetState>
 8006284:	4603      	mov	r3, r0
 8006286:	2b01      	cmp	r3, #1
 8006288:	d014      	beq.n	80062b4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628e:	4a4e      	ldr	r2, [pc, #312]	; (80063c8 <I2C_Slave_STOPF+0x258>)
 8006290:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006296:	4618      	mov	r0, r3
 8006298:	f7fe f838 	bl	800430c <HAL_DMA_Abort_IT>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d008      	beq.n	80062b4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062ac:	4610      	mov	r0, r2
 80062ae:	4798      	blx	r3
 80062b0:	e000      	b.n	80062b4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062b2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d03e      	beq.n	800633c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d112      	bne.n	80062f2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	d112      	bne.n	8006326 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691a      	ldr	r2, [r3, #16]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d005      	beq.n	800633c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	f043 0204 	orr.w	r2, r3, #4
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f8b3 	bl	80064b0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800634a:	e039      	b.n	80063c0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	2b2a      	cmp	r3, #42	; 0x2a
 8006350:	d109      	bne.n	8006366 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2228      	movs	r2, #40	; 0x28
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff f849 	bl	80053f8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b28      	cmp	r3, #40	; 0x28
 8006370:	d111      	bne.n	8006396 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a15      	ldr	r2, [pc, #84]	; (80063cc <I2C_Slave_STOPF+0x25c>)
 8006376:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff f84a 	bl	8005428 <HAL_I2C_ListenCpltCallback>
}
 8006394:	e014      	b.n	80063c0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639a:	2b22      	cmp	r3, #34	; 0x22
 800639c:	d002      	beq.n	80063a4 <I2C_Slave_STOPF+0x234>
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	2b22      	cmp	r3, #34	; 0x22
 80063a2:	d10d      	bne.n	80063c0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff f81c 	bl	80053f8 <HAL_I2C_SlaveRxCpltCallback>
}
 80063c0:	bf00      	nop
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	08006715 	.word	0x08006715
 80063cc:	ffff0000 	.word	0xffff0000

080063d0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063de:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d002      	beq.n	80063f2 <I2C_Slave_AF+0x22>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d129      	bne.n	8006446 <I2C_Slave_AF+0x76>
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	2b28      	cmp	r3, #40	; 0x28
 80063f6:	d126      	bne.n	8006446 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a2c      	ldr	r2, [pc, #176]	; (80064ac <I2C_Slave_AF+0xdc>)
 80063fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800640c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006416:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006426:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2220      	movs	r2, #32
 8006432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7fe fff2 	bl	8005428 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006444:	e02e      	b.n	80064a4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	2b21      	cmp	r3, #33	; 0x21
 800644a:	d126      	bne.n	800649a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a17      	ldr	r2, [pc, #92]	; (80064ac <I2C_Slave_AF+0xdc>)
 8006450:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2221      	movs	r2, #33	; 0x21
 8006456:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006476:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006480:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006490:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fe ffa6 	bl	80053e4 <HAL_I2C_SlaveTxCpltCallback>
}
 8006498:	e004      	b.n	80064a4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064a2:	615a      	str	r2, [r3, #20]
}
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	ffff0000 	.word	0xffff0000

080064b0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	2b10      	cmp	r3, #16
 80064cc:	d002      	beq.n	80064d4 <I2C_ITError+0x24>
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	2b40      	cmp	r3, #64	; 0x40
 80064d2:	d10a      	bne.n	80064ea <I2C_ITError+0x3a>
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2b22      	cmp	r3, #34	; 0x22
 80064d8:	d107      	bne.n	80064ea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064e8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064f0:	2b28      	cmp	r3, #40	; 0x28
 80064f2:	d107      	bne.n	8006504 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2228      	movs	r2, #40	; 0x28
 80064fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006502:	e015      	b.n	8006530 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800650e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006512:	d00a      	beq.n	800652a <I2C_ITError+0x7a>
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	2b60      	cmp	r3, #96	; 0x60
 8006518:	d007      	beq.n	800652a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800653a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800653e:	d162      	bne.n	8006606 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800654e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b01      	cmp	r3, #1
 800655c:	d020      	beq.n	80065a0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006562:	4a6a      	ldr	r2, [pc, #424]	; (800670c <I2C_ITError+0x25c>)
 8006564:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656a:	4618      	mov	r0, r3
 800656c:	f7fd fece 	bl	800430c <HAL_DMA_Abort_IT>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 8089 	beq.w	800668a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0201 	bic.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800659a:	4610      	mov	r0, r2
 800659c:	4798      	blx	r3
 800659e:	e074      	b.n	800668a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	4a59      	ldr	r2, [pc, #356]	; (800670c <I2C_ITError+0x25c>)
 80065a6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fd fead 	bl	800430c <HAL_DMA_Abort_IT>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d068      	beq.n	800668a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c2:	2b40      	cmp	r3, #64	; 0x40
 80065c4:	d10b      	bne.n	80065de <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0201 	bic.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
 8006604:	e041      	b.n	800668a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b60      	cmp	r3, #96	; 0x60
 8006610:	d125      	bne.n	800665e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2220      	movs	r2, #32
 8006616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	d10b      	bne.n	8006646 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0201 	bic.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fe ff0e 	bl	8005478 <HAL_I2C_AbortCpltCallback>
 800665c:	e015      	b.n	800668a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006668:	2b40      	cmp	r3, #64	; 0x40
 800666a:	d10b      	bne.n	8006684 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691a      	ldr	r2, [r3, #16]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7fe feed 	bl	8005464 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10e      	bne.n	80066b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d109      	bne.n	80066b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d104      	bne.n	80066b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066c6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ce:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d113      	bne.n	8006704 <I2C_ITError+0x254>
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	2b28      	cmp	r3, #40	; 0x28
 80066e0:	d110      	bne.n	8006704 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a0a      	ldr	r2, [pc, #40]	; (8006710 <I2C_ITError+0x260>)
 80066e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fe fe92 	bl	8005428 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006704:	bf00      	nop
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	08006715 	.word	0x08006715
 8006710:	ffff0000 	.word	0xffff0000

08006714 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800672e:	4b4b      	ldr	r3, [pc, #300]	; (800685c <I2C_DMAAbort+0x148>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	08db      	lsrs	r3, r3, #3
 8006734:	4a4a      	ldr	r2, [pc, #296]	; (8006860 <I2C_DMAAbort+0x14c>)
 8006736:	fba2 2303 	umull	r2, r3, r2, r3
 800673a:	0a1a      	lsrs	r2, r3, #8
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	00da      	lsls	r2, r3, #3
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	f043 0220 	orr.w	r2, r3, #32
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800675a:	e00a      	b.n	8006772 <I2C_DMAAbort+0x5e>
    }
    count--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3b01      	subs	r3, #1
 8006760:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800676c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006770:	d0ea      	beq.n	8006748 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677e:	2200      	movs	r2, #0
 8006780:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678e:	2200      	movs	r2, #0
 8006790:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2200      	movs	r2, #0
 80067a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b4:	2200      	movs	r2, #0
 80067b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	2200      	movs	r2, #0
 80067c6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0201 	bic.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b60      	cmp	r3, #96	; 0x60
 80067e2:	d10e      	bne.n	8006802 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2200      	movs	r2, #0
 80067f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067fa:	6978      	ldr	r0, [r7, #20]
 80067fc:	f7fe fe3c 	bl	8005478 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006800:	e027      	b.n	8006852 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006802:	7cfb      	ldrb	r3, [r7, #19]
 8006804:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006808:	2b28      	cmp	r3, #40	; 0x28
 800680a:	d117      	bne.n	800683c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0201 	orr.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800682a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	2200      	movs	r2, #0
 8006830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2228      	movs	r2, #40	; 0x28
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800683a:	e007      	b.n	800684c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2220      	movs	r2, #32
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800684c:	6978      	ldr	r0, [r7, #20]
 800684e:	f7fe fe09 	bl	8005464 <HAL_I2C_ErrorCallback>
}
 8006852:	bf00      	nop
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	2000003c 	.word	0x2000003c
 8006860:	14f8b589 	.word	0x14f8b589

08006864 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006870:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	08db      	lsrs	r3, r3, #3
 8006876:	4a13      	ldr	r2, [pc, #76]	; (80068c4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006878:	fba2 2303 	umull	r2, r3, r2, r3
 800687c:	0a1a      	lsrs	r2, r3, #8
 800687e:	4613      	mov	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3b01      	subs	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d107      	bne.n	80068a2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	f043 0220 	orr.w	r2, r3, #32
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e008      	b.n	80068b4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b0:	d0e9      	beq.n	8006886 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	2000003c 	.word	0x2000003c
 80068c4:	14f8b589 	.word	0x14f8b589

080068c8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80068d8:	d103      	bne.n	80068e2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80068e0:	e007      	b.n	80068f2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80068ea:	d102      	bne.n	80068f2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2208      	movs	r2, #8
 80068f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
	...

08006900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e25b      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d075      	beq.n	8006a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800691e:	4ba3      	ldr	r3, [pc, #652]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f003 030c 	and.w	r3, r3, #12
 8006926:	2b04      	cmp	r3, #4
 8006928:	d00c      	beq.n	8006944 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800692a:	4ba0      	ldr	r3, [pc, #640]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006932:	2b08      	cmp	r3, #8
 8006934:	d112      	bne.n	800695c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006936:	4b9d      	ldr	r3, [pc, #628]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800693e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006942:	d10b      	bne.n	800695c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006944:	4b99      	ldr	r3, [pc, #612]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d05b      	beq.n	8006a08 <HAL_RCC_OscConfig+0x108>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d157      	bne.n	8006a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e236      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006964:	d106      	bne.n	8006974 <HAL_RCC_OscConfig+0x74>
 8006966:	4b91      	ldr	r3, [pc, #580]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a90      	ldr	r2, [pc, #576]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 800696c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	e01d      	b.n	80069b0 <HAL_RCC_OscConfig+0xb0>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800697c:	d10c      	bne.n	8006998 <HAL_RCC_OscConfig+0x98>
 800697e:	4b8b      	ldr	r3, [pc, #556]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a8a      	ldr	r2, [pc, #552]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	4b88      	ldr	r3, [pc, #544]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a87      	ldr	r2, [pc, #540]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	e00b      	b.n	80069b0 <HAL_RCC_OscConfig+0xb0>
 8006998:	4b84      	ldr	r3, [pc, #528]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a83      	ldr	r2, [pc, #524]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 800699e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	4b81      	ldr	r3, [pc, #516]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a80      	ldr	r2, [pc, #512]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 80069aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d013      	beq.n	80069e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b8:	f7fd fa62 	bl	8003e80 <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069c0:	f7fd fa5e 	bl	8003e80 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b64      	cmp	r3, #100	; 0x64
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e1fb      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069d2:	4b76      	ldr	r3, [pc, #472]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0f0      	beq.n	80069c0 <HAL_RCC_OscConfig+0xc0>
 80069de:	e014      	b.n	8006a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e0:	f7fd fa4e 	bl	8003e80 <HAL_GetTick>
 80069e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069e8:	f7fd fa4a 	bl	8003e80 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b64      	cmp	r3, #100	; 0x64
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e1e7      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069fa:	4b6c      	ldr	r3, [pc, #432]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1f0      	bne.n	80069e8 <HAL_RCC_OscConfig+0xe8>
 8006a06:	e000      	b.n	8006a0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d063      	beq.n	8006ade <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a16:	4b65      	ldr	r3, [pc, #404]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f003 030c 	and.w	r3, r3, #12
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00b      	beq.n	8006a3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a22:	4b62      	ldr	r3, [pc, #392]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a2a:	2b08      	cmp	r3, #8
 8006a2c:	d11c      	bne.n	8006a68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a2e:	4b5f      	ldr	r3, [pc, #380]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d116      	bne.n	8006a68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a3a:	4b5c      	ldr	r3, [pc, #368]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d005      	beq.n	8006a52 <HAL_RCC_OscConfig+0x152>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d001      	beq.n	8006a52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e1bb      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a52:	4b56      	ldr	r3, [pc, #344]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	4952      	ldr	r1, [pc, #328]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a66:	e03a      	b.n	8006ade <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d020      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a70:	4b4f      	ldr	r3, [pc, #316]	; (8006bb0 <HAL_RCC_OscConfig+0x2b0>)
 8006a72:	2201      	movs	r2, #1
 8006a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a76:	f7fd fa03 	bl	8003e80 <HAL_GetTick>
 8006a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a7c:	e008      	b.n	8006a90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a7e:	f7fd f9ff 	bl	8003e80 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e19c      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a90:	4b46      	ldr	r3, [pc, #280]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f0      	beq.n	8006a7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9c:	4b43      	ldr	r3, [pc, #268]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	4940      	ldr	r1, [pc, #256]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	600b      	str	r3, [r1, #0]
 8006ab0:	e015      	b.n	8006ade <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ab2:	4b3f      	ldr	r3, [pc, #252]	; (8006bb0 <HAL_RCC_OscConfig+0x2b0>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab8:	f7fd f9e2 	bl	8003e80 <HAL_GetTick>
 8006abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ac0:	f7fd f9de 	bl	8003e80 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e17b      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ad2:	4b36      	ldr	r3, [pc, #216]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1f0      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d030      	beq.n	8006b4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d016      	beq.n	8006b20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006af2:	4b30      	ldr	r3, [pc, #192]	; (8006bb4 <HAL_RCC_OscConfig+0x2b4>)
 8006af4:	2201      	movs	r2, #1
 8006af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af8:	f7fd f9c2 	bl	8003e80 <HAL_GetTick>
 8006afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006afe:	e008      	b.n	8006b12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b00:	f7fd f9be 	bl	8003e80 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e15b      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b12:	4b26      	ldr	r3, [pc, #152]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0f0      	beq.n	8006b00 <HAL_RCC_OscConfig+0x200>
 8006b1e:	e015      	b.n	8006b4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b20:	4b24      	ldr	r3, [pc, #144]	; (8006bb4 <HAL_RCC_OscConfig+0x2b4>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b26:	f7fd f9ab 	bl	8003e80 <HAL_GetTick>
 8006b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b2c:	e008      	b.n	8006b40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b2e:	f7fd f9a7 	bl	8003e80 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e144      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b40:	4b1a      	ldr	r3, [pc, #104]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f0      	bne.n	8006b2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 80a0 	beq.w	8006c9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b5e:	4b13      	ldr	r3, [pc, #76]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10f      	bne.n	8006b8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60bb      	str	r3, [r7, #8]
 8006b6e:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	4a0e      	ldr	r2, [pc, #56]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b78:	6413      	str	r3, [r2, #64]	; 0x40
 8006b7a:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <HAL_RCC_OscConfig+0x2ac>)
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b82:	60bb      	str	r3, [r7, #8]
 8006b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b86:	2301      	movs	r3, #1
 8006b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b8a:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <HAL_RCC_OscConfig+0x2b8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d121      	bne.n	8006bda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b96:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <HAL_RCC_OscConfig+0x2b8>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a07      	ldr	r2, [pc, #28]	; (8006bb8 <HAL_RCC_OscConfig+0x2b8>)
 8006b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ba2:	f7fd f96d 	bl	8003e80 <HAL_GetTick>
 8006ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba8:	e011      	b.n	8006bce <HAL_RCC_OscConfig+0x2ce>
 8006baa:	bf00      	nop
 8006bac:	40023800 	.word	0x40023800
 8006bb0:	42470000 	.word	0x42470000
 8006bb4:	42470e80 	.word	0x42470e80
 8006bb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bbc:	f7fd f960 	bl	8003e80 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e0fd      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bce:	4b81      	ldr	r3, [pc, #516]	; (8006dd4 <HAL_RCC_OscConfig+0x4d4>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f0      	beq.n	8006bbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d106      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x2f0>
 8006be2:	4b7d      	ldr	r3, [pc, #500]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be6:	4a7c      	ldr	r2, [pc, #496]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006be8:	f043 0301 	orr.w	r3, r3, #1
 8006bec:	6713      	str	r3, [r2, #112]	; 0x70
 8006bee:	e01c      	b.n	8006c2a <HAL_RCC_OscConfig+0x32a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	2b05      	cmp	r3, #5
 8006bf6:	d10c      	bne.n	8006c12 <HAL_RCC_OscConfig+0x312>
 8006bf8:	4b77      	ldr	r3, [pc, #476]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfc:	4a76      	ldr	r2, [pc, #472]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006bfe:	f043 0304 	orr.w	r3, r3, #4
 8006c02:	6713      	str	r3, [r2, #112]	; 0x70
 8006c04:	4b74      	ldr	r3, [pc, #464]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c08:	4a73      	ldr	r2, [pc, #460]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006c0a:	f043 0301 	orr.w	r3, r3, #1
 8006c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c10:	e00b      	b.n	8006c2a <HAL_RCC_OscConfig+0x32a>
 8006c12:	4b71      	ldr	r3, [pc, #452]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c16:	4a70      	ldr	r2, [pc, #448]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006c18:	f023 0301 	bic.w	r3, r3, #1
 8006c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c1e:	4b6e      	ldr	r3, [pc, #440]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c22:	4a6d      	ldr	r2, [pc, #436]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006c24:	f023 0304 	bic.w	r3, r3, #4
 8006c28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d015      	beq.n	8006c5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c32:	f7fd f925 	bl	8003e80 <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c38:	e00a      	b.n	8006c50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c3a:	f7fd f921 	bl	8003e80 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e0bc      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c50:	4b61      	ldr	r3, [pc, #388]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0ee      	beq.n	8006c3a <HAL_RCC_OscConfig+0x33a>
 8006c5c:	e014      	b.n	8006c88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c5e:	f7fd f90f 	bl	8003e80 <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c64:	e00a      	b.n	8006c7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c66:	f7fd f90b 	bl	8003e80 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e0a6      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c7c:	4b56      	ldr	r3, [pc, #344]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1ee      	bne.n	8006c66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d105      	bne.n	8006c9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c8e:	4b52      	ldr	r3, [pc, #328]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	4a51      	ldr	r2, [pc, #324]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 8092 	beq.w	8006dc8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ca4:	4b4c      	ldr	r3, [pc, #304]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 030c 	and.w	r3, r3, #12
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d05c      	beq.n	8006d6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d141      	bne.n	8006d3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cb8:	4b48      	ldr	r3, [pc, #288]	; (8006ddc <HAL_RCC_OscConfig+0x4dc>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cbe:	f7fd f8df 	bl	8003e80 <HAL_GetTick>
 8006cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cc4:	e008      	b.n	8006cd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cc6:	f7fd f8db 	bl	8003e80 <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d901      	bls.n	8006cd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e078      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cd8:	4b3f      	ldr	r3, [pc, #252]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1f0      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	69da      	ldr	r2, [r3, #28]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	019b      	lsls	r3, r3, #6
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfa:	085b      	lsrs	r3, r3, #1
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	041b      	lsls	r3, r3, #16
 8006d00:	431a      	orrs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d06:	061b      	lsls	r3, r3, #24
 8006d08:	4933      	ldr	r1, [pc, #204]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d0e:	4b33      	ldr	r3, [pc, #204]	; (8006ddc <HAL_RCC_OscConfig+0x4dc>)
 8006d10:	2201      	movs	r2, #1
 8006d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d14:	f7fd f8b4 	bl	8003e80 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d1c:	f7fd f8b0 	bl	8003e80 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e04d      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d2e:	4b2a      	ldr	r3, [pc, #168]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0f0      	beq.n	8006d1c <HAL_RCC_OscConfig+0x41c>
 8006d3a:	e045      	b.n	8006dc8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d3c:	4b27      	ldr	r3, [pc, #156]	; (8006ddc <HAL_RCC_OscConfig+0x4dc>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d42:	f7fd f89d 	bl	8003e80 <HAL_GetTick>
 8006d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d48:	e008      	b.n	8006d5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d4a:	f7fd f899 	bl	8003e80 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d901      	bls.n	8006d5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e036      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d5c:	4b1e      	ldr	r3, [pc, #120]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1f0      	bne.n	8006d4a <HAL_RCC_OscConfig+0x44a>
 8006d68:	e02e      	b.n	8006dc8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d101      	bne.n	8006d76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e029      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d76:	4b18      	ldr	r3, [pc, #96]	; (8006dd8 <HAL_RCC_OscConfig+0x4d8>)
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d11c      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d115      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d9e:	4013      	ands	r3, r2
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d10d      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d106      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d001      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e000      	b.n	8006dca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	40007000 	.word	0x40007000
 8006dd8:	40023800 	.word	0x40023800
 8006ddc:	42470060 	.word	0x42470060

08006de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e0cc      	b.n	8006f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006df4:	4b68      	ldr	r3, [pc, #416]	; (8006f98 <HAL_RCC_ClockConfig+0x1b8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d90c      	bls.n	8006e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e02:	4b65      	ldr	r3, [pc, #404]	; (8006f98 <HAL_RCC_ClockConfig+0x1b8>)
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e0a:	4b63      	ldr	r3, [pc, #396]	; (8006f98 <HAL_RCC_ClockConfig+0x1b8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 030f 	and.w	r3, r3, #15
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d001      	beq.n	8006e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e0b8      	b.n	8006f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d020      	beq.n	8006e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e34:	4b59      	ldr	r3, [pc, #356]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	4a58      	ldr	r2, [pc, #352]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e4c:	4b53      	ldr	r3, [pc, #332]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	4a52      	ldr	r2, [pc, #328]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e58:	4b50      	ldr	r3, [pc, #320]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	494d      	ldr	r1, [pc, #308]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d044      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d107      	bne.n	8006e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e7e:	4b47      	ldr	r3, [pc, #284]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d119      	bne.n	8006ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e07f      	b.n	8006f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d003      	beq.n	8006e9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d107      	bne.n	8006eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e9e:	4b3f      	ldr	r3, [pc, #252]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d109      	bne.n	8006ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e06f      	b.n	8006f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eae:	4b3b      	ldr	r3, [pc, #236]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e067      	b.n	8006f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ebe:	4b37      	ldr	r3, [pc, #220]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f023 0203 	bic.w	r2, r3, #3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	4934      	ldr	r1, [pc, #208]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ed0:	f7fc ffd6 	bl	8003e80 <HAL_GetTick>
 8006ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ed6:	e00a      	b.n	8006eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ed8:	f7fc ffd2 	bl	8003e80 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e04f      	b.n	8006f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eee:	4b2b      	ldr	r3, [pc, #172]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 020c 	and.w	r2, r3, #12
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d1eb      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f00:	4b25      	ldr	r3, [pc, #148]	; (8006f98 <HAL_RCC_ClockConfig+0x1b8>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 030f 	and.w	r3, r3, #15
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d20c      	bcs.n	8006f28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f0e:	4b22      	ldr	r3, [pc, #136]	; (8006f98 <HAL_RCC_ClockConfig+0x1b8>)
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f16:	4b20      	ldr	r3, [pc, #128]	; (8006f98 <HAL_RCC_ClockConfig+0x1b8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 030f 	and.w	r3, r3, #15
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d001      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e032      	b.n	8006f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d008      	beq.n	8006f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f34:	4b19      	ldr	r3, [pc, #100]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	4916      	ldr	r1, [pc, #88]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d009      	beq.n	8006f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f52:	4b12      	ldr	r3, [pc, #72]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	490e      	ldr	r1, [pc, #56]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f66:	f000 f821 	bl	8006fac <HAL_RCC_GetSysClockFreq>
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	4b0b      	ldr	r3, [pc, #44]	; (8006f9c <HAL_RCC_ClockConfig+0x1bc>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	091b      	lsrs	r3, r3, #4
 8006f72:	f003 030f 	and.w	r3, r3, #15
 8006f76:	4a0a      	ldr	r2, [pc, #40]	; (8006fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f78:	5cd3      	ldrb	r3, [r2, r3]
 8006f7a:	fa21 f303 	lsr.w	r3, r1, r3
 8006f7e:	4a09      	ldr	r2, [pc, #36]	; (8006fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f82:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fc ff36 	bl	8003df8 <HAL_InitTick>

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	40023c00 	.word	0x40023c00
 8006f9c:	40023800 	.word	0x40023800
 8006fa0:	0800a390 	.word	0x0800a390
 8006fa4:	2000003c 	.word	0x2000003c
 8006fa8:	20000040 	.word	0x20000040

08006fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	607b      	str	r3, [r7, #4]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fc2:	4b63      	ldr	r3, [pc, #396]	; (8007150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f003 030c 	and.w	r3, r3, #12
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d007      	beq.n	8006fde <HAL_RCC_GetSysClockFreq+0x32>
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	d008      	beq.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x38>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f040 80b4 	bne.w	8007140 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fd8:	4b5e      	ldr	r3, [pc, #376]	; (8007154 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006fda:	60bb      	str	r3, [r7, #8]
       break;
 8006fdc:	e0b3      	b.n	8007146 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fde:	4b5e      	ldr	r3, [pc, #376]	; (8007158 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006fe0:	60bb      	str	r3, [r7, #8]
      break;
 8006fe2:	e0b0      	b.n	8007146 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fe4:	4b5a      	ldr	r3, [pc, #360]	; (8007150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fee:	4b58      	ldr	r3, [pc, #352]	; (8007150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d04a      	beq.n	8007090 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ffa:	4b55      	ldr	r3, [pc, #340]	; (8007150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	099b      	lsrs	r3, r3, #6
 8007000:	f04f 0400 	mov.w	r4, #0
 8007004:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	ea03 0501 	and.w	r5, r3, r1
 8007010:	ea04 0602 	and.w	r6, r4, r2
 8007014:	4629      	mov	r1, r5
 8007016:	4632      	mov	r2, r6
 8007018:	f04f 0300 	mov.w	r3, #0
 800701c:	f04f 0400 	mov.w	r4, #0
 8007020:	0154      	lsls	r4, r2, #5
 8007022:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007026:	014b      	lsls	r3, r1, #5
 8007028:	4619      	mov	r1, r3
 800702a:	4622      	mov	r2, r4
 800702c:	1b49      	subs	r1, r1, r5
 800702e:	eb62 0206 	sbc.w	r2, r2, r6
 8007032:	f04f 0300 	mov.w	r3, #0
 8007036:	f04f 0400 	mov.w	r4, #0
 800703a:	0194      	lsls	r4, r2, #6
 800703c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007040:	018b      	lsls	r3, r1, #6
 8007042:	1a5b      	subs	r3, r3, r1
 8007044:	eb64 0402 	sbc.w	r4, r4, r2
 8007048:	f04f 0100 	mov.w	r1, #0
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	00e2      	lsls	r2, r4, #3
 8007052:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007056:	00d9      	lsls	r1, r3, #3
 8007058:	460b      	mov	r3, r1
 800705a:	4614      	mov	r4, r2
 800705c:	195b      	adds	r3, r3, r5
 800705e:	eb44 0406 	adc.w	r4, r4, r6
 8007062:	f04f 0100 	mov.w	r1, #0
 8007066:	f04f 0200 	mov.w	r2, #0
 800706a:	0262      	lsls	r2, r4, #9
 800706c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007070:	0259      	lsls	r1, r3, #9
 8007072:	460b      	mov	r3, r1
 8007074:	4614      	mov	r4, r2
 8007076:	4618      	mov	r0, r3
 8007078:	4621      	mov	r1, r4
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f04f 0400 	mov.w	r4, #0
 8007080:	461a      	mov	r2, r3
 8007082:	4623      	mov	r3, r4
 8007084:	f7f9 fe72 	bl	8000d6c <__aeabi_uldivmod>
 8007088:	4603      	mov	r3, r0
 800708a:	460c      	mov	r4, r1
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	e049      	b.n	8007124 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007090:	4b2f      	ldr	r3, [pc, #188]	; (8007150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	099b      	lsrs	r3, r3, #6
 8007096:	f04f 0400 	mov.w	r4, #0
 800709a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	ea03 0501 	and.w	r5, r3, r1
 80070a6:	ea04 0602 	and.w	r6, r4, r2
 80070aa:	4629      	mov	r1, r5
 80070ac:	4632      	mov	r2, r6
 80070ae:	f04f 0300 	mov.w	r3, #0
 80070b2:	f04f 0400 	mov.w	r4, #0
 80070b6:	0154      	lsls	r4, r2, #5
 80070b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80070bc:	014b      	lsls	r3, r1, #5
 80070be:	4619      	mov	r1, r3
 80070c0:	4622      	mov	r2, r4
 80070c2:	1b49      	subs	r1, r1, r5
 80070c4:	eb62 0206 	sbc.w	r2, r2, r6
 80070c8:	f04f 0300 	mov.w	r3, #0
 80070cc:	f04f 0400 	mov.w	r4, #0
 80070d0:	0194      	lsls	r4, r2, #6
 80070d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80070d6:	018b      	lsls	r3, r1, #6
 80070d8:	1a5b      	subs	r3, r3, r1
 80070da:	eb64 0402 	sbc.w	r4, r4, r2
 80070de:	f04f 0100 	mov.w	r1, #0
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	00e2      	lsls	r2, r4, #3
 80070e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80070ec:	00d9      	lsls	r1, r3, #3
 80070ee:	460b      	mov	r3, r1
 80070f0:	4614      	mov	r4, r2
 80070f2:	195b      	adds	r3, r3, r5
 80070f4:	eb44 0406 	adc.w	r4, r4, r6
 80070f8:	f04f 0100 	mov.w	r1, #0
 80070fc:	f04f 0200 	mov.w	r2, #0
 8007100:	02a2      	lsls	r2, r4, #10
 8007102:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007106:	0299      	lsls	r1, r3, #10
 8007108:	460b      	mov	r3, r1
 800710a:	4614      	mov	r4, r2
 800710c:	4618      	mov	r0, r3
 800710e:	4621      	mov	r1, r4
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f04f 0400 	mov.w	r4, #0
 8007116:	461a      	mov	r2, r3
 8007118:	4623      	mov	r3, r4
 800711a:	f7f9 fe27 	bl	8000d6c <__aeabi_uldivmod>
 800711e:	4603      	mov	r3, r0
 8007120:	460c      	mov	r4, r1
 8007122:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007124:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	0c1b      	lsrs	r3, r3, #16
 800712a:	f003 0303 	and.w	r3, r3, #3
 800712e:	3301      	adds	r3, #1
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	fbb2 f3f3 	udiv	r3, r2, r3
 800713c:	60bb      	str	r3, [r7, #8]
      break;
 800713e:	e002      	b.n	8007146 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007140:	4b04      	ldr	r3, [pc, #16]	; (8007154 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007142:	60bb      	str	r3, [r7, #8]
      break;
 8007144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007146:	68bb      	ldr	r3, [r7, #8]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007150:	40023800 	.word	0x40023800
 8007154:	00f42400 	.word	0x00f42400
 8007158:	007a1200 	.word	0x007a1200

0800715c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007160:	4b03      	ldr	r3, [pc, #12]	; (8007170 <HAL_RCC_GetHCLKFreq+0x14>)
 8007162:	681b      	ldr	r3, [r3, #0]
}
 8007164:	4618      	mov	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	2000003c 	.word	0x2000003c

08007174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007178:	f7ff fff0 	bl	800715c <HAL_RCC_GetHCLKFreq>
 800717c:	4601      	mov	r1, r0
 800717e:	4b05      	ldr	r3, [pc, #20]	; (8007194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	0a9b      	lsrs	r3, r3, #10
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	4a03      	ldr	r2, [pc, #12]	; (8007198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800718a:	5cd3      	ldrb	r3, [r2, r3]
 800718c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007190:	4618      	mov	r0, r3
 8007192:	bd80      	pop	{r7, pc}
 8007194:	40023800 	.word	0x40023800
 8007198:	0800a3a0 	.word	0x0800a3a0

0800719c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071a0:	f7ff ffdc 	bl	800715c <HAL_RCC_GetHCLKFreq>
 80071a4:	4601      	mov	r1, r0
 80071a6:	4b05      	ldr	r3, [pc, #20]	; (80071bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	0b5b      	lsrs	r3, r3, #13
 80071ac:	f003 0307 	and.w	r3, r3, #7
 80071b0:	4a03      	ldr	r2, [pc, #12]	; (80071c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071b2:	5cd3      	ldrb	r3, [r2, r3]
 80071b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	40023800 	.word	0x40023800
 80071c0:	0800a3a0 	.word	0x0800a3a0

080071c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e01d      	b.n	8007212 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d106      	bne.n	80071f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7fc fba6 	bl	800393c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3304      	adds	r3, #4
 8007200:	4619      	mov	r1, r3
 8007202:	4610      	mov	r0, r2
 8007204:	f000 fc26 	bl	8007a54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800721a:	b480      	push	{r7}
 800721c:	b085      	sub	sp, #20
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2202      	movs	r2, #2
 8007226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b06      	cmp	r3, #6
 800723a:	d007      	beq.n	800724c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0201 	orr.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007262:	b480      	push	{r7}
 8007264:	b085      	sub	sp, #20
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f042 0201 	orr.w	r2, r2, #1
 8007278:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f003 0307 	and.w	r3, r3, #7
 8007284:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b06      	cmp	r3, #6
 800728a:	d007      	beq.n	800729c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0201 	orr.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e01d      	b.n	80072f8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d106      	bne.n	80072d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7fc fb77 	bl	80039c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2202      	movs	r2, #2
 80072da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3304      	adds	r3, #4
 80072e6:	4619      	mov	r1, r3
 80072e8:	4610      	mov	r0, r2
 80072ea:	f000 fbb3 	bl	8007a54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2201      	movs	r2, #1
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fe44 	bl	8007fa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a10      	ldr	r2, [pc, #64]	; (8007360 <HAL_TIM_PWM_Start+0x60>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d107      	bne.n	8007332 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007330:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b06      	cmp	r3, #6
 8007342:	d007      	beq.n	8007354 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	40010000 	.word	0x40010000

08007364 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e083      	b.n	8007480 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d106      	bne.n	8007392 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7fc fa8d 	bl	80038ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2202      	movs	r2, #2
 8007396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6812      	ldr	r2, [r2, #0]
 80073a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073a8:	f023 0307 	bic.w	r3, r3, #7
 80073ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	3304      	adds	r3, #4
 80073b6:	4619      	mov	r1, r3
 80073b8:	4610      	mov	r0, r2
 80073ba:	f000 fb4b 	bl	8007a54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e6:	f023 0303 	bic.w	r3, r3, #3
 80073ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	021b      	lsls	r3, r3, #8
 80073f6:	4313      	orrs	r3, r2
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007404:	f023 030c 	bic.w	r3, r3, #12
 8007408:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007410:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007414:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	4313      	orrs	r3, r2
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	4313      	orrs	r3, r2
 8007426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	011a      	lsls	r2, r3, #4
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	031b      	lsls	r3, r3, #12
 8007434:	4313      	orrs	r3, r2
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	4313      	orrs	r3, r2
 800743a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007442:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800744a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	011b      	lsls	r3, r3, #4
 8007456:	4313      	orrs	r3, r2
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <HAL_TIM_Encoder_Start+0x16>
 8007498:	2b04      	cmp	r3, #4
 800749a:	d008      	beq.n	80074ae <HAL_TIM_Encoder_Start+0x26>
 800749c:	e00f      	b.n	80074be <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2201      	movs	r2, #1
 80074a4:	2100      	movs	r1, #0
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fd7a 	bl	8007fa0 <TIM_CCxChannelCmd>
      break;
 80074ac:	e016      	b.n	80074dc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2201      	movs	r2, #1
 80074b4:	2104      	movs	r1, #4
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fd72 	bl	8007fa0 <TIM_CCxChannelCmd>
      break;
 80074bc:	e00e      	b.n	80074dc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2201      	movs	r2, #1
 80074c4:	2100      	movs	r1, #0
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fd6a 	bl	8007fa0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2201      	movs	r2, #1
 80074d2:	2104      	movs	r1, #4
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fd63 	bl	8007fa0 <TIM_CCxChannelCmd>
      break;
 80074da:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f042 0201 	orr.w	r2, r2, #1
 80074ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b082      	sub	sp, #8
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b02      	cmp	r3, #2
 800750a:	d122      	bne.n	8007552 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b02      	cmp	r3, #2
 8007518:	d11b      	bne.n	8007552 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f06f 0202 	mvn.w	r2, #2
 8007522:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	f003 0303 	and.w	r3, r3, #3
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fa6c 	bl	8007a16 <HAL_TIM_IC_CaptureCallback>
 800753e:	e005      	b.n	800754c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fa5e 	bl	8007a02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fa6f 	bl	8007a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b04      	cmp	r3, #4
 800755e:	d122      	bne.n	80075a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f003 0304 	and.w	r3, r3, #4
 800756a:	2b04      	cmp	r3, #4
 800756c:	d11b      	bne.n	80075a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f06f 0204 	mvn.w	r2, #4
 8007576:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2202      	movs	r2, #2
 800757c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fa42 	bl	8007a16 <HAL_TIM_IC_CaptureCallback>
 8007592:	e005      	b.n	80075a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fa34 	bl	8007a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fa45 	bl	8007a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	f003 0308 	and.w	r3, r3, #8
 80075b0:	2b08      	cmp	r3, #8
 80075b2:	d122      	bne.n	80075fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f003 0308 	and.w	r3, r3, #8
 80075be:	2b08      	cmp	r3, #8
 80075c0:	d11b      	bne.n	80075fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f06f 0208 	mvn.w	r2, #8
 80075ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2204      	movs	r2, #4
 80075d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	f003 0303 	and.w	r3, r3, #3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fa18 	bl	8007a16 <HAL_TIM_IC_CaptureCallback>
 80075e6:	e005      	b.n	80075f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fa0a 	bl	8007a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fa1b 	bl	8007a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b10      	cmp	r3, #16
 8007606:	d122      	bne.n	800764e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f003 0310 	and.w	r3, r3, #16
 8007612:	2b10      	cmp	r3, #16
 8007614:	d11b      	bne.n	800764e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f06f 0210 	mvn.w	r2, #16
 800761e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2208      	movs	r2, #8
 8007624:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f9ee 	bl	8007a16 <HAL_TIM_IC_CaptureCallback>
 800763a:	e005      	b.n	8007648 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f9e0 	bl	8007a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f9f1 	bl	8007a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b01      	cmp	r3, #1
 800765a:	d10e      	bne.n	800767a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b01      	cmp	r3, #1
 8007668:	d107      	bne.n	800767a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f06f 0201 	mvn.w	r2, #1
 8007672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7fa f919 	bl	80018ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007684:	2b80      	cmp	r3, #128	; 0x80
 8007686:	d10e      	bne.n	80076a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007692:	2b80      	cmp	r3, #128	; 0x80
 8007694:	d107      	bne.n	80076a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800769e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fd1b 	bl	80080dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b0:	2b40      	cmp	r3, #64	; 0x40
 80076b2:	d10e      	bne.n	80076d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076be:	2b40      	cmp	r3, #64	; 0x40
 80076c0:	d107      	bne.n	80076d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f9b6 	bl	8007a3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	f003 0320 	and.w	r3, r3, #32
 80076dc:	2b20      	cmp	r3, #32
 80076de:	d10e      	bne.n	80076fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f003 0320 	and.w	r3, r3, #32
 80076ea:	2b20      	cmp	r3, #32
 80076ec:	d107      	bne.n	80076fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f06f 0220 	mvn.w	r2, #32
 80076f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fce5 	bl	80080c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800771e:	2302      	movs	r3, #2
 8007720:	e0b4      	b.n	800788c <HAL_TIM_PWM_ConfigChannel+0x184>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2202      	movs	r2, #2
 800772e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2b0c      	cmp	r3, #12
 8007736:	f200 809f 	bhi.w	8007878 <HAL_TIM_PWM_ConfigChannel+0x170>
 800773a:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800773c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007740:	08007775 	.word	0x08007775
 8007744:	08007879 	.word	0x08007879
 8007748:	08007879 	.word	0x08007879
 800774c:	08007879 	.word	0x08007879
 8007750:	080077b5 	.word	0x080077b5
 8007754:	08007879 	.word	0x08007879
 8007758:	08007879 	.word	0x08007879
 800775c:	08007879 	.word	0x08007879
 8007760:	080077f7 	.word	0x080077f7
 8007764:	08007879 	.word	0x08007879
 8007768:	08007879 	.word	0x08007879
 800776c:	08007879 	.word	0x08007879
 8007770:	08007837 	.word	0x08007837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68b9      	ldr	r1, [r7, #8]
 800777a:	4618      	mov	r0, r3
 800777c:	f000 f9ea 	bl	8007b54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699a      	ldr	r2, [r3, #24]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f042 0208 	orr.w	r2, r2, #8
 800778e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699a      	ldr	r2, [r3, #24]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0204 	bic.w	r2, r2, #4
 800779e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6999      	ldr	r1, [r3, #24]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	691a      	ldr	r2, [r3, #16]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	619a      	str	r2, [r3, #24]
      break;
 80077b2:	e062      	b.n	800787a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68b9      	ldr	r1, [r7, #8]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 fa30 	bl	8007c20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699a      	ldr	r2, [r3, #24]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699a      	ldr	r2, [r3, #24]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6999      	ldr	r1, [r3, #24]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	021a      	lsls	r2, r3, #8
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	619a      	str	r2, [r3, #24]
      break;
 80077f4:	e041      	b.n	800787a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68b9      	ldr	r1, [r7, #8]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 fa7b 	bl	8007cf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69da      	ldr	r2, [r3, #28]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f042 0208 	orr.w	r2, r2, #8
 8007810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69da      	ldr	r2, [r3, #28]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0204 	bic.w	r2, r2, #4
 8007820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	69d9      	ldr	r1, [r3, #28]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	691a      	ldr	r2, [r3, #16]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	61da      	str	r2, [r3, #28]
      break;
 8007834:	e021      	b.n	800787a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fac5 	bl	8007dcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69da      	ldr	r2, [r3, #28]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69da      	ldr	r2, [r3, #28]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69d9      	ldr	r1, [r3, #28]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	021a      	lsls	r2, r3, #8
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	61da      	str	r2, [r3, #28]
      break;
 8007876:	e000      	b.n	800787a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007878:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_TIM_ConfigClockSource+0x18>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e0a6      	b.n	80079fa <HAL_TIM_ConfigClockSource+0x166>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80078ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b40      	cmp	r3, #64	; 0x40
 80078e2:	d067      	beq.n	80079b4 <HAL_TIM_ConfigClockSource+0x120>
 80078e4:	2b40      	cmp	r3, #64	; 0x40
 80078e6:	d80b      	bhi.n	8007900 <HAL_TIM_ConfigClockSource+0x6c>
 80078e8:	2b10      	cmp	r3, #16
 80078ea:	d073      	beq.n	80079d4 <HAL_TIM_ConfigClockSource+0x140>
 80078ec:	2b10      	cmp	r3, #16
 80078ee:	d802      	bhi.n	80078f6 <HAL_TIM_ConfigClockSource+0x62>
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d06f      	beq.n	80079d4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80078f4:	e078      	b.n	80079e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d06c      	beq.n	80079d4 <HAL_TIM_ConfigClockSource+0x140>
 80078fa:	2b30      	cmp	r3, #48	; 0x30
 80078fc:	d06a      	beq.n	80079d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80078fe:	e073      	b.n	80079e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007900:	2b70      	cmp	r3, #112	; 0x70
 8007902:	d00d      	beq.n	8007920 <HAL_TIM_ConfigClockSource+0x8c>
 8007904:	2b70      	cmp	r3, #112	; 0x70
 8007906:	d804      	bhi.n	8007912 <HAL_TIM_ConfigClockSource+0x7e>
 8007908:	2b50      	cmp	r3, #80	; 0x50
 800790a:	d033      	beq.n	8007974 <HAL_TIM_ConfigClockSource+0xe0>
 800790c:	2b60      	cmp	r3, #96	; 0x60
 800790e:	d041      	beq.n	8007994 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007910:	e06a      	b.n	80079e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007916:	d066      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0x152>
 8007918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800791c:	d017      	beq.n	800794e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800791e:	e063      	b.n	80079e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	6899      	ldr	r1, [r3, #8]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f000 fb16 	bl	8007f60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007942:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	609a      	str	r2, [r3, #8]
      break;
 800794c:	e04c      	b.n	80079e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	6899      	ldr	r1, [r3, #8]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f000 faff 	bl	8007f60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007970:	609a      	str	r2, [r3, #8]
      break;
 8007972:	e039      	b.n	80079e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6818      	ldr	r0, [r3, #0]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	6859      	ldr	r1, [r3, #4]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	461a      	mov	r2, r3
 8007982:	f000 fa73 	bl	8007e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2150      	movs	r1, #80	; 0x50
 800798c:	4618      	mov	r0, r3
 800798e:	f000 facc 	bl	8007f2a <TIM_ITRx_SetConfig>
      break;
 8007992:	e029      	b.n	80079e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6818      	ldr	r0, [r3, #0]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	6859      	ldr	r1, [r3, #4]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	461a      	mov	r2, r3
 80079a2:	f000 fa92 	bl	8007eca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2160      	movs	r1, #96	; 0x60
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 fabc 	bl	8007f2a <TIM_ITRx_SetConfig>
      break;
 80079b2:	e019      	b.n	80079e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6818      	ldr	r0, [r3, #0]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	6859      	ldr	r1, [r3, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	461a      	mov	r2, r3
 80079c2:	f000 fa53 	bl	8007e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2140      	movs	r1, #64	; 0x40
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 faac 	bl	8007f2a <TIM_ITRx_SetConfig>
      break;
 80079d2:	e009      	b.n	80079e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4619      	mov	r1, r3
 80079de:	4610      	mov	r0, r2
 80079e0:	f000 faa3 	bl	8007f2a <TIM_ITRx_SetConfig>
      break;
 80079e4:	e000      	b.n	80079e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80079e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a0a:	bf00      	nop
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a1e:	bf00      	nop
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a32:	bf00      	nop
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
	...

08007a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a34      	ldr	r2, [pc, #208]	; (8007b38 <TIM_Base_SetConfig+0xe4>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00f      	beq.n	8007a8c <TIM_Base_SetConfig+0x38>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a72:	d00b      	beq.n	8007a8c <TIM_Base_SetConfig+0x38>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a31      	ldr	r2, [pc, #196]	; (8007b3c <TIM_Base_SetConfig+0xe8>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d007      	beq.n	8007a8c <TIM_Base_SetConfig+0x38>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a30      	ldr	r2, [pc, #192]	; (8007b40 <TIM_Base_SetConfig+0xec>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d003      	beq.n	8007a8c <TIM_Base_SetConfig+0x38>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a2f      	ldr	r2, [pc, #188]	; (8007b44 <TIM_Base_SetConfig+0xf0>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d108      	bne.n	8007a9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a25      	ldr	r2, [pc, #148]	; (8007b38 <TIM_Base_SetConfig+0xe4>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d01b      	beq.n	8007ade <TIM_Base_SetConfig+0x8a>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aac:	d017      	beq.n	8007ade <TIM_Base_SetConfig+0x8a>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a22      	ldr	r2, [pc, #136]	; (8007b3c <TIM_Base_SetConfig+0xe8>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d013      	beq.n	8007ade <TIM_Base_SetConfig+0x8a>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a21      	ldr	r2, [pc, #132]	; (8007b40 <TIM_Base_SetConfig+0xec>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00f      	beq.n	8007ade <TIM_Base_SetConfig+0x8a>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a20      	ldr	r2, [pc, #128]	; (8007b44 <TIM_Base_SetConfig+0xf0>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00b      	beq.n	8007ade <TIM_Base_SetConfig+0x8a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a1f      	ldr	r2, [pc, #124]	; (8007b48 <TIM_Base_SetConfig+0xf4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d007      	beq.n	8007ade <TIM_Base_SetConfig+0x8a>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a1e      	ldr	r2, [pc, #120]	; (8007b4c <TIM_Base_SetConfig+0xf8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d003      	beq.n	8007ade <TIM_Base_SetConfig+0x8a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a1d      	ldr	r2, [pc, #116]	; (8007b50 <TIM_Base_SetConfig+0xfc>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d108      	bne.n	8007af0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a08      	ldr	r2, [pc, #32]	; (8007b38 <TIM_Base_SetConfig+0xe4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d103      	bne.n	8007b24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	691a      	ldr	r2, [r3, #16]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	615a      	str	r2, [r3, #20]
}
 8007b2a:	bf00      	nop
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	40010000 	.word	0x40010000
 8007b3c:	40000400 	.word	0x40000400
 8007b40:	40000800 	.word	0x40000800
 8007b44:	40000c00 	.word	0x40000c00
 8007b48:	40014000 	.word	0x40014000
 8007b4c:	40014400 	.word	0x40014400
 8007b50:	40014800 	.word	0x40014800

08007b54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	f023 0201 	bic.w	r2, r3, #1
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0303 	bic.w	r3, r3, #3
 8007b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f023 0302 	bic.w	r3, r3, #2
 8007b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a1c      	ldr	r2, [pc, #112]	; (8007c1c <TIM_OC1_SetConfig+0xc8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d10c      	bne.n	8007bca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f023 0308 	bic.w	r3, r3, #8
 8007bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f023 0304 	bic.w	r3, r3, #4
 8007bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a13      	ldr	r2, [pc, #76]	; (8007c1c <TIM_OC1_SetConfig+0xc8>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d111      	bne.n	8007bf6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	621a      	str	r2, [r3, #32]
}
 8007c10:	bf00      	nop
 8007c12:	371c      	adds	r7, #28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	40010000 	.word	0x40010000

08007c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	f023 0210 	bic.w	r2, r3, #16
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	021b      	lsls	r3, r3, #8
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f023 0320 	bic.w	r3, r3, #32
 8007c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	011b      	lsls	r3, r3, #4
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a1e      	ldr	r2, [pc, #120]	; (8007cf4 <TIM_OC2_SetConfig+0xd4>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d10d      	bne.n	8007c9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	011b      	lsls	r3, r3, #4
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a15      	ldr	r2, [pc, #84]	; (8007cf4 <TIM_OC2_SetConfig+0xd4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d113      	bne.n	8007ccc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007caa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	621a      	str	r2, [r3, #32]
}
 8007ce6:	bf00      	nop
 8007ce8:	371c      	adds	r7, #28
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	40010000 	.word	0x40010000

08007cf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 0303 	bic.w	r3, r3, #3
 8007d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	021b      	lsls	r3, r3, #8
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a1d      	ldr	r2, [pc, #116]	; (8007dc8 <TIM_OC3_SetConfig+0xd0>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d10d      	bne.n	8007d72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	021b      	lsls	r3, r3, #8
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a14      	ldr	r2, [pc, #80]	; (8007dc8 <TIM_OC3_SetConfig+0xd0>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d113      	bne.n	8007da2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	621a      	str	r2, [r3, #32]
}
 8007dbc:	bf00      	nop
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	40010000 	.word	0x40010000

08007dcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	021b      	lsls	r3, r3, #8
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	031b      	lsls	r3, r3, #12
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a10      	ldr	r2, [pc, #64]	; (8007e68 <TIM_OC4_SetConfig+0x9c>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d109      	bne.n	8007e40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	019b      	lsls	r3, r3, #6
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	621a      	str	r2, [r3, #32]
}
 8007e5a:	bf00      	nop
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	40010000 	.word	0x40010000

08007e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	f023 0201 	bic.w	r2, r3, #1
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	011b      	lsls	r3, r3, #4
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f023 030a 	bic.w	r3, r3, #10
 8007ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	621a      	str	r2, [r3, #32]
}
 8007ebe:	bf00      	nop
 8007ec0:	371c      	adds	r7, #28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b087      	sub	sp, #28
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f023 0210 	bic.w	r2, r3, #16
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	031b      	lsls	r3, r3, #12
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	011b      	lsls	r3, r3, #4
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	621a      	str	r2, [r3, #32]
}
 8007f1e:	bf00      	nop
 8007f20:	371c      	adds	r7, #28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b085      	sub	sp, #20
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	f043 0307 	orr.w	r3, r3, #7
 8007f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	609a      	str	r2, [r3, #8]
}
 8007f54:	bf00      	nop
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b087      	sub	sp, #28
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	021a      	lsls	r2, r3, #8
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	431a      	orrs	r2, r3
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	609a      	str	r2, [r3, #8]
}
 8007f94:	bf00      	nop
 8007f96:	371c      	adds	r7, #28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f003 031f 	and.w	r3, r3, #31
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6a1a      	ldr	r2, [r3, #32]
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	401a      	ands	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a1a      	ldr	r2, [r3, #32]
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f003 031f 	and.w	r3, r3, #31
 8007fd2:	6879      	ldr	r1, [r7, #4]
 8007fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	621a      	str	r2, [r3, #32]
}
 8007fde:	bf00      	nop
 8007fe0:	371c      	adds	r7, #28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
	...

08007fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d101      	bne.n	8008004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008000:	2302      	movs	r3, #2
 8008002:	e050      	b.n	80080a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2202      	movs	r2, #2
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	4313      	orrs	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a1c      	ldr	r2, [pc, #112]	; (80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d018      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008050:	d013      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a18      	ldr	r2, [pc, #96]	; (80080b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00e      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a16      	ldr	r2, [pc, #88]	; (80080bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d009      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a15      	ldr	r2, [pc, #84]	; (80080c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d004      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a13      	ldr	r2, [pc, #76]	; (80080c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d10c      	bne.n	8008094 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	4313      	orrs	r3, r2
 800808a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	40010000 	.word	0x40010000
 80080b8:	40000400 	.word	0x40000400
 80080bc:	40000800 	.word	0x40000800
 80080c0:	40000c00 	.word	0x40000c00
 80080c4:	40014000 	.word	0x40014000

080080c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e03f      	b.n	8008182 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d106      	bne.n	800811c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7fb fcb0 	bl	8003a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2224      	movs	r2, #36	; 0x24
 8008120:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fc41 	bl	80089bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	691a      	ldr	r2, [r3, #16]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	695a      	ldr	r2, [r3, #20]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68da      	ldr	r2, [r3, #12]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2220      	movs	r2, #32
 8008174:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2220      	movs	r2, #32
 800817c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
	...

0800818c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	4613      	mov	r3, r2
 8008198:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b20      	cmp	r3, #32
 80081a4:	d153      	bne.n	800824e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <HAL_UART_Transmit_DMA+0x26>
 80081ac:	88fb      	ldrh	r3, [r7, #6]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e04c      	b.n	8008250 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d101      	bne.n	80081c4 <HAL_UART_Transmit_DMA+0x38>
 80081c0:	2302      	movs	r3, #2
 80081c2:	e045      	b.n	8008250 <HAL_UART_Transmit_DMA+0xc4>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	88fa      	ldrh	r2, [r7, #6]
 80081d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	88fa      	ldrh	r2, [r7, #6]
 80081dc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2221      	movs	r2, #33	; 0x21
 80081e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f0:	4a19      	ldr	r2, [pc, #100]	; (8008258 <HAL_UART_Transmit_DMA+0xcc>)
 80081f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f8:	4a18      	ldr	r2, [pc, #96]	; (800825c <HAL_UART_Transmit_DMA+0xd0>)
 80081fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008200:	4a17      	ldr	r2, [pc, #92]	; (8008260 <HAL_UART_Transmit_DMA+0xd4>)
 8008202:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008208:	2200      	movs	r2, #0
 800820a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800820c:	f107 0308 	add.w	r3, r7, #8
 8008210:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	6819      	ldr	r1, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3304      	adds	r3, #4
 8008220:	461a      	mov	r2, r3
 8008222:	88fb      	ldrh	r3, [r7, #6]
 8008224:	f7fc f81a 	bl	800425c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008230:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	695a      	ldr	r2, [r3, #20]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008248:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	e000      	b.n	8008250 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800824e:	2302      	movs	r3, #2
  }
}
 8008250:	4618      	mov	r0, r3
 8008252:	3718      	adds	r7, #24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	080085c9 	.word	0x080085c9
 800825c:	0800861b 	.word	0x0800861b
 8008260:	080086bb 	.word	0x080086bb

08008264 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	4613      	mov	r3, r2
 8008270:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b20      	cmp	r3, #32
 800827c:	d166      	bne.n	800834c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <HAL_UART_Receive_DMA+0x26>
 8008284:	88fb      	ldrh	r3, [r7, #6]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e05f      	b.n	800834e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_UART_Receive_DMA+0x38>
 8008298:	2302      	movs	r3, #2
 800829a:	e058      	b.n	800834e <HAL_UART_Receive_DMA+0xea>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	88fa      	ldrh	r2, [r7, #6]
 80082ae:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2222      	movs	r2, #34	; 0x22
 80082ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c2:	4a25      	ldr	r2, [pc, #148]	; (8008358 <HAL_UART_Receive_DMA+0xf4>)
 80082c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ca:	4a24      	ldr	r2, [pc, #144]	; (800835c <HAL_UART_Receive_DMA+0xf8>)
 80082cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d2:	4a23      	ldr	r2, [pc, #140]	; (8008360 <HAL_UART_Receive_DMA+0xfc>)
 80082d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082da:	2200      	movs	r2, #0
 80082dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80082de:	f107 0308 	add.w	r3, r7, #8
 80082e2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3304      	adds	r3, #4
 80082ee:	4619      	mov	r1, r3
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	88fb      	ldrh	r3, [r7, #6]
 80082f6:	f7fb ffb1 	bl	800425c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80082fa:	2300      	movs	r3, #0
 80082fc:	613b      	str	r3, [r7, #16]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	613b      	str	r3, [r7, #16]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	613b      	str	r3, [r7, #16]
 800830e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68da      	ldr	r2, [r3, #12]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008326:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	695a      	ldr	r2, [r3, #20]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f042 0201 	orr.w	r2, r2, #1
 8008336:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	695a      	ldr	r2, [r3, #20]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008346:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	e000      	b.n	800834e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800834c:	2302      	movs	r3, #2
  }
}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	08008637 	.word	0x08008637
 800835c:	0800869f 	.word	0x0800869f
 8008360:	080086bb 	.word	0x080086bb

08008364 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b088      	sub	sp, #32
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008384:	2300      	movs	r3, #0
 8008386:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008388:	2300      	movs	r3, #0
 800838a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	f003 030f 	and.w	r3, r3, #15
 8008392:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10d      	bne.n	80083b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	f003 0320 	and.w	r3, r3, #32
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d008      	beq.n	80083b6 <HAL_UART_IRQHandler+0x52>
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	f003 0320 	and.w	r3, r3, #32
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa83 	bl	80088ba <UART_Receive_IT>
      return;
 80083b4:	e0d1      	b.n	800855a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 80b0 	beq.w	800851e <HAL_UART_IRQHandler+0x1ba>
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d105      	bne.n	80083d4 <HAL_UART_IRQHandler+0x70>
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 80a5 	beq.w	800851e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <HAL_UART_IRQHandler+0x90>
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d005      	beq.n	80083f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ec:	f043 0201 	orr.w	r2, r3, #1
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	f003 0304 	and.w	r3, r3, #4
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00a      	beq.n	8008414 <HAL_UART_IRQHandler+0xb0>
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	2b00      	cmp	r3, #0
 8008406:	d005      	beq.n	8008414 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840c:	f043 0202 	orr.w	r2, r3, #2
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <HAL_UART_IRQHandler+0xd0>
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842c:	f043 0204 	orr.w	r2, r3, #4
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	f003 0308 	and.w	r3, r3, #8
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00f      	beq.n	800845e <HAL_UART_IRQHandler+0xfa>
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	f003 0320 	and.w	r3, r3, #32
 8008444:	2b00      	cmp	r3, #0
 8008446:	d104      	bne.n	8008452 <HAL_UART_IRQHandler+0xee>
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	d005      	beq.n	800845e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008456:	f043 0208 	orr.w	r2, r3, #8
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008462:	2b00      	cmp	r3, #0
 8008464:	d078      	beq.n	8008558 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	f003 0320 	and.w	r3, r3, #32
 800846c:	2b00      	cmp	r3, #0
 800846e:	d007      	beq.n	8008480 <HAL_UART_IRQHandler+0x11c>
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	f003 0320 	and.w	r3, r3, #32
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fa1d 	bl	80088ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	bf0c      	ite	eq
 800848e:	2301      	moveq	r3, #1
 8008490:	2300      	movne	r3, #0
 8008492:	b2db      	uxtb	r3, r3
 8008494:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849a:	f003 0308 	and.w	r3, r3, #8
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d102      	bne.n	80084a8 <HAL_UART_IRQHandler+0x144>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d031      	beq.n	800850c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f966 	bl	800877a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b8:	2b40      	cmp	r3, #64	; 0x40
 80084ba:	d123      	bne.n	8008504 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	695a      	ldr	r2, [r3, #20]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084ca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d013      	beq.n	80084fc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d8:	4a21      	ldr	r2, [pc, #132]	; (8008560 <HAL_UART_IRQHandler+0x1fc>)
 80084da:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7fb ff13 	bl	800430c <HAL_DMA_Abort_IT>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d016      	beq.n	800851a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80084f6:	4610      	mov	r0, r2
 80084f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084fa:	e00e      	b.n	800851a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f859 	bl	80085b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008502:	e00a      	b.n	800851a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f855 	bl	80085b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800850a:	e006      	b.n	800851a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f851 	bl	80085b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008518:	e01e      	b.n	8008558 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800851a:	bf00      	nop
    return;
 800851c:	e01c      	b.n	8008558 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008524:	2b00      	cmp	r3, #0
 8008526:	d008      	beq.n	800853a <HAL_UART_IRQHandler+0x1d6>
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f953 	bl	80087de <UART_Transmit_IT>
    return;
 8008538:	e00f      	b.n	800855a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00a      	beq.n	800855a <HAL_UART_IRQHandler+0x1f6>
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	d005      	beq.n	800855a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f99b 	bl	800888a <UART_EndTransmit_IT>
    return;
 8008554:	bf00      	nop
 8008556:	e000      	b.n	800855a <HAL_UART_IRQHandler+0x1f6>
    return;
 8008558:	bf00      	nop
  }
}
 800855a:	3720      	adds	r7, #32
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	080087b7 	.word	0x080087b7

08008564 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d113      	bne.n	800860c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	695a      	ldr	r2, [r3, #20]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085f8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008608:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800860a:	e002      	b.n	8008612 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f7ff ffa9 	bl	8008564 <HAL_UART_TxCpltCallback>
}
 8008612:	bf00      	nop
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008626:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f7ff ffa5 	bl	8008578 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800862e:	bf00      	nop
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008642:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864e:	2b00      	cmp	r3, #0
 8008650:	d11e      	bne.n	8008690 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008666:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	695a      	ldr	r2, [r3, #20]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f022 0201 	bic.w	r2, r2, #1
 8008676:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	695a      	ldr	r2, [r3, #20]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008686:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2220      	movs	r2, #32
 800868c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f7ff ff7b 	bl	800858c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008696:	bf00      	nop
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff ff77 	bl	80085a0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086b2:	bf00      	nop
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086d6:	2b80      	cmp	r3, #128	; 0x80
 80086d8:	bf0c      	ite	eq
 80086da:	2301      	moveq	r3, #1
 80086dc:	2300      	movne	r3, #0
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b21      	cmp	r3, #33	; 0x21
 80086ec:	d108      	bne.n	8008700 <UART_DMAError+0x46>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d005      	beq.n	8008700 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2200      	movs	r2, #0
 80086f8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80086fa:	68b8      	ldr	r0, [r7, #8]
 80086fc:	f000 f827 	bl	800874e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870a:	2b40      	cmp	r3, #64	; 0x40
 800870c:	bf0c      	ite	eq
 800870e:	2301      	moveq	r3, #1
 8008710:	2300      	movne	r3, #0
 8008712:	b2db      	uxtb	r3, r3
 8008714:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b22      	cmp	r3, #34	; 0x22
 8008720:	d108      	bne.n	8008734 <UART_DMAError+0x7a>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d005      	beq.n	8008734 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2200      	movs	r2, #0
 800872c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800872e:	68b8      	ldr	r0, [r7, #8]
 8008730:	f000 f823 	bl	800877a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008738:	f043 0210 	orr.w	r2, r3, #16
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008740:	68b8      	ldr	r0, [r7, #8]
 8008742:	f7ff ff37 	bl	80085b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008746:	bf00      	nop
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008764:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2220      	movs	r2, #32
 800876a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800876e:	bf00      	nop
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68da      	ldr	r2, [r3, #12]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008790:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	695a      	ldr	r2, [r3, #20]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f022 0201 	bic.w	r2, r2, #1
 80087a0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2220      	movs	r2, #32
 80087a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80087aa:	bf00      	nop
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f7ff feef 	bl	80085b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087d6:	bf00      	nop
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087de:	b480      	push	{r7}
 80087e0:	b085      	sub	sp, #20
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b21      	cmp	r3, #33	; 0x21
 80087f0:	d144      	bne.n	800887c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087fa:	d11a      	bne.n	8008832 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008810:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d105      	bne.n	8008826 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	1c9a      	adds	r2, r3, #2
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	621a      	str	r2, [r3, #32]
 8008824:	e00e      	b.n	8008844 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	621a      	str	r2, [r3, #32]
 8008830:	e008      	b.n	8008844 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	1c59      	adds	r1, r3, #1
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6211      	str	r1, [r2, #32]
 800883c:	781a      	ldrb	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008848:	b29b      	uxth	r3, r3
 800884a:	3b01      	subs	r3, #1
 800884c:	b29b      	uxth	r3, r3
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	4619      	mov	r1, r3
 8008852:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10f      	bne.n	8008878 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008866:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68da      	ldr	r2, [r3, #12]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008876:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	e000      	b.n	800887e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800887c:	2302      	movs	r3, #2
  }
}
 800887e:	4618      	mov	r0, r3
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b082      	sub	sp, #8
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fe5a 	bl	8008564 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b22      	cmp	r3, #34	; 0x22
 80088cc:	d171      	bne.n	80089b2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d6:	d123      	bne.n	8008920 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088dc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10e      	bne.n	8008904 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fc:	1c9a      	adds	r2, r3, #2
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	629a      	str	r2, [r3, #40]	; 0x28
 8008902:	e029      	b.n	8008958 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	b29b      	uxth	r3, r3
 800890c:	b2db      	uxtb	r3, r3
 800890e:	b29a      	uxth	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	629a      	str	r2, [r3, #40]	; 0x28
 800891e:	e01b      	b.n	8008958 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10a      	bne.n	800893e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6858      	ldr	r0, [r3, #4]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008932:	1c59      	adds	r1, r3, #1
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	6291      	str	r1, [r2, #40]	; 0x28
 8008938:	b2c2      	uxtb	r2, r0
 800893a:	701a      	strb	r2, [r3, #0]
 800893c:	e00c      	b.n	8008958 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	b2da      	uxtb	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894a:	1c58      	adds	r0, r3, #1
 800894c:	6879      	ldr	r1, [r7, #4]
 800894e:	6288      	str	r0, [r1, #40]	; 0x28
 8008950:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008954:	b2d2      	uxtb	r2, r2
 8008956:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800895c:	b29b      	uxth	r3, r3
 800895e:	3b01      	subs	r3, #1
 8008960:	b29b      	uxth	r3, r3
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	4619      	mov	r1, r3
 8008966:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008968:	2b00      	cmp	r3, #0
 800896a:	d120      	bne.n	80089ae <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68da      	ldr	r2, [r3, #12]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 0220 	bic.w	r2, r2, #32
 800897a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800898a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	695a      	ldr	r2, [r3, #20]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 0201 	bic.w	r2, r2, #1
 800899a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2220      	movs	r2, #32
 80089a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff fdf1 	bl	800858c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	e002      	b.n	80089b4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	e000      	b.n	80089b4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80089b2:	2302      	movs	r3, #2
  }
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c0:	b085      	sub	sp, #20
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68da      	ldr	r2, [r3, #12]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	430a      	orrs	r2, r1
 80089da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	431a      	orrs	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	431a      	orrs	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	69db      	ldr	r3, [r3, #28]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80089fe:	f023 030c 	bic.w	r3, r3, #12
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	6812      	ldr	r2, [r2, #0]
 8008a06:	68f9      	ldr	r1, [r7, #12]
 8008a08:	430b      	orrs	r3, r1
 8008a0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699a      	ldr	r2, [r3, #24]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a2a:	f040 818b 	bne.w	8008d44 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4ac1      	ldr	r2, [pc, #772]	; (8008d38 <UART_SetConfig+0x37c>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d005      	beq.n	8008a44 <UART_SetConfig+0x88>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4abf      	ldr	r2, [pc, #764]	; (8008d3c <UART_SetConfig+0x380>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	f040 80bd 	bne.w	8008bbe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a44:	f7fe fbaa 	bl	800719c <HAL_RCC_GetPCLK2Freq>
 8008a48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	461d      	mov	r5, r3
 8008a4e:	f04f 0600 	mov.w	r6, #0
 8008a52:	46a8      	mov	r8, r5
 8008a54:	46b1      	mov	r9, r6
 8008a56:	eb18 0308 	adds.w	r3, r8, r8
 8008a5a:	eb49 0409 	adc.w	r4, r9, r9
 8008a5e:	4698      	mov	r8, r3
 8008a60:	46a1      	mov	r9, r4
 8008a62:	eb18 0805 	adds.w	r8, r8, r5
 8008a66:	eb49 0906 	adc.w	r9, r9, r6
 8008a6a:	f04f 0100 	mov.w	r1, #0
 8008a6e:	f04f 0200 	mov.w	r2, #0
 8008a72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008a76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008a7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008a7e:	4688      	mov	r8, r1
 8008a80:	4691      	mov	r9, r2
 8008a82:	eb18 0005 	adds.w	r0, r8, r5
 8008a86:	eb49 0106 	adc.w	r1, r9, r6
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	461d      	mov	r5, r3
 8008a90:	f04f 0600 	mov.w	r6, #0
 8008a94:	196b      	adds	r3, r5, r5
 8008a96:	eb46 0406 	adc.w	r4, r6, r6
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4623      	mov	r3, r4
 8008a9e:	f7f8 f965 	bl	8000d6c <__aeabi_uldivmod>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	4ba5      	ldr	r3, [pc, #660]	; (8008d40 <UART_SetConfig+0x384>)
 8008aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8008aae:	095b      	lsrs	r3, r3, #5
 8008ab0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	461d      	mov	r5, r3
 8008ab8:	f04f 0600 	mov.w	r6, #0
 8008abc:	46a9      	mov	r9, r5
 8008abe:	46b2      	mov	sl, r6
 8008ac0:	eb19 0309 	adds.w	r3, r9, r9
 8008ac4:	eb4a 040a 	adc.w	r4, sl, sl
 8008ac8:	4699      	mov	r9, r3
 8008aca:	46a2      	mov	sl, r4
 8008acc:	eb19 0905 	adds.w	r9, r9, r5
 8008ad0:	eb4a 0a06 	adc.w	sl, sl, r6
 8008ad4:	f04f 0100 	mov.w	r1, #0
 8008ad8:	f04f 0200 	mov.w	r2, #0
 8008adc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ae0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ae4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ae8:	4689      	mov	r9, r1
 8008aea:	4692      	mov	sl, r2
 8008aec:	eb19 0005 	adds.w	r0, r9, r5
 8008af0:	eb4a 0106 	adc.w	r1, sl, r6
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	461d      	mov	r5, r3
 8008afa:	f04f 0600 	mov.w	r6, #0
 8008afe:	196b      	adds	r3, r5, r5
 8008b00:	eb46 0406 	adc.w	r4, r6, r6
 8008b04:	461a      	mov	r2, r3
 8008b06:	4623      	mov	r3, r4
 8008b08:	f7f8 f930 	bl	8000d6c <__aeabi_uldivmod>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	460c      	mov	r4, r1
 8008b10:	461a      	mov	r2, r3
 8008b12:	4b8b      	ldr	r3, [pc, #556]	; (8008d40 <UART_SetConfig+0x384>)
 8008b14:	fba3 1302 	umull	r1, r3, r3, r2
 8008b18:	095b      	lsrs	r3, r3, #5
 8008b1a:	2164      	movs	r1, #100	; 0x64
 8008b1c:	fb01 f303 	mul.w	r3, r1, r3
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	3332      	adds	r3, #50	; 0x32
 8008b26:	4a86      	ldr	r2, [pc, #536]	; (8008d40 <UART_SetConfig+0x384>)
 8008b28:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2c:	095b      	lsrs	r3, r3, #5
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b34:	4498      	add	r8, r3
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	461d      	mov	r5, r3
 8008b3a:	f04f 0600 	mov.w	r6, #0
 8008b3e:	46a9      	mov	r9, r5
 8008b40:	46b2      	mov	sl, r6
 8008b42:	eb19 0309 	adds.w	r3, r9, r9
 8008b46:	eb4a 040a 	adc.w	r4, sl, sl
 8008b4a:	4699      	mov	r9, r3
 8008b4c:	46a2      	mov	sl, r4
 8008b4e:	eb19 0905 	adds.w	r9, r9, r5
 8008b52:	eb4a 0a06 	adc.w	sl, sl, r6
 8008b56:	f04f 0100 	mov.w	r1, #0
 8008b5a:	f04f 0200 	mov.w	r2, #0
 8008b5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b6a:	4689      	mov	r9, r1
 8008b6c:	4692      	mov	sl, r2
 8008b6e:	eb19 0005 	adds.w	r0, r9, r5
 8008b72:	eb4a 0106 	adc.w	r1, sl, r6
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	461d      	mov	r5, r3
 8008b7c:	f04f 0600 	mov.w	r6, #0
 8008b80:	196b      	adds	r3, r5, r5
 8008b82:	eb46 0406 	adc.w	r4, r6, r6
 8008b86:	461a      	mov	r2, r3
 8008b88:	4623      	mov	r3, r4
 8008b8a:	f7f8 f8ef 	bl	8000d6c <__aeabi_uldivmod>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	460c      	mov	r4, r1
 8008b92:	461a      	mov	r2, r3
 8008b94:	4b6a      	ldr	r3, [pc, #424]	; (8008d40 <UART_SetConfig+0x384>)
 8008b96:	fba3 1302 	umull	r1, r3, r3, r2
 8008b9a:	095b      	lsrs	r3, r3, #5
 8008b9c:	2164      	movs	r1, #100	; 0x64
 8008b9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	00db      	lsls	r3, r3, #3
 8008ba6:	3332      	adds	r3, #50	; 0x32
 8008ba8:	4a65      	ldr	r2, [pc, #404]	; (8008d40 <UART_SetConfig+0x384>)
 8008baa:	fba2 2303 	umull	r2, r3, r2, r3
 8008bae:	095b      	lsrs	r3, r3, #5
 8008bb0:	f003 0207 	and.w	r2, r3, #7
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4442      	add	r2, r8
 8008bba:	609a      	str	r2, [r3, #8]
 8008bbc:	e26f      	b.n	800909e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bbe:	f7fe fad9 	bl	8007174 <HAL_RCC_GetPCLK1Freq>
 8008bc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	461d      	mov	r5, r3
 8008bc8:	f04f 0600 	mov.w	r6, #0
 8008bcc:	46a8      	mov	r8, r5
 8008bce:	46b1      	mov	r9, r6
 8008bd0:	eb18 0308 	adds.w	r3, r8, r8
 8008bd4:	eb49 0409 	adc.w	r4, r9, r9
 8008bd8:	4698      	mov	r8, r3
 8008bda:	46a1      	mov	r9, r4
 8008bdc:	eb18 0805 	adds.w	r8, r8, r5
 8008be0:	eb49 0906 	adc.w	r9, r9, r6
 8008be4:	f04f 0100 	mov.w	r1, #0
 8008be8:	f04f 0200 	mov.w	r2, #0
 8008bec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008bf0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008bf4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008bf8:	4688      	mov	r8, r1
 8008bfa:	4691      	mov	r9, r2
 8008bfc:	eb18 0005 	adds.w	r0, r8, r5
 8008c00:	eb49 0106 	adc.w	r1, r9, r6
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	461d      	mov	r5, r3
 8008c0a:	f04f 0600 	mov.w	r6, #0
 8008c0e:	196b      	adds	r3, r5, r5
 8008c10:	eb46 0406 	adc.w	r4, r6, r6
 8008c14:	461a      	mov	r2, r3
 8008c16:	4623      	mov	r3, r4
 8008c18:	f7f8 f8a8 	bl	8000d6c <__aeabi_uldivmod>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	460c      	mov	r4, r1
 8008c20:	461a      	mov	r2, r3
 8008c22:	4b47      	ldr	r3, [pc, #284]	; (8008d40 <UART_SetConfig+0x384>)
 8008c24:	fba3 2302 	umull	r2, r3, r3, r2
 8008c28:	095b      	lsrs	r3, r3, #5
 8008c2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	461d      	mov	r5, r3
 8008c32:	f04f 0600 	mov.w	r6, #0
 8008c36:	46a9      	mov	r9, r5
 8008c38:	46b2      	mov	sl, r6
 8008c3a:	eb19 0309 	adds.w	r3, r9, r9
 8008c3e:	eb4a 040a 	adc.w	r4, sl, sl
 8008c42:	4699      	mov	r9, r3
 8008c44:	46a2      	mov	sl, r4
 8008c46:	eb19 0905 	adds.w	r9, r9, r5
 8008c4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c4e:	f04f 0100 	mov.w	r1, #0
 8008c52:	f04f 0200 	mov.w	r2, #0
 8008c56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c62:	4689      	mov	r9, r1
 8008c64:	4692      	mov	sl, r2
 8008c66:	eb19 0005 	adds.w	r0, r9, r5
 8008c6a:	eb4a 0106 	adc.w	r1, sl, r6
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	461d      	mov	r5, r3
 8008c74:	f04f 0600 	mov.w	r6, #0
 8008c78:	196b      	adds	r3, r5, r5
 8008c7a:	eb46 0406 	adc.w	r4, r6, r6
 8008c7e:	461a      	mov	r2, r3
 8008c80:	4623      	mov	r3, r4
 8008c82:	f7f8 f873 	bl	8000d6c <__aeabi_uldivmod>
 8008c86:	4603      	mov	r3, r0
 8008c88:	460c      	mov	r4, r1
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	4b2c      	ldr	r3, [pc, #176]	; (8008d40 <UART_SetConfig+0x384>)
 8008c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8008c92:	095b      	lsrs	r3, r3, #5
 8008c94:	2164      	movs	r1, #100	; 0x64
 8008c96:	fb01 f303 	mul.w	r3, r1, r3
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	00db      	lsls	r3, r3, #3
 8008c9e:	3332      	adds	r3, #50	; 0x32
 8008ca0:	4a27      	ldr	r2, [pc, #156]	; (8008d40 <UART_SetConfig+0x384>)
 8008ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca6:	095b      	lsrs	r3, r3, #5
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008cae:	4498      	add	r8, r3
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	461d      	mov	r5, r3
 8008cb4:	f04f 0600 	mov.w	r6, #0
 8008cb8:	46a9      	mov	r9, r5
 8008cba:	46b2      	mov	sl, r6
 8008cbc:	eb19 0309 	adds.w	r3, r9, r9
 8008cc0:	eb4a 040a 	adc.w	r4, sl, sl
 8008cc4:	4699      	mov	r9, r3
 8008cc6:	46a2      	mov	sl, r4
 8008cc8:	eb19 0905 	adds.w	r9, r9, r5
 8008ccc:	eb4a 0a06 	adc.w	sl, sl, r6
 8008cd0:	f04f 0100 	mov.w	r1, #0
 8008cd4:	f04f 0200 	mov.w	r2, #0
 8008cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ce0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ce4:	4689      	mov	r9, r1
 8008ce6:	4692      	mov	sl, r2
 8008ce8:	eb19 0005 	adds.w	r0, r9, r5
 8008cec:	eb4a 0106 	adc.w	r1, sl, r6
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	461d      	mov	r5, r3
 8008cf6:	f04f 0600 	mov.w	r6, #0
 8008cfa:	196b      	adds	r3, r5, r5
 8008cfc:	eb46 0406 	adc.w	r4, r6, r6
 8008d00:	461a      	mov	r2, r3
 8008d02:	4623      	mov	r3, r4
 8008d04:	f7f8 f832 	bl	8000d6c <__aeabi_uldivmod>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	4b0c      	ldr	r3, [pc, #48]	; (8008d40 <UART_SetConfig+0x384>)
 8008d10:	fba3 1302 	umull	r1, r3, r3, r2
 8008d14:	095b      	lsrs	r3, r3, #5
 8008d16:	2164      	movs	r1, #100	; 0x64
 8008d18:	fb01 f303 	mul.w	r3, r1, r3
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	00db      	lsls	r3, r3, #3
 8008d20:	3332      	adds	r3, #50	; 0x32
 8008d22:	4a07      	ldr	r2, [pc, #28]	; (8008d40 <UART_SetConfig+0x384>)
 8008d24:	fba2 2303 	umull	r2, r3, r2, r3
 8008d28:	095b      	lsrs	r3, r3, #5
 8008d2a:	f003 0207 	and.w	r2, r3, #7
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4442      	add	r2, r8
 8008d34:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008d36:	e1b2      	b.n	800909e <UART_SetConfig+0x6e2>
 8008d38:	40011000 	.word	0x40011000
 8008d3c:	40011400 	.word	0x40011400
 8008d40:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4ad7      	ldr	r2, [pc, #860]	; (80090a8 <UART_SetConfig+0x6ec>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d005      	beq.n	8008d5a <UART_SetConfig+0x39e>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4ad6      	ldr	r2, [pc, #856]	; (80090ac <UART_SetConfig+0x6f0>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	f040 80d1 	bne.w	8008efc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d5a:	f7fe fa1f 	bl	800719c <HAL_RCC_GetPCLK2Freq>
 8008d5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	469a      	mov	sl, r3
 8008d64:	f04f 0b00 	mov.w	fp, #0
 8008d68:	46d0      	mov	r8, sl
 8008d6a:	46d9      	mov	r9, fp
 8008d6c:	eb18 0308 	adds.w	r3, r8, r8
 8008d70:	eb49 0409 	adc.w	r4, r9, r9
 8008d74:	4698      	mov	r8, r3
 8008d76:	46a1      	mov	r9, r4
 8008d78:	eb18 080a 	adds.w	r8, r8, sl
 8008d7c:	eb49 090b 	adc.w	r9, r9, fp
 8008d80:	f04f 0100 	mov.w	r1, #0
 8008d84:	f04f 0200 	mov.w	r2, #0
 8008d88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008d8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008d90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008d94:	4688      	mov	r8, r1
 8008d96:	4691      	mov	r9, r2
 8008d98:	eb1a 0508 	adds.w	r5, sl, r8
 8008d9c:	eb4b 0609 	adc.w	r6, fp, r9
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	4619      	mov	r1, r3
 8008da6:	f04f 0200 	mov.w	r2, #0
 8008daa:	f04f 0300 	mov.w	r3, #0
 8008dae:	f04f 0400 	mov.w	r4, #0
 8008db2:	0094      	lsls	r4, r2, #2
 8008db4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008db8:	008b      	lsls	r3, r1, #2
 8008dba:	461a      	mov	r2, r3
 8008dbc:	4623      	mov	r3, r4
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	f7f7 ffd3 	bl	8000d6c <__aeabi_uldivmod>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	460c      	mov	r4, r1
 8008dca:	461a      	mov	r2, r3
 8008dcc:	4bb8      	ldr	r3, [pc, #736]	; (80090b0 <UART_SetConfig+0x6f4>)
 8008dce:	fba3 2302 	umull	r2, r3, r3, r2
 8008dd2:	095b      	lsrs	r3, r3, #5
 8008dd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	469b      	mov	fp, r3
 8008ddc:	f04f 0c00 	mov.w	ip, #0
 8008de0:	46d9      	mov	r9, fp
 8008de2:	46e2      	mov	sl, ip
 8008de4:	eb19 0309 	adds.w	r3, r9, r9
 8008de8:	eb4a 040a 	adc.w	r4, sl, sl
 8008dec:	4699      	mov	r9, r3
 8008dee:	46a2      	mov	sl, r4
 8008df0:	eb19 090b 	adds.w	r9, r9, fp
 8008df4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008df8:	f04f 0100 	mov.w	r1, #0
 8008dfc:	f04f 0200 	mov.w	r2, #0
 8008e00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e0c:	4689      	mov	r9, r1
 8008e0e:	4692      	mov	sl, r2
 8008e10:	eb1b 0509 	adds.w	r5, fp, r9
 8008e14:	eb4c 060a 	adc.w	r6, ip, sl
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	f04f 0200 	mov.w	r2, #0
 8008e22:	f04f 0300 	mov.w	r3, #0
 8008e26:	f04f 0400 	mov.w	r4, #0
 8008e2a:	0094      	lsls	r4, r2, #2
 8008e2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008e30:	008b      	lsls	r3, r1, #2
 8008e32:	461a      	mov	r2, r3
 8008e34:	4623      	mov	r3, r4
 8008e36:	4628      	mov	r0, r5
 8008e38:	4631      	mov	r1, r6
 8008e3a:	f7f7 ff97 	bl	8000d6c <__aeabi_uldivmod>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	460c      	mov	r4, r1
 8008e42:	461a      	mov	r2, r3
 8008e44:	4b9a      	ldr	r3, [pc, #616]	; (80090b0 <UART_SetConfig+0x6f4>)
 8008e46:	fba3 1302 	umull	r1, r3, r3, r2
 8008e4a:	095b      	lsrs	r3, r3, #5
 8008e4c:	2164      	movs	r1, #100	; 0x64
 8008e4e:	fb01 f303 	mul.w	r3, r1, r3
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	011b      	lsls	r3, r3, #4
 8008e56:	3332      	adds	r3, #50	; 0x32
 8008e58:	4a95      	ldr	r2, [pc, #596]	; (80090b0 <UART_SetConfig+0x6f4>)
 8008e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e5e:	095b      	lsrs	r3, r3, #5
 8008e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e64:	4498      	add	r8, r3
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	469b      	mov	fp, r3
 8008e6a:	f04f 0c00 	mov.w	ip, #0
 8008e6e:	46d9      	mov	r9, fp
 8008e70:	46e2      	mov	sl, ip
 8008e72:	eb19 0309 	adds.w	r3, r9, r9
 8008e76:	eb4a 040a 	adc.w	r4, sl, sl
 8008e7a:	4699      	mov	r9, r3
 8008e7c:	46a2      	mov	sl, r4
 8008e7e:	eb19 090b 	adds.w	r9, r9, fp
 8008e82:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008e86:	f04f 0100 	mov.w	r1, #0
 8008e8a:	f04f 0200 	mov.w	r2, #0
 8008e8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e9a:	4689      	mov	r9, r1
 8008e9c:	4692      	mov	sl, r2
 8008e9e:	eb1b 0509 	adds.w	r5, fp, r9
 8008ea2:	eb4c 060a 	adc.w	r6, ip, sl
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	4619      	mov	r1, r3
 8008eac:	f04f 0200 	mov.w	r2, #0
 8008eb0:	f04f 0300 	mov.w	r3, #0
 8008eb4:	f04f 0400 	mov.w	r4, #0
 8008eb8:	0094      	lsls	r4, r2, #2
 8008eba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ebe:	008b      	lsls	r3, r1, #2
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	4623      	mov	r3, r4
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	f7f7 ff50 	bl	8000d6c <__aeabi_uldivmod>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	460c      	mov	r4, r1
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	4b77      	ldr	r3, [pc, #476]	; (80090b0 <UART_SetConfig+0x6f4>)
 8008ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ed8:	095b      	lsrs	r3, r3, #5
 8008eda:	2164      	movs	r1, #100	; 0x64
 8008edc:	fb01 f303 	mul.w	r3, r1, r3
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	011b      	lsls	r3, r3, #4
 8008ee4:	3332      	adds	r3, #50	; 0x32
 8008ee6:	4a72      	ldr	r2, [pc, #456]	; (80090b0 <UART_SetConfig+0x6f4>)
 8008ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8008eec:	095b      	lsrs	r3, r3, #5
 8008eee:	f003 020f 	and.w	r2, r3, #15
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4442      	add	r2, r8
 8008ef8:	609a      	str	r2, [r3, #8]
 8008efa:	e0d0      	b.n	800909e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008efc:	f7fe f93a 	bl	8007174 <HAL_RCC_GetPCLK1Freq>
 8008f00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	469a      	mov	sl, r3
 8008f06:	f04f 0b00 	mov.w	fp, #0
 8008f0a:	46d0      	mov	r8, sl
 8008f0c:	46d9      	mov	r9, fp
 8008f0e:	eb18 0308 	adds.w	r3, r8, r8
 8008f12:	eb49 0409 	adc.w	r4, r9, r9
 8008f16:	4698      	mov	r8, r3
 8008f18:	46a1      	mov	r9, r4
 8008f1a:	eb18 080a 	adds.w	r8, r8, sl
 8008f1e:	eb49 090b 	adc.w	r9, r9, fp
 8008f22:	f04f 0100 	mov.w	r1, #0
 8008f26:	f04f 0200 	mov.w	r2, #0
 8008f2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008f2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008f32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008f36:	4688      	mov	r8, r1
 8008f38:	4691      	mov	r9, r2
 8008f3a:	eb1a 0508 	adds.w	r5, sl, r8
 8008f3e:	eb4b 0609 	adc.w	r6, fp, r9
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	4619      	mov	r1, r3
 8008f48:	f04f 0200 	mov.w	r2, #0
 8008f4c:	f04f 0300 	mov.w	r3, #0
 8008f50:	f04f 0400 	mov.w	r4, #0
 8008f54:	0094      	lsls	r4, r2, #2
 8008f56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f5a:	008b      	lsls	r3, r1, #2
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	4623      	mov	r3, r4
 8008f60:	4628      	mov	r0, r5
 8008f62:	4631      	mov	r1, r6
 8008f64:	f7f7 ff02 	bl	8000d6c <__aeabi_uldivmod>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	4b50      	ldr	r3, [pc, #320]	; (80090b0 <UART_SetConfig+0x6f4>)
 8008f70:	fba3 2302 	umull	r2, r3, r3, r2
 8008f74:	095b      	lsrs	r3, r3, #5
 8008f76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	469b      	mov	fp, r3
 8008f7e:	f04f 0c00 	mov.w	ip, #0
 8008f82:	46d9      	mov	r9, fp
 8008f84:	46e2      	mov	sl, ip
 8008f86:	eb19 0309 	adds.w	r3, r9, r9
 8008f8a:	eb4a 040a 	adc.w	r4, sl, sl
 8008f8e:	4699      	mov	r9, r3
 8008f90:	46a2      	mov	sl, r4
 8008f92:	eb19 090b 	adds.w	r9, r9, fp
 8008f96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f9a:	f04f 0100 	mov.w	r1, #0
 8008f9e:	f04f 0200 	mov.w	r2, #0
 8008fa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fa6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008faa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008fae:	4689      	mov	r9, r1
 8008fb0:	4692      	mov	sl, r2
 8008fb2:	eb1b 0509 	adds.w	r5, fp, r9
 8008fb6:	eb4c 060a 	adc.w	r6, ip, sl
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	f04f 0200 	mov.w	r2, #0
 8008fc4:	f04f 0300 	mov.w	r3, #0
 8008fc8:	f04f 0400 	mov.w	r4, #0
 8008fcc:	0094      	lsls	r4, r2, #2
 8008fce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008fd2:	008b      	lsls	r3, r1, #2
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	4623      	mov	r3, r4
 8008fd8:	4628      	mov	r0, r5
 8008fda:	4631      	mov	r1, r6
 8008fdc:	f7f7 fec6 	bl	8000d6c <__aeabi_uldivmod>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	4b32      	ldr	r3, [pc, #200]	; (80090b0 <UART_SetConfig+0x6f4>)
 8008fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fec:	095b      	lsrs	r3, r3, #5
 8008fee:	2164      	movs	r1, #100	; 0x64
 8008ff0:	fb01 f303 	mul.w	r3, r1, r3
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	011b      	lsls	r3, r3, #4
 8008ff8:	3332      	adds	r3, #50	; 0x32
 8008ffa:	4a2d      	ldr	r2, [pc, #180]	; (80090b0 <UART_SetConfig+0x6f4>)
 8008ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8009000:	095b      	lsrs	r3, r3, #5
 8009002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009006:	4498      	add	r8, r3
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	469b      	mov	fp, r3
 800900c:	f04f 0c00 	mov.w	ip, #0
 8009010:	46d9      	mov	r9, fp
 8009012:	46e2      	mov	sl, ip
 8009014:	eb19 0309 	adds.w	r3, r9, r9
 8009018:	eb4a 040a 	adc.w	r4, sl, sl
 800901c:	4699      	mov	r9, r3
 800901e:	46a2      	mov	sl, r4
 8009020:	eb19 090b 	adds.w	r9, r9, fp
 8009024:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009028:	f04f 0100 	mov.w	r1, #0
 800902c:	f04f 0200 	mov.w	r2, #0
 8009030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009034:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009038:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800903c:	4689      	mov	r9, r1
 800903e:	4692      	mov	sl, r2
 8009040:	eb1b 0509 	adds.w	r5, fp, r9
 8009044:	eb4c 060a 	adc.w	r6, ip, sl
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	4619      	mov	r1, r3
 800904e:	f04f 0200 	mov.w	r2, #0
 8009052:	f04f 0300 	mov.w	r3, #0
 8009056:	f04f 0400 	mov.w	r4, #0
 800905a:	0094      	lsls	r4, r2, #2
 800905c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009060:	008b      	lsls	r3, r1, #2
 8009062:	461a      	mov	r2, r3
 8009064:	4623      	mov	r3, r4
 8009066:	4628      	mov	r0, r5
 8009068:	4631      	mov	r1, r6
 800906a:	f7f7 fe7f 	bl	8000d6c <__aeabi_uldivmod>
 800906e:	4603      	mov	r3, r0
 8009070:	460c      	mov	r4, r1
 8009072:	461a      	mov	r2, r3
 8009074:	4b0e      	ldr	r3, [pc, #56]	; (80090b0 <UART_SetConfig+0x6f4>)
 8009076:	fba3 1302 	umull	r1, r3, r3, r2
 800907a:	095b      	lsrs	r3, r3, #5
 800907c:	2164      	movs	r1, #100	; 0x64
 800907e:	fb01 f303 	mul.w	r3, r1, r3
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	011b      	lsls	r3, r3, #4
 8009086:	3332      	adds	r3, #50	; 0x32
 8009088:	4a09      	ldr	r2, [pc, #36]	; (80090b0 <UART_SetConfig+0x6f4>)
 800908a:	fba2 2303 	umull	r2, r3, r2, r3
 800908e:	095b      	lsrs	r3, r3, #5
 8009090:	f003 020f 	and.w	r2, r3, #15
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4442      	add	r2, r8
 800909a:	609a      	str	r2, [r3, #8]
}
 800909c:	e7ff      	b.n	800909e <UART_SetConfig+0x6e2>
 800909e:	bf00      	nop
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a8:	40011000 	.word	0x40011000
 80090ac:	40011400 	.word	0x40011400
 80090b0:	51eb851f 	.word	0x51eb851f

080090b4 <calloc>:
 80090b4:	4b02      	ldr	r3, [pc, #8]	; (80090c0 <calloc+0xc>)
 80090b6:	460a      	mov	r2, r1
 80090b8:	4601      	mov	r1, r0
 80090ba:	6818      	ldr	r0, [r3, #0]
 80090bc:	f000 b83f 	b.w	800913e <_calloc_r>
 80090c0:	20000048 	.word	0x20000048

080090c4 <__errno>:
 80090c4:	4b01      	ldr	r3, [pc, #4]	; (80090cc <__errno+0x8>)
 80090c6:	6818      	ldr	r0, [r3, #0]
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	20000048 	.word	0x20000048

080090d0 <__libc_init_array>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	4e0d      	ldr	r6, [pc, #52]	; (8009108 <__libc_init_array+0x38>)
 80090d4:	4c0d      	ldr	r4, [pc, #52]	; (800910c <__libc_init_array+0x3c>)
 80090d6:	1ba4      	subs	r4, r4, r6
 80090d8:	10a4      	asrs	r4, r4, #2
 80090da:	2500      	movs	r5, #0
 80090dc:	42a5      	cmp	r5, r4
 80090de:	d109      	bne.n	80090f4 <__libc_init_array+0x24>
 80090e0:	4e0b      	ldr	r6, [pc, #44]	; (8009110 <__libc_init_array+0x40>)
 80090e2:	4c0c      	ldr	r4, [pc, #48]	; (8009114 <__libc_init_array+0x44>)
 80090e4:	f001 f946 	bl	800a374 <_init>
 80090e8:	1ba4      	subs	r4, r4, r6
 80090ea:	10a4      	asrs	r4, r4, #2
 80090ec:	2500      	movs	r5, #0
 80090ee:	42a5      	cmp	r5, r4
 80090f0:	d105      	bne.n	80090fe <__libc_init_array+0x2e>
 80090f2:	bd70      	pop	{r4, r5, r6, pc}
 80090f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090f8:	4798      	blx	r3
 80090fa:	3501      	adds	r5, #1
 80090fc:	e7ee      	b.n	80090dc <__libc_init_array+0xc>
 80090fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009102:	4798      	blx	r3
 8009104:	3501      	adds	r5, #1
 8009106:	e7f2      	b.n	80090ee <__libc_init_array+0x1e>
 8009108:	0800a400 	.word	0x0800a400
 800910c:	0800a400 	.word	0x0800a400
 8009110:	0800a400 	.word	0x0800a400
 8009114:	0800a404 	.word	0x0800a404

08009118 <memcpy>:
 8009118:	b510      	push	{r4, lr}
 800911a:	1e43      	subs	r3, r0, #1
 800911c:	440a      	add	r2, r1
 800911e:	4291      	cmp	r1, r2
 8009120:	d100      	bne.n	8009124 <memcpy+0xc>
 8009122:	bd10      	pop	{r4, pc}
 8009124:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009128:	f803 4f01 	strb.w	r4, [r3, #1]!
 800912c:	e7f7      	b.n	800911e <memcpy+0x6>

0800912e <memset>:
 800912e:	4402      	add	r2, r0
 8009130:	4603      	mov	r3, r0
 8009132:	4293      	cmp	r3, r2
 8009134:	d100      	bne.n	8009138 <memset+0xa>
 8009136:	4770      	bx	lr
 8009138:	f803 1b01 	strb.w	r1, [r3], #1
 800913c:	e7f9      	b.n	8009132 <memset+0x4>

0800913e <_calloc_r>:
 800913e:	b538      	push	{r3, r4, r5, lr}
 8009140:	fb02 f401 	mul.w	r4, r2, r1
 8009144:	4621      	mov	r1, r4
 8009146:	f000 f809 	bl	800915c <_malloc_r>
 800914a:	4605      	mov	r5, r0
 800914c:	b118      	cbz	r0, 8009156 <_calloc_r+0x18>
 800914e:	4622      	mov	r2, r4
 8009150:	2100      	movs	r1, #0
 8009152:	f7ff ffec 	bl	800912e <memset>
 8009156:	4628      	mov	r0, r5
 8009158:	bd38      	pop	{r3, r4, r5, pc}
	...

0800915c <_malloc_r>:
 800915c:	b570      	push	{r4, r5, r6, lr}
 800915e:	1ccd      	adds	r5, r1, #3
 8009160:	f025 0503 	bic.w	r5, r5, #3
 8009164:	3508      	adds	r5, #8
 8009166:	2d0c      	cmp	r5, #12
 8009168:	bf38      	it	cc
 800916a:	250c      	movcc	r5, #12
 800916c:	2d00      	cmp	r5, #0
 800916e:	4606      	mov	r6, r0
 8009170:	db01      	blt.n	8009176 <_malloc_r+0x1a>
 8009172:	42a9      	cmp	r1, r5
 8009174:	d903      	bls.n	800917e <_malloc_r+0x22>
 8009176:	230c      	movs	r3, #12
 8009178:	6033      	str	r3, [r6, #0]
 800917a:	2000      	movs	r0, #0
 800917c:	bd70      	pop	{r4, r5, r6, pc}
 800917e:	f000 f857 	bl	8009230 <__malloc_lock>
 8009182:	4a21      	ldr	r2, [pc, #132]	; (8009208 <_malloc_r+0xac>)
 8009184:	6814      	ldr	r4, [r2, #0]
 8009186:	4621      	mov	r1, r4
 8009188:	b991      	cbnz	r1, 80091b0 <_malloc_r+0x54>
 800918a:	4c20      	ldr	r4, [pc, #128]	; (800920c <_malloc_r+0xb0>)
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	b91b      	cbnz	r3, 8009198 <_malloc_r+0x3c>
 8009190:	4630      	mov	r0, r6
 8009192:	f000 f83d 	bl	8009210 <_sbrk_r>
 8009196:	6020      	str	r0, [r4, #0]
 8009198:	4629      	mov	r1, r5
 800919a:	4630      	mov	r0, r6
 800919c:	f000 f838 	bl	8009210 <_sbrk_r>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d124      	bne.n	80091ee <_malloc_r+0x92>
 80091a4:	230c      	movs	r3, #12
 80091a6:	6033      	str	r3, [r6, #0]
 80091a8:	4630      	mov	r0, r6
 80091aa:	f000 f842 	bl	8009232 <__malloc_unlock>
 80091ae:	e7e4      	b.n	800917a <_malloc_r+0x1e>
 80091b0:	680b      	ldr	r3, [r1, #0]
 80091b2:	1b5b      	subs	r3, r3, r5
 80091b4:	d418      	bmi.n	80091e8 <_malloc_r+0x8c>
 80091b6:	2b0b      	cmp	r3, #11
 80091b8:	d90f      	bls.n	80091da <_malloc_r+0x7e>
 80091ba:	600b      	str	r3, [r1, #0]
 80091bc:	50cd      	str	r5, [r1, r3]
 80091be:	18cc      	adds	r4, r1, r3
 80091c0:	4630      	mov	r0, r6
 80091c2:	f000 f836 	bl	8009232 <__malloc_unlock>
 80091c6:	f104 000b 	add.w	r0, r4, #11
 80091ca:	1d23      	adds	r3, r4, #4
 80091cc:	f020 0007 	bic.w	r0, r0, #7
 80091d0:	1ac3      	subs	r3, r0, r3
 80091d2:	d0d3      	beq.n	800917c <_malloc_r+0x20>
 80091d4:	425a      	negs	r2, r3
 80091d6:	50e2      	str	r2, [r4, r3]
 80091d8:	e7d0      	b.n	800917c <_malloc_r+0x20>
 80091da:	428c      	cmp	r4, r1
 80091dc:	684b      	ldr	r3, [r1, #4]
 80091de:	bf16      	itet	ne
 80091e0:	6063      	strne	r3, [r4, #4]
 80091e2:	6013      	streq	r3, [r2, #0]
 80091e4:	460c      	movne	r4, r1
 80091e6:	e7eb      	b.n	80091c0 <_malloc_r+0x64>
 80091e8:	460c      	mov	r4, r1
 80091ea:	6849      	ldr	r1, [r1, #4]
 80091ec:	e7cc      	b.n	8009188 <_malloc_r+0x2c>
 80091ee:	1cc4      	adds	r4, r0, #3
 80091f0:	f024 0403 	bic.w	r4, r4, #3
 80091f4:	42a0      	cmp	r0, r4
 80091f6:	d005      	beq.n	8009204 <_malloc_r+0xa8>
 80091f8:	1a21      	subs	r1, r4, r0
 80091fa:	4630      	mov	r0, r6
 80091fc:	f000 f808 	bl	8009210 <_sbrk_r>
 8009200:	3001      	adds	r0, #1
 8009202:	d0cf      	beq.n	80091a4 <_malloc_r+0x48>
 8009204:	6025      	str	r5, [r4, #0]
 8009206:	e7db      	b.n	80091c0 <_malloc_r+0x64>
 8009208:	20000204 	.word	0x20000204
 800920c:	20000208 	.word	0x20000208

08009210 <_sbrk_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4c06      	ldr	r4, [pc, #24]	; (800922c <_sbrk_r+0x1c>)
 8009214:	2300      	movs	r3, #0
 8009216:	4605      	mov	r5, r0
 8009218:	4608      	mov	r0, r1
 800921a:	6023      	str	r3, [r4, #0]
 800921c:	f7fa fd54 	bl	8003cc8 <_sbrk>
 8009220:	1c43      	adds	r3, r0, #1
 8009222:	d102      	bne.n	800922a <_sbrk_r+0x1a>
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	b103      	cbz	r3, 800922a <_sbrk_r+0x1a>
 8009228:	602b      	str	r3, [r5, #0]
 800922a:	bd38      	pop	{r3, r4, r5, pc}
 800922c:	20000470 	.word	0x20000470

08009230 <__malloc_lock>:
 8009230:	4770      	bx	lr

08009232 <__malloc_unlock>:
 8009232:	4770      	bx	lr

08009234 <round>:
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	ec57 6b10 	vmov	r6, r7, d0
 800923a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800923e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8009242:	2c13      	cmp	r4, #19
 8009244:	463b      	mov	r3, r7
 8009246:	463d      	mov	r5, r7
 8009248:	dc17      	bgt.n	800927a <round+0x46>
 800924a:	2c00      	cmp	r4, #0
 800924c:	da09      	bge.n	8009262 <round+0x2e>
 800924e:	3401      	adds	r4, #1
 8009250:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8009254:	d103      	bne.n	800925e <round+0x2a>
 8009256:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800925a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800925e:	2100      	movs	r1, #0
 8009260:	e02c      	b.n	80092bc <round+0x88>
 8009262:	4a18      	ldr	r2, [pc, #96]	; (80092c4 <round+0x90>)
 8009264:	4122      	asrs	r2, r4
 8009266:	4217      	tst	r7, r2
 8009268:	d100      	bne.n	800926c <round+0x38>
 800926a:	b19e      	cbz	r6, 8009294 <round+0x60>
 800926c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009270:	4123      	asrs	r3, r4
 8009272:	442b      	add	r3, r5
 8009274:	ea23 0302 	bic.w	r3, r3, r2
 8009278:	e7f1      	b.n	800925e <round+0x2a>
 800927a:	2c33      	cmp	r4, #51	; 0x33
 800927c:	dd0d      	ble.n	800929a <round+0x66>
 800927e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009282:	d107      	bne.n	8009294 <round+0x60>
 8009284:	4630      	mov	r0, r6
 8009286:	4639      	mov	r1, r7
 8009288:	ee10 2a10 	vmov	r2, s0
 800928c:	f7f6 ffaa 	bl	80001e4 <__adddf3>
 8009290:	4606      	mov	r6, r0
 8009292:	460f      	mov	r7, r1
 8009294:	ec47 6b10 	vmov	d0, r6, r7
 8009298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800929a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800929e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092a2:	40d0      	lsrs	r0, r2
 80092a4:	4206      	tst	r6, r0
 80092a6:	d0f5      	beq.n	8009294 <round+0x60>
 80092a8:	2201      	movs	r2, #1
 80092aa:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80092ae:	fa02 f404 	lsl.w	r4, r2, r4
 80092b2:	1931      	adds	r1, r6, r4
 80092b4:	bf28      	it	cs
 80092b6:	189b      	addcs	r3, r3, r2
 80092b8:	ea21 0100 	bic.w	r1, r1, r0
 80092bc:	461f      	mov	r7, r3
 80092be:	460e      	mov	r6, r1
 80092c0:	e7e8      	b.n	8009294 <round+0x60>
 80092c2:	bf00      	nop
 80092c4:	000fffff 	.word	0x000fffff

080092c8 <pow>:
 80092c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092cc:	ed2d 8b04 	vpush	{d8-d9}
 80092d0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80095a4 <pow+0x2dc>
 80092d4:	b08d      	sub	sp, #52	; 0x34
 80092d6:	ec57 6b10 	vmov	r6, r7, d0
 80092da:	ec55 4b11 	vmov	r4, r5, d1
 80092de:	f000 f963 	bl	80095a8 <__ieee754_pow>
 80092e2:	f999 3000 	ldrsb.w	r3, [r9]
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	3301      	adds	r3, #1
 80092ea:	eeb0 8a40 	vmov.f32	s16, s0
 80092ee:	eef0 8a60 	vmov.f32	s17, s1
 80092f2:	46c8      	mov	r8, r9
 80092f4:	d05f      	beq.n	80093b6 <pow+0xee>
 80092f6:	4622      	mov	r2, r4
 80092f8:	462b      	mov	r3, r5
 80092fa:	4620      	mov	r0, r4
 80092fc:	4629      	mov	r1, r5
 80092fe:	f7f7 fbc1 	bl	8000a84 <__aeabi_dcmpun>
 8009302:	4683      	mov	fp, r0
 8009304:	2800      	cmp	r0, #0
 8009306:	d156      	bne.n	80093b6 <pow+0xee>
 8009308:	4632      	mov	r2, r6
 800930a:	463b      	mov	r3, r7
 800930c:	4630      	mov	r0, r6
 800930e:	4639      	mov	r1, r7
 8009310:	f7f7 fbb8 	bl	8000a84 <__aeabi_dcmpun>
 8009314:	9001      	str	r0, [sp, #4]
 8009316:	b1e8      	cbz	r0, 8009354 <pow+0x8c>
 8009318:	2200      	movs	r2, #0
 800931a:	2300      	movs	r3, #0
 800931c:	4620      	mov	r0, r4
 800931e:	4629      	mov	r1, r5
 8009320:	f7f7 fb7e 	bl	8000a20 <__aeabi_dcmpeq>
 8009324:	2800      	cmp	r0, #0
 8009326:	d046      	beq.n	80093b6 <pow+0xee>
 8009328:	2301      	movs	r3, #1
 800932a:	9302      	str	r3, [sp, #8]
 800932c:	4b96      	ldr	r3, [pc, #600]	; (8009588 <pow+0x2c0>)
 800932e:	9303      	str	r3, [sp, #12]
 8009330:	4b96      	ldr	r3, [pc, #600]	; (800958c <pow+0x2c4>)
 8009332:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009336:	2200      	movs	r2, #0
 8009338:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800933c:	9b00      	ldr	r3, [sp, #0]
 800933e:	2b02      	cmp	r3, #2
 8009340:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009344:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009348:	d033      	beq.n	80093b2 <pow+0xea>
 800934a:	a802      	add	r0, sp, #8
 800934c:	f000 fefb 	bl	800a146 <matherr>
 8009350:	bb48      	cbnz	r0, 80093a6 <pow+0xde>
 8009352:	e05d      	b.n	8009410 <pow+0x148>
 8009354:	f04f 0a00 	mov.w	sl, #0
 8009358:	f04f 0b00 	mov.w	fp, #0
 800935c:	4652      	mov	r2, sl
 800935e:	465b      	mov	r3, fp
 8009360:	4630      	mov	r0, r6
 8009362:	4639      	mov	r1, r7
 8009364:	f7f7 fb5c 	bl	8000a20 <__aeabi_dcmpeq>
 8009368:	ec4b ab19 	vmov	d9, sl, fp
 800936c:	2800      	cmp	r0, #0
 800936e:	d054      	beq.n	800941a <pow+0x152>
 8009370:	4652      	mov	r2, sl
 8009372:	465b      	mov	r3, fp
 8009374:	4620      	mov	r0, r4
 8009376:	4629      	mov	r1, r5
 8009378:	f7f7 fb52 	bl	8000a20 <__aeabi_dcmpeq>
 800937c:	4680      	mov	r8, r0
 800937e:	b318      	cbz	r0, 80093c8 <pow+0x100>
 8009380:	2301      	movs	r3, #1
 8009382:	9302      	str	r3, [sp, #8]
 8009384:	4b80      	ldr	r3, [pc, #512]	; (8009588 <pow+0x2c0>)
 8009386:	9303      	str	r3, [sp, #12]
 8009388:	9b01      	ldr	r3, [sp, #4]
 800938a:	930a      	str	r3, [sp, #40]	; 0x28
 800938c:	9b00      	ldr	r3, [sp, #0]
 800938e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009392:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009396:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0d5      	beq.n	800934a <pow+0x82>
 800939e:	4b7b      	ldr	r3, [pc, #492]	; (800958c <pow+0x2c4>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093a8:	b11b      	cbz	r3, 80093b2 <pow+0xea>
 80093aa:	f7ff fe8b 	bl	80090c4 <__errno>
 80093ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b0:	6003      	str	r3, [r0, #0]
 80093b2:	ed9d 8b08 	vldr	d8, [sp, #32]
 80093b6:	eeb0 0a48 	vmov.f32	s0, s16
 80093ba:	eef0 0a68 	vmov.f32	s1, s17
 80093be:	b00d      	add	sp, #52	; 0x34
 80093c0:	ecbd 8b04 	vpop	{d8-d9}
 80093c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c8:	ec45 4b10 	vmov	d0, r4, r5
 80093cc:	f000 feb3 	bl	800a136 <finite>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d0f0      	beq.n	80093b6 <pow+0xee>
 80093d4:	4652      	mov	r2, sl
 80093d6:	465b      	mov	r3, fp
 80093d8:	4620      	mov	r0, r4
 80093da:	4629      	mov	r1, r5
 80093dc:	f7f7 fb2a 	bl	8000a34 <__aeabi_dcmplt>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d0e8      	beq.n	80093b6 <pow+0xee>
 80093e4:	2301      	movs	r3, #1
 80093e6:	9302      	str	r3, [sp, #8]
 80093e8:	4b67      	ldr	r3, [pc, #412]	; (8009588 <pow+0x2c0>)
 80093ea:	9303      	str	r3, [sp, #12]
 80093ec:	f999 3000 	ldrsb.w	r3, [r9]
 80093f0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80093f4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80093f8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80093fc:	b913      	cbnz	r3, 8009404 <pow+0x13c>
 80093fe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009402:	e7a2      	b.n	800934a <pow+0x82>
 8009404:	4962      	ldr	r1, [pc, #392]	; (8009590 <pow+0x2c8>)
 8009406:	2000      	movs	r0, #0
 8009408:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800940c:	2b02      	cmp	r3, #2
 800940e:	d19c      	bne.n	800934a <pow+0x82>
 8009410:	f7ff fe58 	bl	80090c4 <__errno>
 8009414:	2321      	movs	r3, #33	; 0x21
 8009416:	6003      	str	r3, [r0, #0]
 8009418:	e7c5      	b.n	80093a6 <pow+0xde>
 800941a:	eeb0 0a48 	vmov.f32	s0, s16
 800941e:	eef0 0a68 	vmov.f32	s1, s17
 8009422:	f000 fe88 	bl	800a136 <finite>
 8009426:	9000      	str	r0, [sp, #0]
 8009428:	2800      	cmp	r0, #0
 800942a:	f040 8081 	bne.w	8009530 <pow+0x268>
 800942e:	ec47 6b10 	vmov	d0, r6, r7
 8009432:	f000 fe80 	bl	800a136 <finite>
 8009436:	2800      	cmp	r0, #0
 8009438:	d07a      	beq.n	8009530 <pow+0x268>
 800943a:	ec45 4b10 	vmov	d0, r4, r5
 800943e:	f000 fe7a 	bl	800a136 <finite>
 8009442:	2800      	cmp	r0, #0
 8009444:	d074      	beq.n	8009530 <pow+0x268>
 8009446:	ec53 2b18 	vmov	r2, r3, d8
 800944a:	ee18 0a10 	vmov	r0, s16
 800944e:	4619      	mov	r1, r3
 8009450:	f7f7 fb18 	bl	8000a84 <__aeabi_dcmpun>
 8009454:	f999 9000 	ldrsb.w	r9, [r9]
 8009458:	4b4b      	ldr	r3, [pc, #300]	; (8009588 <pow+0x2c0>)
 800945a:	b1b0      	cbz	r0, 800948a <pow+0x1c2>
 800945c:	2201      	movs	r2, #1
 800945e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009462:	9b00      	ldr	r3, [sp, #0]
 8009464:	930a      	str	r3, [sp, #40]	; 0x28
 8009466:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800946a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800946e:	f1b9 0f00 	cmp.w	r9, #0
 8009472:	d0c4      	beq.n	80093fe <pow+0x136>
 8009474:	4652      	mov	r2, sl
 8009476:	465b      	mov	r3, fp
 8009478:	4650      	mov	r0, sl
 800947a:	4659      	mov	r1, fp
 800947c:	f7f7 f992 	bl	80007a4 <__aeabi_ddiv>
 8009480:	f1b9 0f02 	cmp.w	r9, #2
 8009484:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009488:	e7c1      	b.n	800940e <pow+0x146>
 800948a:	2203      	movs	r2, #3
 800948c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009490:	900a      	str	r0, [sp, #40]	; 0x28
 8009492:	4629      	mov	r1, r5
 8009494:	4620      	mov	r0, r4
 8009496:	2200      	movs	r2, #0
 8009498:	4b3e      	ldr	r3, [pc, #248]	; (8009594 <pow+0x2cc>)
 800949a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800949e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80094a2:	f7f7 f855 	bl	8000550 <__aeabi_dmul>
 80094a6:	4604      	mov	r4, r0
 80094a8:	460d      	mov	r5, r1
 80094aa:	f1b9 0f00 	cmp.w	r9, #0
 80094ae:	d124      	bne.n	80094fa <pow+0x232>
 80094b0:	4b39      	ldr	r3, [pc, #228]	; (8009598 <pow+0x2d0>)
 80094b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80094b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094ba:	4630      	mov	r0, r6
 80094bc:	4652      	mov	r2, sl
 80094be:	465b      	mov	r3, fp
 80094c0:	4639      	mov	r1, r7
 80094c2:	f7f7 fab7 	bl	8000a34 <__aeabi_dcmplt>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d056      	beq.n	8009578 <pow+0x2b0>
 80094ca:	ec45 4b10 	vmov	d0, r4, r5
 80094ce:	f000 fe47 	bl	800a160 <rint>
 80094d2:	4622      	mov	r2, r4
 80094d4:	462b      	mov	r3, r5
 80094d6:	ec51 0b10 	vmov	r0, r1, d0
 80094da:	f7f7 faa1 	bl	8000a20 <__aeabi_dcmpeq>
 80094de:	b920      	cbnz	r0, 80094ea <pow+0x222>
 80094e0:	4b2e      	ldr	r3, [pc, #184]	; (800959c <pow+0x2d4>)
 80094e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80094e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094ea:	f998 3000 	ldrsb.w	r3, [r8]
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d142      	bne.n	8009578 <pow+0x2b0>
 80094f2:	f7ff fde7 	bl	80090c4 <__errno>
 80094f6:	2322      	movs	r3, #34	; 0x22
 80094f8:	e78d      	b.n	8009416 <pow+0x14e>
 80094fa:	4b29      	ldr	r3, [pc, #164]	; (80095a0 <pow+0x2d8>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009502:	4630      	mov	r0, r6
 8009504:	4652      	mov	r2, sl
 8009506:	465b      	mov	r3, fp
 8009508:	4639      	mov	r1, r7
 800950a:	f7f7 fa93 	bl	8000a34 <__aeabi_dcmplt>
 800950e:	2800      	cmp	r0, #0
 8009510:	d0eb      	beq.n	80094ea <pow+0x222>
 8009512:	ec45 4b10 	vmov	d0, r4, r5
 8009516:	f000 fe23 	bl	800a160 <rint>
 800951a:	4622      	mov	r2, r4
 800951c:	462b      	mov	r3, r5
 800951e:	ec51 0b10 	vmov	r0, r1, d0
 8009522:	f7f7 fa7d 	bl	8000a20 <__aeabi_dcmpeq>
 8009526:	2800      	cmp	r0, #0
 8009528:	d1df      	bne.n	80094ea <pow+0x222>
 800952a:	2200      	movs	r2, #0
 800952c:	4b18      	ldr	r3, [pc, #96]	; (8009590 <pow+0x2c8>)
 800952e:	e7da      	b.n	80094e6 <pow+0x21e>
 8009530:	2200      	movs	r2, #0
 8009532:	2300      	movs	r3, #0
 8009534:	ec51 0b18 	vmov	r0, r1, d8
 8009538:	f7f7 fa72 	bl	8000a20 <__aeabi_dcmpeq>
 800953c:	2800      	cmp	r0, #0
 800953e:	f43f af3a 	beq.w	80093b6 <pow+0xee>
 8009542:	ec47 6b10 	vmov	d0, r6, r7
 8009546:	f000 fdf6 	bl	800a136 <finite>
 800954a:	2800      	cmp	r0, #0
 800954c:	f43f af33 	beq.w	80093b6 <pow+0xee>
 8009550:	ec45 4b10 	vmov	d0, r4, r5
 8009554:	f000 fdef 	bl	800a136 <finite>
 8009558:	2800      	cmp	r0, #0
 800955a:	f43f af2c 	beq.w	80093b6 <pow+0xee>
 800955e:	2304      	movs	r3, #4
 8009560:	9302      	str	r3, [sp, #8]
 8009562:	4b09      	ldr	r3, [pc, #36]	; (8009588 <pow+0x2c0>)
 8009564:	9303      	str	r3, [sp, #12]
 8009566:	2300      	movs	r3, #0
 8009568:	930a      	str	r3, [sp, #40]	; 0x28
 800956a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800956e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009572:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009576:	e7b8      	b.n	80094ea <pow+0x222>
 8009578:	a802      	add	r0, sp, #8
 800957a:	f000 fde4 	bl	800a146 <matherr>
 800957e:	2800      	cmp	r0, #0
 8009580:	f47f af11 	bne.w	80093a6 <pow+0xde>
 8009584:	e7b5      	b.n	80094f2 <pow+0x22a>
 8009586:	bf00      	nop
 8009588:	0800a3b0 	.word	0x0800a3b0
 800958c:	3ff00000 	.word	0x3ff00000
 8009590:	fff00000 	.word	0xfff00000
 8009594:	3fe00000 	.word	0x3fe00000
 8009598:	47efffff 	.word	0x47efffff
 800959c:	c7efffff 	.word	0xc7efffff
 80095a0:	7ff00000 	.word	0x7ff00000
 80095a4:	200000ac 	.word	0x200000ac

080095a8 <__ieee754_pow>:
 80095a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ac:	b091      	sub	sp, #68	; 0x44
 80095ae:	ed8d 1b00 	vstr	d1, [sp]
 80095b2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80095b6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80095ba:	ea58 0302 	orrs.w	r3, r8, r2
 80095be:	ec57 6b10 	vmov	r6, r7, d0
 80095c2:	f000 84be 	beq.w	8009f42 <__ieee754_pow+0x99a>
 80095c6:	4b7a      	ldr	r3, [pc, #488]	; (80097b0 <__ieee754_pow+0x208>)
 80095c8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80095cc:	429c      	cmp	r4, r3
 80095ce:	463d      	mov	r5, r7
 80095d0:	ee10 aa10 	vmov	sl, s0
 80095d4:	dc09      	bgt.n	80095ea <__ieee754_pow+0x42>
 80095d6:	d103      	bne.n	80095e0 <__ieee754_pow+0x38>
 80095d8:	b93e      	cbnz	r6, 80095ea <__ieee754_pow+0x42>
 80095da:	45a0      	cmp	r8, r4
 80095dc:	dc0d      	bgt.n	80095fa <__ieee754_pow+0x52>
 80095de:	e001      	b.n	80095e4 <__ieee754_pow+0x3c>
 80095e0:	4598      	cmp	r8, r3
 80095e2:	dc02      	bgt.n	80095ea <__ieee754_pow+0x42>
 80095e4:	4598      	cmp	r8, r3
 80095e6:	d10e      	bne.n	8009606 <__ieee754_pow+0x5e>
 80095e8:	b16a      	cbz	r2, 8009606 <__ieee754_pow+0x5e>
 80095ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80095ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80095f2:	ea54 030a 	orrs.w	r3, r4, sl
 80095f6:	f000 84a4 	beq.w	8009f42 <__ieee754_pow+0x99a>
 80095fa:	486e      	ldr	r0, [pc, #440]	; (80097b4 <__ieee754_pow+0x20c>)
 80095fc:	b011      	add	sp, #68	; 0x44
 80095fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009602:	f000 bda5 	b.w	800a150 <nan>
 8009606:	2d00      	cmp	r5, #0
 8009608:	da53      	bge.n	80096b2 <__ieee754_pow+0x10a>
 800960a:	4b6b      	ldr	r3, [pc, #428]	; (80097b8 <__ieee754_pow+0x210>)
 800960c:	4598      	cmp	r8, r3
 800960e:	dc4d      	bgt.n	80096ac <__ieee754_pow+0x104>
 8009610:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009614:	4598      	cmp	r8, r3
 8009616:	dd4c      	ble.n	80096b2 <__ieee754_pow+0x10a>
 8009618:	ea4f 5328 	mov.w	r3, r8, asr #20
 800961c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009620:	2b14      	cmp	r3, #20
 8009622:	dd26      	ble.n	8009672 <__ieee754_pow+0xca>
 8009624:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009628:	fa22 f103 	lsr.w	r1, r2, r3
 800962c:	fa01 f303 	lsl.w	r3, r1, r3
 8009630:	4293      	cmp	r3, r2
 8009632:	d13e      	bne.n	80096b2 <__ieee754_pow+0x10a>
 8009634:	f001 0101 	and.w	r1, r1, #1
 8009638:	f1c1 0b02 	rsb	fp, r1, #2
 800963c:	2a00      	cmp	r2, #0
 800963e:	d15b      	bne.n	80096f8 <__ieee754_pow+0x150>
 8009640:	4b5b      	ldr	r3, [pc, #364]	; (80097b0 <__ieee754_pow+0x208>)
 8009642:	4598      	cmp	r8, r3
 8009644:	d124      	bne.n	8009690 <__ieee754_pow+0xe8>
 8009646:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800964a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800964e:	ea53 030a 	orrs.w	r3, r3, sl
 8009652:	f000 8476 	beq.w	8009f42 <__ieee754_pow+0x99a>
 8009656:	4b59      	ldr	r3, [pc, #356]	; (80097bc <__ieee754_pow+0x214>)
 8009658:	429c      	cmp	r4, r3
 800965a:	dd2d      	ble.n	80096b8 <__ieee754_pow+0x110>
 800965c:	f1b9 0f00 	cmp.w	r9, #0
 8009660:	f280 8473 	bge.w	8009f4a <__ieee754_pow+0x9a2>
 8009664:	2000      	movs	r0, #0
 8009666:	2100      	movs	r1, #0
 8009668:	ec41 0b10 	vmov	d0, r0, r1
 800966c:	b011      	add	sp, #68	; 0x44
 800966e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009672:	2a00      	cmp	r2, #0
 8009674:	d13e      	bne.n	80096f4 <__ieee754_pow+0x14c>
 8009676:	f1c3 0314 	rsb	r3, r3, #20
 800967a:	fa48 f103 	asr.w	r1, r8, r3
 800967e:	fa01 f303 	lsl.w	r3, r1, r3
 8009682:	4543      	cmp	r3, r8
 8009684:	f040 8469 	bne.w	8009f5a <__ieee754_pow+0x9b2>
 8009688:	f001 0101 	and.w	r1, r1, #1
 800968c:	f1c1 0b02 	rsb	fp, r1, #2
 8009690:	4b4b      	ldr	r3, [pc, #300]	; (80097c0 <__ieee754_pow+0x218>)
 8009692:	4598      	cmp	r8, r3
 8009694:	d118      	bne.n	80096c8 <__ieee754_pow+0x120>
 8009696:	f1b9 0f00 	cmp.w	r9, #0
 800969a:	f280 845a 	bge.w	8009f52 <__ieee754_pow+0x9aa>
 800969e:	4948      	ldr	r1, [pc, #288]	; (80097c0 <__ieee754_pow+0x218>)
 80096a0:	4632      	mov	r2, r6
 80096a2:	463b      	mov	r3, r7
 80096a4:	2000      	movs	r0, #0
 80096a6:	f7f7 f87d 	bl	80007a4 <__aeabi_ddiv>
 80096aa:	e7dd      	b.n	8009668 <__ieee754_pow+0xc0>
 80096ac:	f04f 0b02 	mov.w	fp, #2
 80096b0:	e7c4      	b.n	800963c <__ieee754_pow+0x94>
 80096b2:	f04f 0b00 	mov.w	fp, #0
 80096b6:	e7c1      	b.n	800963c <__ieee754_pow+0x94>
 80096b8:	f1b9 0f00 	cmp.w	r9, #0
 80096bc:	dad2      	bge.n	8009664 <__ieee754_pow+0xbc>
 80096be:	e9dd 0300 	ldrd	r0, r3, [sp]
 80096c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80096c6:	e7cf      	b.n	8009668 <__ieee754_pow+0xc0>
 80096c8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80096cc:	d106      	bne.n	80096dc <__ieee754_pow+0x134>
 80096ce:	4632      	mov	r2, r6
 80096d0:	463b      	mov	r3, r7
 80096d2:	4610      	mov	r0, r2
 80096d4:	4619      	mov	r1, r3
 80096d6:	f7f6 ff3b 	bl	8000550 <__aeabi_dmul>
 80096da:	e7c5      	b.n	8009668 <__ieee754_pow+0xc0>
 80096dc:	4b39      	ldr	r3, [pc, #228]	; (80097c4 <__ieee754_pow+0x21c>)
 80096de:	4599      	cmp	r9, r3
 80096e0:	d10a      	bne.n	80096f8 <__ieee754_pow+0x150>
 80096e2:	2d00      	cmp	r5, #0
 80096e4:	db08      	blt.n	80096f8 <__ieee754_pow+0x150>
 80096e6:	ec47 6b10 	vmov	d0, r6, r7
 80096ea:	b011      	add	sp, #68	; 0x44
 80096ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f0:	f000 bc68 	b.w	8009fc4 <__ieee754_sqrt>
 80096f4:	f04f 0b00 	mov.w	fp, #0
 80096f8:	ec47 6b10 	vmov	d0, r6, r7
 80096fc:	f000 fd12 	bl	800a124 <fabs>
 8009700:	ec51 0b10 	vmov	r0, r1, d0
 8009704:	f1ba 0f00 	cmp.w	sl, #0
 8009708:	d127      	bne.n	800975a <__ieee754_pow+0x1b2>
 800970a:	b124      	cbz	r4, 8009716 <__ieee754_pow+0x16e>
 800970c:	4b2c      	ldr	r3, [pc, #176]	; (80097c0 <__ieee754_pow+0x218>)
 800970e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009712:	429a      	cmp	r2, r3
 8009714:	d121      	bne.n	800975a <__ieee754_pow+0x1b2>
 8009716:	f1b9 0f00 	cmp.w	r9, #0
 800971a:	da05      	bge.n	8009728 <__ieee754_pow+0x180>
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	2000      	movs	r0, #0
 8009722:	4927      	ldr	r1, [pc, #156]	; (80097c0 <__ieee754_pow+0x218>)
 8009724:	f7f7 f83e 	bl	80007a4 <__aeabi_ddiv>
 8009728:	2d00      	cmp	r5, #0
 800972a:	da9d      	bge.n	8009668 <__ieee754_pow+0xc0>
 800972c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009730:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009734:	ea54 030b 	orrs.w	r3, r4, fp
 8009738:	d108      	bne.n	800974c <__ieee754_pow+0x1a4>
 800973a:	4602      	mov	r2, r0
 800973c:	460b      	mov	r3, r1
 800973e:	4610      	mov	r0, r2
 8009740:	4619      	mov	r1, r3
 8009742:	f7f6 fd4d 	bl	80001e0 <__aeabi_dsub>
 8009746:	4602      	mov	r2, r0
 8009748:	460b      	mov	r3, r1
 800974a:	e7ac      	b.n	80096a6 <__ieee754_pow+0xfe>
 800974c:	f1bb 0f01 	cmp.w	fp, #1
 8009750:	d18a      	bne.n	8009668 <__ieee754_pow+0xc0>
 8009752:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009756:	4619      	mov	r1, r3
 8009758:	e786      	b.n	8009668 <__ieee754_pow+0xc0>
 800975a:	0fed      	lsrs	r5, r5, #31
 800975c:	1e6b      	subs	r3, r5, #1
 800975e:	930d      	str	r3, [sp, #52]	; 0x34
 8009760:	ea5b 0303 	orrs.w	r3, fp, r3
 8009764:	d102      	bne.n	800976c <__ieee754_pow+0x1c4>
 8009766:	4632      	mov	r2, r6
 8009768:	463b      	mov	r3, r7
 800976a:	e7e8      	b.n	800973e <__ieee754_pow+0x196>
 800976c:	4b16      	ldr	r3, [pc, #88]	; (80097c8 <__ieee754_pow+0x220>)
 800976e:	4598      	cmp	r8, r3
 8009770:	f340 80fe 	ble.w	8009970 <__ieee754_pow+0x3c8>
 8009774:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009778:	4598      	cmp	r8, r3
 800977a:	dd0a      	ble.n	8009792 <__ieee754_pow+0x1ea>
 800977c:	4b0f      	ldr	r3, [pc, #60]	; (80097bc <__ieee754_pow+0x214>)
 800977e:	429c      	cmp	r4, r3
 8009780:	dc0d      	bgt.n	800979e <__ieee754_pow+0x1f6>
 8009782:	f1b9 0f00 	cmp.w	r9, #0
 8009786:	f6bf af6d 	bge.w	8009664 <__ieee754_pow+0xbc>
 800978a:	a307      	add	r3, pc, #28	; (adr r3, 80097a8 <__ieee754_pow+0x200>)
 800978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009790:	e79f      	b.n	80096d2 <__ieee754_pow+0x12a>
 8009792:	4b0e      	ldr	r3, [pc, #56]	; (80097cc <__ieee754_pow+0x224>)
 8009794:	429c      	cmp	r4, r3
 8009796:	ddf4      	ble.n	8009782 <__ieee754_pow+0x1da>
 8009798:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <__ieee754_pow+0x218>)
 800979a:	429c      	cmp	r4, r3
 800979c:	dd18      	ble.n	80097d0 <__ieee754_pow+0x228>
 800979e:	f1b9 0f00 	cmp.w	r9, #0
 80097a2:	dcf2      	bgt.n	800978a <__ieee754_pow+0x1e2>
 80097a4:	e75e      	b.n	8009664 <__ieee754_pow+0xbc>
 80097a6:	bf00      	nop
 80097a8:	8800759c 	.word	0x8800759c
 80097ac:	7e37e43c 	.word	0x7e37e43c
 80097b0:	7ff00000 	.word	0x7ff00000
 80097b4:	0800a3b3 	.word	0x0800a3b3
 80097b8:	433fffff 	.word	0x433fffff
 80097bc:	3fefffff 	.word	0x3fefffff
 80097c0:	3ff00000 	.word	0x3ff00000
 80097c4:	3fe00000 	.word	0x3fe00000
 80097c8:	41e00000 	.word	0x41e00000
 80097cc:	3feffffe 	.word	0x3feffffe
 80097d0:	2200      	movs	r2, #0
 80097d2:	4b63      	ldr	r3, [pc, #396]	; (8009960 <__ieee754_pow+0x3b8>)
 80097d4:	f7f6 fd04 	bl	80001e0 <__aeabi_dsub>
 80097d8:	a355      	add	r3, pc, #340	; (adr r3, 8009930 <__ieee754_pow+0x388>)
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	4604      	mov	r4, r0
 80097e0:	460d      	mov	r5, r1
 80097e2:	f7f6 feb5 	bl	8000550 <__aeabi_dmul>
 80097e6:	a354      	add	r3, pc, #336	; (adr r3, 8009938 <__ieee754_pow+0x390>)
 80097e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ec:	4606      	mov	r6, r0
 80097ee:	460f      	mov	r7, r1
 80097f0:	4620      	mov	r0, r4
 80097f2:	4629      	mov	r1, r5
 80097f4:	f7f6 feac 	bl	8000550 <__aeabi_dmul>
 80097f8:	2200      	movs	r2, #0
 80097fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097fe:	4b59      	ldr	r3, [pc, #356]	; (8009964 <__ieee754_pow+0x3bc>)
 8009800:	4620      	mov	r0, r4
 8009802:	4629      	mov	r1, r5
 8009804:	f7f6 fea4 	bl	8000550 <__aeabi_dmul>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	a14c      	add	r1, pc, #304	; (adr r1, 8009940 <__ieee754_pow+0x398>)
 800980e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009812:	f7f6 fce5 	bl	80001e0 <__aeabi_dsub>
 8009816:	4622      	mov	r2, r4
 8009818:	462b      	mov	r3, r5
 800981a:	f7f6 fe99 	bl	8000550 <__aeabi_dmul>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	2000      	movs	r0, #0
 8009824:	4950      	ldr	r1, [pc, #320]	; (8009968 <__ieee754_pow+0x3c0>)
 8009826:	f7f6 fcdb 	bl	80001e0 <__aeabi_dsub>
 800982a:	4622      	mov	r2, r4
 800982c:	462b      	mov	r3, r5
 800982e:	4680      	mov	r8, r0
 8009830:	4689      	mov	r9, r1
 8009832:	4620      	mov	r0, r4
 8009834:	4629      	mov	r1, r5
 8009836:	f7f6 fe8b 	bl	8000550 <__aeabi_dmul>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	4640      	mov	r0, r8
 8009840:	4649      	mov	r1, r9
 8009842:	f7f6 fe85 	bl	8000550 <__aeabi_dmul>
 8009846:	a340      	add	r3, pc, #256	; (adr r3, 8009948 <__ieee754_pow+0x3a0>)
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	f7f6 fe80 	bl	8000550 <__aeabi_dmul>
 8009850:	4602      	mov	r2, r0
 8009852:	460b      	mov	r3, r1
 8009854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009858:	f7f6 fcc2 	bl	80001e0 <__aeabi_dsub>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4604      	mov	r4, r0
 8009862:	460d      	mov	r5, r1
 8009864:	4630      	mov	r0, r6
 8009866:	4639      	mov	r1, r7
 8009868:	f7f6 fcbc 	bl	80001e4 <__adddf3>
 800986c:	2000      	movs	r0, #0
 800986e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009872:	4632      	mov	r2, r6
 8009874:	463b      	mov	r3, r7
 8009876:	f7f6 fcb3 	bl	80001e0 <__aeabi_dsub>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	4620      	mov	r0, r4
 8009880:	4629      	mov	r1, r5
 8009882:	f7f6 fcad 	bl	80001e0 <__aeabi_dsub>
 8009886:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009888:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800988c:	4313      	orrs	r3, r2
 800988e:	4606      	mov	r6, r0
 8009890:	460f      	mov	r7, r1
 8009892:	f040 81eb 	bne.w	8009c6c <__ieee754_pow+0x6c4>
 8009896:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009950 <__ieee754_pow+0x3a8>
 800989a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800989e:	2400      	movs	r4, #0
 80098a0:	4622      	mov	r2, r4
 80098a2:	462b      	mov	r3, r5
 80098a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098ac:	f7f6 fc98 	bl	80001e0 <__aeabi_dsub>
 80098b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098b4:	f7f6 fe4c 	bl	8000550 <__aeabi_dmul>
 80098b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098bc:	4680      	mov	r8, r0
 80098be:	4689      	mov	r9, r1
 80098c0:	4630      	mov	r0, r6
 80098c2:	4639      	mov	r1, r7
 80098c4:	f7f6 fe44 	bl	8000550 <__aeabi_dmul>
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	4640      	mov	r0, r8
 80098ce:	4649      	mov	r1, r9
 80098d0:	f7f6 fc88 	bl	80001e4 <__adddf3>
 80098d4:	4622      	mov	r2, r4
 80098d6:	462b      	mov	r3, r5
 80098d8:	4680      	mov	r8, r0
 80098da:	4689      	mov	r9, r1
 80098dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098e0:	f7f6 fe36 	bl	8000550 <__aeabi_dmul>
 80098e4:	460b      	mov	r3, r1
 80098e6:	4604      	mov	r4, r0
 80098e8:	460d      	mov	r5, r1
 80098ea:	4602      	mov	r2, r0
 80098ec:	4649      	mov	r1, r9
 80098ee:	4640      	mov	r0, r8
 80098f0:	e9cd 4500 	strd	r4, r5, [sp]
 80098f4:	f7f6 fc76 	bl	80001e4 <__adddf3>
 80098f8:	4b1c      	ldr	r3, [pc, #112]	; (800996c <__ieee754_pow+0x3c4>)
 80098fa:	4299      	cmp	r1, r3
 80098fc:	4606      	mov	r6, r0
 80098fe:	460f      	mov	r7, r1
 8009900:	468b      	mov	fp, r1
 8009902:	f340 82f7 	ble.w	8009ef4 <__ieee754_pow+0x94c>
 8009906:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800990a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800990e:	4303      	orrs	r3, r0
 8009910:	f000 81ea 	beq.w	8009ce8 <__ieee754_pow+0x740>
 8009914:	a310      	add	r3, pc, #64	; (adr r3, 8009958 <__ieee754_pow+0x3b0>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800991e:	f7f6 fe17 	bl	8000550 <__aeabi_dmul>
 8009922:	a30d      	add	r3, pc, #52	; (adr r3, 8009958 <__ieee754_pow+0x3b0>)
 8009924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009928:	e6d5      	b.n	80096d6 <__ieee754_pow+0x12e>
 800992a:	bf00      	nop
 800992c:	f3af 8000 	nop.w
 8009930:	60000000 	.word	0x60000000
 8009934:	3ff71547 	.word	0x3ff71547
 8009938:	f85ddf44 	.word	0xf85ddf44
 800993c:	3e54ae0b 	.word	0x3e54ae0b
 8009940:	55555555 	.word	0x55555555
 8009944:	3fd55555 	.word	0x3fd55555
 8009948:	652b82fe 	.word	0x652b82fe
 800994c:	3ff71547 	.word	0x3ff71547
 8009950:	00000000 	.word	0x00000000
 8009954:	bff00000 	.word	0xbff00000
 8009958:	8800759c 	.word	0x8800759c
 800995c:	7e37e43c 	.word	0x7e37e43c
 8009960:	3ff00000 	.word	0x3ff00000
 8009964:	3fd00000 	.word	0x3fd00000
 8009968:	3fe00000 	.word	0x3fe00000
 800996c:	408fffff 	.word	0x408fffff
 8009970:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009974:	f04f 0200 	mov.w	r2, #0
 8009978:	da05      	bge.n	8009986 <__ieee754_pow+0x3de>
 800997a:	4bd3      	ldr	r3, [pc, #844]	; (8009cc8 <__ieee754_pow+0x720>)
 800997c:	f7f6 fde8 	bl	8000550 <__aeabi_dmul>
 8009980:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009984:	460c      	mov	r4, r1
 8009986:	1523      	asrs	r3, r4, #20
 8009988:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800998c:	4413      	add	r3, r2
 800998e:	9309      	str	r3, [sp, #36]	; 0x24
 8009990:	4bce      	ldr	r3, [pc, #824]	; (8009ccc <__ieee754_pow+0x724>)
 8009992:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009996:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800999a:	429c      	cmp	r4, r3
 800999c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80099a0:	dd08      	ble.n	80099b4 <__ieee754_pow+0x40c>
 80099a2:	4bcb      	ldr	r3, [pc, #812]	; (8009cd0 <__ieee754_pow+0x728>)
 80099a4:	429c      	cmp	r4, r3
 80099a6:	f340 815e 	ble.w	8009c66 <__ieee754_pow+0x6be>
 80099aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ac:	3301      	adds	r3, #1
 80099ae:	9309      	str	r3, [sp, #36]	; 0x24
 80099b0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80099b4:	f04f 0a00 	mov.w	sl, #0
 80099b8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80099bc:	930c      	str	r3, [sp, #48]	; 0x30
 80099be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099c0:	4bc4      	ldr	r3, [pc, #784]	; (8009cd4 <__ieee754_pow+0x72c>)
 80099c2:	4413      	add	r3, r2
 80099c4:	ed93 7b00 	vldr	d7, [r3]
 80099c8:	4629      	mov	r1, r5
 80099ca:	ec53 2b17 	vmov	r2, r3, d7
 80099ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80099d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80099d6:	f7f6 fc03 	bl	80001e0 <__aeabi_dsub>
 80099da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80099de:	4606      	mov	r6, r0
 80099e0:	460f      	mov	r7, r1
 80099e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099e6:	f7f6 fbfd 	bl	80001e4 <__adddf3>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	2000      	movs	r0, #0
 80099f0:	49b9      	ldr	r1, [pc, #740]	; (8009cd8 <__ieee754_pow+0x730>)
 80099f2:	f7f6 fed7 	bl	80007a4 <__aeabi_ddiv>
 80099f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	4630      	mov	r0, r6
 8009a00:	4639      	mov	r1, r7
 8009a02:	f7f6 fda5 	bl	8000550 <__aeabi_dmul>
 8009a06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a0a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009a0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009a12:	2300      	movs	r3, #0
 8009a14:	9302      	str	r3, [sp, #8]
 8009a16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009a1a:	106d      	asrs	r5, r5, #1
 8009a1c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009a20:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009a24:	2200      	movs	r2, #0
 8009a26:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009a2a:	4640      	mov	r0, r8
 8009a2c:	4649      	mov	r1, r9
 8009a2e:	4614      	mov	r4, r2
 8009a30:	461d      	mov	r5, r3
 8009a32:	f7f6 fd8d 	bl	8000550 <__aeabi_dmul>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	f7f6 fbcf 	bl	80001e0 <__aeabi_dsub>
 8009a42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a46:	4606      	mov	r6, r0
 8009a48:	460f      	mov	r7, r1
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	f7f6 fbc7 	bl	80001e0 <__aeabi_dsub>
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a5a:	f7f6 fbc1 	bl	80001e0 <__aeabi_dsub>
 8009a5e:	4642      	mov	r2, r8
 8009a60:	464b      	mov	r3, r9
 8009a62:	f7f6 fd75 	bl	8000550 <__aeabi_dmul>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	4639      	mov	r1, r7
 8009a6e:	f7f6 fbb7 	bl	80001e0 <__aeabi_dsub>
 8009a72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009a76:	f7f6 fd6b 	bl	8000550 <__aeabi_dmul>
 8009a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a82:	4610      	mov	r0, r2
 8009a84:	4619      	mov	r1, r3
 8009a86:	f7f6 fd63 	bl	8000550 <__aeabi_dmul>
 8009a8a:	a37b      	add	r3, pc, #492	; (adr r3, 8009c78 <__ieee754_pow+0x6d0>)
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	4604      	mov	r4, r0
 8009a92:	460d      	mov	r5, r1
 8009a94:	f7f6 fd5c 	bl	8000550 <__aeabi_dmul>
 8009a98:	a379      	add	r3, pc, #484	; (adr r3, 8009c80 <__ieee754_pow+0x6d8>)
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	f7f6 fba1 	bl	80001e4 <__adddf3>
 8009aa2:	4622      	mov	r2, r4
 8009aa4:	462b      	mov	r3, r5
 8009aa6:	f7f6 fd53 	bl	8000550 <__aeabi_dmul>
 8009aaa:	a377      	add	r3, pc, #476	; (adr r3, 8009c88 <__ieee754_pow+0x6e0>)
 8009aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab0:	f7f6 fb98 	bl	80001e4 <__adddf3>
 8009ab4:	4622      	mov	r2, r4
 8009ab6:	462b      	mov	r3, r5
 8009ab8:	f7f6 fd4a 	bl	8000550 <__aeabi_dmul>
 8009abc:	a374      	add	r3, pc, #464	; (adr r3, 8009c90 <__ieee754_pow+0x6e8>)
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	f7f6 fb8f 	bl	80001e4 <__adddf3>
 8009ac6:	4622      	mov	r2, r4
 8009ac8:	462b      	mov	r3, r5
 8009aca:	f7f6 fd41 	bl	8000550 <__aeabi_dmul>
 8009ace:	a372      	add	r3, pc, #456	; (adr r3, 8009c98 <__ieee754_pow+0x6f0>)
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	f7f6 fb86 	bl	80001e4 <__adddf3>
 8009ad8:	4622      	mov	r2, r4
 8009ada:	462b      	mov	r3, r5
 8009adc:	f7f6 fd38 	bl	8000550 <__aeabi_dmul>
 8009ae0:	a36f      	add	r3, pc, #444	; (adr r3, 8009ca0 <__ieee754_pow+0x6f8>)
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	f7f6 fb7d 	bl	80001e4 <__adddf3>
 8009aea:	4622      	mov	r2, r4
 8009aec:	4606      	mov	r6, r0
 8009aee:	460f      	mov	r7, r1
 8009af0:	462b      	mov	r3, r5
 8009af2:	4620      	mov	r0, r4
 8009af4:	4629      	mov	r1, r5
 8009af6:	f7f6 fd2b 	bl	8000550 <__aeabi_dmul>
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	4630      	mov	r0, r6
 8009b00:	4639      	mov	r1, r7
 8009b02:	f7f6 fd25 	bl	8000550 <__aeabi_dmul>
 8009b06:	4642      	mov	r2, r8
 8009b08:	4604      	mov	r4, r0
 8009b0a:	460d      	mov	r5, r1
 8009b0c:	464b      	mov	r3, r9
 8009b0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b12:	f7f6 fb67 	bl	80001e4 <__adddf3>
 8009b16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b1a:	f7f6 fd19 	bl	8000550 <__aeabi_dmul>
 8009b1e:	4622      	mov	r2, r4
 8009b20:	462b      	mov	r3, r5
 8009b22:	f7f6 fb5f 	bl	80001e4 <__adddf3>
 8009b26:	4642      	mov	r2, r8
 8009b28:	4606      	mov	r6, r0
 8009b2a:	460f      	mov	r7, r1
 8009b2c:	464b      	mov	r3, r9
 8009b2e:	4640      	mov	r0, r8
 8009b30:	4649      	mov	r1, r9
 8009b32:	f7f6 fd0d 	bl	8000550 <__aeabi_dmul>
 8009b36:	2200      	movs	r2, #0
 8009b38:	4b68      	ldr	r3, [pc, #416]	; (8009cdc <__ieee754_pow+0x734>)
 8009b3a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009b3e:	f7f6 fb51 	bl	80001e4 <__adddf3>
 8009b42:	4632      	mov	r2, r6
 8009b44:	463b      	mov	r3, r7
 8009b46:	f7f6 fb4d 	bl	80001e4 <__adddf3>
 8009b4a:	9802      	ldr	r0, [sp, #8]
 8009b4c:	460d      	mov	r5, r1
 8009b4e:	4604      	mov	r4, r0
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	4640      	mov	r0, r8
 8009b56:	4649      	mov	r1, r9
 8009b58:	f7f6 fcfa 	bl	8000550 <__aeabi_dmul>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4680      	mov	r8, r0
 8009b60:	4689      	mov	r9, r1
 8009b62:	4b5e      	ldr	r3, [pc, #376]	; (8009cdc <__ieee754_pow+0x734>)
 8009b64:	4620      	mov	r0, r4
 8009b66:	4629      	mov	r1, r5
 8009b68:	f7f6 fb3a 	bl	80001e0 <__aeabi_dsub>
 8009b6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009b70:	f7f6 fb36 	bl	80001e0 <__aeabi_dsub>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4630      	mov	r0, r6
 8009b7a:	4639      	mov	r1, r7
 8009b7c:	f7f6 fb30 	bl	80001e0 <__aeabi_dsub>
 8009b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b84:	f7f6 fce4 	bl	8000550 <__aeabi_dmul>
 8009b88:	4622      	mov	r2, r4
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	460f      	mov	r7, r1
 8009b8e:	462b      	mov	r3, r5
 8009b90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b94:	f7f6 fcdc 	bl	8000550 <__aeabi_dmul>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	f7f6 fb20 	bl	80001e4 <__adddf3>
 8009ba4:	4606      	mov	r6, r0
 8009ba6:	460f      	mov	r7, r1
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	4640      	mov	r0, r8
 8009bae:	4649      	mov	r1, r9
 8009bb0:	f7f6 fb18 	bl	80001e4 <__adddf3>
 8009bb4:	9802      	ldr	r0, [sp, #8]
 8009bb6:	a33c      	add	r3, pc, #240	; (adr r3, 8009ca8 <__ieee754_pow+0x700>)
 8009bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	460d      	mov	r5, r1
 8009bc0:	f7f6 fcc6 	bl	8000550 <__aeabi_dmul>
 8009bc4:	4642      	mov	r2, r8
 8009bc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009bca:	464b      	mov	r3, r9
 8009bcc:	4620      	mov	r0, r4
 8009bce:	4629      	mov	r1, r5
 8009bd0:	f7f6 fb06 	bl	80001e0 <__aeabi_dsub>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	4630      	mov	r0, r6
 8009bda:	4639      	mov	r1, r7
 8009bdc:	f7f6 fb00 	bl	80001e0 <__aeabi_dsub>
 8009be0:	a333      	add	r3, pc, #204	; (adr r3, 8009cb0 <__ieee754_pow+0x708>)
 8009be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be6:	f7f6 fcb3 	bl	8000550 <__aeabi_dmul>
 8009bea:	a333      	add	r3, pc, #204	; (adr r3, 8009cb8 <__ieee754_pow+0x710>)
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	4606      	mov	r6, r0
 8009bf2:	460f      	mov	r7, r1
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	f7f6 fcaa 	bl	8000550 <__aeabi_dmul>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	4630      	mov	r0, r6
 8009c02:	4639      	mov	r1, r7
 8009c04:	f7f6 faee 	bl	80001e4 <__adddf3>
 8009c08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c0a:	4b35      	ldr	r3, [pc, #212]	; (8009ce0 <__ieee754_pow+0x738>)
 8009c0c:	4413      	add	r3, r2
 8009c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c12:	f7f6 fae7 	bl	80001e4 <__adddf3>
 8009c16:	4604      	mov	r4, r0
 8009c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c1a:	460d      	mov	r5, r1
 8009c1c:	f7f6 fc2e 	bl	800047c <__aeabi_i2d>
 8009c20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c22:	4b30      	ldr	r3, [pc, #192]	; (8009ce4 <__ieee754_pow+0x73c>)
 8009c24:	4413      	add	r3, r2
 8009c26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	460f      	mov	r7, r1
 8009c2e:	4622      	mov	r2, r4
 8009c30:	462b      	mov	r3, r5
 8009c32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c36:	f7f6 fad5 	bl	80001e4 <__adddf3>
 8009c3a:	4642      	mov	r2, r8
 8009c3c:	464b      	mov	r3, r9
 8009c3e:	f7f6 fad1 	bl	80001e4 <__adddf3>
 8009c42:	4632      	mov	r2, r6
 8009c44:	463b      	mov	r3, r7
 8009c46:	f7f6 facd 	bl	80001e4 <__adddf3>
 8009c4a:	9802      	ldr	r0, [sp, #8]
 8009c4c:	4632      	mov	r2, r6
 8009c4e:	463b      	mov	r3, r7
 8009c50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c54:	f7f6 fac4 	bl	80001e0 <__aeabi_dsub>
 8009c58:	4642      	mov	r2, r8
 8009c5a:	464b      	mov	r3, r9
 8009c5c:	f7f6 fac0 	bl	80001e0 <__aeabi_dsub>
 8009c60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c64:	e607      	b.n	8009876 <__ieee754_pow+0x2ce>
 8009c66:	f04f 0a01 	mov.w	sl, #1
 8009c6a:	e6a5      	b.n	80099b8 <__ieee754_pow+0x410>
 8009c6c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009cc0 <__ieee754_pow+0x718>
 8009c70:	e613      	b.n	800989a <__ieee754_pow+0x2f2>
 8009c72:	bf00      	nop
 8009c74:	f3af 8000 	nop.w
 8009c78:	4a454eef 	.word	0x4a454eef
 8009c7c:	3fca7e28 	.word	0x3fca7e28
 8009c80:	93c9db65 	.word	0x93c9db65
 8009c84:	3fcd864a 	.word	0x3fcd864a
 8009c88:	a91d4101 	.word	0xa91d4101
 8009c8c:	3fd17460 	.word	0x3fd17460
 8009c90:	518f264d 	.word	0x518f264d
 8009c94:	3fd55555 	.word	0x3fd55555
 8009c98:	db6fabff 	.word	0xdb6fabff
 8009c9c:	3fdb6db6 	.word	0x3fdb6db6
 8009ca0:	33333303 	.word	0x33333303
 8009ca4:	3fe33333 	.word	0x3fe33333
 8009ca8:	e0000000 	.word	0xe0000000
 8009cac:	3feec709 	.word	0x3feec709
 8009cb0:	dc3a03fd 	.word	0xdc3a03fd
 8009cb4:	3feec709 	.word	0x3feec709
 8009cb8:	145b01f5 	.word	0x145b01f5
 8009cbc:	be3e2fe0 	.word	0xbe3e2fe0
 8009cc0:	00000000 	.word	0x00000000
 8009cc4:	3ff00000 	.word	0x3ff00000
 8009cc8:	43400000 	.word	0x43400000
 8009ccc:	0003988e 	.word	0x0003988e
 8009cd0:	000bb679 	.word	0x000bb679
 8009cd4:	0800a3b8 	.word	0x0800a3b8
 8009cd8:	3ff00000 	.word	0x3ff00000
 8009cdc:	40080000 	.word	0x40080000
 8009ce0:	0800a3d8 	.word	0x0800a3d8
 8009ce4:	0800a3c8 	.word	0x0800a3c8
 8009ce8:	a3b4      	add	r3, pc, #720	; (adr r3, 8009fbc <__ieee754_pow+0xa14>)
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	4640      	mov	r0, r8
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	f7f6 fa77 	bl	80001e4 <__adddf3>
 8009cf6:	4622      	mov	r2, r4
 8009cf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cfc:	462b      	mov	r3, r5
 8009cfe:	4630      	mov	r0, r6
 8009d00:	4639      	mov	r1, r7
 8009d02:	f7f6 fa6d 	bl	80001e0 <__aeabi_dsub>
 8009d06:	4602      	mov	r2, r0
 8009d08:	460b      	mov	r3, r1
 8009d0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d0e:	f7f6 feaf 	bl	8000a70 <__aeabi_dcmpgt>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	f47f adfe 	bne.w	8009914 <__ieee754_pow+0x36c>
 8009d18:	4aa3      	ldr	r2, [pc, #652]	; (8009fa8 <__ieee754_pow+0xa00>)
 8009d1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	f340 810a 	ble.w	8009f38 <__ieee754_pow+0x990>
 8009d24:	151b      	asrs	r3, r3, #20
 8009d26:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009d2a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009d2e:	fa4a f303 	asr.w	r3, sl, r3
 8009d32:	445b      	add	r3, fp
 8009d34:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009d38:	4e9c      	ldr	r6, [pc, #624]	; (8009fac <__ieee754_pow+0xa04>)
 8009d3a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009d3e:	4116      	asrs	r6, r2
 8009d40:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009d44:	2000      	movs	r0, #0
 8009d46:	ea23 0106 	bic.w	r1, r3, r6
 8009d4a:	f1c2 0214 	rsb	r2, r2, #20
 8009d4e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009d52:	fa4a fa02 	asr.w	sl, sl, r2
 8009d56:	f1bb 0f00 	cmp.w	fp, #0
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4620      	mov	r0, r4
 8009d60:	4629      	mov	r1, r5
 8009d62:	bfb8      	it	lt
 8009d64:	f1ca 0a00 	rsblt	sl, sl, #0
 8009d68:	f7f6 fa3a 	bl	80001e0 <__aeabi_dsub>
 8009d6c:	e9cd 0100 	strd	r0, r1, [sp]
 8009d70:	4642      	mov	r2, r8
 8009d72:	464b      	mov	r3, r9
 8009d74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d78:	f7f6 fa34 	bl	80001e4 <__adddf3>
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	a378      	add	r3, pc, #480	; (adr r3, 8009f60 <__ieee754_pow+0x9b8>)
 8009d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d84:	4604      	mov	r4, r0
 8009d86:	460d      	mov	r5, r1
 8009d88:	f7f6 fbe2 	bl	8000550 <__aeabi_dmul>
 8009d8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d90:	4606      	mov	r6, r0
 8009d92:	460f      	mov	r7, r1
 8009d94:	4620      	mov	r0, r4
 8009d96:	4629      	mov	r1, r5
 8009d98:	f7f6 fa22 	bl	80001e0 <__aeabi_dsub>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4640      	mov	r0, r8
 8009da2:	4649      	mov	r1, r9
 8009da4:	f7f6 fa1c 	bl	80001e0 <__aeabi_dsub>
 8009da8:	a36f      	add	r3, pc, #444	; (adr r3, 8009f68 <__ieee754_pow+0x9c0>)
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	f7f6 fbcf 	bl	8000550 <__aeabi_dmul>
 8009db2:	a36f      	add	r3, pc, #444	; (adr r3, 8009f70 <__ieee754_pow+0x9c8>)
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	4680      	mov	r8, r0
 8009dba:	4689      	mov	r9, r1
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	f7f6 fbc6 	bl	8000550 <__aeabi_dmul>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	4640      	mov	r0, r8
 8009dca:	4649      	mov	r1, r9
 8009dcc:	f7f6 fa0a 	bl	80001e4 <__adddf3>
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	460d      	mov	r5, r1
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4630      	mov	r0, r6
 8009dda:	4639      	mov	r1, r7
 8009ddc:	f7f6 fa02 	bl	80001e4 <__adddf3>
 8009de0:	4632      	mov	r2, r6
 8009de2:	463b      	mov	r3, r7
 8009de4:	4680      	mov	r8, r0
 8009de6:	4689      	mov	r9, r1
 8009de8:	f7f6 f9fa 	bl	80001e0 <__aeabi_dsub>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	4620      	mov	r0, r4
 8009df2:	4629      	mov	r1, r5
 8009df4:	f7f6 f9f4 	bl	80001e0 <__aeabi_dsub>
 8009df8:	4642      	mov	r2, r8
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	460f      	mov	r7, r1
 8009dfe:	464b      	mov	r3, r9
 8009e00:	4640      	mov	r0, r8
 8009e02:	4649      	mov	r1, r9
 8009e04:	f7f6 fba4 	bl	8000550 <__aeabi_dmul>
 8009e08:	a35b      	add	r3, pc, #364	; (adr r3, 8009f78 <__ieee754_pow+0x9d0>)
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	4604      	mov	r4, r0
 8009e10:	460d      	mov	r5, r1
 8009e12:	f7f6 fb9d 	bl	8000550 <__aeabi_dmul>
 8009e16:	a35a      	add	r3, pc, #360	; (adr r3, 8009f80 <__ieee754_pow+0x9d8>)
 8009e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1c:	f7f6 f9e0 	bl	80001e0 <__aeabi_dsub>
 8009e20:	4622      	mov	r2, r4
 8009e22:	462b      	mov	r3, r5
 8009e24:	f7f6 fb94 	bl	8000550 <__aeabi_dmul>
 8009e28:	a357      	add	r3, pc, #348	; (adr r3, 8009f88 <__ieee754_pow+0x9e0>)
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	f7f6 f9d9 	bl	80001e4 <__adddf3>
 8009e32:	4622      	mov	r2, r4
 8009e34:	462b      	mov	r3, r5
 8009e36:	f7f6 fb8b 	bl	8000550 <__aeabi_dmul>
 8009e3a:	a355      	add	r3, pc, #340	; (adr r3, 8009f90 <__ieee754_pow+0x9e8>)
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	f7f6 f9ce 	bl	80001e0 <__aeabi_dsub>
 8009e44:	4622      	mov	r2, r4
 8009e46:	462b      	mov	r3, r5
 8009e48:	f7f6 fb82 	bl	8000550 <__aeabi_dmul>
 8009e4c:	a352      	add	r3, pc, #328	; (adr r3, 8009f98 <__ieee754_pow+0x9f0>)
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	f7f6 f9c7 	bl	80001e4 <__adddf3>
 8009e56:	4622      	mov	r2, r4
 8009e58:	462b      	mov	r3, r5
 8009e5a:	f7f6 fb79 	bl	8000550 <__aeabi_dmul>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	4640      	mov	r0, r8
 8009e64:	4649      	mov	r1, r9
 8009e66:	f7f6 f9bb 	bl	80001e0 <__aeabi_dsub>
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	460d      	mov	r5, r1
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	4640      	mov	r0, r8
 8009e74:	4649      	mov	r1, r9
 8009e76:	f7f6 fb6b 	bl	8000550 <__aeabi_dmul>
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	e9cd 0100 	strd	r0, r1, [sp]
 8009e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e84:	4620      	mov	r0, r4
 8009e86:	4629      	mov	r1, r5
 8009e88:	f7f6 f9aa 	bl	80001e0 <__aeabi_dsub>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e94:	f7f6 fc86 	bl	80007a4 <__aeabi_ddiv>
 8009e98:	4632      	mov	r2, r6
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	460d      	mov	r5, r1
 8009e9e:	463b      	mov	r3, r7
 8009ea0:	4640      	mov	r0, r8
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	f7f6 fb54 	bl	8000550 <__aeabi_dmul>
 8009ea8:	4632      	mov	r2, r6
 8009eaa:	463b      	mov	r3, r7
 8009eac:	f7f6 f99a 	bl	80001e4 <__adddf3>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	f7f6 f992 	bl	80001e0 <__aeabi_dsub>
 8009ebc:	4642      	mov	r2, r8
 8009ebe:	464b      	mov	r3, r9
 8009ec0:	f7f6 f98e 	bl	80001e0 <__aeabi_dsub>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	2000      	movs	r0, #0
 8009eca:	4939      	ldr	r1, [pc, #228]	; (8009fb0 <__ieee754_pow+0xa08>)
 8009ecc:	f7f6 f988 	bl	80001e0 <__aeabi_dsub>
 8009ed0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009ed4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	da2f      	bge.n	8009f3e <__ieee754_pow+0x996>
 8009ede:	4650      	mov	r0, sl
 8009ee0:	ec43 2b10 	vmov	d0, r2, r3
 8009ee4:	f000 f9c0 	bl	800a268 <scalbn>
 8009ee8:	ec51 0b10 	vmov	r0, r1, d0
 8009eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ef0:	f7ff bbf1 	b.w	80096d6 <__ieee754_pow+0x12e>
 8009ef4:	4b2f      	ldr	r3, [pc, #188]	; (8009fb4 <__ieee754_pow+0xa0c>)
 8009ef6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009efa:	429e      	cmp	r6, r3
 8009efc:	f77f af0c 	ble.w	8009d18 <__ieee754_pow+0x770>
 8009f00:	4b2d      	ldr	r3, [pc, #180]	; (8009fb8 <__ieee754_pow+0xa10>)
 8009f02:	440b      	add	r3, r1
 8009f04:	4303      	orrs	r3, r0
 8009f06:	d00b      	beq.n	8009f20 <__ieee754_pow+0x978>
 8009f08:	a325      	add	r3, pc, #148	; (adr r3, 8009fa0 <__ieee754_pow+0x9f8>)
 8009f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f12:	f7f6 fb1d 	bl	8000550 <__aeabi_dmul>
 8009f16:	a322      	add	r3, pc, #136	; (adr r3, 8009fa0 <__ieee754_pow+0x9f8>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	f7ff bbdb 	b.w	80096d6 <__ieee754_pow+0x12e>
 8009f20:	4622      	mov	r2, r4
 8009f22:	462b      	mov	r3, r5
 8009f24:	f7f6 f95c 	bl	80001e0 <__aeabi_dsub>
 8009f28:	4642      	mov	r2, r8
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	f7f6 fd96 	bl	8000a5c <__aeabi_dcmpge>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	f43f aef1 	beq.w	8009d18 <__ieee754_pow+0x770>
 8009f36:	e7e7      	b.n	8009f08 <__ieee754_pow+0x960>
 8009f38:	f04f 0a00 	mov.w	sl, #0
 8009f3c:	e718      	b.n	8009d70 <__ieee754_pow+0x7c8>
 8009f3e:	4621      	mov	r1, r4
 8009f40:	e7d4      	b.n	8009eec <__ieee754_pow+0x944>
 8009f42:	2000      	movs	r0, #0
 8009f44:	491a      	ldr	r1, [pc, #104]	; (8009fb0 <__ieee754_pow+0xa08>)
 8009f46:	f7ff bb8f 	b.w	8009668 <__ieee754_pow+0xc0>
 8009f4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f4e:	f7ff bb8b 	b.w	8009668 <__ieee754_pow+0xc0>
 8009f52:	4630      	mov	r0, r6
 8009f54:	4639      	mov	r1, r7
 8009f56:	f7ff bb87 	b.w	8009668 <__ieee754_pow+0xc0>
 8009f5a:	4693      	mov	fp, r2
 8009f5c:	f7ff bb98 	b.w	8009690 <__ieee754_pow+0xe8>
 8009f60:	00000000 	.word	0x00000000
 8009f64:	3fe62e43 	.word	0x3fe62e43
 8009f68:	fefa39ef 	.word	0xfefa39ef
 8009f6c:	3fe62e42 	.word	0x3fe62e42
 8009f70:	0ca86c39 	.word	0x0ca86c39
 8009f74:	be205c61 	.word	0xbe205c61
 8009f78:	72bea4d0 	.word	0x72bea4d0
 8009f7c:	3e663769 	.word	0x3e663769
 8009f80:	c5d26bf1 	.word	0xc5d26bf1
 8009f84:	3ebbbd41 	.word	0x3ebbbd41
 8009f88:	af25de2c 	.word	0xaf25de2c
 8009f8c:	3f11566a 	.word	0x3f11566a
 8009f90:	16bebd93 	.word	0x16bebd93
 8009f94:	3f66c16c 	.word	0x3f66c16c
 8009f98:	5555553e 	.word	0x5555553e
 8009f9c:	3fc55555 	.word	0x3fc55555
 8009fa0:	c2f8f359 	.word	0xc2f8f359
 8009fa4:	01a56e1f 	.word	0x01a56e1f
 8009fa8:	3fe00000 	.word	0x3fe00000
 8009fac:	000fffff 	.word	0x000fffff
 8009fb0:	3ff00000 	.word	0x3ff00000
 8009fb4:	4090cbff 	.word	0x4090cbff
 8009fb8:	3f6f3400 	.word	0x3f6f3400
 8009fbc:	652b82fe 	.word	0x652b82fe
 8009fc0:	3c971547 	.word	0x3c971547

08009fc4 <__ieee754_sqrt>:
 8009fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc8:	4955      	ldr	r1, [pc, #340]	; (800a120 <__ieee754_sqrt+0x15c>)
 8009fca:	ec55 4b10 	vmov	r4, r5, d0
 8009fce:	43a9      	bics	r1, r5
 8009fd0:	462b      	mov	r3, r5
 8009fd2:	462a      	mov	r2, r5
 8009fd4:	d112      	bne.n	8009ffc <__ieee754_sqrt+0x38>
 8009fd6:	ee10 2a10 	vmov	r2, s0
 8009fda:	ee10 0a10 	vmov	r0, s0
 8009fde:	4629      	mov	r1, r5
 8009fe0:	f7f6 fab6 	bl	8000550 <__aeabi_dmul>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	4620      	mov	r0, r4
 8009fea:	4629      	mov	r1, r5
 8009fec:	f7f6 f8fa 	bl	80001e4 <__adddf3>
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	460d      	mov	r5, r1
 8009ff4:	ec45 4b10 	vmov	d0, r4, r5
 8009ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ffc:	2d00      	cmp	r5, #0
 8009ffe:	ee10 0a10 	vmov	r0, s0
 800a002:	4621      	mov	r1, r4
 800a004:	dc0f      	bgt.n	800a026 <__ieee754_sqrt+0x62>
 800a006:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a00a:	4330      	orrs	r0, r6
 800a00c:	d0f2      	beq.n	8009ff4 <__ieee754_sqrt+0x30>
 800a00e:	b155      	cbz	r5, 800a026 <__ieee754_sqrt+0x62>
 800a010:	ee10 2a10 	vmov	r2, s0
 800a014:	4620      	mov	r0, r4
 800a016:	4629      	mov	r1, r5
 800a018:	f7f6 f8e2 	bl	80001e0 <__aeabi_dsub>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	f7f6 fbc0 	bl	80007a4 <__aeabi_ddiv>
 800a024:	e7e4      	b.n	8009ff0 <__ieee754_sqrt+0x2c>
 800a026:	151b      	asrs	r3, r3, #20
 800a028:	d073      	beq.n	800a112 <__ieee754_sqrt+0x14e>
 800a02a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a02e:	07dd      	lsls	r5, r3, #31
 800a030:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a034:	bf48      	it	mi
 800a036:	0fc8      	lsrmi	r0, r1, #31
 800a038:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a03c:	bf44      	itt	mi
 800a03e:	0049      	lslmi	r1, r1, #1
 800a040:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a044:	2500      	movs	r5, #0
 800a046:	1058      	asrs	r0, r3, #1
 800a048:	0fcb      	lsrs	r3, r1, #31
 800a04a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a04e:	0049      	lsls	r1, r1, #1
 800a050:	2316      	movs	r3, #22
 800a052:	462c      	mov	r4, r5
 800a054:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a058:	19a7      	adds	r7, r4, r6
 800a05a:	4297      	cmp	r7, r2
 800a05c:	bfde      	ittt	le
 800a05e:	19bc      	addle	r4, r7, r6
 800a060:	1bd2      	suble	r2, r2, r7
 800a062:	19ad      	addle	r5, r5, r6
 800a064:	0fcf      	lsrs	r7, r1, #31
 800a066:	3b01      	subs	r3, #1
 800a068:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a06c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a070:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a074:	d1f0      	bne.n	800a058 <__ieee754_sqrt+0x94>
 800a076:	f04f 0c20 	mov.w	ip, #32
 800a07a:	469e      	mov	lr, r3
 800a07c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a080:	42a2      	cmp	r2, r4
 800a082:	eb06 070e 	add.w	r7, r6, lr
 800a086:	dc02      	bgt.n	800a08e <__ieee754_sqrt+0xca>
 800a088:	d112      	bne.n	800a0b0 <__ieee754_sqrt+0xec>
 800a08a:	428f      	cmp	r7, r1
 800a08c:	d810      	bhi.n	800a0b0 <__ieee754_sqrt+0xec>
 800a08e:	2f00      	cmp	r7, #0
 800a090:	eb07 0e06 	add.w	lr, r7, r6
 800a094:	da42      	bge.n	800a11c <__ieee754_sqrt+0x158>
 800a096:	f1be 0f00 	cmp.w	lr, #0
 800a09a:	db3f      	blt.n	800a11c <__ieee754_sqrt+0x158>
 800a09c:	f104 0801 	add.w	r8, r4, #1
 800a0a0:	1b12      	subs	r2, r2, r4
 800a0a2:	428f      	cmp	r7, r1
 800a0a4:	bf88      	it	hi
 800a0a6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a0aa:	1bc9      	subs	r1, r1, r7
 800a0ac:	4433      	add	r3, r6
 800a0ae:	4644      	mov	r4, r8
 800a0b0:	0052      	lsls	r2, r2, #1
 800a0b2:	f1bc 0c01 	subs.w	ip, ip, #1
 800a0b6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a0ba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a0be:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a0c2:	d1dd      	bne.n	800a080 <__ieee754_sqrt+0xbc>
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	d006      	beq.n	800a0d6 <__ieee754_sqrt+0x112>
 800a0c8:	1c5c      	adds	r4, r3, #1
 800a0ca:	bf13      	iteet	ne
 800a0cc:	3301      	addne	r3, #1
 800a0ce:	3501      	addeq	r5, #1
 800a0d0:	4663      	moveq	r3, ip
 800a0d2:	f023 0301 	bicne.w	r3, r3, #1
 800a0d6:	106a      	asrs	r2, r5, #1
 800a0d8:	085b      	lsrs	r3, r3, #1
 800a0da:	07e9      	lsls	r1, r5, #31
 800a0dc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a0e0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a0e4:	bf48      	it	mi
 800a0e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a0ea:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a0ee:	461c      	mov	r4, r3
 800a0f0:	e780      	b.n	8009ff4 <__ieee754_sqrt+0x30>
 800a0f2:	0aca      	lsrs	r2, r1, #11
 800a0f4:	3815      	subs	r0, #21
 800a0f6:	0549      	lsls	r1, r1, #21
 800a0f8:	2a00      	cmp	r2, #0
 800a0fa:	d0fa      	beq.n	800a0f2 <__ieee754_sqrt+0x12e>
 800a0fc:	02d6      	lsls	r6, r2, #11
 800a0fe:	d50a      	bpl.n	800a116 <__ieee754_sqrt+0x152>
 800a100:	f1c3 0420 	rsb	r4, r3, #32
 800a104:	fa21 f404 	lsr.w	r4, r1, r4
 800a108:	1e5d      	subs	r5, r3, #1
 800a10a:	4099      	lsls	r1, r3
 800a10c:	4322      	orrs	r2, r4
 800a10e:	1b43      	subs	r3, r0, r5
 800a110:	e78b      	b.n	800a02a <__ieee754_sqrt+0x66>
 800a112:	4618      	mov	r0, r3
 800a114:	e7f0      	b.n	800a0f8 <__ieee754_sqrt+0x134>
 800a116:	0052      	lsls	r2, r2, #1
 800a118:	3301      	adds	r3, #1
 800a11a:	e7ef      	b.n	800a0fc <__ieee754_sqrt+0x138>
 800a11c:	46a0      	mov	r8, r4
 800a11e:	e7bf      	b.n	800a0a0 <__ieee754_sqrt+0xdc>
 800a120:	7ff00000 	.word	0x7ff00000

0800a124 <fabs>:
 800a124:	ec51 0b10 	vmov	r0, r1, d0
 800a128:	ee10 2a10 	vmov	r2, s0
 800a12c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a130:	ec43 2b10 	vmov	d0, r2, r3
 800a134:	4770      	bx	lr

0800a136 <finite>:
 800a136:	ee10 3a90 	vmov	r3, s1
 800a13a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a13e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a142:	0fc0      	lsrs	r0, r0, #31
 800a144:	4770      	bx	lr

0800a146 <matherr>:
 800a146:	2000      	movs	r0, #0
 800a148:	4770      	bx	lr
 800a14a:	0000      	movs	r0, r0
 800a14c:	0000      	movs	r0, r0
	...

0800a150 <nan>:
 800a150:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a158 <nan+0x8>
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	00000000 	.word	0x00000000
 800a15c:	7ff80000 	.word	0x7ff80000

0800a160 <rint>:
 800a160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a162:	ec51 0b10 	vmov	r0, r1, d0
 800a166:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a16a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a16e:	2e13      	cmp	r6, #19
 800a170:	460b      	mov	r3, r1
 800a172:	ee10 4a10 	vmov	r4, s0
 800a176:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a17a:	dc56      	bgt.n	800a22a <rint+0xca>
 800a17c:	2e00      	cmp	r6, #0
 800a17e:	da2b      	bge.n	800a1d8 <rint+0x78>
 800a180:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a184:	4302      	orrs	r2, r0
 800a186:	d023      	beq.n	800a1d0 <rint+0x70>
 800a188:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a18c:	4302      	orrs	r2, r0
 800a18e:	4254      	negs	r4, r2
 800a190:	4314      	orrs	r4, r2
 800a192:	0c4b      	lsrs	r3, r1, #17
 800a194:	0b24      	lsrs	r4, r4, #12
 800a196:	045b      	lsls	r3, r3, #17
 800a198:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a19c:	ea44 0103 	orr.w	r1, r4, r3
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	492f      	ldr	r1, [pc, #188]	; (800a260 <rint+0x100>)
 800a1a4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a1a8:	e9d1 6700 	ldrd	r6, r7, [r1]
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	4639      	mov	r1, r7
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	f7f6 f817 	bl	80001e4 <__adddf3>
 800a1b6:	e9cd 0100 	strd	r0, r1, [sp]
 800a1ba:	463b      	mov	r3, r7
 800a1bc:	4632      	mov	r2, r6
 800a1be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1c2:	f7f6 f80d 	bl	80001e0 <__aeabi_dsub>
 800a1c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a1ca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	ec41 0b10 	vmov	d0, r0, r1
 800a1d4:	b003      	add	sp, #12
 800a1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1d8:	4a22      	ldr	r2, [pc, #136]	; (800a264 <rint+0x104>)
 800a1da:	4132      	asrs	r2, r6
 800a1dc:	ea01 0702 	and.w	r7, r1, r2
 800a1e0:	4307      	orrs	r7, r0
 800a1e2:	d0f5      	beq.n	800a1d0 <rint+0x70>
 800a1e4:	0852      	lsrs	r2, r2, #1
 800a1e6:	4011      	ands	r1, r2
 800a1e8:	430c      	orrs	r4, r1
 800a1ea:	d00b      	beq.n	800a204 <rint+0xa4>
 800a1ec:	ea23 0202 	bic.w	r2, r3, r2
 800a1f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a1f4:	2e13      	cmp	r6, #19
 800a1f6:	fa43 f306 	asr.w	r3, r3, r6
 800a1fa:	bf0c      	ite	eq
 800a1fc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a200:	2400      	movne	r4, #0
 800a202:	4313      	orrs	r3, r2
 800a204:	4916      	ldr	r1, [pc, #88]	; (800a260 <rint+0x100>)
 800a206:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a20a:	4622      	mov	r2, r4
 800a20c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a210:	4620      	mov	r0, r4
 800a212:	4629      	mov	r1, r5
 800a214:	f7f5 ffe6 	bl	80001e4 <__adddf3>
 800a218:	e9cd 0100 	strd	r0, r1, [sp]
 800a21c:	4622      	mov	r2, r4
 800a21e:	462b      	mov	r3, r5
 800a220:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a224:	f7f5 ffdc 	bl	80001e0 <__aeabi_dsub>
 800a228:	e7d2      	b.n	800a1d0 <rint+0x70>
 800a22a:	2e33      	cmp	r6, #51	; 0x33
 800a22c:	dd07      	ble.n	800a23e <rint+0xde>
 800a22e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a232:	d1cd      	bne.n	800a1d0 <rint+0x70>
 800a234:	ee10 2a10 	vmov	r2, s0
 800a238:	f7f5 ffd4 	bl	80001e4 <__adddf3>
 800a23c:	e7c8      	b.n	800a1d0 <rint+0x70>
 800a23e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800a242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a246:	40f2      	lsrs	r2, r6
 800a248:	4210      	tst	r0, r2
 800a24a:	d0c1      	beq.n	800a1d0 <rint+0x70>
 800a24c:	0852      	lsrs	r2, r2, #1
 800a24e:	4210      	tst	r0, r2
 800a250:	bf1f      	itttt	ne
 800a252:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a256:	ea20 0202 	bicne.w	r2, r0, r2
 800a25a:	4134      	asrne	r4, r6
 800a25c:	4314      	orrne	r4, r2
 800a25e:	e7d1      	b.n	800a204 <rint+0xa4>
 800a260:	0800a3e8 	.word	0x0800a3e8
 800a264:	000fffff 	.word	0x000fffff

0800a268 <scalbn>:
 800a268:	b570      	push	{r4, r5, r6, lr}
 800a26a:	ec55 4b10 	vmov	r4, r5, d0
 800a26e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a272:	4606      	mov	r6, r0
 800a274:	462b      	mov	r3, r5
 800a276:	b9aa      	cbnz	r2, 800a2a4 <scalbn+0x3c>
 800a278:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a27c:	4323      	orrs	r3, r4
 800a27e:	d03b      	beq.n	800a2f8 <scalbn+0x90>
 800a280:	4b31      	ldr	r3, [pc, #196]	; (800a348 <scalbn+0xe0>)
 800a282:	4629      	mov	r1, r5
 800a284:	2200      	movs	r2, #0
 800a286:	ee10 0a10 	vmov	r0, s0
 800a28a:	f7f6 f961 	bl	8000550 <__aeabi_dmul>
 800a28e:	4b2f      	ldr	r3, [pc, #188]	; (800a34c <scalbn+0xe4>)
 800a290:	429e      	cmp	r6, r3
 800a292:	4604      	mov	r4, r0
 800a294:	460d      	mov	r5, r1
 800a296:	da12      	bge.n	800a2be <scalbn+0x56>
 800a298:	a327      	add	r3, pc, #156	; (adr r3, 800a338 <scalbn+0xd0>)
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	f7f6 f957 	bl	8000550 <__aeabi_dmul>
 800a2a2:	e009      	b.n	800a2b8 <scalbn+0x50>
 800a2a4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a2a8:	428a      	cmp	r2, r1
 800a2aa:	d10c      	bne.n	800a2c6 <scalbn+0x5e>
 800a2ac:	ee10 2a10 	vmov	r2, s0
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	f7f5 ff96 	bl	80001e4 <__adddf3>
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	460d      	mov	r5, r1
 800a2bc:	e01c      	b.n	800a2f8 <scalbn+0x90>
 800a2be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	3a36      	subs	r2, #54	; 0x36
 800a2c6:	4432      	add	r2, r6
 800a2c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a2cc:	428a      	cmp	r2, r1
 800a2ce:	dd0b      	ble.n	800a2e8 <scalbn+0x80>
 800a2d0:	ec45 4b11 	vmov	d1, r4, r5
 800a2d4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a340 <scalbn+0xd8>
 800a2d8:	f000 f83c 	bl	800a354 <copysign>
 800a2dc:	a318      	add	r3, pc, #96	; (adr r3, 800a340 <scalbn+0xd8>)
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	ec51 0b10 	vmov	r0, r1, d0
 800a2e6:	e7da      	b.n	800a29e <scalbn+0x36>
 800a2e8:	2a00      	cmp	r2, #0
 800a2ea:	dd08      	ble.n	800a2fe <scalbn+0x96>
 800a2ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a2f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a2f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a2f8:	ec45 4b10 	vmov	d0, r4, r5
 800a2fc:	bd70      	pop	{r4, r5, r6, pc}
 800a2fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a302:	da0d      	bge.n	800a320 <scalbn+0xb8>
 800a304:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a308:	429e      	cmp	r6, r3
 800a30a:	ec45 4b11 	vmov	d1, r4, r5
 800a30e:	dce1      	bgt.n	800a2d4 <scalbn+0x6c>
 800a310:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a338 <scalbn+0xd0>
 800a314:	f000 f81e 	bl	800a354 <copysign>
 800a318:	a307      	add	r3, pc, #28	; (adr r3, 800a338 <scalbn+0xd0>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	e7e0      	b.n	800a2e2 <scalbn+0x7a>
 800a320:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a324:	3236      	adds	r2, #54	; 0x36
 800a326:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a32a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a32e:	4620      	mov	r0, r4
 800a330:	4629      	mov	r1, r5
 800a332:	2200      	movs	r2, #0
 800a334:	4b06      	ldr	r3, [pc, #24]	; (800a350 <scalbn+0xe8>)
 800a336:	e7b2      	b.n	800a29e <scalbn+0x36>
 800a338:	c2f8f359 	.word	0xc2f8f359
 800a33c:	01a56e1f 	.word	0x01a56e1f
 800a340:	8800759c 	.word	0x8800759c
 800a344:	7e37e43c 	.word	0x7e37e43c
 800a348:	43500000 	.word	0x43500000
 800a34c:	ffff3cb0 	.word	0xffff3cb0
 800a350:	3c900000 	.word	0x3c900000

0800a354 <copysign>:
 800a354:	ec51 0b10 	vmov	r0, r1, d0
 800a358:	ee11 0a90 	vmov	r0, s3
 800a35c:	ee10 2a10 	vmov	r2, s0
 800a360:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a364:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a368:	ea41 0300 	orr.w	r3, r1, r0
 800a36c:	ec43 2b10 	vmov	d0, r2, r3
 800a370:	4770      	bx	lr
	...

0800a374 <_init>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	bf00      	nop
 800a378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37a:	bc08      	pop	{r3}
 800a37c:	469e      	mov	lr, r3
 800a37e:	4770      	bx	lr

0800a380 <_fini>:
 800a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a382:	bf00      	nop
 800a384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a386:	bc08      	pop	{r3}
 800a388:	469e      	mov	lr, r3
 800a38a:	4770      	bx	lr
