
SRJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a22c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a3c8  0800a3c8  0001a3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a430  0800a430  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a430  0800a430  0001a430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a438  0800a438  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a438  0800a438  0001a438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a43c  0800a43c  0001a43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800a440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  200000b0  0800a4f0  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  0800a4f0  00020474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f358  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dfd  00000000  00000000  0002f438  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  00031238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec8  00000000  00000000  000321c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016e0c  00000000  00000000  00033088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad31  00000000  00000000  00049e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090735  00000000  00000000  00054bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e52fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004844  00000000  00000000  000e5378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b0 	.word	0x200000b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a3ac 	.word	0x0800a3ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000b4 	.word	0x200000b4
 80001d4:	0800a3ac 	.word	0x0800a3ac

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	d1ed      	bne.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d80:	f000 b972 	b.w	8001068 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9e08      	ldr	r6, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	4688      	mov	r8, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d14b      	bne.n	8000e42 <__udivmoddi4+0xa6>
 8000daa:	428a      	cmp	r2, r1
 8000dac:	4615      	mov	r5, r2
 8000dae:	d967      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	b14a      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db6:	f1c2 0720 	rsb	r7, r2, #32
 8000dba:	fa01 f302 	lsl.w	r3, r1, r2
 8000dbe:	fa20 f707 	lsr.w	r7, r0, r7
 8000dc2:	4095      	lsls	r5, r2
 8000dc4:	ea47 0803 	orr.w	r8, r7, r3
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000dd4:	fa1f fc85 	uxth.w	ip, r5
 8000dd8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ddc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de0:	fb07 f10c 	mul.w	r1, r7, ip
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18eb      	adds	r3, r5, r3
 8000dea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000dee:	f080 811b 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8118 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000df8:	3f02      	subs	r7, #2
 8000dfa:	442b      	add	r3, r5
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e10:	45a4      	cmp	ip, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	f080 8107 	bcs.w	800102c <__udivmoddi4+0x290>
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	f240 8104 	bls.w	800102c <__udivmoddi4+0x290>
 8000e24:	3802      	subs	r0, #2
 8000e26:	442c      	add	r4, r5
 8000e28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e2c:	eba4 040c 	sub.w	r4, r4, ip
 8000e30:	2700      	movs	r7, #0
 8000e32:	b11e      	cbz	r6, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d909      	bls.n	8000e5a <__udivmoddi4+0xbe>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	f000 80eb 	beq.w	8001022 <__udivmoddi4+0x286>
 8000e4c:	2700      	movs	r7, #0
 8000e4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000e52:	4638      	mov	r0, r7
 8000e54:	4639      	mov	r1, r7
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	fab3 f783 	clz	r7, r3
 8000e5e:	2f00      	cmp	r7, #0
 8000e60:	d147      	bne.n	8000ef2 <__udivmoddi4+0x156>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d302      	bcc.n	8000e6c <__udivmoddi4+0xd0>
 8000e66:	4282      	cmp	r2, r0
 8000e68:	f200 80fa 	bhi.w	8001060 <__udivmoddi4+0x2c4>
 8000e6c:	1a84      	subs	r4, r0, r2
 8000e6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e72:	2001      	movs	r0, #1
 8000e74:	4698      	mov	r8, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d0e0      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000e7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000e7e:	e7dd      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000e80:	b902      	cbnz	r2, 8000e84 <__udivmoddi4+0xe8>
 8000e82:	deff      	udf	#255	; 0xff
 8000e84:	fab2 f282 	clz	r2, r2
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	f040 808f 	bne.w	8000fac <__udivmoddi4+0x210>
 8000e8e:	1b49      	subs	r1, r1, r5
 8000e90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e94:	fa1f f885 	uxth.w	r8, r5
 8000e98:	2701      	movs	r7, #1
 8000e9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e9e:	0c23      	lsrs	r3, r4, #16
 8000ea0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ea4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea8:	fb08 f10c 	mul.w	r1, r8, ip
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0x124>
 8000eb0:	18eb      	adds	r3, r5, r3
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x122>
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	f200 80cd 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1a59      	subs	r1, r3, r1
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ecc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x14c>
 8000ed8:	192c      	adds	r4, r5, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x14a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80b6 	bhi.w	8001052 <__udivmoddi4+0x2b6>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e79f      	b.n	8000e32 <__udivmoddi4+0x96>
 8000ef2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ef6:	40bb      	lsls	r3, r7
 8000ef8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000efc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000f00:	fa01 f407 	lsl.w	r4, r1, r7
 8000f04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000f08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000f0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000f10:	4325      	orrs	r5, r4
 8000f12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000f16:	0c2c      	lsrs	r4, r5, #16
 8000f18:	fb08 3319 	mls	r3, r8, r9, r3
 8000f1c:	fa1f fa8e 	uxth.w	sl, lr
 8000f20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f24:	fb09 f40a 	mul.w	r4, r9, sl
 8000f28:	429c      	cmp	r4, r3
 8000f2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000f2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b0>
 8000f34:	eb1e 0303 	adds.w	r3, lr, r3
 8000f38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f3c:	f080 8087 	bcs.w	800104e <__udivmoddi4+0x2b2>
 8000f40:	429c      	cmp	r4, r3
 8000f42:	f240 8084 	bls.w	800104e <__udivmoddi4+0x2b2>
 8000f46:	f1a9 0902 	sub.w	r9, r9, #2
 8000f4a:	4473      	add	r3, lr
 8000f4c:	1b1b      	subs	r3, r3, r4
 8000f4e:	b2ad      	uxth	r5, r5
 8000f50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f54:	fb08 3310 	mls	r3, r8, r0, r3
 8000f58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f60:	45a2      	cmp	sl, r4
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1da>
 8000f64:	eb1e 0404 	adds.w	r4, lr, r4
 8000f68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f6c:	d26b      	bcs.n	8001046 <__udivmoddi4+0x2aa>
 8000f6e:	45a2      	cmp	sl, r4
 8000f70:	d969      	bls.n	8001046 <__udivmoddi4+0x2aa>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4474      	add	r4, lr
 8000f76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7e:	eba4 040a 	sub.w	r4, r4, sl
 8000f82:	454c      	cmp	r4, r9
 8000f84:	46c2      	mov	sl, r8
 8000f86:	464b      	mov	r3, r9
 8000f88:	d354      	bcc.n	8001034 <__udivmoddi4+0x298>
 8000f8a:	d051      	beq.n	8001030 <__udivmoddi4+0x294>
 8000f8c:	2e00      	cmp	r6, #0
 8000f8e:	d069      	beq.n	8001064 <__udivmoddi4+0x2c8>
 8000f90:	ebb1 050a 	subs.w	r5, r1, sl
 8000f94:	eb64 0403 	sbc.w	r4, r4, r3
 8000f98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f9c:	40fd      	lsrs	r5, r7
 8000f9e:	40fc      	lsrs	r4, r7
 8000fa0:	ea4c 0505 	orr.w	r5, ip, r5
 8000fa4:	e9c6 5400 	strd	r5, r4, [r6]
 8000fa8:	2700      	movs	r7, #0
 8000faa:	e747      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000fac:	f1c2 0320 	rsb	r3, r2, #32
 8000fb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000fb4:	4095      	lsls	r5, r2
 8000fb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000fba:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fc2:	4338      	orrs	r0, r7
 8000fc4:	0c01      	lsrs	r1, r0, #16
 8000fc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fca:	fa1f f885 	uxth.w	r8, r5
 8000fce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd6:	fb07 f308 	mul.w	r3, r7, r8
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d907      	bls.n	8000ff2 <__udivmoddi4+0x256>
 8000fe2:	1869      	adds	r1, r5, r1
 8000fe4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000fe8:	d22f      	bcs.n	800104a <__udivmoddi4+0x2ae>
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d92d      	bls.n	800104a <__udivmoddi4+0x2ae>
 8000fee:	3f02      	subs	r7, #2
 8000ff0:	4429      	add	r1, r5
 8000ff2:	1acb      	subs	r3, r1, r3
 8000ff4:	b281      	uxth	r1, r0
 8000ff6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ffa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ffe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001002:	fb00 f308 	mul.w	r3, r0, r8
 8001006:	428b      	cmp	r3, r1
 8001008:	d907      	bls.n	800101a <__udivmoddi4+0x27e>
 800100a:	1869      	adds	r1, r5, r1
 800100c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8001010:	d217      	bcs.n	8001042 <__udivmoddi4+0x2a6>
 8001012:	428b      	cmp	r3, r1
 8001014:	d915      	bls.n	8001042 <__udivmoddi4+0x2a6>
 8001016:	3802      	subs	r0, #2
 8001018:	4429      	add	r1, r5
 800101a:	1ac9      	subs	r1, r1, r3
 800101c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001020:	e73b      	b.n	8000e9a <__udivmoddi4+0xfe>
 8001022:	4637      	mov	r7, r6
 8001024:	4630      	mov	r0, r6
 8001026:	e709      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001028:	4607      	mov	r7, r0
 800102a:	e6e7      	b.n	8000dfc <__udivmoddi4+0x60>
 800102c:	4618      	mov	r0, r3
 800102e:	e6fb      	b.n	8000e28 <__udivmoddi4+0x8c>
 8001030:	4541      	cmp	r1, r8
 8001032:	d2ab      	bcs.n	8000f8c <__udivmoddi4+0x1f0>
 8001034:	ebb8 0a02 	subs.w	sl, r8, r2
 8001038:	eb69 020e 	sbc.w	r2, r9, lr
 800103c:	3801      	subs	r0, #1
 800103e:	4613      	mov	r3, r2
 8001040:	e7a4      	b.n	8000f8c <__udivmoddi4+0x1f0>
 8001042:	4660      	mov	r0, ip
 8001044:	e7e9      	b.n	800101a <__udivmoddi4+0x27e>
 8001046:	4618      	mov	r0, r3
 8001048:	e795      	b.n	8000f76 <__udivmoddi4+0x1da>
 800104a:	4667      	mov	r7, ip
 800104c:	e7d1      	b.n	8000ff2 <__udivmoddi4+0x256>
 800104e:	4681      	mov	r9, r0
 8001050:	e77c      	b.n	8000f4c <__udivmoddi4+0x1b0>
 8001052:	3802      	subs	r0, #2
 8001054:	442c      	add	r4, r5
 8001056:	e747      	b.n	8000ee8 <__udivmoddi4+0x14c>
 8001058:	f1ac 0c02 	sub.w	ip, ip, #2
 800105c:	442b      	add	r3, r5
 800105e:	e72f      	b.n	8000ec0 <__udivmoddi4+0x124>
 8001060:	4638      	mov	r0, r7
 8001062:	e708      	b.n	8000e76 <__udivmoddi4+0xda>
 8001064:	4637      	mov	r7, r6
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0xa0>

08001068 <__aeabi_idiv0>:
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	0000      	movs	r0, r0
	...

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f002 feb9 	bl	8003dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f935 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107e:	f000 fb73 	bl	8001768 <MX_GPIO_Init>
  MX_DMA_Init();
 8001082:	f000 fb49 	bl	8001718 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001086:	f000 fb1b 	bl	80016c0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800108a:	f000 f995 	bl	80013b8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800108e:	f000 f9c1 	bl	8001414 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001092:	f000 fa63 	bl	800155c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001096:	f000 fa15 	bl	80014c4 <MX_TIM2_Init>
  MX_TIM4_Init();
 800109a:	f000 fac3 	bl	8001624 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  UART2.huart = &huart2;
 800109e:	4b7a      	ldr	r3, [pc, #488]	; (8001288 <main+0x218>)
 80010a0:	4a7a      	ldr	r2, [pc, #488]	; (800128c <main+0x21c>)
 80010a2:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 80010a4:	4b78      	ldr	r3, [pc, #480]	; (8001288 <main+0x218>)
 80010a6:	22ff      	movs	r2, #255	; 0xff
 80010a8:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 80010aa:	4b77      	ldr	r3, [pc, #476]	; (8001288 <main+0x218>)
 80010ac:	22ff      	movs	r2, #255	; 0xff
 80010ae:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 80010b0:	4875      	ldr	r0, [pc, #468]	; (8001288 <main+0x218>)
 80010b2:	f001 fedf 	bl	8002e74 <UARTInit>
  UARTResetStart(&UART2);
 80010b6:	4874      	ldr	r0, [pc, #464]	; (8001288 <main+0x218>)
 80010b8:	f001 ff04 	bl	8002ec4 <UARTResetStart>

  HAL_TIM_Base_Start_IT(&htim2);
 80010bc:	4874      	ldr	r0, [pc, #464]	; (8001290 <main+0x220>)
 80010be:	f006 f8ec 	bl	800729a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 80010c2:	4874      	ldr	r0, [pc, #464]	; (8001294 <main+0x224>)
 80010c4:	f006 f8c5 	bl	8007252 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010c8:	2100      	movs	r1, #0
 80010ca:	4872      	ldr	r0, [pc, #456]	; (8001294 <main+0x224>)
 80010cc:	f006 f934 	bl	8007338 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010d0:	2104      	movs	r1, #4
 80010d2:	4870      	ldr	r0, [pc, #448]	; (8001294 <main+0x224>)
 80010d4:	f006 f930 	bl	8007338 <HAL_TIM_PWM_Start>
  HomeMode = 10;
 80010d8:	4b6f      	ldr	r3, [pc, #444]	; (8001298 <main+0x228>)
 80010da:	220a      	movs	r2, #10
 80010dc:	701a      	strb	r2, [r3, #0]
  SetHome();
 80010de:	f000 fc3f 	bl	8001960 <SetHome>
  /////////////////////////////////////////////////////////////
  while (1)
  {


	  if (micros() - Timestamp >= 10000) //10000us = 0.01s = 100Hz
 80010e2:	f000 fbff 	bl	80018e4 <micros>
 80010e6:	460a      	mov	r2, r1
 80010e8:	4601      	mov	r1, r0
 80010ea:	4b6c      	ldr	r3, [pc, #432]	; (800129c <main+0x22c>)
 80010ec:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80010f0:	460b      	mov	r3, r1
 80010f2:	4614      	mov	r4, r2
 80010f4:	ebb3 030b 	subs.w	r3, r3, fp
 80010f8:	eb64 040c 	sbc.w	r4, r4, ip
 80010fc:	f242 710f 	movw	r1, #9999	; 0x270f
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	42a2      	cmp	r2, r4
 8001106:	bf08      	it	eq
 8001108:	4299      	cmpeq	r1, r3
 800110a:	d2ea      	bcs.n	80010e2 <main+0x72>
	  {
		  Timestamp = micros();
 800110c:	f000 fbea 	bl	80018e4 <micros>
 8001110:	4603      	mov	r3, r0
 8001112:	460c      	mov	r4, r1
 8001114:	4a61      	ldr	r2, [pc, #388]	; (800129c <main+0x22c>)
 8001116:	e9c2 3400 	strd	r3, r4, [r2]

		  if(UART_Flow2_Ack)
 800111a:	4b61      	ldr	r3, [pc, #388]	; (80012a0 <main+0x230>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d037      	beq.n	8001192 <main+0x122>
		  {
			while(1)
			{
				while(1)
				{
					InputChar = UARTReadChar(&UART2);
 8001122:	4859      	ldr	r0, [pc, #356]	; (8001288 <main+0x218>)
 8001124:	f001 fef2 	bl	8002f0c <UARTReadChar>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4b5d      	ldr	r3, [pc, #372]	; (80012a4 <main+0x234>)
 800112e:	801a      	strh	r2, [r3, #0]
					if(InputChar != -1)
 8001130:	4b5c      	ldr	r3, [pc, #368]	; (80012a4 <main+0x234>)
 8001132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800113a:	d0f2      	beq.n	8001122 <main+0xb2>
					{
						InputByte = (uint8_t)InputChar;
 800113c:	4b59      	ldr	r3, [pc, #356]	; (80012a4 <main+0x234>)
 800113e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b58      	ldr	r3, [pc, #352]	; (80012a8 <main+0x238>)
 8001146:	701a      	strb	r2, [r3, #0]
						ak[0] = InputByte;
 8001148:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <main+0x238>)
 800114a:	781a      	ldrb	r2, [r3, #0]
 800114c:	4b57      	ldr	r3, [pc, #348]	; (80012ac <main+0x23c>)
 800114e:	701a      	strb	r2, [r3, #0]
						break;
					}
				}
				while(1)
				{
					InputChar = UARTReadChar(&UART2);
 8001150:	484d      	ldr	r0, [pc, #308]	; (8001288 <main+0x218>)
 8001152:	f001 fedb 	bl	8002f0c <UARTReadChar>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4b52      	ldr	r3, [pc, #328]	; (80012a4 <main+0x234>)
 800115c:	801a      	strh	r2, [r3, #0]
					if(InputChar != -1)
 800115e:	4b51      	ldr	r3, [pc, #324]	; (80012a4 <main+0x234>)
 8001160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001168:	d0f2      	beq.n	8001150 <main+0xe0>
					{
						InputByte = (uint8_t)InputChar;
 800116a:	4b4e      	ldr	r3, [pc, #312]	; (80012a4 <main+0x234>)
 800116c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b4d      	ldr	r3, [pc, #308]	; (80012a8 <main+0x238>)
 8001174:	701a      	strb	r2, [r3, #0]
						ak[1] = InputByte;
 8001176:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <main+0x238>)
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <main+0x23c>)
 800117c:	705a      	strb	r2, [r3, #1]
						break;
 800117e:	bf00      	nop
					}
				}
				if(ak[0] == 'X' && ak[1] == 'u')
 8001180:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <main+0x23c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b58      	cmp	r3, #88	; 0x58
 8001186:	d1cc      	bne.n	8001122 <main+0xb2>
 8001188:	4b48      	ldr	r3, [pc, #288]	; (80012ac <main+0x23c>)
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	2b75      	cmp	r3, #117	; 0x75
 800118e:	d003      	beq.n	8001198 <main+0x128>
			while(1)
 8001190:	e7c7      	b.n	8001122 <main+0xb2>
				}
			}
		  }
		  else
		  {
			  UART_Protocal();
 8001192:	f002 f86f 	bl	8003274 <UART_Protocal>
 8001196:	e000      	b.n	800119a <main+0x12a>
					break;
 8001198:	bf00      	nop
		  }

		  //----------------------------------------------

		  if(Laser)
 800119a:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <main+0x240>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d04a      	beq.n	8001238 <main+0x1c8>
		  {
			  if (micros() - LaserTimestamp >= 5000000) //5000000us = 5s
 80011a2:	f000 fb9f 	bl	80018e4 <micros>
 80011a6:	460a      	mov	r2, r1
 80011a8:	4601      	mov	r1, r0
 80011aa:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <main+0x244>)
 80011ac:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80011b0:	460b      	mov	r3, r1
 80011b2:	4614      	mov	r4, r2
 80011b4:	ebb3 030b 	subs.w	r3, r3, fp
 80011b8:	eb64 040c 	sbc.w	r4, r4, ip
 80011bc:	a230      	add	r2, pc, #192	; (adr r2, 8001280 <main+0x210>)
 80011be:	e9d2 1200 	ldrd	r1, r2, [r2]
 80011c2:	42a2      	cmp	r2, r4
 80011c4:	bf08      	it	eq
 80011c6:	4299      	cmpeq	r1, r3
 80011c8:	d257      	bcs.n	800127a <main+0x20a>
			  {
				  if(Goal_Mode == 3)
 80011ca:	4b3b      	ldr	r3, [pc, #236]	; (80012b8 <main+0x248>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d128      	bne.n	8001224 <main+0x1b4>
				  {
					  if(Current_Multi_Station == Multi_Station_Amount-1)
 80011d2:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <main+0x24c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <main+0x250>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	3b01      	subs	r3, #1
 80011de:	429a      	cmp	r2, r3
 80011e0:	d102      	bne.n	80011e8 <main+0x178>
					  {
						  UART_Ack2();
 80011e2:	f001 ff71 	bl	80030c8 <UART_Ack2>
 80011e6:	e01f      	b.n	8001228 <main+0x1b8>
					  }
					  else
					  {
						  Current_Multi_Station += 1;
 80011e8:	4b34      	ldr	r3, [pc, #208]	; (80012bc <main+0x24c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <main+0x24c>)
 80011f2:	701a      	strb	r2, [r3, #0]
						  angle = Multi_Station_Angle[ Multi_Station[Current_Multi_Station] ];
 80011f4:	4b31      	ldr	r3, [pc, #196]	; (80012bc <main+0x24c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <main+0x254>)
 80011fc:	5c9b      	ldrb	r3, [r3, r2]
 80011fe:	461a      	mov	r2, r3
 8001200:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <main+0x258>)
 8001202:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <main+0x25c>)
 8001210:	edc3 7a00 	vstr	s15, [r3]
						  Lastest_Angle = Current_Angle;
 8001214:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <main+0x260>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a2e      	ldr	r2, [pc, #184]	; (80012d4 <main+0x264>)
 800121a:	6013      	str	r3, [r2, #0]
						  Run = 1;
 800121c:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <main+0x268>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e001      	b.n	8001228 <main+0x1b8>
					  }
				  }
				  else
				  {
					  UART_Ack2();
 8001224:	f001 ff50 	bl	80030c8 <UART_Ack2>
				  }
				  Laser = 0;
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <main+0x240>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
				  t = 0;
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <main+0x26c>)
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e020      	b.n	800127a <main+0x20a>
			  }
		  }

		  else if(Run)
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <main+0x268>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d010      	beq.n	8001262 <main+0x1f2>
		  {
			  RobotArm_Position = EncoderPosition_Update();
 8001240:	f000 fc5a 	bl	8001af8 <EncoderPosition_Update>
 8001244:	4603      	mov	r3, r0
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <main+0x270>)
 800124a:	801a      	strh	r2, [r3, #0]
			  EncoderVelocity_Update();
 800124c:	f000 fc60 	bl	8001b10 <EncoderVelocity_Update>
			  planning();
 8001250:	f000 ffce 	bl	80021f0 <planning>
			  kalmanfilter();
 8001254:	f000 fd04 	bl	8001c60 <kalmanfilter>
			  pid();
 8001258:	f001 fb8a 	bl	8002970 <pid>
			  MotorDrive();
 800125c:	f000 fb5c 	bl	8001918 <MotorDrive>
 8001260:	e00b      	b.n	800127a <main+0x20a>
		  }

		  else if(Home)
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <main+0x274>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <main+0x20a>
		  {
			  RobotArm_Position = EncoderPosition_Update();
 800126a:	f000 fc45 	bl	8001af8 <EncoderPosition_Update>
 800126e:	4603      	mov	r3, r0
 8001270:	b29a      	uxth	r2, r3
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <main+0x270>)
 8001274:	801a      	strh	r2, [r3, #0]
			  SetHome();
 8001276:	f000 fb73 	bl	8001960 <SetHome>
		  }

		  NucleoCheck();
 800127a:	f000 faf3 	bl	8001864 <NucleoCheck>
	  if (micros() - Timestamp >= 10000) //10000us = 0.01s = 100Hz
 800127e:	e730      	b.n	80010e2 <main+0x72>
 8001280:	004c4b3f 	.word	0x004c4b3f
 8001284:	00000000 	.word	0x00000000
 8001288:	2000018c 	.word	0x2000018c
 800128c:	2000042c 	.word	0x2000042c
 8001290:	200003ec 	.word	0x200003ec
 8001294:	2000030c 	.word	0x2000030c
 8001298:	200000f0 	.word	0x200000f0
 800129c:	200000d8 	.word	0x200000d8
 80012a0:	200001ec 	.word	0x200001ec
 80012a4:	200001c6 	.word	0x200001c6
 80012a8:	200001c8 	.word	0x200001c8
 80012ac:	200001b4 	.word	0x200001b4
 80012b0:	200001b8 	.word	0x200001b8
 80012b4:	200000e8 	.word	0x200000e8
 80012b8:	20000020 	.word	0x20000020
 80012bc:	200001ad 	.word	0x200001ad
 80012c0:	200001e8 	.word	0x200001e8
 80012c4:	200001d8 	.word	0x200001d8
 80012c8:	20000024 	.word	0x20000024
 80012cc:	2000017c 	.word	0x2000017c
 80012d0:	200001a8 	.word	0x200001a8
 80012d4:	200001a4 	.word	0x200001a4
 80012d8:	200001b6 	.word	0x200001b6
 80012dc:	20000160 	.word	0x20000160
 80012e0:	200000f8 	.word	0x200000f8
 80012e4:	200001b7 	.word	0x200001b7

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	; 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2230      	movs	r2, #48	; 0x30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f007 ff35 	bl	8009166 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <SystemClock_Config+0xc8>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <SystemClock_Config+0xc8>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <SystemClock_Config+0xc8>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <SystemClock_Config+0xcc>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <SystemClock_Config+0xcc>)
 8001332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <SystemClock_Config+0xcc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134c:	2310      	movs	r3, #16
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001350:	2302      	movs	r3, #2
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001354:	2300      	movs	r3, #0
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001358:	2308      	movs	r3, #8
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001360:	2302      	movs	r3, #2
 8001362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001364:	2304      	movs	r3, #4
 8001366:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	4618      	mov	r0, r3
 800136e:	f005 fae3 	bl	8006938 <HAL_RCC_OscConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001378:	f002 fa30 	bl	80037dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	2302      	movs	r3, #2
 8001382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	2103      	movs	r1, #3
 8001398:	4618      	mov	r0, r3
 800139a:	f005 fd3d 	bl	8006e18 <HAL_RCC_ClockConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013a4:	f002 fa1a 	bl	80037dc <Error_Handler>
  }
}
 80013a8:	bf00      	nop
 80013aa:	3750      	adds	r7, #80	; 0x50
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_I2C1_Init+0x54>)
 80013be:	4a14      	ldr	r2, [pc, #80]	; (8001410 <MX_I2C1_Init+0x58>)
 80013c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <MX_I2C1_Init+0x54>)
 80013c4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80013c8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_I2C1_Init+0x54>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_I2C1_Init+0x54>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <MX_I2C1_Init+0x54>)
 80013d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_I2C1_Init+0x54>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_I2C1_Init+0x54>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_I2C1_Init+0x54>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_I2C1_Init+0x54>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_I2C1_Init+0x54>)
 80013f8:	f003 fc0a 	bl	8004c10 <HAL_I2C_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001402:	f002 f9eb 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002b4 	.word	0x200002b4
 8001410:	40005400 	.word	0x40005400

08001414 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	; 0x30
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2224      	movs	r2, #36	; 0x24
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f007 fe9f 	bl	8009166 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001432:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <MX_TIM1_Init+0xac>)
 8001434:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <MX_TIM1_Init+0xa8>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001444:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001448:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <MX_TIM1_Init+0xa8>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800145c:	2303      	movs	r3, #3
 800145e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001464:	2301      	movs	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001470:	2302      	movs	r3, #2
 8001472:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001474:	2301      	movs	r3, #1
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	4619      	mov	r1, r3
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <MX_TIM1_Init+0xa8>)
 8001488:	f005 ff88 	bl	800739c <HAL_TIM_Encoder_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001492:	f002 f9a3 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <MX_TIM1_Init+0xa8>)
 80014a4:	f006 fdbe 	bl	8008024 <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80014ae:	f002 f995 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3730      	adds	r7, #48	; 0x30
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200003ac 	.word	0x200003ac
 80014c0:	40010000 	.word	0x40010000

080014c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_TIM2_Init+0x94>)
 80014e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <MX_TIM2_Init+0x94>)
 80014ea:	2263      	movs	r2, #99	; 0x63
 80014ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_TIM2_Init+0x94>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <MX_TIM2_Init+0x94>)
 80014f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <MX_TIM2_Init+0x94>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <MX_TIM2_Init+0x94>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <MX_TIM2_Init+0x94>)
 800150a:	f005 fe77 	bl	80071fc <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001514:	f002 f962 	bl	80037dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <MX_TIM2_Init+0x94>)
 8001526:	f006 f9d1 	bl	80078cc <HAL_TIM_ConfigClockSource>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001530:	f002 f954 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_TIM2_Init+0x94>)
 8001542:	f006 fd6f 	bl	8008024 <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800154c:	f002 f946 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200003ec 	.word	0x200003ec

0800155c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800157e:	4b27      	ldr	r3, [pc, #156]	; (800161c <MX_TIM3_Init+0xc0>)
 8001580:	4a27      	ldr	r2, [pc, #156]	; (8001620 <MX_TIM3_Init+0xc4>)
 8001582:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001584:	4b25      	ldr	r3, [pc, #148]	; (800161c <MX_TIM3_Init+0xc0>)
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <MX_TIM3_Init+0xc0>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <MX_TIM3_Init+0xc0>)
 8001592:	f242 7210 	movw	r2, #10000	; 0x2710
 8001596:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <MX_TIM3_Init+0xc0>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <MX_TIM3_Init+0xc0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015a4:	481d      	ldr	r0, [pc, #116]	; (800161c <MX_TIM3_Init+0xc0>)
 80015a6:	f005 fe9c 	bl	80072e2 <HAL_TIM_PWM_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80015b0:	f002 f914 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	4619      	mov	r1, r3
 80015c2:	4816      	ldr	r0, [pc, #88]	; (800161c <MX_TIM3_Init+0xc0>)
 80015c4:	f006 fd2e 	bl	8008024 <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80015ce:	f002 f905 	bl	80037dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d2:	2360      	movs	r3, #96	; 0x60
 80015d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	4619      	mov	r1, r3
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <MX_TIM3_Init+0xc0>)
 80015ea:	f006 f8a9 	bl	8007740 <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80015f4:	f002 f8f2 	bl	80037dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2204      	movs	r2, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <MX_TIM3_Init+0xc0>)
 8001600:	f006 f89e 	bl	8007740 <HAL_TIM_PWM_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800160a:	f002 f8e7 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <MX_TIM3_Init+0xc0>)
 8001610:	f002 fa16 	bl	8003a40 <HAL_TIM_MspPostInit>

}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000030c 	.word	0x2000030c
 8001620:	40000400 	.word	0x40000400

08001624 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	463b      	mov	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <MX_TIM4_Init+0x94>)
 8001642:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <MX_TIM4_Init+0x98>)
 8001644:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <MX_TIM4_Init+0x94>)
 8001648:	2263      	movs	r2, #99	; 0x63
 800164a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_TIM4_Init+0x94>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <MX_TIM4_Init+0x94>)
 8001654:	f242 7210 	movw	r2, #10000	; 0x2710
 8001658:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_TIM4_Init+0x94>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_TIM4_Init+0x94>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001666:	4814      	ldr	r0, [pc, #80]	; (80016b8 <MX_TIM4_Init+0x94>)
 8001668:	f005 fdc8 	bl	80071fc <HAL_TIM_Base_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001672:	f002 f8b3 	bl	80037dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	4619      	mov	r1, r3
 8001682:	480d      	ldr	r0, [pc, #52]	; (80016b8 <MX_TIM4_Init+0x94>)
 8001684:	f006 f922 	bl	80078cc <HAL_TIM_ConfigClockSource>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800168e:	f002 f8a5 	bl	80037dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800169a:	463b      	mov	r3, r7
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	; (80016b8 <MX_TIM4_Init+0x94>)
 80016a0:	f006 fcc0 	bl	8008024 <HAL_TIMEx_MasterConfigSynchronization>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80016aa:	f002 f897 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000270 	.word	0x20000270
 80016bc:	40000800 	.word	0x40000800

080016c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016c6:	4a13      	ldr	r2, [pc, #76]	; (8001714 <MX_USART2_UART_Init+0x54>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016cc:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80016d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016fc:	f006 fd14 	bl	8008128 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001706:	f002 f869 	bl	80037dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000042c 	.word	0x2000042c
 8001714:	40004400 	.word	0x40004400

08001718 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <MX_DMA_Init+0x4c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <MX_DMA_Init+0x4c>)
 8001728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <MX_DMA_Init+0x4c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	2010      	movs	r0, #16
 8001740:	f002 fcc3 	bl	80040ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001744:	2010      	movs	r0, #16
 8001746:	f002 fcdc 	bl	8004102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2011      	movs	r0, #17
 8001750:	f002 fcbb 	bl	80040ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001754:	2011      	movs	r0, #17
 8001756:	f002 fcd4 	bl	8004102 <HAL_NVIC_EnableIRQ>

}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800

08001768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	4b33      	ldr	r3, [pc, #204]	; (8001850 <MX_GPIO_Init+0xe8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a32      	ldr	r2, [pc, #200]	; (8001850 <MX_GPIO_Init+0xe8>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b30      	ldr	r3, [pc, #192]	; (8001850 <MX_GPIO_Init+0xe8>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a2b      	ldr	r2, [pc, #172]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b29      	ldr	r3, [pc, #164]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	4b25      	ldr	r3, [pc, #148]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a24      	ldr	r2, [pc, #144]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_GPIO_Init+0xe8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2120      	movs	r1, #32
 80017f2:	4818      	ldr	r0, [pc, #96]	; (8001854 <MX_GPIO_Init+0xec>)
 80017f4:	f003 f9d8 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <MX_GPIO_Init+0xf0>)
 8001800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4813      	ldr	r0, [pc, #76]	; (800185c <MX_GPIO_Init+0xf4>)
 800180e:	f003 f831 	bl	8004874 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001812:	2320      	movs	r3, #32
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	480a      	ldr	r0, [pc, #40]	; (8001854 <MX_GPIO_Init+0xec>)
 800182a:	f003 f823 	bl	8004874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800182e:	2330      	movs	r3, #48	; 0x30
 8001830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4807      	ldr	r0, [pc, #28]	; (8001860 <MX_GPIO_Init+0xf8>)
 8001842:	f003 f817 	bl	8004874 <HAL_GPIO_Init>

}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	; 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000
 8001858:	10210000 	.word	0x10210000
 800185c:	40020800 	.word	0x40020800
 8001860:	40020400 	.word	0x40020400

08001864 <NucleoCheck>:

/* USER CODE BEGIN 4 */
//******************************************************************

void NucleoCheck()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	ButtonArray[1] = ButtonArray[0];
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <NucleoCheck+0x3c>)
 800186a:	781a      	ldrb	r2, [r3, #0]
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <NucleoCheck+0x3c>)
 800186e:	705a      	strb	r2, [r3, #1]
	ButtonArray[0] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001874:	480b      	ldr	r0, [pc, #44]	; (80018a4 <NucleoCheck+0x40>)
 8001876:	f003 f97f 	bl	8004b78 <HAL_GPIO_ReadPin>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <NucleoCheck+0x3c>)
 8001880:	701a      	strb	r2, [r3, #0]

	if(ButtonArray[0]==1 && ButtonArray[1]==0) //When Released Button
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <NucleoCheck+0x3c>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d107      	bne.n	800189a <NucleoCheck+0x36>
 800188a:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <NucleoCheck+0x3c>)
 800188c:	785b      	ldrb	r3, [r3, #1]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d103      	bne.n	800189a <NucleoCheck+0x36>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001892:	2120      	movs	r1, #32
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <NucleoCheck+0x44>)
 8001896:	f003 f9a0 	bl	8004bda <HAL_GPIO_TogglePin>
	}
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000000 	.word	0x20000000
 80018a4:	40020800 	.word	0x40020800
 80018a8:	40020000 	.word	0x40020000

080018ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018ac:	b490      	push	{r4, r7}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d109      	bne.n	80018d0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018be:	e9d3 1200 	ldrd	r1, r2, [r3]
 80018c2:	f111 33ff 	adds.w	r3, r1, #4294967295	; 0xffffffff
 80018c6:	f142 0400 	adc.w	r4, r2, #0
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018cc:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc90      	pop	{r4, r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200003ec 	.word	0x200003ec
 80018e0:	200000d0 	.word	0x200000d0

080018e4 <micros>:

uint64_t micros()
{
 80018e4:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80018e8:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <micros+0x2c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <micros+0x30>)
 80018f8:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80018fc:	eb1b 0301 	adds.w	r3, fp, r1
 8001900:	eb4c 0402 	adc.w	r4, ip, r2
}
 8001904:	4618      	mov	r0, r3
 8001906:	4621      	mov	r1, r4
 8001908:	46bd      	mov	sp, r7
 800190a:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800190e:	4770      	bx	lr
 8001910:	200003ec 	.word	0x200003ec
 8001914:	200000d0 	.word	0x200000d0

08001918 <MotorDrive>:
	ProxiArray[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
	ProxiArray[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
}

void MotorDrive()
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
	if(PWMOut >= 0)
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MotorDrive+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db09      	blt.n	8001938 <MotorDrive+0x20>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWMOut);
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MotorDrive+0x40>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <MotorDrive+0x44>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <MotorDrive+0x44>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2200      	movs	r2, #0
 8001934:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, -PWMOut);
	}
}
 8001936:	e009      	b.n	800194c <MotorDrive+0x34>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <MotorDrive+0x44>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2200      	movs	r2, #0
 800193e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, -PWMOut);
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <MotorDrive+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	425a      	negs	r2, r3
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <MotorDrive+0x44>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	200000f4 	.word	0x200000f4
 800195c:	2000030c 	.word	0x2000030c

08001960 <SetHome>:

void SetHome()
{
 8001960:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001964:	af00      	add	r7, sp, #0
	if(HomeMode == 1)
 8001966:	4b5a      	ldr	r3, [pc, #360]	; (8001ad0 <SetHome+0x170>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d11e      	bne.n	80019ac <SetHome+0x4c>
	{
		PWMOut = 750;
 800196e:	4b59      	ldr	r3, [pc, #356]	; (8001ad4 <SetHome+0x174>)
 8001970:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001974:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001976:	f7ff ffcf 	bl	8001918 <MotorDrive>
		if (micros() - HomeTimestamp >= 200000) //200000us = 0.2s
 800197a:	f7ff ffb3 	bl	80018e4 <micros>
 800197e:	460a      	mov	r2, r1
 8001980:	4601      	mov	r1, r0
 8001982:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <SetHome+0x178>)
 8001984:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001988:	460b      	mov	r3, r1
 800198a:	4614      	mov	r4, r2
 800198c:	ebb3 030b 	subs.w	r3, r3, fp
 8001990:	eb64 040c 	sbc.w	r4, r4, ip
 8001994:	4951      	ldr	r1, [pc, #324]	; (8001adc <SetHome+0x17c>)
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	42a2      	cmp	r2, r4
 800199c:	bf08      	it	eq
 800199e:	4299      	cmpeq	r1, r3
 80019a0:	f080 8092 	bcs.w	8001ac8 <SetHome+0x168>
		{
			HomeMode = 2;
 80019a4:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <SetHome+0x170>)
 80019a6:	2202      	movs	r2, #2
 80019a8:	701a      	strb	r2, [r3, #0]
		MotorDrive();
		HAL_Delay(500);
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
		HomeMode = 0;
	}
}
 80019aa:	e08d      	b.n	8001ac8 <SetHome+0x168>
	else if(HomeMode == 2)
 80019ac:	4b48      	ldr	r3, [pc, #288]	; (8001ad0 <SetHome+0x170>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d10f      	bne.n	80019d4 <SetHome+0x74>
		PWMOut = -2500;
 80019b4:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <SetHome+0x174>)
 80019b6:	4a4a      	ldr	r2, [pc, #296]	; (8001ae0 <SetHome+0x180>)
 80019b8:	601a      	str	r2, [r3, #0]
		MotorDrive();
 80019ba:	f7ff ffad 	bl	8001918 <MotorDrive>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0)
 80019be:	2110      	movs	r1, #16
 80019c0:	4848      	ldr	r0, [pc, #288]	; (8001ae4 <SetHome+0x184>)
 80019c2:	f003 f8d9 	bl	8004b78 <HAL_GPIO_ReadPin>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d17d      	bne.n	8001ac8 <SetHome+0x168>
			HomeMode = 3;
 80019cc:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <SetHome+0x170>)
 80019ce:	2203      	movs	r2, #3
 80019d0:	701a      	strb	r2, [r3, #0]
}
 80019d2:	e079      	b.n	8001ac8 <SetHome+0x168>
	else if(HomeMode == 3)
 80019d4:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <SetHome+0x170>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d116      	bne.n	8001a0a <SetHome+0xaa>
		PWMOut = -600;
 80019dc:	4b3d      	ldr	r3, [pc, #244]	; (8001ad4 <SetHome+0x174>)
 80019de:	4a42      	ldr	r2, [pc, #264]	; (8001ae8 <SetHome+0x188>)
 80019e0:	601a      	str	r2, [r3, #0]
		MotorDrive();
 80019e2:	f7ff ff99 	bl	8001918 <MotorDrive>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0)
 80019e6:	2120      	movs	r1, #32
 80019e8:	483e      	ldr	r0, [pc, #248]	; (8001ae4 <SetHome+0x184>)
 80019ea:	f003 f8c5 	bl	8004b78 <HAL_GPIO_ReadPin>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d169      	bne.n	8001ac8 <SetHome+0x168>
			HomeMode = 4;
 80019f4:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <SetHome+0x170>)
 80019f6:	2204      	movs	r2, #4
 80019f8:	701a      	strb	r2, [r3, #0]
			HomeTimestamp = micros();
 80019fa:	f7ff ff73 	bl	80018e4 <micros>
 80019fe:	4603      	mov	r3, r0
 8001a00:	460c      	mov	r4, r1
 8001a02:	4a35      	ldr	r2, [pc, #212]	; (8001ad8 <SetHome+0x178>)
 8001a04:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001a08:	e05e      	b.n	8001ac8 <SetHome+0x168>
	else if(HomeMode == 4)
 8001a0a:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <SetHome+0x170>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d123      	bne.n	8001a5a <SetHome+0xfa>
		PWMOut = 0;
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <SetHome+0x174>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001a18:	f7ff ff7e 	bl	8001918 <MotorDrive>
		if (micros() - HomeTimestamp >= 500000) //500000us = 0.5s
 8001a1c:	f7ff ff62 	bl	80018e4 <micros>
 8001a20:	460a      	mov	r2, r1
 8001a22:	4601      	mov	r1, r0
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <SetHome+0x178>)
 8001a26:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4614      	mov	r4, r2
 8001a2e:	ebb3 030b 	subs.w	r3, r3, fp
 8001a32:	eb64 040c 	sbc.w	r4, r4, ip
 8001a36:	492d      	ldr	r1, [pc, #180]	; (8001aec <SetHome+0x18c>)
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	42a2      	cmp	r2, r4
 8001a3e:	bf08      	it	eq
 8001a40:	4299      	cmpeq	r1, r3
 8001a42:	d241      	bcs.n	8001ac8 <SetHome+0x168>
			htim1.Instance->CNT = 0;
 8001a44:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <SetHome+0x190>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24
			HomeMode = 0;
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <SetHome+0x170>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
			Home = 0;
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <SetHome+0x194>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
}
 8001a58:	e036      	b.n	8001ac8 <SetHome+0x168>
	else if(HomeMode == 10)
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <SetHome+0x170>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b0a      	cmp	r3, #10
 8001a60:	d132      	bne.n	8001ac8 <SetHome+0x168>
		PWMOut = 750;
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <SetHome+0x174>)
 8001a64:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a68:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001a6a:	f7ff ff55 	bl	8001918 <MotorDrive>
		HAL_Delay(200);
 8001a6e:	20c8      	movs	r0, #200	; 0xc8
 8001a70:	f002 fa2e 	bl	8003ed0 <HAL_Delay>
		PWMOut = -2500;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <SetHome+0x174>)
 8001a76:	4a1a      	ldr	r2, [pc, #104]	; (8001ae0 <SetHome+0x180>)
 8001a78:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8001a7a:	e001      	b.n	8001a80 <SetHome+0x120>
			MotorDrive();
 8001a7c:	f7ff ff4c 	bl	8001918 <MotorDrive>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8001a80:	2110      	movs	r1, #16
 8001a82:	4818      	ldr	r0, [pc, #96]	; (8001ae4 <SetHome+0x184>)
 8001a84:	f003 f878 	bl	8004b78 <HAL_GPIO_ReadPin>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d0f6      	beq.n	8001a7c <SetHome+0x11c>
		PWMOut = -600;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <SetHome+0x174>)
 8001a90:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <SetHome+0x188>)
 8001a92:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1)
 8001a94:	e001      	b.n	8001a9a <SetHome+0x13a>
			MotorDrive();
 8001a96:	f7ff ff3f 	bl	8001918 <MotorDrive>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1)
 8001a9a:	2120      	movs	r1, #32
 8001a9c:	4811      	ldr	r0, [pc, #68]	; (8001ae4 <SetHome+0x184>)
 8001a9e:	f003 f86b 	bl	8004b78 <HAL_GPIO_ReadPin>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d0f6      	beq.n	8001a96 <SetHome+0x136>
		PWMOut = 0;
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <SetHome+0x174>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001aae:	f7ff ff33 	bl	8001918 <MotorDrive>
		HAL_Delay(500);
 8001ab2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab6:	f002 fa0b 	bl	8003ed0 <HAL_Delay>
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001aba:	213c      	movs	r1, #60	; 0x3c
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <SetHome+0x190>)
 8001abe:	f005 fcff 	bl	80074c0 <HAL_TIM_Encoder_Start>
		HomeMode = 0;
 8001ac2:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <SetHome+0x170>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001ace:	bf00      	nop
 8001ad0:	200000f0 	.word	0x200000f0
 8001ad4:	200000f4 	.word	0x200000f4
 8001ad8:	200000e0 	.word	0x200000e0
 8001adc:	00030d3f 	.word	0x00030d3f
 8001ae0:	fffff63c 	.word	0xfffff63c
 8001ae4:	40020400 	.word	0x40020400
 8001ae8:	fffffda8 	.word	0xfffffda8
 8001aec:	0007a11f 	.word	0x0007a11f
 8001af0:	200003ac 	.word	0x200003ac
 8001af4:	200001b7 	.word	0x200001b7

08001af8 <EncoderPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 3600
#define  MAX_ENCODER_PERIOD 7200

uint32_t EncoderPosition_Update()
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
	return HTIM_ENCODER.Instance->CNT;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <EncoderPosition_Update+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	200003ac 	.word	0x200003ac

08001b10 <EncoderVelocity_Update>:

float EncoderVelocity_Update()
{   static uint32_t EncoderLastPosition = 0;
 8001b10:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001b14:	ed2d 8b02 	vpush	{d8}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
	static uint64_t EncoderLastTimestamp = 0;
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001b1c:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <EncoderVelocity_Update+0x138>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8001b24:	f7ff fede 	bl	80018e4 <micros>
 8001b28:	e9c7 0102 	strd	r0, r1, [r7, #8]
	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;
	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001b2c:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <EncoderVelocity_Update+0x13c>)
 8001b2e:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001b32:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b36:	460b      	mov	r3, r1
 8001b38:	4614      	mov	r4, r2
 8001b3a:	ebb3 030b 	subs.w	r3, r3, fp
 8001b3e:	eb64 040c 	sbc.w	r4, r4, ip
 8001b42:	e9c7 3400 	strd	r3, r4, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8001b46:	4b42      	ldr	r3, [pc, #264]	; (8001c50 <EncoderVelocity_Update+0x140>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	617b      	str	r3, [r7, #20]
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001b56:	db04      	blt.n	8001b62 <EncoderVelocity_Update+0x52>
	{EncoderPositionDiff -= MAX_ENCODER_PERIOD;}
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e008      	b.n	8001b74 <EncoderVelocity_Update+0x64>
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	425b      	negs	r3, r3
 8001b66:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001b6a:	db03      	blt.n	8001b74 <EncoderVelocity_Update+0x64>
	{EncoderPositionDiff += MAX_ENCODER_PERIOD;}
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001b72:	617b      	str	r3, [r7, #20]
	EncoderLastPosition = EncoderNowPosition;
 8001b74:	4a36      	ldr	r2, [pc, #216]	; (8001c50 <EncoderVelocity_Update+0x140>)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8001b7a:	4a34      	ldr	r2, [pc, #208]	; (8001c4c <EncoderVelocity_Update+0x13c>)
 8001b7c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b80:	e9c2 3400 	strd	r3, r4, [r2]
	raw =(float)(EncoderPositionDiff * 1000000.00) / (float) EncoderTimeDiff;
 8001b84:	6978      	ldr	r0, [r7, #20]
 8001b86:	f7fe fc79 	bl	800047c <__aeabi_i2d>
 8001b8a:	a329      	add	r3, pc, #164	; (adr r3, 8001c30 <EncoderVelocity_Update+0x120>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe fcde 	bl	8000550 <__aeabi_dmul>
 8001b94:	4603      	mov	r3, r0
 8001b96:	460c      	mov	r4, r1
 8001b98:	4618      	mov	r0, r3
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	f7fe ff88 	bl	8000ab0 <__aeabi_d2f>
 8001ba0:	ee08 0a10 	vmov	s16, r0
 8001ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ba8:	f7ff f89a 	bl	8000ce0 <__aeabi_ul2f>
 8001bac:	ee07 0a10 	vmov	s14, r0
 8001bb0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <EncoderVelocity_Update+0x144>)
 8001bb6:	edc3 7a00 	vstr	s15, [r3]
	rad = raw* 0.05*2.00*3.141592/360.00;
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <EncoderVelocity_Update+0x144>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fc6e 	bl	80004a0 <__aeabi_f2d>
 8001bc4:	a31c      	add	r3, pc, #112	; (adr r3, 8001c38 <EncoderVelocity_Update+0x128>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fcc1 	bl	8000550 <__aeabi_dmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	f7fe fb03 	bl	80001e4 <__adddf3>
 8001bde:	4603      	mov	r3, r0
 8001be0:	460c      	mov	r4, r1
 8001be2:	4618      	mov	r0, r3
 8001be4:	4621      	mov	r1, r4
 8001be6:	a316      	add	r3, pc, #88	; (adr r3, 8001c40 <EncoderVelocity_Update+0x130>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe fcb0 	bl	8000550 <__aeabi_dmul>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	460c      	mov	r4, r1
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <EncoderVelocity_Update+0x148>)
 8001bfe:	f7fe fdd1 	bl	80007a4 <__aeabi_ddiv>
 8001c02:	4603      	mov	r3, r0
 8001c04:	460c      	mov	r4, r1
 8001c06:	4618      	mov	r0, r3
 8001c08:	4621      	mov	r1, r4
 8001c0a:	f7fe ff51 	bl	8000ab0 <__aeabi_d2f>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <EncoderVelocity_Update+0x14c>)
 8001c12:	601a      	str	r2, [r3, #0]
	return  rad;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <EncoderVelocity_Update+0x14c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	ee07 3a90 	vmov	s15, r3
}
 8001c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	ecbd 8b02 	vpop	{d8}
 8001c28:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001c2c:	f3af 8000 	nop.w
 8001c30:	00000000 	.word	0x00000000
 8001c34:	412e8480 	.word	0x412e8480
 8001c38:	9999999a 	.word	0x9999999a
 8001c3c:	3fa99999 	.word	0x3fa99999
 8001c40:	fc8b007a 	.word	0xfc8b007a
 8001c44:	400921fa 	.word	0x400921fa
 8001c48:	200003ac 	.word	0x200003ac
 8001c4c:	200001f0 	.word	0x200001f0
 8001c50:	200001f8 	.word	0x200001f8
 8001c54:	20000104 	.word	0x20000104
 8001c58:	40768000 	.word	0x40768000
 8001c5c:	20000100 	.word	0x20000100

08001c60 <kalmanfilter>:

void kalmanfilter()
{    Q = pow(a,2);
 8001c60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4bd6      	ldr	r3, [pc, #856]	; (8001fc0 <kalmanfilter+0x360>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc18 	bl	80004a0 <__aeabi_f2d>
 8001c70:	4603      	mov	r3, r0
 8001c72:	460c      	mov	r4, r1
 8001c74:	ed9f 1bce 	vldr	d1, [pc, #824]	; 8001fb0 <kalmanfilter+0x350>
 8001c78:	ec44 3b10 	vmov	d0, r3, r4
 8001c7c:	f007 fb40 	bl	8009300 <pow>
 8001c80:	ec54 3b10 	vmov	r3, r4, d0
 8001c84:	4618      	mov	r0, r3
 8001c86:	4621      	mov	r1, r4
 8001c88:	f7fe ff12 	bl	8000ab0 <__aeabi_d2f>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4bcd      	ldr	r3, [pc, #820]	; (8001fc4 <kalmanfilter+0x364>)
 8001c90:	601a      	str	r2, [r3, #0]
	 R = pow(w,2);
 8001c92:	4bcd      	ldr	r3, [pc, #820]	; (8001fc8 <kalmanfilter+0x368>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fc02 	bl	80004a0 <__aeabi_f2d>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	460c      	mov	r4, r1
 8001ca0:	ed9f 1bc3 	vldr	d1, [pc, #780]	; 8001fb0 <kalmanfilter+0x350>
 8001ca4:	ec44 3b10 	vmov	d0, r3, r4
 8001ca8:	f007 fb2a 	bl	8009300 <pow>
 8001cac:	ec54 3b10 	vmov	r3, r4, d0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	f7fe fefc 	bl	8000ab0 <__aeabi_d2f>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4bc4      	ldr	r3, [pc, #784]	; (8001fcc <kalmanfilter+0x36c>)
 8001cbc:	601a      	str	r2, [r3, #0]
	 theta_est = theta_pd + omega_pd*dt1;
 8001cbe:	4bc4      	ldr	r3, [pc, #784]	; (8001fd0 <kalmanfilter+0x370>)
 8001cc0:	ed93 7a00 	vldr	s14, [r3]
 8001cc4:	4bc3      	ldr	r3, [pc, #780]	; (8001fd4 <kalmanfilter+0x374>)
 8001cc6:	edd3 7a00 	vldr	s15, [r3]
 8001cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cce:	4bc2      	ldr	r3, [pc, #776]	; (8001fd8 <kalmanfilter+0x378>)
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd8:	4bc0      	ldr	r3, [pc, #768]	; (8001fdc <kalmanfilter+0x37c>)
 8001cda:	edc3 7a00 	vstr	s15, [r3]
	 omega_est = omega_pd;
 8001cde:	4bbc      	ldr	r3, [pc, #752]	; (8001fd0 <kalmanfilter+0x370>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4abf      	ldr	r2, [pc, #764]	; (8001fe0 <kalmanfilter+0x380>)
 8001ce4:	6013      	str	r3, [r2, #0]
	 y = (rad-omega_est);
 8001ce6:	4bbf      	ldr	r3, [pc, #764]	; (8001fe4 <kalmanfilter+0x384>)
 8001ce8:	ed93 7a00 	vldr	s14, [r3]
 8001cec:	4bbc      	ldr	r3, [pc, #752]	; (8001fe0 <kalmanfilter+0x380>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf6:	4bbc      	ldr	r3, [pc, #752]	; (8001fe8 <kalmanfilter+0x388>)
 8001cf8:	edc3 7a00 	vstr	s15, [r3]

    p11 = p11 + dt1*p21+ (Q*pow(dt1,4))/4 + (pow(dt1,2))*(p12+dt1*p22)/dt1;
 8001cfc:	4bb5      	ldr	r3, [pc, #724]	; (8001fd4 <kalmanfilter+0x374>)
 8001cfe:	ed93 7a00 	vldr	s14, [r3]
 8001d02:	4bba      	ldr	r3, [pc, #744]	; (8001fec <kalmanfilter+0x38c>)
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d0c:	4bb8      	ldr	r3, [pc, #736]	; (8001ff0 <kalmanfilter+0x390>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d16:	ee17 0a90 	vmov	r0, s15
 8001d1a:	f7fe fbc1 	bl	80004a0 <__aeabi_f2d>
 8001d1e:	4604      	mov	r4, r0
 8001d20:	460d      	mov	r5, r1
 8001d22:	4ba8      	ldr	r3, [pc, #672]	; (8001fc4 <kalmanfilter+0x364>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fbba 	bl	80004a0 <__aeabi_f2d>
 8001d2c:	4680      	mov	r8, r0
 8001d2e:	4689      	mov	r9, r1
 8001d30:	4ba8      	ldr	r3, [pc, #672]	; (8001fd4 <kalmanfilter+0x374>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fbb3 	bl	80004a0 <__aeabi_f2d>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	ed9f 1b9e 	vldr	d1, [pc, #632]	; 8001fb8 <kalmanfilter+0x358>
 8001d42:	ec43 2b10 	vmov	d0, r2, r3
 8001d46:	f007 fadb 	bl	8009300 <pow>
 8001d4a:	ec53 2b10 	vmov	r2, r3, d0
 8001d4e:	4640      	mov	r0, r8
 8001d50:	4649      	mov	r1, r9
 8001d52:	f7fe fbfd 	bl	8000550 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	4ba4      	ldr	r3, [pc, #656]	; (8001ff4 <kalmanfilter+0x394>)
 8001d64:	f7fe fd1e 	bl	80007a4 <__aeabi_ddiv>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	4629      	mov	r1, r5
 8001d70:	f7fe fa38 	bl	80001e4 <__adddf3>
 8001d74:	4603      	mov	r3, r0
 8001d76:	460c      	mov	r4, r1
 8001d78:	4625      	mov	r5, r4
 8001d7a:	461c      	mov	r4, r3
 8001d7c:	4b95      	ldr	r3, [pc, #596]	; (8001fd4 <kalmanfilter+0x374>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fb8d 	bl	80004a0 <__aeabi_f2d>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8001fb0 <kalmanfilter+0x350>
 8001d8e:	ec43 2b10 	vmov	d0, r2, r3
 8001d92:	f007 fab5 	bl	8009300 <pow>
 8001d96:	ec59 8b10 	vmov	r8, r9, d0
 8001d9a:	4b8e      	ldr	r3, [pc, #568]	; (8001fd4 <kalmanfilter+0x374>)
 8001d9c:	ed93 7a00 	vldr	s14, [r3]
 8001da0:	4b95      	ldr	r3, [pc, #596]	; (8001ff8 <kalmanfilter+0x398>)
 8001da2:	edd3 7a00 	vldr	s15, [r3]
 8001da6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001daa:	4b94      	ldr	r3, [pc, #592]	; (8001ffc <kalmanfilter+0x39c>)
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db4:	ee17 0a90 	vmov	r0, s15
 8001db8:	f7fe fb72 	bl	80004a0 <__aeabi_f2d>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4640      	mov	r0, r8
 8001dc2:	4649      	mov	r1, r9
 8001dc4:	f7fe fbc4 	bl	8000550 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4690      	mov	r8, r2
 8001dce:	4699      	mov	r9, r3
 8001dd0:	4b80      	ldr	r3, [pc, #512]	; (8001fd4 <kalmanfilter+0x374>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fb63 	bl	80004a0 <__aeabi_f2d>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4640      	mov	r0, r8
 8001de0:	4649      	mov	r1, r9
 8001de2:	f7fe fcdf 	bl	80007a4 <__aeabi_ddiv>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4620      	mov	r0, r4
 8001dec:	4629      	mov	r1, r5
 8001dee:	f7fe f9f9 	bl	80001e4 <__adddf3>
 8001df2:	4603      	mov	r3, r0
 8001df4:	460c      	mov	r4, r1
 8001df6:	4618      	mov	r0, r3
 8001df8:	4621      	mov	r1, r4
 8001dfa:	f7fe fe59 	bl	8000ab0 <__aeabi_d2f>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	4b7b      	ldr	r3, [pc, #492]	; (8001ff0 <kalmanfilter+0x390>)
 8001e02:	601a      	str	r2, [r3, #0]
    p12 = p12 + dt1*p22 + (Q*dt1*pow(dt1,2))/2;
 8001e04:	4b73      	ldr	r3, [pc, #460]	; (8001fd4 <kalmanfilter+0x374>)
 8001e06:	ed93 7a00 	vldr	s14, [r3]
 8001e0a:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <kalmanfilter+0x398>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e14:	4b79      	ldr	r3, [pc, #484]	; (8001ffc <kalmanfilter+0x39c>)
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1e:	ee17 0a90 	vmov	r0, s15
 8001e22:	f7fe fb3d 	bl	80004a0 <__aeabi_f2d>
 8001e26:	4604      	mov	r4, r0
 8001e28:	460d      	mov	r5, r1
 8001e2a:	4b66      	ldr	r3, [pc, #408]	; (8001fc4 <kalmanfilter+0x364>)
 8001e2c:	ed93 7a00 	vldr	s14, [r3]
 8001e30:	4b68      	ldr	r3, [pc, #416]	; (8001fd4 <kalmanfilter+0x374>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3a:	ee17 0a90 	vmov	r0, s15
 8001e3e:	f7fe fb2f 	bl	80004a0 <__aeabi_f2d>
 8001e42:	4680      	mov	r8, r0
 8001e44:	4689      	mov	r9, r1
 8001e46:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <kalmanfilter+0x374>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb28 	bl	80004a0 <__aeabi_f2d>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8001fb0 <kalmanfilter+0x350>
 8001e58:	ec43 2b10 	vmov	d0, r2, r3
 8001e5c:	f007 fa50 	bl	8009300 <pow>
 8001e60:	ec53 2b10 	vmov	r2, r3, d0
 8001e64:	4640      	mov	r0, r8
 8001e66:	4649      	mov	r1, r9
 8001e68:	f7fe fb72 	bl	8000550 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e7c:	f7fe fc92 	bl	80007a4 <__aeabi_ddiv>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4620      	mov	r0, r4
 8001e86:	4629      	mov	r1, r5
 8001e88:	f7fe f9ac 	bl	80001e4 <__adddf3>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	460c      	mov	r4, r1
 8001e90:	4618      	mov	r0, r3
 8001e92:	4621      	mov	r1, r4
 8001e94:	f7fe fe0c 	bl	8000ab0 <__aeabi_d2f>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <kalmanfilter+0x39c>)
 8001e9c:	601a      	str	r2, [r3, #0]
    p21 = (2*dt1*p21+Q*pow(dt1,4) + 2*p22*pow(dt1,2))/(2*dt1);
 8001e9e:	4b4d      	ldr	r3, [pc, #308]	; (8001fd4 <kalmanfilter+0x374>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ea8:	4b50      	ldr	r3, [pc, #320]	; (8001fec <kalmanfilter+0x38c>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb2:	ee17 0a90 	vmov	r0, s15
 8001eb6:	f7fe faf3 	bl	80004a0 <__aeabi_f2d>
 8001eba:	4604      	mov	r4, r0
 8001ebc:	460d      	mov	r5, r1
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <kalmanfilter+0x364>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe faec 	bl	80004a0 <__aeabi_f2d>
 8001ec8:	4680      	mov	r8, r0
 8001eca:	4689      	mov	r9, r1
 8001ecc:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <kalmanfilter+0x374>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fae5 	bl	80004a0 <__aeabi_f2d>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8001fb8 <kalmanfilter+0x358>
 8001ede:	ec43 2b10 	vmov	d0, r2, r3
 8001ee2:	f007 fa0d 	bl	8009300 <pow>
 8001ee6:	ec53 2b10 	vmov	r2, r3, d0
 8001eea:	4640      	mov	r0, r8
 8001eec:	4649      	mov	r1, r9
 8001eee:	f7fe fb2f 	bl	8000550 <__aeabi_dmul>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	4629      	mov	r1, r5
 8001efa:	f7fe f973 	bl	80001e4 <__adddf3>
 8001efe:	4603      	mov	r3, r0
 8001f00:	460c      	mov	r4, r1
 8001f02:	4625      	mov	r5, r4
 8001f04:	461c      	mov	r4, r3
 8001f06:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <kalmanfilter+0x398>)
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f10:	ee17 0a90 	vmov	r0, s15
 8001f14:	f7fe fac4 	bl	80004a0 <__aeabi_f2d>
 8001f18:	4680      	mov	r8, r0
 8001f1a:	4689      	mov	r9, r1
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <kalmanfilter+0x374>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fabd 	bl	80004a0 <__aeabi_f2d>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001fb0 <kalmanfilter+0x350>
 8001f2e:	ec43 2b10 	vmov	d0, r2, r3
 8001f32:	f007 f9e5 	bl	8009300 <pow>
 8001f36:	ec53 2b10 	vmov	r2, r3, d0
 8001f3a:	4640      	mov	r0, r8
 8001f3c:	4649      	mov	r1, r9
 8001f3e:	f7fe fb07 	bl	8000550 <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4620      	mov	r0, r4
 8001f48:	4629      	mov	r1, r5
 8001f4a:	f7fe f94b 	bl	80001e4 <__adddf3>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	460c      	mov	r4, r1
 8001f52:	4625      	mov	r5, r4
 8001f54:	461c      	mov	r4, r3
 8001f56:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <kalmanfilter+0x374>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f60:	ee17 0a90 	vmov	r0, s15
 8001f64:	f7fe fa9c 	bl	80004a0 <__aeabi_f2d>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	4629      	mov	r1, r5
 8001f70:	f7fe fc18 	bl	80007a4 <__aeabi_ddiv>
 8001f74:	4603      	mov	r3, r0
 8001f76:	460c      	mov	r4, r1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	f7fe fd98 	bl	8000ab0 <__aeabi_d2f>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <kalmanfilter+0x38c>)
 8001f84:	601a      	str	r2, [r3, #0]
    p22 = Q*pow(dt1,2)+p22;
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <kalmanfilter+0x364>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fa88 	bl	80004a0 <__aeabi_f2d>
 8001f90:	4604      	mov	r4, r0
 8001f92:	460d      	mov	r5, r1
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <kalmanfilter+0x374>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fa81 	bl	80004a0 <__aeabi_f2d>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	ed9f 1b03 	vldr	d1, [pc, #12]	; 8001fb0 <kalmanfilter+0x350>
 8001fa6:	ec43 2b10 	vmov	d0, r2, r3
 8001faa:	f007 f9a9 	bl	8009300 <pow>
 8001fae:	e027      	b.n	8002000 <kalmanfilter+0x3a0>
 8001fb0:	00000000 	.word	0x00000000
 8001fb4:	40000000 	.word	0x40000000
 8001fb8:	00000000 	.word	0x00000000
 8001fbc:	40100000 	.word	0x40100000
 8001fc0:	2000000c 	.word	0x2000000c
 8001fc4:	20000108 	.word	0x20000108
 8001fc8:	20000010 	.word	0x20000010
 8001fcc:	2000010c 	.word	0x2000010c
 8001fd0:	20000130 	.word	0x20000130
 8001fd4:	20000014 	.word	0x20000014
 8001fd8:	20000118 	.word	0x20000118
 8001fdc:	20000110 	.word	0x20000110
 8001fe0:	20000114 	.word	0x20000114
 8001fe4:	20000100 	.word	0x20000100
 8001fe8:	2000011c 	.word	0x2000011c
 8001fec:	20000128 	.word	0x20000128
 8001ff0:	20000120 	.word	0x20000120
 8001ff4:	40100000 	.word	0x40100000
 8001ff8:	2000012c 	.word	0x2000012c
 8001ffc:	20000124 	.word	0x20000124
 8002000:	ec53 2b10 	vmov	r2, r3, d0
 8002004:	4620      	mov	r0, r4
 8002006:	4629      	mov	r1, r5
 8002008:	f7fe faa2 	bl	8000550 <__aeabi_dmul>
 800200c:	4603      	mov	r3, r0
 800200e:	460c      	mov	r4, r1
 8002010:	4625      	mov	r5, r4
 8002012:	461c      	mov	r4, r3
 8002014:	4b6a      	ldr	r3, [pc, #424]	; (80021c0 <kalmanfilter+0x560>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fa41 	bl	80004a0 <__aeabi_f2d>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4620      	mov	r0, r4
 8002024:	4629      	mov	r1, r5
 8002026:	f7fe f8dd 	bl	80001e4 <__adddf3>
 800202a:	4603      	mov	r3, r0
 800202c:	460c      	mov	r4, r1
 800202e:	4618      	mov	r0, r3
 8002030:	4621      	mov	r1, r4
 8002032:	f7fe fd3d 	bl	8000ab0 <__aeabi_d2f>
 8002036:	4602      	mov	r2, r0
 8002038:	4b61      	ldr	r3, [pc, #388]	; (80021c0 <kalmanfilter+0x560>)
 800203a:	601a      	str	r2, [r3, #0]

    theta_est+= (p12*y)/(R+p22);
 800203c:	4b61      	ldr	r3, [pc, #388]	; (80021c4 <kalmanfilter+0x564>)
 800203e:	ed93 7a00 	vldr	s14, [r3]
 8002042:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <kalmanfilter+0x568>)
 8002044:	edd3 7a00 	vldr	s15, [r3]
 8002048:	ee67 6a27 	vmul.f32	s13, s14, s15
 800204c:	4b5f      	ldr	r3, [pc, #380]	; (80021cc <kalmanfilter+0x56c>)
 800204e:	ed93 7a00 	vldr	s14, [r3]
 8002052:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <kalmanfilter+0x560>)
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002060:	4b5b      	ldr	r3, [pc, #364]	; (80021d0 <kalmanfilter+0x570>)
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206a:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <kalmanfilter+0x570>)
 800206c:	edc3 7a00 	vstr	s15, [r3]
    omega_est+= (p22*y)/(R+p22);
 8002070:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <kalmanfilter+0x560>)
 8002072:	ed93 7a00 	vldr	s14, [r3]
 8002076:	4b54      	ldr	r3, [pc, #336]	; (80021c8 <kalmanfilter+0x568>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002080:	4b52      	ldr	r3, [pc, #328]	; (80021cc <kalmanfilter+0x56c>)
 8002082:	ed93 7a00 	vldr	s14, [r3]
 8002086:	4b4e      	ldr	r3, [pc, #312]	; (80021c0 <kalmanfilter+0x560>)
 8002088:	edd3 7a00 	vldr	s15, [r3]
 800208c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002094:	4b4f      	ldr	r3, [pc, #316]	; (80021d4 <kalmanfilter+0x574>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209e:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <kalmanfilter+0x574>)
 80020a0:	edc3 7a00 	vstr	s15, [r3]

    p11=p11-(p12*p21)/(R+p22);
 80020a4:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <kalmanfilter+0x578>)
 80020a6:	ed93 7a00 	vldr	s14, [r3]
 80020aa:	4b46      	ldr	r3, [pc, #280]	; (80021c4 <kalmanfilter+0x564>)
 80020ac:	edd3 6a00 	vldr	s13, [r3]
 80020b0:	4b4a      	ldr	r3, [pc, #296]	; (80021dc <kalmanfilter+0x57c>)
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80020ba:	4b44      	ldr	r3, [pc, #272]	; (80021cc <kalmanfilter+0x56c>)
 80020bc:	edd3 6a00 	vldr	s13, [r3]
 80020c0:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <kalmanfilter+0x560>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020ca:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80020ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d2:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <kalmanfilter+0x578>)
 80020d4:	edc3 7a00 	vstr	s15, [r3]
    p12=p12-(p22*p21)/(R+p22);
 80020d8:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <kalmanfilter+0x564>)
 80020da:	ed93 7a00 	vldr	s14, [r3]
 80020de:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <kalmanfilter+0x560>)
 80020e0:	edd3 6a00 	vldr	s13, [r3]
 80020e4:	4b3d      	ldr	r3, [pc, #244]	; (80021dc <kalmanfilter+0x57c>)
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80020ee:	4b37      	ldr	r3, [pc, #220]	; (80021cc <kalmanfilter+0x56c>)
 80020f0:	edd3 6a00 	vldr	s13, [r3]
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <kalmanfilter+0x560>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020fe:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002106:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <kalmanfilter+0x564>)
 8002108:	edc3 7a00 	vstr	s15, [r3]
    p21=-p21*(p22/(R+p22)-1);
 800210c:	4b33      	ldr	r3, [pc, #204]	; (80021dc <kalmanfilter+0x57c>)
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	eeb1 7a67 	vneg.f32	s14, s15
 8002116:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <kalmanfilter+0x560>)
 8002118:	ed93 6a00 	vldr	s12, [r3]
 800211c:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <kalmanfilter+0x56c>)
 800211e:	edd3 6a00 	vldr	s13, [r3]
 8002122:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <kalmanfilter+0x560>)
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800212c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002134:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213c:	4b27      	ldr	r3, [pc, #156]	; (80021dc <kalmanfilter+0x57c>)
 800213e:	edc3 7a00 	vstr	s15, [r3]
    p22=-p22*(p22/(R+p22)-1);
 8002142:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <kalmanfilter+0x560>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	eeb1 7a67 	vneg.f32	s14, s15
 800214c:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <kalmanfilter+0x560>)
 800214e:	ed93 6a00 	vldr	s12, [r3]
 8002152:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <kalmanfilter+0x56c>)
 8002154:	edd3 6a00 	vldr	s13, [r3]
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <kalmanfilter+0x560>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002162:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800216a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800216e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <kalmanfilter+0x560>)
 8002174:	edc3 7a00 	vstr	s15, [r3]

    theta_pd=theta_est;
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <kalmanfilter+0x570>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a18      	ldr	r2, [pc, #96]	; (80021e0 <kalmanfilter+0x580>)
 800217e:	6013      	str	r3, [r2, #0]
    omega_pd=omega_est;
 8002180:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <kalmanfilter+0x574>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a17      	ldr	r2, [pc, #92]	; (80021e4 <kalmanfilter+0x584>)
 8002186:	6013      	str	r3, [r2, #0]

    kalman_theta=(float)(theta_est*57.2958);
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <kalmanfilter+0x570>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f987 	bl	80004a0 <__aeabi_f2d>
 8002192:	a309      	add	r3, pc, #36	; (adr r3, 80021b8 <kalmanfilter+0x558>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe f9da 	bl	8000550 <__aeabi_dmul>
 800219c:	4603      	mov	r3, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	4618      	mov	r0, r3
 80021a2:	4621      	mov	r1, r4
 80021a4:	f7fe fc84 	bl	8000ab0 <__aeabi_d2f>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <kalmanfilter+0x588>)
 80021ac:	601a      	str	r2, [r3, #0]
}
 80021ae:	bf00      	nop
 80021b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021b4:	f3af 8000 	nop.w
 80021b8:	c63f1412 	.word	0xc63f1412
 80021bc:	404ca5dc 	.word	0x404ca5dc
 80021c0:	2000012c 	.word	0x2000012c
 80021c4:	20000124 	.word	0x20000124
 80021c8:	2000011c 	.word	0x2000011c
 80021cc:	2000010c 	.word	0x2000010c
 80021d0:	20000110 	.word	0x20000110
 80021d4:	20000114 	.word	0x20000114
 80021d8:	20000120 	.word	0x20000120
 80021dc:	20000128 	.word	0x20000128
 80021e0:	20000118 	.word	0x20000118
 80021e4:	20000130 	.word	0x20000130
 80021e8:	20000180 	.word	0x20000180
 80021ec:	00000000 	.word	0x00000000

080021f0 <planning>:

void planning()
{
 80021f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021f4:	af00      	add	r7, sp, #0
  t=t+0.01;
 80021f6:	4bb4      	ldr	r3, [pc, #720]	; (80024c8 <planning+0x2d8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe f950 	bl	80004a0 <__aeabi_f2d>
 8002200:	a3a9      	add	r3, pc, #676	; (adr r3, 80024a8 <planning+0x2b8>)
 8002202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002206:	f7fd ffed 	bl	80001e4 <__adddf3>
 800220a:	4603      	mov	r3, r0
 800220c:	460c      	mov	r4, r1
 800220e:	4618      	mov	r0, r3
 8002210:	4621      	mov	r1, r4
 8002212:	f7fe fc4d 	bl	8000ab0 <__aeabi_d2f>
 8002216:	4602      	mov	r2, r0
 8002218:	4bab      	ldr	r3, [pc, #684]	; (80024c8 <planning+0x2d8>)
 800221a:	601a      	str	r2, [r3, #0]
  Vmax = 0.400;                   //rad/s
 800221c:	4bab      	ldr	r3, [pc, #684]	; (80024cc <planning+0x2dc>)
 800221e:	4aac      	ldr	r2, [pc, #688]	; (80024d0 <planning+0x2e0>)
 8002220:	601a      	str	r2, [r3, #0]
//  Vmax = Max_Speed * 0.10472;
  sb = angle*0.0174533;           //degree -> rad
 8002222:	4bac      	ldr	r3, [pc, #688]	; (80024d4 <planning+0x2e4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe f93a 	bl	80004a0 <__aeabi_f2d>
 800222c:	a3a0      	add	r3, pc, #640	; (adr r3, 80024b0 <planning+0x2c0>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f7fe f98d 	bl	8000550 <__aeabi_dmul>
 8002236:	4603      	mov	r3, r0
 8002238:	460c      	mov	r4, r1
 800223a:	4618      	mov	r0, r3
 800223c:	4621      	mov	r1, r4
 800223e:	f7fe fc37 	bl	8000ab0 <__aeabi_d2f>
 8002242:	4602      	mov	r2, r0
 8002244:	4ba4      	ldr	r3, [pc, #656]	; (80024d8 <planning+0x2e8>)
 8002246:	601a      	str	r2, [r3, #0]
  sa = Lastest_Angle * 0.0174533; //degree -> rad
 8002248:	4ba4      	ldr	r3, [pc, #656]	; (80024dc <planning+0x2ec>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f927 	bl	80004a0 <__aeabi_f2d>
 8002252:	a397      	add	r3, pc, #604	; (adr r3, 80024b0 <planning+0x2c0>)
 8002254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002258:	f7fe f97a 	bl	8000550 <__aeabi_dmul>
 800225c:	4603      	mov	r3, r0
 800225e:	460c      	mov	r4, r1
 8002260:	4618      	mov	r0, r3
 8002262:	4621      	mov	r1, r4
 8002264:	f7fe fc24 	bl	8000ab0 <__aeabi_d2f>
 8002268:	4602      	mov	r2, r0
 800226a:	4b9d      	ldr	r3, [pc, #628]	; (80024e0 <planning+0x2f0>)
 800226c:	601a      	str	r2, [r3, #0]

  if(sb < sa) { reverse = 1; distance = Lastest_Angle - angle; tf = 15.00*(sa-sb)/(8.00*Vmax); }
 800226e:	4b9a      	ldr	r3, [pc, #616]	; (80024d8 <planning+0x2e8>)
 8002270:	ed93 7a00 	vldr	s14, [r3]
 8002274:	4b9a      	ldr	r3, [pc, #616]	; (80024e0 <planning+0x2f0>)
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800227e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002282:	d53c      	bpl.n	80022fe <planning+0x10e>
 8002284:	4b97      	ldr	r3, [pc, #604]	; (80024e4 <planning+0x2f4>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	4b94      	ldr	r3, [pc, #592]	; (80024dc <planning+0x2ec>)
 800228c:	ed93 7a00 	vldr	s14, [r3]
 8002290:	4b90      	ldr	r3, [pc, #576]	; (80024d4 <planning+0x2e4>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800229a:	4b93      	ldr	r3, [pc, #588]	; (80024e8 <planning+0x2f8>)
 800229c:	edc3 7a00 	vstr	s15, [r3]
 80022a0:	4b8f      	ldr	r3, [pc, #572]	; (80024e0 <planning+0x2f0>)
 80022a2:	ed93 7a00 	vldr	s14, [r3]
 80022a6:	4b8c      	ldr	r3, [pc, #560]	; (80024d8 <planning+0x2e8>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b0:	ee17 0a90 	vmov	r0, s15
 80022b4:	f7fe f8f4 	bl	80004a0 <__aeabi_f2d>
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	4b8b      	ldr	r3, [pc, #556]	; (80024ec <planning+0x2fc>)
 80022be:	f7fe f947 	bl	8000550 <__aeabi_dmul>
 80022c2:	4603      	mov	r3, r0
 80022c4:	460c      	mov	r4, r1
 80022c6:	4625      	mov	r5, r4
 80022c8:	461c      	mov	r4, r3
 80022ca:	4b80      	ldr	r3, [pc, #512]	; (80024cc <planning+0x2dc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe f8e6 	bl	80004a0 <__aeabi_f2d>
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	4b85      	ldr	r3, [pc, #532]	; (80024f0 <planning+0x300>)
 80022da:	f7fe f939 	bl	8000550 <__aeabi_dmul>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4620      	mov	r0, r4
 80022e4:	4629      	mov	r1, r5
 80022e6:	f7fe fa5d 	bl	80007a4 <__aeabi_ddiv>
 80022ea:	4603      	mov	r3, r0
 80022ec:	460c      	mov	r4, r1
 80022ee:	4618      	mov	r0, r3
 80022f0:	4621      	mov	r1, r4
 80022f2:	f7fe fbdd 	bl	8000ab0 <__aeabi_d2f>
 80022f6:	4602      	mov	r2, r0
 80022f8:	4b7e      	ldr	r3, [pc, #504]	; (80024f4 <planning+0x304>)
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	e03b      	b.n	8002376 <planning+0x186>
  else        { reverse = 0; distance = angle - Lastest_Angle; tf = 15.00*(sb-sa)/(8.00*Vmax); }
 80022fe:	4b79      	ldr	r3, [pc, #484]	; (80024e4 <planning+0x2f4>)
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
 8002304:	4b73      	ldr	r3, [pc, #460]	; (80024d4 <planning+0x2e4>)
 8002306:	ed93 7a00 	vldr	s14, [r3]
 800230a:	4b74      	ldr	r3, [pc, #464]	; (80024dc <planning+0x2ec>)
 800230c:	edd3 7a00 	vldr	s15, [r3]
 8002310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002314:	4b74      	ldr	r3, [pc, #464]	; (80024e8 <planning+0x2f8>)
 8002316:	edc3 7a00 	vstr	s15, [r3]
 800231a:	4b6f      	ldr	r3, [pc, #444]	; (80024d8 <planning+0x2e8>)
 800231c:	ed93 7a00 	vldr	s14, [r3]
 8002320:	4b6f      	ldr	r3, [pc, #444]	; (80024e0 <planning+0x2f0>)
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800232a:	ee17 0a90 	vmov	r0, s15
 800232e:	f7fe f8b7 	bl	80004a0 <__aeabi_f2d>
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <planning+0x2fc>)
 8002338:	f7fe f90a 	bl	8000550 <__aeabi_dmul>
 800233c:	4603      	mov	r3, r0
 800233e:	460c      	mov	r4, r1
 8002340:	4625      	mov	r5, r4
 8002342:	461c      	mov	r4, r3
 8002344:	4b61      	ldr	r3, [pc, #388]	; (80024cc <planning+0x2dc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe f8a9 	bl	80004a0 <__aeabi_f2d>
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	4b67      	ldr	r3, [pc, #412]	; (80024f0 <planning+0x300>)
 8002354:	f7fe f8fc 	bl	8000550 <__aeabi_dmul>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4620      	mov	r0, r4
 800235e:	4629      	mov	r1, r5
 8002360:	f7fe fa20 	bl	80007a4 <__aeabi_ddiv>
 8002364:	4603      	mov	r3, r0
 8002366:	460c      	mov	r4, r1
 8002368:	4618      	mov	r0, r3
 800236a:	4621      	mov	r1, r4
 800236c:	f7fe fba0 	bl	8000ab0 <__aeabi_d2f>
 8002370:	4602      	mov	r2, r0
 8002372:	4b60      	ldr	r3, [pc, #384]	; (80024f4 <planning+0x304>)
 8002374:	601a      	str	r2, [r3, #0]

  if (distance <= 12)
 8002376:	4b5c      	ldr	r3, [pc, #368]	; (80024e8 <planning+0x2f8>)
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002388:	d802      	bhi.n	8002390 <planning+0x1a0>
  {flag_case = 1; }
 800238a:	4b5b      	ldr	r3, [pc, #364]	; (80024f8 <planning+0x308>)
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]

  if (distance > 12 && distance <=30)
 8002390:	4b55      	ldr	r3, [pc, #340]	; (80024e8 <planning+0x2f8>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800239a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800239e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a2:	dd0c      	ble.n	80023be <planning+0x1ce>
 80023a4:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <planning+0x2f8>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80023ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b6:	d802      	bhi.n	80023be <planning+0x1ce>
  { flag_case = 3; }
 80023b8:	4b4f      	ldr	r3, [pc, #316]	; (80024f8 <planning+0x308>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]

  if (distance > 30 && distance <=60)
 80023be:	4b4a      	ldr	r3, [pc, #296]	; (80024e8 <planning+0x2f8>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80023c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d0:	dd0c      	ble.n	80023ec <planning+0x1fc>
 80023d2:	4b45      	ldr	r3, [pc, #276]	; (80024e8 <planning+0x2f8>)
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80024fc <planning+0x30c>
 80023dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e4:	d802      	bhi.n	80023ec <planning+0x1fc>
  { flag_case = 4; }
 80023e6:	4b44      	ldr	r3, [pc, #272]	; (80024f8 <planning+0x308>)
 80023e8:	2204      	movs	r2, #4
 80023ea:	701a      	strb	r2, [r3, #0]

  if (distance > 60 && distance <=90)
 80023ec:	4b3e      	ldr	r3, [pc, #248]	; (80024e8 <planning+0x2f8>)
 80023ee:	edd3 7a00 	vldr	s15, [r3]
 80023f2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80024fc <planning+0x30c>
 80023f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fe:	dd0c      	ble.n	800241a <planning+0x22a>
 8002400:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <planning+0x2f8>)
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002500 <planning+0x310>
 800240a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002412:	d802      	bhi.n	800241a <planning+0x22a>
  { flag_case = 5; }
 8002414:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <planning+0x308>)
 8002416:	2205      	movs	r2, #5
 8002418:	701a      	strb	r2, [r3, #0]

  if (distance > 90){
 800241a:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <planning+0x2f8>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002500 <planning+0x310>
 8002424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242c:	dc00      	bgt.n	8002430 <planning+0x240>
		  sbf =  a3*pow(t,3)+a4*pow(t,4)+a5*pow(t,5);
		  vb= (float)((3*a3*pow(t,2))+(4*a4*pow(t,3))+(5*a5*pow(t,4)));}
	  //else{tf=0; t=tf;vb=0;}
	  else { vb=0; }
  }
}
 800242e:	e26a      	b.n	8002906 <planning+0x716>
	  flag_case = 2;
 8002430:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <planning+0x308>)
 8002432:	2202      	movs	r2, #2
 8002434:	701a      	strb	r2, [r3, #0]
	  if(0.5>=(5.7335*(sb-sa)/(pow(tf,2))))  //check accerelation
 8002436:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <planning+0x2e8>)
 8002438:	ed93 7a00 	vldr	s14, [r3]
 800243c:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <planning+0x2f0>)
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002446:	ee17 0a90 	vmov	r0, s15
 800244a:	f7fe f829 	bl	80004a0 <__aeabi_f2d>
 800244e:	a31a      	add	r3, pc, #104	; (adr r3, 80024b8 <planning+0x2c8>)
 8002450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002454:	f7fe f87c 	bl	8000550 <__aeabi_dmul>
 8002458:	4603      	mov	r3, r0
 800245a:	460c      	mov	r4, r1
 800245c:	4625      	mov	r5, r4
 800245e:	461c      	mov	r4, r3
 8002460:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <planning+0x304>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f81b 	bl	80004a0 <__aeabi_f2d>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80024c0 <planning+0x2d0>
 8002472:	ec43 2b10 	vmov	d0, r2, r3
 8002476:	f006 ff43 	bl	8009300 <pow>
 800247a:	ec53 2b10 	vmov	r2, r3, d0
 800247e:	4620      	mov	r0, r4
 8002480:	4629      	mov	r1, r5
 8002482:	f7fe f98f 	bl	80007a4 <__aeabi_ddiv>
 8002486:	4603      	mov	r3, r0
 8002488:	460c      	mov	r4, r1
 800248a:	4618      	mov	r0, r3
 800248c:	4621      	mov	r1, r4
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <planning+0x314>)
 8002494:	f7fe fad8 	bl	8000a48 <__aeabi_dcmple>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d034      	beq.n	8002508 <planning+0x318>
	  {tf=tf;}
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <planning+0x304>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <planning+0x304>)
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e05e      	b.n	8002566 <planning+0x376>
 80024a8:	47ae147b 	.word	0x47ae147b
 80024ac:	3f847ae1 	.word	0x3f847ae1
 80024b0:	22d4405f 	.word	0x22d4405f
 80024b4:	3f91df47 	.word	0x3f91df47
 80024b8:	9fbe76c9 	.word	0x9fbe76c9
 80024bc:	4016ef1a 	.word	0x4016ef1a
 80024c0:	00000000 	.word	0x00000000
 80024c4:	40000000 	.word	0x40000000
 80024c8:	20000160 	.word	0x20000160
 80024cc:	20000164 	.word	0x20000164
 80024d0:	3ecccccd 	.word	0x3ecccccd
 80024d4:	2000017c 	.word	0x2000017c
 80024d8:	2000014c 	.word	0x2000014c
 80024dc:	200001a4 	.word	0x200001a4
 80024e0:	20000150 	.word	0x20000150
 80024e4:	20000185 	.word	0x20000185
 80024e8:	20000188 	.word	0x20000188
 80024ec:	402e0000 	.word	0x402e0000
 80024f0:	40200000 	.word	0x40200000
 80024f4:	20000154 	.word	0x20000154
 80024f8:	20000184 	.word	0x20000184
 80024fc:	42700000 	.word	0x42700000
 8002500:	42b40000 	.word	0x42b40000
 8002504:	3fe00000 	.word	0x3fe00000
	  else{tf=pow((5.7335*(sb-sa)/0.5),0.5);}
 8002508:	4bd9      	ldr	r3, [pc, #868]	; (8002870 <planning+0x680>)
 800250a:	ed93 7a00 	vldr	s14, [r3]
 800250e:	4bd9      	ldr	r3, [pc, #868]	; (8002874 <planning+0x684>)
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002518:	ee17 0a90 	vmov	r0, s15
 800251c:	f7fd ffc0 	bl	80004a0 <__aeabi_f2d>
 8002520:	a3c7      	add	r3, pc, #796	; (adr r3, 8002840 <planning+0x650>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fe f813 	bl	8000550 <__aeabi_dmul>
 800252a:	4603      	mov	r3, r0
 800252c:	460c      	mov	r4, r1
 800252e:	4618      	mov	r0, r3
 8002530:	4621      	mov	r1, r4
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	4bd0      	ldr	r3, [pc, #832]	; (8002878 <planning+0x688>)
 8002538:	f7fe f934 	bl	80007a4 <__aeabi_ddiv>
 800253c:	4603      	mov	r3, r0
 800253e:	460c      	mov	r4, r1
 8002540:	ec44 3b17 	vmov	d7, r3, r4
 8002544:	ed9f 1bc0 	vldr	d1, [pc, #768]	; 8002848 <planning+0x658>
 8002548:	eeb0 0a47 	vmov.f32	s0, s14
 800254c:	eef0 0a67 	vmov.f32	s1, s15
 8002550:	f006 fed6 	bl	8009300 <pow>
 8002554:	ec54 3b10 	vmov	r3, r4, d0
 8002558:	4618      	mov	r0, r3
 800255a:	4621      	mov	r1, r4
 800255c:	f7fe faa8 	bl	8000ab0 <__aeabi_d2f>
 8002560:	4602      	mov	r2, r0
 8002562:	4bc6      	ldr	r3, [pc, #792]	; (800287c <planning+0x68c>)
 8002564:	601a      	str	r2, [r3, #0]
	  a0=0;
 8002566:	4bc6      	ldr	r3, [pc, #792]	; (8002880 <planning+0x690>)
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
	  a1=0;
 800256e:	4bc5      	ldr	r3, [pc, #788]	; (8002884 <planning+0x694>)
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
	  a2=0;
 8002576:	4bc4      	ldr	r3, [pc, #784]	; (8002888 <planning+0x698>)
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
	  a3= 10.00*(sb-sa)/(pow(tf,3));
 800257e:	4bbc      	ldr	r3, [pc, #752]	; (8002870 <planning+0x680>)
 8002580:	ed93 7a00 	vldr	s14, [r3]
 8002584:	4bbb      	ldr	r3, [pc, #748]	; (8002874 <planning+0x684>)
 8002586:	edd3 7a00 	vldr	s15, [r3]
 800258a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258e:	ee17 0a90 	vmov	r0, s15
 8002592:	f7fd ff85 	bl	80004a0 <__aeabi_f2d>
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	4bbc      	ldr	r3, [pc, #752]	; (800288c <planning+0x69c>)
 800259c:	f7fd ffd8 	bl	8000550 <__aeabi_dmul>
 80025a0:	4603      	mov	r3, r0
 80025a2:	460c      	mov	r4, r1
 80025a4:	4625      	mov	r5, r4
 80025a6:	461c      	mov	r4, r3
 80025a8:	4bb4      	ldr	r3, [pc, #720]	; (800287c <planning+0x68c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ff77 	bl	80004a0 <__aeabi_f2d>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	ed9f 1ba6 	vldr	d1, [pc, #664]	; 8002850 <planning+0x660>
 80025ba:	ec43 2b10 	vmov	d0, r2, r3
 80025be:	f006 fe9f 	bl	8009300 <pow>
 80025c2:	ec53 2b10 	vmov	r2, r3, d0
 80025c6:	4620      	mov	r0, r4
 80025c8:	4629      	mov	r1, r5
 80025ca:	f7fe f8eb 	bl	80007a4 <__aeabi_ddiv>
 80025ce:	4603      	mov	r3, r0
 80025d0:	460c      	mov	r4, r1
 80025d2:	4618      	mov	r0, r3
 80025d4:	4621      	mov	r1, r4
 80025d6:	f7fe fa6b 	bl	8000ab0 <__aeabi_d2f>
 80025da:	4602      	mov	r2, r0
 80025dc:	4bac      	ldr	r3, [pc, #688]	; (8002890 <planning+0x6a0>)
 80025de:	601a      	str	r2, [r3, #0]
	  a4= -15.00*(sb-sa)/(pow(tf,4));
 80025e0:	4ba3      	ldr	r3, [pc, #652]	; (8002870 <planning+0x680>)
 80025e2:	ed93 7a00 	vldr	s14, [r3]
 80025e6:	4ba3      	ldr	r3, [pc, #652]	; (8002874 <planning+0x684>)
 80025e8:	edd3 7a00 	vldr	s15, [r3]
 80025ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f0:	ee17 0a90 	vmov	r0, s15
 80025f4:	f7fd ff54 	bl	80004a0 <__aeabi_f2d>
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	4ba5      	ldr	r3, [pc, #660]	; (8002894 <planning+0x6a4>)
 80025fe:	f7fd ffa7 	bl	8000550 <__aeabi_dmul>
 8002602:	4603      	mov	r3, r0
 8002604:	460c      	mov	r4, r1
 8002606:	4625      	mov	r5, r4
 8002608:	461c      	mov	r4, r3
 800260a:	4b9c      	ldr	r3, [pc, #624]	; (800287c <planning+0x68c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd ff46 	bl	80004a0 <__aeabi_f2d>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	ed9f 1b8f 	vldr	d1, [pc, #572]	; 8002858 <planning+0x668>
 800261c:	ec43 2b10 	vmov	d0, r2, r3
 8002620:	f006 fe6e 	bl	8009300 <pow>
 8002624:	ec53 2b10 	vmov	r2, r3, d0
 8002628:	4620      	mov	r0, r4
 800262a:	4629      	mov	r1, r5
 800262c:	f7fe f8ba 	bl	80007a4 <__aeabi_ddiv>
 8002630:	4603      	mov	r3, r0
 8002632:	460c      	mov	r4, r1
 8002634:	4618      	mov	r0, r3
 8002636:	4621      	mov	r1, r4
 8002638:	f7fe fa3a 	bl	8000ab0 <__aeabi_d2f>
 800263c:	4602      	mov	r2, r0
 800263e:	4b96      	ldr	r3, [pc, #600]	; (8002898 <planning+0x6a8>)
 8002640:	601a      	str	r2, [r3, #0]
	  a5= 6.00*(sb-sa)/(pow(tf,5));
 8002642:	4b8b      	ldr	r3, [pc, #556]	; (8002870 <planning+0x680>)
 8002644:	ed93 7a00 	vldr	s14, [r3]
 8002648:	4b8a      	ldr	r3, [pc, #552]	; (8002874 <planning+0x684>)
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002652:	ee17 0a90 	vmov	r0, s15
 8002656:	f7fd ff23 	bl	80004a0 <__aeabi_f2d>
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	4b8f      	ldr	r3, [pc, #572]	; (800289c <planning+0x6ac>)
 8002660:	f7fd ff76 	bl	8000550 <__aeabi_dmul>
 8002664:	4603      	mov	r3, r0
 8002666:	460c      	mov	r4, r1
 8002668:	4625      	mov	r5, r4
 800266a:	461c      	mov	r4, r3
 800266c:	4b83      	ldr	r3, [pc, #524]	; (800287c <planning+0x68c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fd ff15 	bl	80004a0 <__aeabi_f2d>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8002860 <planning+0x670>
 800267e:	ec43 2b10 	vmov	d0, r2, r3
 8002682:	f006 fe3d 	bl	8009300 <pow>
 8002686:	ec53 2b10 	vmov	r2, r3, d0
 800268a:	4620      	mov	r0, r4
 800268c:	4629      	mov	r1, r5
 800268e:	f7fe f889 	bl	80007a4 <__aeabi_ddiv>
 8002692:	4603      	mov	r3, r0
 8002694:	460c      	mov	r4, r1
 8002696:	4618      	mov	r0, r3
 8002698:	4621      	mov	r1, r4
 800269a:	f7fe fa09 	bl	8000ab0 <__aeabi_d2f>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b7f      	ldr	r3, [pc, #508]	; (80028a0 <planning+0x6b0>)
 80026a2:	601a      	str	r2, [r3, #0]
	  if(t<=tf){
 80026a4:	4b7f      	ldr	r3, [pc, #508]	; (80028a4 <planning+0x6b4>)
 80026a6:	ed93 7a00 	vldr	s14, [r3]
 80026aa:	4b74      	ldr	r3, [pc, #464]	; (800287c <planning+0x68c>)
 80026ac:	edd3 7a00 	vldr	s15, [r3]
 80026b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b8:	f200 8121 	bhi.w	80028fe <planning+0x70e>
		  sbf =  a3*pow(t,3)+a4*pow(t,4)+a5*pow(t,5);
 80026bc:	4b74      	ldr	r3, [pc, #464]	; (8002890 <planning+0x6a0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd feed 	bl	80004a0 <__aeabi_f2d>
 80026c6:	4604      	mov	r4, r0
 80026c8:	460d      	mov	r5, r1
 80026ca:	4b76      	ldr	r3, [pc, #472]	; (80028a4 <planning+0x6b4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd fee6 	bl	80004a0 <__aeabi_f2d>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8002850 <planning+0x660>
 80026dc:	ec43 2b10 	vmov	d0, r2, r3
 80026e0:	f006 fe0e 	bl	8009300 <pow>
 80026e4:	ec53 2b10 	vmov	r2, r3, d0
 80026e8:	4620      	mov	r0, r4
 80026ea:	4629      	mov	r1, r5
 80026ec:	f7fd ff30 	bl	8000550 <__aeabi_dmul>
 80026f0:	4603      	mov	r3, r0
 80026f2:	460c      	mov	r4, r1
 80026f4:	4625      	mov	r5, r4
 80026f6:	461c      	mov	r4, r3
 80026f8:	4b67      	ldr	r3, [pc, #412]	; (8002898 <planning+0x6a8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd fecf 	bl	80004a0 <__aeabi_f2d>
 8002702:	4680      	mov	r8, r0
 8002704:	4689      	mov	r9, r1
 8002706:	4b67      	ldr	r3, [pc, #412]	; (80028a4 <planning+0x6b4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd fec8 	bl	80004a0 <__aeabi_f2d>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8002858 <planning+0x668>
 8002718:	ec43 2b10 	vmov	d0, r2, r3
 800271c:	f006 fdf0 	bl	8009300 <pow>
 8002720:	ec53 2b10 	vmov	r2, r3, d0
 8002724:	4640      	mov	r0, r8
 8002726:	4649      	mov	r1, r9
 8002728:	f7fd ff12 	bl	8000550 <__aeabi_dmul>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4620      	mov	r0, r4
 8002732:	4629      	mov	r1, r5
 8002734:	f7fd fd56 	bl	80001e4 <__adddf3>
 8002738:	4603      	mov	r3, r0
 800273a:	460c      	mov	r4, r1
 800273c:	4625      	mov	r5, r4
 800273e:	461c      	mov	r4, r3
 8002740:	4b57      	ldr	r3, [pc, #348]	; (80028a0 <planning+0x6b0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd feab 	bl	80004a0 <__aeabi_f2d>
 800274a:	4680      	mov	r8, r0
 800274c:	4689      	mov	r9, r1
 800274e:	4b55      	ldr	r3, [pc, #340]	; (80028a4 <planning+0x6b4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fd fea4 	bl	80004a0 <__aeabi_f2d>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8002860 <planning+0x670>
 8002760:	ec43 2b10 	vmov	d0, r2, r3
 8002764:	f006 fdcc 	bl	8009300 <pow>
 8002768:	ec53 2b10 	vmov	r2, r3, d0
 800276c:	4640      	mov	r0, r8
 800276e:	4649      	mov	r1, r9
 8002770:	f7fd feee 	bl	8000550 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd fd32 	bl	80001e4 <__adddf3>
 8002780:	4603      	mov	r3, r0
 8002782:	460c      	mov	r4, r1
 8002784:	4618      	mov	r0, r3
 8002786:	4621      	mov	r1, r4
 8002788:	f7fe f992 	bl	8000ab0 <__aeabi_d2f>
 800278c:	4602      	mov	r2, r0
 800278e:	4b46      	ldr	r3, [pc, #280]	; (80028a8 <planning+0x6b8>)
 8002790:	601a      	str	r2, [r3, #0]
		  vb= (float)((3*a3*pow(t,2))+(4*a4*pow(t,3))+(5*a5*pow(t,4)));}
 8002792:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <planning+0x6a0>)
 8002794:	edd3 7a00 	vldr	s15, [r3]
 8002798:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800279c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a0:	ee17 0a90 	vmov	r0, s15
 80027a4:	f7fd fe7c 	bl	80004a0 <__aeabi_f2d>
 80027a8:	4604      	mov	r4, r0
 80027aa:	460d      	mov	r5, r1
 80027ac:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <planning+0x6b4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd fe75 	bl	80004a0 <__aeabi_f2d>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8002868 <planning+0x678>
 80027be:	ec43 2b10 	vmov	d0, r2, r3
 80027c2:	f006 fd9d 	bl	8009300 <pow>
 80027c6:	ec53 2b10 	vmov	r2, r3, d0
 80027ca:	4620      	mov	r0, r4
 80027cc:	4629      	mov	r1, r5
 80027ce:	f7fd febf 	bl	8000550 <__aeabi_dmul>
 80027d2:	4603      	mov	r3, r0
 80027d4:	460c      	mov	r4, r1
 80027d6:	4625      	mov	r5, r4
 80027d8:	461c      	mov	r4, r3
 80027da:	4b2f      	ldr	r3, [pc, #188]	; (8002898 <planning+0x6a8>)
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80027e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027e8:	ee17 0a90 	vmov	r0, s15
 80027ec:	f7fd fe58 	bl	80004a0 <__aeabi_f2d>
 80027f0:	4680      	mov	r8, r0
 80027f2:	4689      	mov	r9, r1
 80027f4:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <planning+0x6b4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fd fe51 	bl	80004a0 <__aeabi_f2d>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8002850 <planning+0x660>
 8002806:	ec43 2b10 	vmov	d0, r2, r3
 800280a:	f006 fd79 	bl	8009300 <pow>
 800280e:	ec53 2b10 	vmov	r2, r3, d0
 8002812:	4640      	mov	r0, r8
 8002814:	4649      	mov	r1, r9
 8002816:	f7fd fe9b 	bl	8000550 <__aeabi_dmul>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4620      	mov	r0, r4
 8002820:	4629      	mov	r1, r5
 8002822:	f7fd fcdf 	bl	80001e4 <__adddf3>
 8002826:	4603      	mov	r3, r0
 8002828:	460c      	mov	r4, r1
 800282a:	4625      	mov	r5, r4
 800282c:	461c      	mov	r4, r3
 800282e:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <planning+0x6b0>)
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800283c:	e036      	b.n	80028ac <planning+0x6bc>
 800283e:	bf00      	nop
 8002840:	9fbe76c9 	.word	0x9fbe76c9
 8002844:	4016ef1a 	.word	0x4016ef1a
 8002848:	00000000 	.word	0x00000000
 800284c:	3fe00000 	.word	0x3fe00000
 8002850:	00000000 	.word	0x00000000
 8002854:	40080000 	.word	0x40080000
 8002858:	00000000 	.word	0x00000000
 800285c:	40100000 	.word	0x40100000
 8002860:	00000000 	.word	0x00000000
 8002864:	40140000 	.word	0x40140000
 8002868:	00000000 	.word	0x00000000
 800286c:	40000000 	.word	0x40000000
 8002870:	2000014c 	.word	0x2000014c
 8002874:	20000150 	.word	0x20000150
 8002878:	3fe00000 	.word	0x3fe00000
 800287c:	20000154 	.word	0x20000154
 8002880:	20000134 	.word	0x20000134
 8002884:	20000138 	.word	0x20000138
 8002888:	2000013c 	.word	0x2000013c
 800288c:	40240000 	.word	0x40240000
 8002890:	20000140 	.word	0x20000140
 8002894:	c02e0000 	.word	0xc02e0000
 8002898:	20000144 	.word	0x20000144
 800289c:	40180000 	.word	0x40180000
 80028a0:	20000148 	.word	0x20000148
 80028a4:	20000160 	.word	0x20000160
 80028a8:	2000015c 	.word	0x2000015c
 80028ac:	ee17 0a90 	vmov	r0, s15
 80028b0:	f7fd fdf6 	bl	80004a0 <__aeabi_f2d>
 80028b4:	4680      	mov	r8, r0
 80028b6:	4689      	mov	r9, r1
 80028b8:	4b17      	ldr	r3, [pc, #92]	; (8002918 <planning+0x728>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fdef 	bl	80004a0 <__aeabi_f2d>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002910 <planning+0x720>
 80028ca:	ec43 2b10 	vmov	d0, r2, r3
 80028ce:	f006 fd17 	bl	8009300 <pow>
 80028d2:	ec53 2b10 	vmov	r2, r3, d0
 80028d6:	4640      	mov	r0, r8
 80028d8:	4649      	mov	r1, r9
 80028da:	f7fd fe39 	bl	8000550 <__aeabi_dmul>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4620      	mov	r0, r4
 80028e4:	4629      	mov	r1, r5
 80028e6:	f7fd fc7d 	bl	80001e4 <__adddf3>
 80028ea:	4603      	mov	r3, r0
 80028ec:	460c      	mov	r4, r1
 80028ee:	4618      	mov	r0, r3
 80028f0:	4621      	mov	r1, r4
 80028f2:	f7fe f8dd 	bl	8000ab0 <__aeabi_d2f>
 80028f6:	4602      	mov	r2, r0
 80028f8:	4b08      	ldr	r3, [pc, #32]	; (800291c <planning+0x72c>)
 80028fa:	601a      	str	r2, [r3, #0]
}
 80028fc:	e003      	b.n	8002906 <planning+0x716>
	  else { vb=0; }
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <planning+0x72c>)
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
}
 8002906:	bf00      	nop
 8002908:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800290c:	f3af 8000 	nop.w
 8002910:	00000000 	.word	0x00000000
 8002914:	40100000 	.word	0x40100000
 8002918:	20000160 	.word	0x20000160
 800291c:	20000158 	.word	0x20000158

08002920 <ReachGoal>:

void ReachGoal()
{
 8002920:	b598      	push	{r3, r4, r7, lr}
 8002922:	af00      	add	r7, sp, #0
	PWMOut=0;
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <ReachGoal+0x38>)
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
	MotorDrive();
 800292a:	f7fe fff5 	bl	8001918 <MotorDrive>
	Run=0;
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <ReachGoal+0x3c>)
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_IT(&hi2c1, EndeffAddress, LaserOpenCommand, 1);
 8002934:	2301      	movs	r3, #1
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <ReachGoal+0x40>)
 8002938:	2146      	movs	r1, #70	; 0x46
 800293a:	480a      	ldr	r0, [pc, #40]	; (8002964 <ReachGoal+0x44>)
 800293c:	f002 faa0 	bl	8004e80 <HAL_I2C_Master_Transmit_IT>
	Laser = 1;
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <ReachGoal+0x48>)
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
	LaserTimestamp = micros();
 8002946:	f7fe ffcd 	bl	80018e4 <micros>
 800294a:	4603      	mov	r3, r0
 800294c:	460c      	mov	r4, r1
 800294e:	4a07      	ldr	r2, [pc, #28]	; (800296c <ReachGoal+0x4c>)
 8002950:	e9c2 3400 	strd	r3, r4, [r2]
}
 8002954:	bf00      	nop
 8002956:	bd98      	pop	{r3, r4, r7, pc}
 8002958:	200000f4 	.word	0x200000f4
 800295c:	200001b6 	.word	0x200001b6
 8002960:	20000018 	.word	0x20000018
 8002964:	200002b4 	.word	0x200002b4
 8002968:	200001b8 	.word	0x200001b8
 800296c:	200000e8 	.word	0x200000e8

08002970 <pid>:


void pid()
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
	if  (flag_case == 2)
 8002974:	4bb8      	ldr	r3, [pc, #736]	; (8002c58 <pid+0x2e8>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b02      	cmp	r3, #2
 800297a:	f040 80bf 	bne.w	8002afc <pid+0x18c>
	{
		 error = vb-omega_est;
 800297e:	4bb7      	ldr	r3, [pc, #732]	; (8002c5c <pid+0x2ec>)
 8002980:	ed93 7a00 	vldr	s14, [r3]
 8002984:	4bb6      	ldr	r3, [pc, #728]	; (8002c60 <pid+0x2f0>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800298e:	4bb5      	ldr	r3, [pc, #724]	; (8002c64 <pid+0x2f4>)
 8002990:	edc3 7a00 	vstr	s15, [r3]
		 p = (error);
 8002994:	4bb3      	ldr	r3, [pc, #716]	; (8002c64 <pid+0x2f4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4ab3      	ldr	r2, [pc, #716]	; (8002c68 <pid+0x2f8>)
 800299a:	6013      	str	r3, [r2, #0]
		 i = i+error;
 800299c:	4bb3      	ldr	r3, [pc, #716]	; (8002c6c <pid+0x2fc>)
 800299e:	ed93 7a00 	vldr	s14, [r3]
 80029a2:	4bb0      	ldr	r3, [pc, #704]	; (8002c64 <pid+0x2f4>)
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ac:	4baf      	ldr	r3, [pc, #700]	; (8002c6c <pid+0x2fc>)
 80029ae:	edc3 7a00 	vstr	s15, [r3]
		 d = error - pre_error;
 80029b2:	4bac      	ldr	r3, [pc, #688]	; (8002c64 <pid+0x2f4>)
 80029b4:	ed93 7a00 	vldr	s14, [r3]
 80029b8:	4bad      	ldr	r3, [pc, #692]	; (8002c70 <pid+0x300>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c2:	4bac      	ldr	r3, [pc, #688]	; (8002c74 <pid+0x304>)
 80029c4:	edc3 7a00 	vstr	s15, [r3]
		 pre_error = error;
 80029c8:	4ba6      	ldr	r3, [pc, #664]	; (8002c64 <pid+0x2f4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4aa8      	ldr	r2, [pc, #672]	; (8002c70 <pid+0x300>)
 80029ce:	6013      	str	r3, [r2, #0]
		 PWMOut =195+( (p*K_P)+(i*K_I)+(d*K_D));
 80029d0:	4ba5      	ldr	r3, [pc, #660]	; (8002c68 <pid+0x2f8>)
 80029d2:	ed93 7a00 	vldr	s14, [r3]
 80029d6:	4ba8      	ldr	r3, [pc, #672]	; (8002c78 <pid+0x308>)
 80029d8:	edd3 7a00 	vldr	s15, [r3]
 80029dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e0:	4ba2      	ldr	r3, [pc, #648]	; (8002c6c <pid+0x2fc>)
 80029e2:	edd3 6a00 	vldr	s13, [r3]
 80029e6:	4ba5      	ldr	r3, [pc, #660]	; (8002c7c <pid+0x30c>)
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029f4:	4b9f      	ldr	r3, [pc, #636]	; (8002c74 <pid+0x304>)
 80029f6:	edd3 6a00 	vldr	s13, [r3]
 80029fa:	4ba1      	ldr	r3, [pc, #644]	; (8002c80 <pid+0x310>)
 80029fc:	edd3 7a00 	vldr	s15, [r3]
 8002a00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a08:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8002c84 <pid+0x314>
 8002a0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a14:	ee17 2a90 	vmov	r2, s15
 8002a18:	4b9b      	ldr	r3, [pc, #620]	; (8002c88 <pid+0x318>)
 8002a1a:	601a      	str	r2, [r3, #0]

		 if(vb==0)
 8002a1c:	4b8f      	ldr	r3, [pc, #572]	; (8002c5c <pid+0x2ec>)
 8002a1e:	edd3 7a00 	vldr	s15, [r3]
 8002a22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2a:	f040 8210 	bne.w	8002e4e <pid+0x4de>
		 {
			if(reverse)
 8002a2e:	4b97      	ldr	r3, [pc, #604]	; (8002c8c <pid+0x31c>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d027      	beq.n	8002a86 <pid+0x116>
			{
				if((RobotArm_Position) < (uint16_t)(angle*20))
 8002a36:	4b96      	ldr	r3, [pc, #600]	; (8002c90 <pid+0x320>)
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a48:	ee17 3a90 	vmov	r3, s15
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	4b91      	ldr	r3, [pc, #580]	; (8002c94 <pid+0x324>)
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d903      	bls.n	8002a5e <pid+0xee>
				{
					PWMOut=400;
 8002a56:	4b8c      	ldr	r3, [pc, #560]	; (8002c88 <pid+0x318>)
 8002a58:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002a5c:	601a      	str	r2, [r3, #0]
				}
				if((RobotArm_Position) > (uint16_t)(angle*20))
 8002a5e:	4b8c      	ldr	r3, [pc, #560]	; (8002c90 <pid+0x320>)
 8002a60:	edd3 7a00 	vldr	s15, [r3]
 8002a64:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a70:	ee17 3a90 	vmov	r3, s15
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	4b87      	ldr	r3, [pc, #540]	; (8002c94 <pid+0x324>)
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d22a      	bcs.n	8002ad4 <pid+0x164>
				{
					PWMOut=-1000;
 8002a7e:	4b82      	ldr	r3, [pc, #520]	; (8002c88 <pid+0x318>)
 8002a80:	4a85      	ldr	r2, [pc, #532]	; (8002c98 <pid+0x328>)
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	e026      	b.n	8002ad4 <pid+0x164>
				}
			}
			else
			{
				if((RobotArm_Position) < (uint16_t)(angle*20))
 8002a86:	4b82      	ldr	r3, [pc, #520]	; (8002c90 <pid+0x320>)
 8002a88:	edd3 7a00 	vldr	s15, [r3]
 8002a8c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a98:	ee17 3a90 	vmov	r3, s15
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	4b7d      	ldr	r3, [pc, #500]	; (8002c94 <pid+0x324>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d903      	bls.n	8002aae <pid+0x13e>
				{
					PWMOut=1000;
 8002aa6:	4b78      	ldr	r3, [pc, #480]	; (8002c88 <pid+0x318>)
 8002aa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002aac:	601a      	str	r2, [r3, #0]
				}
				if((RobotArm_Position) > (uint16_t)(angle*20))
 8002aae:	4b78      	ldr	r3, [pc, #480]	; (8002c90 <pid+0x320>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ac0:	ee17 3a90 	vmov	r3, s15
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	4b73      	ldr	r3, [pc, #460]	; (8002c94 <pid+0x324>)
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d202      	bcs.n	8002ad4 <pid+0x164>
				{
					PWMOut=-400;
 8002ace:	4b6e      	ldr	r3, [pc, #440]	; (8002c88 <pid+0x318>)
 8002ad0:	4a72      	ldr	r2, [pc, #456]	; (8002c9c <pid+0x32c>)
 8002ad2:	601a      	str	r2, [r3, #0]
				}
			}

			if((RobotArm_Position) == (uint16_t)(angle*20))
 8002ad4:	4b6e      	ldr	r3, [pc, #440]	; (8002c90 <pid+0x320>)
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae6:	ee17 3a90 	vmov	r3, s15
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	4b69      	ldr	r3, [pc, #420]	; (8002c94 <pid+0x324>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	f040 81ac 	bne.w	8002e4e <pid+0x4de>
			{
				ReachGoal();
 8002af6:	f7ff ff13 	bl	8002920 <ReachGoal>
		if((RobotArm_Position) == (uint16_t)(angle*20))
		{
			ReachGoal();
		}
	}
}
 8002afa:	e1a8      	b.n	8002e4e <pid+0x4de>
	else if (flag_case == 1)
 8002afc:	4b56      	ldr	r3, [pc, #344]	; (8002c58 <pid+0x2e8>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d13c      	bne.n	8002b7e <pid+0x20e>
		if((RobotArm_Position) < (uint16_t)(angle*20))
 8002b04:	4b62      	ldr	r3, [pc, #392]	; (8002c90 <pid+0x320>)
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b16:	ee17 3a90 	vmov	r3, s15
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	4b5d      	ldr	r3, [pc, #372]	; (8002c94 <pid+0x324>)
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d904      	bls.n	8002b2e <pid+0x1be>
			PWMOut=400;
 8002b24:	4b58      	ldr	r3, [pc, #352]	; (8002c88 <pid+0x318>)
 8002b26:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b2a:	601a      	str	r2, [r3, #0]
}
 8002b2c:	e18f      	b.n	8002e4e <pid+0x4de>
		else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002b2e:	4b58      	ldr	r3, [pc, #352]	; (8002c90 <pid+0x320>)
 8002b30:	edd3 7a00 	vldr	s15, [r3]
 8002b34:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b40:	ee17 3a90 	vmov	r3, s15
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <pid+0x324>)
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d203      	bcs.n	8002b56 <pid+0x1e6>
			PWMOut=-400;
 8002b4e:	4b4e      	ldr	r3, [pc, #312]	; (8002c88 <pid+0x318>)
 8002b50:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <pid+0x32c>)
 8002b52:	601a      	str	r2, [r3, #0]
}
 8002b54:	e17b      	b.n	8002e4e <pid+0x4de>
		else if((RobotArm_Position) == (uint16_t)(angle*20))
 8002b56:	4b4e      	ldr	r3, [pc, #312]	; (8002c90 <pid+0x320>)
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b68:	ee17 3a90 	vmov	r3, s15
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	4b49      	ldr	r3, [pc, #292]	; (8002c94 <pid+0x324>)
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	f040 816b 	bne.w	8002e4e <pid+0x4de>
			ReachGoal();
 8002b78:	f7ff fed2 	bl	8002920 <ReachGoal>
}
 8002b7c:	e167      	b.n	8002e4e <pid+0x4de>
	else if (flag_case == 3)
 8002b7e:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <pid+0x2e8>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	f040 808c 	bne.w	8002ca0 <pid+0x330>
		if(reverse)
 8002b88:	4b40      	ldr	r3, [pc, #256]	; (8002c8c <pid+0x31c>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d027      	beq.n	8002be0 <pid+0x270>
			if((RobotArm_Position) < (uint16_t)(angle*20))
 8002b90:	4b3f      	ldr	r3, [pc, #252]	; (8002c90 <pid+0x320>)
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ba2:	ee17 3a90 	vmov	r3, s15
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	4b3a      	ldr	r3, [pc, #232]	; (8002c94 <pid+0x324>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d903      	bls.n	8002bb8 <pid+0x248>
				PWMOut=400;
 8002bb0:	4b35      	ldr	r3, [pc, #212]	; (8002c88 <pid+0x318>)
 8002bb2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002bb6:	601a      	str	r2, [r3, #0]
			if((RobotArm_Position) > (uint16_t)(angle*20))
 8002bb8:	4b35      	ldr	r3, [pc, #212]	; (8002c90 <pid+0x320>)
 8002bba:	edd3 7a00 	vldr	s15, [r3]
 8002bbe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bca:	ee17 3a90 	vmov	r3, s15
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <pid+0x324>)
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d22a      	bcs.n	8002c2e <pid+0x2be>
				PWMOut=-1000;
 8002bd8:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <pid+0x318>)
 8002bda:	4a2f      	ldr	r2, [pc, #188]	; (8002c98 <pid+0x328>)
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	e026      	b.n	8002c2e <pid+0x2be>
			if((RobotArm_Position) < (uint16_t)(angle*20))
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <pid+0x320>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002bea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bf2:	ee17 3a90 	vmov	r3, s15
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <pid+0x324>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d903      	bls.n	8002c08 <pid+0x298>
				PWMOut=1000;
 8002c00:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <pid+0x318>)
 8002c02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c06:	601a      	str	r2, [r3, #0]
			if((RobotArm_Position) > (uint16_t)(angle*20))
 8002c08:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <pid+0x320>)
 8002c0a:	edd3 7a00 	vldr	s15, [r3]
 8002c0e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c1a:	ee17 3a90 	vmov	r3, s15
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <pid+0x324>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d202      	bcs.n	8002c2e <pid+0x2be>
				PWMOut=-400;
 8002c28:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <pid+0x318>)
 8002c2a:	4a1c      	ldr	r2, [pc, #112]	; (8002c9c <pid+0x32c>)
 8002c2c:	601a      	str	r2, [r3, #0]
		if((RobotArm_Position) == (uint16_t)(angle*20))
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <pid+0x320>)
 8002c30:	edd3 7a00 	vldr	s15, [r3]
 8002c34:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c40:	ee17 3a90 	vmov	r3, s15
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <pid+0x324>)
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	f040 80ff 	bne.w	8002e4e <pid+0x4de>
			ReachGoal();
 8002c50:	f7ff fe66 	bl	8002920 <ReachGoal>
}
 8002c54:	e0fb      	b.n	8002e4e <pid+0x4de>
 8002c56:	bf00      	nop
 8002c58:	20000184 	.word	0x20000184
 8002c5c:	20000158 	.word	0x20000158
 8002c60:	20000114 	.word	0x20000114
 8002c64:	20000178 	.word	0x20000178
 8002c68:	20000168 	.word	0x20000168
 8002c6c:	2000016c 	.word	0x2000016c
 8002c70:	20000174 	.word	0x20000174
 8002c74:	20000170 	.word	0x20000170
 8002c78:	20000004 	.word	0x20000004
 8002c7c:	20000008 	.word	0x20000008
 8002c80:	200000fc 	.word	0x200000fc
 8002c84:	43430000 	.word	0x43430000
 8002c88:	200000f4 	.word	0x200000f4
 8002c8c:	20000185 	.word	0x20000185
 8002c90:	2000017c 	.word	0x2000017c
 8002c94:	200000f8 	.word	0x200000f8
 8002c98:	fffffc18 	.word	0xfffffc18
 8002c9c:	fffffe70 	.word	0xfffffe70
	else if (flag_case == 4)
 8002ca0:	4b6c      	ldr	r3, [pc, #432]	; (8002e54 <pid+0x4e4>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d167      	bne.n	8002d78 <pid+0x408>
		if(reverse)
 8002ca8:	4b6b      	ldr	r3, [pc, #428]	; (8002e58 <pid+0x4e8>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d028      	beq.n	8002d02 <pid+0x392>
			if((RobotArm_Position) < (uint16_t)(angle*20))
 8002cb0:	4b6a      	ldr	r3, [pc, #424]	; (8002e5c <pid+0x4ec>)
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc2:	ee17 3a90 	vmov	r3, s15
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	4b65      	ldr	r3, [pc, #404]	; (8002e60 <pid+0x4f0>)
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d904      	bls.n	8002cda <pid+0x36a>
				PWMOut=300;
 8002cd0:	4b64      	ldr	r3, [pc, #400]	; (8002e64 <pid+0x4f4>)
 8002cd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	e03b      	b.n	8002d52 <pid+0x3e2>
			else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002cda:	4b60      	ldr	r3, [pc, #384]	; (8002e5c <pid+0x4ec>)
 8002cdc:	edd3 7a00 	vldr	s15, [r3]
 8002ce0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cec:	ee17 3a90 	vmov	r3, s15
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	4b5b      	ldr	r3, [pc, #364]	; (8002e60 <pid+0x4f0>)
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d22b      	bcs.n	8002d52 <pid+0x3e2>
				PWMOut=-1500;
 8002cfa:	4b5a      	ldr	r3, [pc, #360]	; (8002e64 <pid+0x4f4>)
 8002cfc:	4a5a      	ldr	r2, [pc, #360]	; (8002e68 <pid+0x4f8>)
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e027      	b.n	8002d52 <pid+0x3e2>
			if((RobotArm_Position) < (uint16_t)(angle*20))
 8002d02:	4b56      	ldr	r3, [pc, #344]	; (8002e5c <pid+0x4ec>)
 8002d04:	edd3 7a00 	vldr	s15, [r3]
 8002d08:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d14:	ee17 3a90 	vmov	r3, s15
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	4b51      	ldr	r3, [pc, #324]	; (8002e60 <pid+0x4f0>)
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d904      	bls.n	8002d2c <pid+0x3bc>
				PWMOut=1500;
 8002d22:	4b50      	ldr	r3, [pc, #320]	; (8002e64 <pid+0x4f4>)
 8002d24:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	e012      	b.n	8002d52 <pid+0x3e2>
			else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002d2c:	4b4b      	ldr	r3, [pc, #300]	; (8002e5c <pid+0x4ec>)
 8002d2e:	edd3 7a00 	vldr	s15, [r3]
 8002d32:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d3e:	ee17 3a90 	vmov	r3, s15
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	4b46      	ldr	r3, [pc, #280]	; (8002e60 <pid+0x4f0>)
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d202      	bcs.n	8002d52 <pid+0x3e2>
				PWMOut=-300;
 8002d4c:	4b45      	ldr	r3, [pc, #276]	; (8002e64 <pid+0x4f4>)
 8002d4e:	4a47      	ldr	r2, [pc, #284]	; (8002e6c <pid+0x4fc>)
 8002d50:	601a      	str	r2, [r3, #0]
		if((RobotArm_Position) == (uint16_t)(angle*20))
 8002d52:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <pid+0x4ec>)
 8002d54:	edd3 7a00 	vldr	s15, [r3]
 8002d58:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d64:	ee17 3a90 	vmov	r3, s15
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	4b3d      	ldr	r3, [pc, #244]	; (8002e60 <pid+0x4f0>)
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d16d      	bne.n	8002e4e <pid+0x4de>
			ReachGoal();
 8002d72:	f7ff fdd5 	bl	8002920 <ReachGoal>
}
 8002d76:	e06a      	b.n	8002e4e <pid+0x4de>
	else if (flag_case == 5)
 8002d78:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <pid+0x4e4>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d166      	bne.n	8002e4e <pid+0x4de>
		if(reverse)
 8002d80:	4b35      	ldr	r3, [pc, #212]	; (8002e58 <pid+0x4e8>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d028      	beq.n	8002dda <pid+0x46a>
			if((RobotArm_Position) < (uint16_t)(angle*20))
 8002d88:	4b34      	ldr	r3, [pc, #208]	; (8002e5c <pid+0x4ec>)
 8002d8a:	edd3 7a00 	vldr	s15, [r3]
 8002d8e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d9a:	ee17 3a90 	vmov	r3, s15
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <pid+0x4f0>)
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d904      	bls.n	8002db2 <pid+0x442>
				PWMOut=300;
 8002da8:	4b2e      	ldr	r3, [pc, #184]	; (8002e64 <pid+0x4f4>)
 8002daa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e03b      	b.n	8002e2a <pid+0x4ba>
			else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002db2:	4b2a      	ldr	r3, [pc, #168]	; (8002e5c <pid+0x4ec>)
 8002db4:	edd3 7a00 	vldr	s15, [r3]
 8002db8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc4:	ee17 3a90 	vmov	r3, s15
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <pid+0x4f0>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d22b      	bcs.n	8002e2a <pid+0x4ba>
				PWMOut=-1600;
 8002dd2:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <pid+0x4f4>)
 8002dd4:	4a26      	ldr	r2, [pc, #152]	; (8002e70 <pid+0x500>)
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e027      	b.n	8002e2a <pid+0x4ba>
			if((RobotArm_Position) < (uint16_t)(angle*20))
 8002dda:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <pid+0x4ec>)
 8002ddc:	edd3 7a00 	vldr	s15, [r3]
 8002de0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dec:	ee17 3a90 	vmov	r3, s15
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <pid+0x4f0>)
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d904      	bls.n	8002e04 <pid+0x494>
				PWMOut=1600;
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <pid+0x4f4>)
 8002dfc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	e012      	b.n	8002e2a <pid+0x4ba>
			else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002e04:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <pid+0x4ec>)
 8002e06:	edd3 7a00 	vldr	s15, [r3]
 8002e0a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e16:	ee17 3a90 	vmov	r3, s15
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <pid+0x4f0>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d202      	bcs.n	8002e2a <pid+0x4ba>
				PWMOut=-300;
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <pid+0x4f4>)
 8002e26:	4a11      	ldr	r2, [pc, #68]	; (8002e6c <pid+0x4fc>)
 8002e28:	601a      	str	r2, [r3, #0]
		if((RobotArm_Position) == (uint16_t)(angle*20))
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <pid+0x4ec>)
 8002e2c:	edd3 7a00 	vldr	s15, [r3]
 8002e30:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e3c:	ee17 3a90 	vmov	r3, s15
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <pid+0x4f0>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d101      	bne.n	8002e4e <pid+0x4de>
			ReachGoal();
 8002e4a:	f7ff fd69 	bl	8002920 <ReachGoal>
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000184 	.word	0x20000184
 8002e58:	20000185 	.word	0x20000185
 8002e5c:	2000017c 	.word	0x2000017c
 8002e60:	200000f8 	.word	0x200000f8
 8002e64:	200000f4 	.word	0x200000f4
 8002e68:	fffffa24 	.word	0xfffffa24
 8002e6c:	fffffed4 	.word	0xfffffed4
 8002e70:	fffff9c0 	.word	0xfffff9c0

08002e74 <UARTInit>:

void UARTInit(UARTStucrture *uart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <UARTInit+0x4c>)
 8002e7e:	88db      	ldrh	r3, [r3, #6]
 8002e80:	4619      	mov	r1, r3
 8002e82:	2001      	movs	r0, #1
 8002e84:	f006 f932 	bl	80090ec <calloc>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <UARTInit+0x4c>)
 8002e92:	889b      	ldrh	r3, [r3, #4]
 8002e94:	4619      	mov	r1, r3
 8002e96:	2001      	movs	r0, #1
 8002e98:	f006 f928 	bl	80090ec <calloc>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	81da      	strh	r2, [r3, #14]

}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	2000018c 	.word	0x2000018c

08002ec4 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6919      	ldr	r1, [r3, #16]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	88db      	ldrh	r3, [r3, #6]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f005 f9df 	bl	800829c <HAL_UART_Receive_DMA>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	88db      	ldrh	r3, [r3, #6]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	1ad3      	subs	r3, r2, r3
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8002f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f18:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8a9b      	ldrh	r3, [r3, #20]
 8002f1e:	461c      	mov	r4, r3
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ffe0 	bl	8002ee6 <UARTGetRxHead>
 8002f26:	4603      	mov	r3, r0
 8002f28:	429c      	cmp	r4, r3
 8002f2a:	d013      	beq.n	8002f54 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	8a92      	ldrh	r2, [r2, #20]
 8002f34:	4413      	add	r3, r2
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	8a9b      	ldrh	r3, [r3, #20]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	88d2      	ldrh	r2, [r2, #6]
 8002f44:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f48:	fb02 f201 	mul.w	r2, r2, r1
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8002f54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd90      	pop	{r4, r7, pc}

08002f60 <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d13d      	bne.n	8002ff2 <UARTTxDumpBuffer+0x92>
 8002f76:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <UARTTxDumpBuffer+0x9c>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d139      	bne.n	8002ff2 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8002f7e:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <UARTTxDumpBuffer+0x9c>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	89da      	ldrh	r2, [r3, #14]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	899b      	ldrh	r3, [r3, #12]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d02d      	beq.n	8002fec <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	89da      	ldrh	r2, [r3, #14]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d906      	bls.n	8002faa <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	89da      	ldrh	r2, [r3, #14]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	e005      	b.n	8002fb6 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	889a      	ldrh	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	8992      	ldrh	r2, [r2, #12]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	89fa      	ldrh	r2, [r7, #14]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f005 f8fb 	bl	80081c4 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	899b      	ldrh	r3, [r3, #12]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	89fb      	ldrh	r3, [r7, #14]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	8892      	ldrh	r2, [r2, #4]
 8002fdc:	fb93 f1f2 	sdiv	r1, r3, r2
 8002fe0:	fb02 f201 	mul.w	r2, r2, r1
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <UARTTxDumpBuffer+0x9c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
	}
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	200001fc 	.word	0x200001fc

08003000 <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	889b      	ldrh	r3, [r3, #4]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	4293      	cmp	r3, r2
 8003016:	bf28      	it	cs
 8003018:	4613      	movcs	r3, r2
 800301a:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 800301c:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	889b      	ldrh	r3, [r3, #4]
 8003022:	4619      	mov	r1, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	89db      	ldrh	r3, [r3, #14]
 8003028:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 800302a:	4293      	cmp	r3, r2
 800302c:	bfa8      	it	ge
 800302e:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8003030:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	89d2      	ldrh	r2, [r2, #14]
 800303a:	4413      	add	r3, r2
 800303c:	8aba      	ldrh	r2, [r7, #20]
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	4618      	mov	r0, r3
 8003042:	f006 f885 	bl	8009150 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	89db      	ldrh	r3, [r3, #14]
 800304a:	461a      	mov	r2, r3
 800304c:	8afb      	ldrh	r3, [r7, #22]
 800304e:	4413      	add	r3, r2
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	8892      	ldrh	r2, [r2, #4]
 8003054:	fb93 f1f2 	sdiv	r1, r3, r2
 8003058:	fb02 f201 	mul.w	r2, r2, r1
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8003064:	8afa      	ldrh	r2, [r7, #22]
 8003066:	8abb      	ldrh	r3, [r7, #20]
 8003068:	429a      	cmp	r2, r3
 800306a:	d00a      	beq.n	8003082 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6898      	ldr	r0, [r3, #8]
 8003070:	8abb      	ldrh	r3, [r7, #20]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8003076:	8afa      	ldrh	r2, [r7, #22]
 8003078:	8abb      	ldrh	r3, [r7, #20]
 800307a:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 800307c:	461a      	mov	r2, r3
 800307e:	f006 f867 	bl	8009150 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7ff ff6c 	bl	8002f60 <UARTTxDumpBuffer>
}
 8003088:	bf00      	nop
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <UART_Ack1>:

void UART_Ack1()
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
	uint8_t temp[1];
	temp[0] = 'X'; //0x58
 8003096:	2358      	movs	r3, #88	; 0x58
 8003098:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	2201      	movs	r2, #1
 800309e:	4619      	mov	r1, r3
 80030a0:	4808      	ldr	r0, [pc, #32]	; (80030c4 <UART_Ack1+0x34>)
 80030a2:	f7ff ffad 	bl	8003000 <UARTTxWrite>
	HAL_Delay(1);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f000 ff12 	bl	8003ed0 <HAL_Delay>
	temp[0] = 'u'; //0b01110101
 80030ac:	2375      	movs	r3, #117	; 0x75
 80030ae:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 80030b0:	1d3b      	adds	r3, r7, #4
 80030b2:	2201      	movs	r2, #1
 80030b4:	4619      	mov	r1, r3
 80030b6:	4803      	ldr	r0, [pc, #12]	; (80030c4 <UART_Ack1+0x34>)
 80030b8:	f7ff ffa2 	bl	8003000 <UARTTxWrite>
	// HAL_Delay(1);
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	2000018c 	.word	0x2000018c

080030c8 <UART_Ack2>:

void UART_Ack2()
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
	uint8_t temp[1];
	temp[0] = 'F'; //70
 80030ce:	2346      	movs	r3, #70	; 0x46
 80030d0:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	2201      	movs	r2, #1
 80030d6:	4619      	mov	r1, r3
 80030d8:	4808      	ldr	r0, [pc, #32]	; (80030fc <UART_Ack2+0x34>)
 80030da:	f7ff ff91 	bl	8003000 <UARTTxWrite>
	HAL_Delay(1);
 80030de:	2001      	movs	r0, #1
 80030e0:	f000 fef6 	bl	8003ed0 <HAL_Delay>
	temp[0] = 'n'; //0o156
 80030e4:	236e      	movs	r3, #110	; 0x6e
 80030e6:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 80030e8:	1d3b      	adds	r3, r7, #4
 80030ea:	2201      	movs	r2, #1
 80030ec:	4619      	mov	r1, r3
 80030ee:	4803      	ldr	r0, [pc, #12]	; (80030fc <UART_Ack2+0x34>)
 80030f0:	f7ff ff86 	bl	8003000 <UARTTxWrite>
	// HAL_Delay(1);
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	2000018c 	.word	0x2000018c

08003100 <UART_Flow2>:

void UART_Flow2()
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
	Serial_Mode  = (0b10010000 | UART_Mode);
 8003106:	4b4e      	ldr	r3, [pc, #312]	; (8003240 <UART_Flow2+0x140>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b4c      	ldr	r3, [pc, #304]	; (8003244 <UART_Flow2+0x144>)
 8003112:	701a      	strb	r2, [r3, #0]
	Serial_Angle = (uint16_t)(Current_Angle * 10000 * pi / 180);
 8003114:	4b4c      	ldr	r3, [pc, #304]	; (8003248 <UART_Flow2+0x148>)
 8003116:	edd3 7a00 	vldr	s15, [r3]
 800311a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800324c <UART_Flow2+0x14c>
 800311e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003122:	4b4b      	ldr	r3, [pc, #300]	; (8003250 <UART_Flow2+0x150>)
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	ee27 7a27 	vmul.f32	s14, s14, s15
 800312c:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003254 <UART_Flow2+0x154>
 8003130:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003138:	ee17 3a90 	vmov	r3, s15
 800313c:	b29a      	uxth	r2, r3
 800313e:	4b46      	ldr	r3, [pc, #280]	; (8003258 <UART_Flow2+0x158>)
 8003140:	801a      	strh	r2, [r3, #0]
	Serial_Speed = (uint8_t) (Speed * 255 / 10);
 8003142:	4b46      	ldr	r3, [pc, #280]	; (800325c <UART_Flow2+0x15c>)
 8003144:	edd3 7a00 	vldr	s15, [r3]
 8003148:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003260 <UART_Flow2+0x160>
 800314c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003150:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003154:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800315c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003160:	793b      	ldrb	r3, [r7, #4]
 8003162:	b2da      	uxtb	r2, r3
 8003164:	4b3f      	ldr	r3, [pc, #252]	; (8003264 <UART_Flow2+0x164>)
 8003166:	701a      	strb	r2, [r3, #0]

	ChkSum = Serial_Mode;
 8003168:	4b36      	ldr	r3, [pc, #216]	; (8003244 <UART_Flow2+0x144>)
 800316a:	781a      	ldrb	r2, [r3, #0]
 800316c:	4b3e      	ldr	r3, [pc, #248]	; (8003268 <UART_Flow2+0x168>)
 800316e:	701a      	strb	r2, [r3, #0]

	uint8_t temp[1];
	temp[0] = Serial_Mode;
 8003170:	4b34      	ldr	r3, [pc, #208]	; (8003244 <UART_Flow2+0x144>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	733b      	strb	r3, [r7, #12]
	UARTTxWrite(&UART2, temp, 1);
 8003176:	f107 030c 	add.w	r3, r7, #12
 800317a:	2201      	movs	r2, #1
 800317c:	4619      	mov	r1, r3
 800317e:	483b      	ldr	r0, [pc, #236]	; (800326c <UART_Flow2+0x16c>)
 8003180:	f7ff ff3e 	bl	8003000 <UARTTxWrite>
	HAL_Delay(1);
 8003184:	2001      	movs	r0, #1
 8003186:	f000 fea3 	bl	8003ed0 <HAL_Delay>

	if(UART_Mode == 10) { temp[0] = (uint8_t)(Serial_Angle / 256); }
 800318a:	4b2d      	ldr	r3, [pc, #180]	; (8003240 <UART_Flow2+0x140>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b0a      	cmp	r3, #10
 8003190:	d106      	bne.n	80031a0 <UART_Flow2+0xa0>
 8003192:	4b31      	ldr	r3, [pc, #196]	; (8003258 <UART_Flow2+0x158>)
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	b29b      	uxth	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	733b      	strb	r3, [r7, #12]
 800319e:	e001      	b.n	80031a4 <UART_Flow2+0xa4>
	else                { temp[0] = 0; }
 80031a0:	2300      	movs	r3, #0
 80031a2:	733b      	strb	r3, [r7, #12]
	ChkSum += temp[0];
 80031a4:	7b3a      	ldrb	r2, [r7, #12]
 80031a6:	4b30      	ldr	r3, [pc, #192]	; (8003268 <UART_Flow2+0x168>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <UART_Flow2+0x168>)
 80031b0:	701a      	strb	r2, [r3, #0]
	UARTTxWrite(&UART2, temp, 1);
 80031b2:	f107 030c 	add.w	r3, r7, #12
 80031b6:	2201      	movs	r2, #1
 80031b8:	4619      	mov	r1, r3
 80031ba:	482c      	ldr	r0, [pc, #176]	; (800326c <UART_Flow2+0x16c>)
 80031bc:	f7ff ff20 	bl	8003000 <UARTTxWrite>
	HAL_Delay(1);
 80031c0:	2001      	movs	r0, #1
 80031c2:	f000 fe85 	bl	8003ed0 <HAL_Delay>

	if(UART_Mode == 9)       { temp[0] = Current_Station; }
 80031c6:	4b1e      	ldr	r3, [pc, #120]	; (8003240 <UART_Flow2+0x140>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b09      	cmp	r3, #9
 80031cc:	d103      	bne.n	80031d6 <UART_Flow2+0xd6>
 80031ce:	4b28      	ldr	r3, [pc, #160]	; (8003270 <UART_Flow2+0x170>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	733b      	strb	r3, [r7, #12]
 80031d4:	e00f      	b.n	80031f6 <UART_Flow2+0xf6>
	else if(UART_Mode == 10) { temp[0] = (uint8_t)(Serial_Angle % 256); }
 80031d6:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <UART_Flow2+0x140>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b0a      	cmp	r3, #10
 80031dc:	d104      	bne.n	80031e8 <UART_Flow2+0xe8>
 80031de:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <UART_Flow2+0x158>)
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	733b      	strb	r3, [r7, #12]
 80031e6:	e006      	b.n	80031f6 <UART_Flow2+0xf6>
	else if(UART_Mode == 11) { temp[0] = Serial_Speed; }
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <UART_Flow2+0x140>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b0b      	cmp	r3, #11
 80031ee:	d102      	bne.n	80031f6 <UART_Flow2+0xf6>
 80031f0:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <UART_Flow2+0x164>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	733b      	strb	r3, [r7, #12]
	ChkSum += temp[0];
 80031f6:	7b3a      	ldrb	r2, [r7, #12]
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <UART_Flow2+0x168>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	4413      	add	r3, r2
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	4b19      	ldr	r3, [pc, #100]	; (8003268 <UART_Flow2+0x168>)
 8003202:	701a      	strb	r2, [r3, #0]
	UARTTxWrite(&UART2, temp, 1);
 8003204:	f107 030c 	add.w	r3, r7, #12
 8003208:	2201      	movs	r2, #1
 800320a:	4619      	mov	r1, r3
 800320c:	4817      	ldr	r0, [pc, #92]	; (800326c <UART_Flow2+0x16c>)
 800320e:	f7ff fef7 	bl	8003000 <UARTTxWrite>
	HAL_Delay(1);
 8003212:	2001      	movs	r0, #1
 8003214:	f000 fe5c 	bl	8003ed0 <HAL_Delay>

	ChkSum = ~(ChkSum);
 8003218:	4b13      	ldr	r3, [pc, #76]	; (8003268 <UART_Flow2+0x168>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	43db      	mvns	r3, r3
 800321e:	b2da      	uxtb	r2, r3
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <UART_Flow2+0x168>)
 8003222:	701a      	strb	r2, [r3, #0]
	temp[0] = ChkSum;
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <UART_Flow2+0x168>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	733b      	strb	r3, [r7, #12]
	UARTTxWrite(&UART2, temp, 1);
 800322a:	f107 030c 	add.w	r3, r7, #12
 800322e:	2201      	movs	r2, #1
 8003230:	4619      	mov	r1, r3
 8003232:	480e      	ldr	r0, [pc, #56]	; (800326c <UART_Flow2+0x16c>)
 8003234:	f7ff fee4 	bl	8003000 <UARTTxWrite>
	// HAL_Delay(1);
}
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	200001ea 	.word	0x200001ea
 8003244:	2000020c 	.word	0x2000020c
 8003248:	200001a8 	.word	0x200001a8
 800324c:	461c4000 	.word	0x461c4000
 8003250:	2000001c 	.word	0x2000001c
 8003254:	43340000 	.word	0x43340000
 8003258:	20000308 	.word	0x20000308
 800325c:	200001b0 	.word	0x200001b0
 8003260:	437f0000 	.word	0x437f0000
 8003264:	200002b0 	.word	0x200002b0
 8003268:	200001c9 	.word	0x200001c9
 800326c:	2000018c 	.word	0x2000018c
 8003270:	200001ac 	.word	0x200001ac

08003274 <UART_Protocal>:


void UART_Protocal()
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
	static ProtocalState State = Start;

	InputChar = UARTReadChar(&UART2);
 800327a:	48a3      	ldr	r0, [pc, #652]	; (8003508 <UART_Protocal+0x294>)
 800327c:	f7ff fe46 	bl	8002f0c <UARTReadChar>
 8003280:	4603      	mov	r3, r0
 8003282:	461a      	mov	r2, r3
 8003284:	4ba1      	ldr	r3, [pc, #644]	; (800350c <UART_Protocal+0x298>)
 8003286:	801a      	strh	r2, [r3, #0]

	if (InputChar != -1)
 8003288:	4ba0      	ldr	r3, [pc, #640]	; (800350c <UART_Protocal+0x298>)
 800328a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003292:	f000 8130 	beq.w	80034f6 <UART_Protocal+0x282>
	{
		InputByte = (uint8_t)InputChar;
 8003296:	4b9d      	ldr	r3, [pc, #628]	; (800350c <UART_Protocal+0x298>)
 8003298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4b9c      	ldr	r3, [pc, #624]	; (8003510 <UART_Protocal+0x29c>)
 80032a0:	701a      	strb	r2, [r3, #0]

		switch(State)
 80032a2:	4b9c      	ldr	r3, [pc, #624]	; (8003514 <UART_Protocal+0x2a0>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b07      	cmp	r3, #7
 80032a8:	f200 8121 	bhi.w	80034ee <UART_Protocal+0x27a>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <UART_Protocal+0x40>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032d5 	.word	0x080032d5
 80032b8:	0800336b 	.word	0x0800336b
 80032bc:	0800339f 	.word	0x0800339f
 80032c0:	080033af 	.word	0x080033af
 80032c4:	080033bf 	.word	0x080033bf
 80032c8:	08003403 	.word	0x08003403
 80032cc:	08003413 	.word	0x08003413
 80032d0:	0800346f 	.word	0x0800346f
		{
			case Start:
				if( ((InputByte>>4) & 0b00001111) == 0b00001001)
 80032d4:	4b8e      	ldr	r3, [pc, #568]	; (8003510 <UART_Protocal+0x29c>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	2b09      	cmp	r3, #9
 80032e2:	d10a      	bne.n	80032fa <UART_Protocal+0x86>
				{
					UART_Mode = InputByte & 0b00001111;
 80032e4:	4b8a      	ldr	r3, [pc, #552]	; (8003510 <UART_Protocal+0x29c>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	4b8a      	ldr	r3, [pc, #552]	; (8003518 <UART_Protocal+0x2a4>)
 80032f0:	701a      	strb	r2, [r3, #0]
					UART_Mode_Print = UART_Mode;
 80032f2:	4b89      	ldr	r3, [pc, #548]	; (8003518 <UART_Protocal+0x2a4>)
 80032f4:	781a      	ldrb	r2, [r3, #0]
 80032f6:	4b89      	ldr	r3, [pc, #548]	; (800351c <UART_Protocal+0x2a8>)
 80032f8:	701a      	strb	r2, [r3, #0]
				}
				if(UART_Mode >=1 && UART_Mode <= 14)
 80032fa:	4b87      	ldr	r3, [pc, #540]	; (8003518 <UART_Protocal+0x2a4>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 80fb 	beq.w	80034fa <UART_Protocal+0x286>
 8003304:	4b84      	ldr	r3, [pc, #528]	; (8003518 <UART_Protocal+0x2a4>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b0e      	cmp	r3, #14
 800330a:	f200 80f6 	bhi.w	80034fa <UART_Protocal+0x286>
				{

					if(UART_Mode == 2 || UART_Mode == 3 || UART_Mode >= 8)
 800330e:	4b82      	ldr	r3, [pc, #520]	; (8003518 <UART_Protocal+0x2a4>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d007      	beq.n	8003326 <UART_Protocal+0xb2>
 8003316:	4b80      	ldr	r3, [pc, #512]	; (8003518 <UART_Protocal+0x2a4>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b03      	cmp	r3, #3
 800331c:	d003      	beq.n	8003326 <UART_Protocal+0xb2>
 800331e:	4b7e      	ldr	r3, [pc, #504]	; (8003518 <UART_Protocal+0x2a4>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b07      	cmp	r3, #7
 8003324:	d903      	bls.n	800332e <UART_Protocal+0xba>
					{
						State = Frame1_CheckSum;
 8003326:	4b7b      	ldr	r3, [pc, #492]	; (8003514 <UART_Protocal+0x2a0>)
 8003328:	2201      	movs	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	e01c      	b.n	8003368 <UART_Protocal+0xf4>
					}
					else if(UART_Mode == 1 || UART_Mode == 4 || UART_Mode == 5 || UART_Mode == 6)
 800332e:	4b7a      	ldr	r3, [pc, #488]	; (8003518 <UART_Protocal+0x2a4>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d00b      	beq.n	800334e <UART_Protocal+0xda>
 8003336:	4b78      	ldr	r3, [pc, #480]	; (8003518 <UART_Protocal+0x2a4>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b04      	cmp	r3, #4
 800333c:	d007      	beq.n	800334e <UART_Protocal+0xda>
 800333e:	4b76      	ldr	r3, [pc, #472]	; (8003518 <UART_Protocal+0x2a4>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b05      	cmp	r3, #5
 8003344:	d003      	beq.n	800334e <UART_Protocal+0xda>
 8003346:	4b74      	ldr	r3, [pc, #464]	; (8003518 <UART_Protocal+0x2a4>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b06      	cmp	r3, #6
 800334c:	d103      	bne.n	8003356 <UART_Protocal+0xe2>
					{
						State = Frame2_Data1;
 800334e:	4b71      	ldr	r3, [pc, #452]	; (8003514 <UART_Protocal+0x2a0>)
 8003350:	2202      	movs	r2, #2
 8003352:	701a      	strb	r2, [r3, #0]
 8003354:	e008      	b.n	8003368 <UART_Protocal+0xf4>

					}
					else if(UART_Mode == 7)
 8003356:	4b70      	ldr	r3, [pc, #448]	; (8003518 <UART_Protocal+0x2a4>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b07      	cmp	r3, #7
 800335c:	f040 80cd 	bne.w	80034fa <UART_Protocal+0x286>
					{
						State = Frame3_Station;
 8003360:	4b6c      	ldr	r3, [pc, #432]	; (8003514 <UART_Protocal+0x2a0>)
 8003362:	2205      	movs	r2, #5
 8003364:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8003366:	e0c8      	b.n	80034fa <UART_Protocal+0x286>
 8003368:	e0c7      	b.n	80034fa <UART_Protocal+0x286>

			case Frame1_CheckSum:
				ChkSum = ~(0b10010000 | UART_Mode);
 800336a:	4b6b      	ldr	r3, [pc, #428]	; (8003518 <UART_Protocal+0x2a4>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8003372:	b2db      	uxtb	r3, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	b2da      	uxtb	r2, r3
 8003378:	4b69      	ldr	r3, [pc, #420]	; (8003520 <UART_Protocal+0x2ac>)
 800337a:	701a      	strb	r2, [r3, #0]
				if(InputByte == ChkSum)
 800337c:	4b64      	ldr	r3, [pc, #400]	; (8003510 <UART_Protocal+0x29c>)
 800337e:	781a      	ldrb	r2, [r3, #0]
 8003380:	4b67      	ldr	r3, [pc, #412]	; (8003520 <UART_Protocal+0x2ac>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d103      	bne.n	8003390 <UART_Protocal+0x11c>
				{
					UART_Ack1();
 8003388:	f7ff fe82 	bl	8003090 <UART_Ack1>
					UART_Execute();
 800338c:	f000 f8d4 	bl	8003538 <UART_Execute>
				}
				ChkSum = 0;
 8003390:	4b63      	ldr	r3, [pc, #396]	; (8003520 <UART_Protocal+0x2ac>)
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
				State = Start;
 8003396:	4b5f      	ldr	r3, [pc, #380]	; (8003514 <UART_Protocal+0x2a0>)
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
				break;
 800339c:	e0b0      	b.n	8003500 <UART_Protocal+0x28c>

			case Frame2_Data1:
				Data_Frame2[0] = InputByte;
 800339e:	4b5c      	ldr	r3, [pc, #368]	; (8003510 <UART_Protocal+0x29c>)
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	4b60      	ldr	r3, [pc, #384]	; (8003524 <UART_Protocal+0x2b0>)
 80033a4:	701a      	strb	r2, [r3, #0]
				State = Frame2_Data2;
 80033a6:	4b5b      	ldr	r3, [pc, #364]	; (8003514 <UART_Protocal+0x2a0>)
 80033a8:	2203      	movs	r2, #3
 80033aa:	701a      	strb	r2, [r3, #0]
				break;
 80033ac:	e0a8      	b.n	8003500 <UART_Protocal+0x28c>

			case Frame2_Data2:
				Data_Frame2[1] = InputByte;
 80033ae:	4b58      	ldr	r3, [pc, #352]	; (8003510 <UART_Protocal+0x29c>)
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	4b5c      	ldr	r3, [pc, #368]	; (8003524 <UART_Protocal+0x2b0>)
 80033b4:	705a      	strb	r2, [r3, #1]
				State = Frame2_CheckSum;
 80033b6:	4b57      	ldr	r3, [pc, #348]	; (8003514 <UART_Protocal+0x2a0>)
 80033b8:	2204      	movs	r2, #4
 80033ba:	701a      	strb	r2, [r3, #0]
				break;
 80033bc:	e0a0      	b.n	8003500 <UART_Protocal+0x28c>

			case Frame2_CheckSum:
				ChkSum = ~( (0b10010000 | UART_Mode) + Data_Frame2[0] + Data_Frame2[1] );
 80033be:	4b56      	ldr	r3, [pc, #344]	; (8003518 <UART_Protocal+0x2a4>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	4b56      	ldr	r3, [pc, #344]	; (8003524 <UART_Protocal+0x2b0>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	4413      	add	r3, r2
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	4b54      	ldr	r3, [pc, #336]	; (8003524 <UART_Protocal+0x2b0>)
 80033d2:	785b      	ldrb	r3, [r3, #1]
 80033d4:	4413      	add	r3, r2
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	4b50      	ldr	r3, [pc, #320]	; (8003520 <UART_Protocal+0x2ac>)
 80033de:	701a      	strb	r2, [r3, #0]
				if(InputByte == ChkSum)
 80033e0:	4b4b      	ldr	r3, [pc, #300]	; (8003510 <UART_Protocal+0x29c>)
 80033e2:	781a      	ldrb	r2, [r3, #0]
 80033e4:	4b4e      	ldr	r3, [pc, #312]	; (8003520 <UART_Protocal+0x2ac>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d103      	bne.n	80033f4 <UART_Protocal+0x180>
				{
					UART_Ack1();
 80033ec:	f7ff fe50 	bl	8003090 <UART_Ack1>
					UART_Execute();
 80033f0:	f000 f8a2 	bl	8003538 <UART_Execute>
				}
				ChkSum = 0;
 80033f4:	4b4a      	ldr	r3, [pc, #296]	; (8003520 <UART_Protocal+0x2ac>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
				State = Start;
 80033fa:	4b46      	ldr	r3, [pc, #280]	; (8003514 <UART_Protocal+0x2a0>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
				break;
 8003400:	e07e      	b.n	8003500 <UART_Protocal+0x28c>

			case Frame3_Station:
				Multi_Station_Amount = InputByte;
 8003402:	4b43      	ldr	r3, [pc, #268]	; (8003510 <UART_Protocal+0x29c>)
 8003404:	781a      	ldrb	r2, [r3, #0]
 8003406:	4b48      	ldr	r3, [pc, #288]	; (8003528 <UART_Protocal+0x2b4>)
 8003408:	701a      	strb	r2, [r3, #0]
				State = Frame3_Data;
 800340a:	4b42      	ldr	r3, [pc, #264]	; (8003514 <UART_Protocal+0x2a0>)
 800340c:	2206      	movs	r2, #6
 800340e:	701a      	strb	r2, [r3, #0]
				break;
 8003410:	e076      	b.n	8003500 <UART_Protocal+0x28c>

			case Frame3_Data:
				Data_Frame3   [(int)Multi_Station_Current/2] = InputByte;
 8003412:	4b46      	ldr	r3, [pc, #280]	; (800352c <UART_Protocal+0x2b8>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	4b3c      	ldr	r3, [pc, #240]	; (8003510 <UART_Protocal+0x29c>)
 800341e:	7819      	ldrb	r1, [r3, #0]
 8003420:	4b43      	ldr	r3, [pc, #268]	; (8003530 <UART_Protocal+0x2bc>)
 8003422:	5499      	strb	r1, [r3, r2]
				Multi_Station [Multi_Station_Current]        = InputByte & 0b00001111;
 8003424:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <UART_Protocal+0x29c>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	4a40      	ldr	r2, [pc, #256]	; (800352c <UART_Protocal+0x2b8>)
 800342a:	7812      	ldrb	r2, [r2, #0]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	b2d9      	uxtb	r1, r3
 8003432:	4b40      	ldr	r3, [pc, #256]	; (8003534 <UART_Protocal+0x2c0>)
 8003434:	5499      	strb	r1, [r3, r2]
				Multi_Station [Multi_Station_Current+1] 	 = InputByte >> 4;
 8003436:	4b36      	ldr	r3, [pc, #216]	; (8003510 <UART_Protocal+0x29c>)
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	4b3c      	ldr	r3, [pc, #240]	; (800352c <UART_Protocal+0x2b8>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	3301      	adds	r3, #1
 8003440:	0912      	lsrs	r2, r2, #4
 8003442:	b2d1      	uxtb	r1, r2
 8003444:	4a3b      	ldr	r2, [pc, #236]	; (8003534 <UART_Protocal+0x2c0>)
 8003446:	54d1      	strb	r1, [r2, r3]
				Multi_Station_Current += 2;
 8003448:	4b38      	ldr	r3, [pc, #224]	; (800352c <UART_Protocal+0x2b8>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	3302      	adds	r3, #2
 800344e:	b2da      	uxtb	r2, r3
 8003450:	4b36      	ldr	r3, [pc, #216]	; (800352c <UART_Protocal+0x2b8>)
 8003452:	701a      	strb	r2, [r3, #0]
				if(Multi_Station_Current >= Multi_Station_Amount)
 8003454:	4b35      	ldr	r3, [pc, #212]	; (800352c <UART_Protocal+0x2b8>)
 8003456:	781a      	ldrb	r2, [r3, #0]
 8003458:	4b33      	ldr	r3, [pc, #204]	; (8003528 <UART_Protocal+0x2b4>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d34e      	bcc.n	80034fe <UART_Protocal+0x28a>
				{
					Multi_Station_Current = 0;
 8003460:	4b32      	ldr	r3, [pc, #200]	; (800352c <UART_Protocal+0x2b8>)
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
					State = Frame3_CheckSum;
 8003466:	4b2b      	ldr	r3, [pc, #172]	; (8003514 <UART_Protocal+0x2a0>)
 8003468:	2207      	movs	r2, #7
 800346a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800346c:	e047      	b.n	80034fe <UART_Protocal+0x28a>

			case Frame3_CheckSum:
				ChkSum = (0b10010000 | UART_Mode);
 800346e:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <UART_Protocal+0x2a4>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8003476:	b2da      	uxtb	r2, r3
 8003478:	4b29      	ldr	r3, [pc, #164]	; (8003520 <UART_Protocal+0x2ac>)
 800347a:	701a      	strb	r2, [r3, #0]
				ChkSum += Multi_Station_Amount;
 800347c:	4b28      	ldr	r3, [pc, #160]	; (8003520 <UART_Protocal+0x2ac>)
 800347e:	781a      	ldrb	r2, [r3, #0]
 8003480:	4b29      	ldr	r3, [pc, #164]	; (8003528 <UART_Protocal+0x2b4>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	4413      	add	r3, r2
 8003486:	b2da      	uxtb	r2, r3
 8003488:	4b25      	ldr	r3, [pc, #148]	; (8003520 <UART_Protocal+0x2ac>)
 800348a:	701a      	strb	r2, [r3, #0]
				for(int i=0 ; i < (int)((Multi_Station_Amount+1)/2) ; i++)
 800348c:	2300      	movs	r3, #0
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	e00c      	b.n	80034ac <UART_Protocal+0x238>
				{
					ChkSum += Data_Frame3[i];
 8003492:	4a27      	ldr	r2, [pc, #156]	; (8003530 <UART_Protocal+0x2bc>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4413      	add	r3, r2
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	4b21      	ldr	r3, [pc, #132]	; (8003520 <UART_Protocal+0x2ac>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	4413      	add	r3, r2
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <UART_Protocal+0x2ac>)
 80034a4:	701a      	strb	r2, [r3, #0]
				for(int i=0 ; i < (int)((Multi_Station_Amount+1)/2) ; i++)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3301      	adds	r3, #1
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <UART_Protocal+0x2b4>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	0fda      	lsrs	r2, r3, #31
 80034b4:	4413      	add	r3, r2
 80034b6:	105b      	asrs	r3, r3, #1
 80034b8:	461a      	mov	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4293      	cmp	r3, r2
 80034be:	dbe8      	blt.n	8003492 <UART_Protocal+0x21e>
				}
				ChkSum = ~(ChkSum);
 80034c0:	4b17      	ldr	r3, [pc, #92]	; (8003520 <UART_Protocal+0x2ac>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	4b15      	ldr	r3, [pc, #84]	; (8003520 <UART_Protocal+0x2ac>)
 80034ca:	701a      	strb	r2, [r3, #0]
				if(InputByte == ChkSum)
 80034cc:	4b10      	ldr	r3, [pc, #64]	; (8003510 <UART_Protocal+0x29c>)
 80034ce:	781a      	ldrb	r2, [r3, #0]
 80034d0:	4b13      	ldr	r3, [pc, #76]	; (8003520 <UART_Protocal+0x2ac>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d103      	bne.n	80034e0 <UART_Protocal+0x26c>
				{
					UART_Ack1();
 80034d8:	f7ff fdda 	bl	8003090 <UART_Ack1>
					UART_Execute();
 80034dc:	f000 f82c 	bl	8003538 <UART_Execute>
				}
				ChkSum = 0;
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <UART_Protocal+0x2ac>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
				State = Start;
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <UART_Protocal+0x2a0>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
				break;
 80034ec:	e008      	b.n	8003500 <UART_Protocal+0x28c>

			default:
				State = Start;
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <UART_Protocal+0x2a0>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
				break;
 80034f4:	e004      	b.n	8003500 <UART_Protocal+0x28c>
		}
	}
 80034f6:	bf00      	nop
 80034f8:	e002      	b.n	8003500 <UART_Protocal+0x28c>
				break;
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <UART_Protocal+0x28c>
				break;
 80034fe:	bf00      	nop

}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	2000018c 	.word	0x2000018c
 800350c:	200001c6 	.word	0x200001c6
 8003510:	200001c8 	.word	0x200001c8
 8003514:	200001fd 	.word	0x200001fd
 8003518:	200001ea 	.word	0x200001ea
 800351c:	200001eb 	.word	0x200001eb
 8003520:	200001c9 	.word	0x200001c9
 8003524:	200001cc 	.word	0x200001cc
 8003528:	200001e8 	.word	0x200001e8
 800352c:	200001e9 	.word	0x200001e9
 8003530:	200001d0 	.word	0x200001d0
 8003534:	200001d8 	.word	0x200001d8

08003538 <UART_Execute>:

void UART_Execute()
{
 8003538:	b598      	push	{r3, r4, r7, lr}
 800353a:	af00      	add	r7, sp, #0
	switch(UART_Mode)
 800353c:	4b8e      	ldr	r3, [pc, #568]	; (8003778 <UART_Execute+0x240>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	3b01      	subs	r3, #1
 8003542:	2b0e      	cmp	r3, #14
 8003544:	f200 8109 	bhi.w	800375a <UART_Execute+0x222>
 8003548:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <UART_Execute+0x18>)
 800354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354e:	bf00      	nop
 8003550:	0800375b 	.word	0x0800375b
 8003554:	0800358d 	.word	0x0800358d
 8003558:	08003595 	.word	0x08003595
 800355c:	0800359d 	.word	0x0800359d
 8003560:	080035c9 	.word	0x080035c9
 8003564:	08003641 	.word	0x08003641
 8003568:	08003673 	.word	0x08003673
 800356c:	080036a9 	.word	0x080036a9
 8003570:	080036b9 	.word	0x080036b9
 8003574:	080036bf 	.word	0x080036bf
 8003578:	080036ff 	.word	0x080036ff
 800357c:	0800372f 	.word	0x0800372f
 8003580:	08003737 	.word	0x08003737
 8003584:	0800373f 	.word	0x0800373f
 8003588:	0800375b 	.word	0x0800375b
	{
		case 1:
			break;
		case 2:
			MCU_Connected = 1;
 800358c:	4b7b      	ldr	r3, [pc, #492]	; (800377c <UART_Execute+0x244>)
 800358e:	2201      	movs	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]
			break;
 8003592:	e0e2      	b.n	800375a <UART_Execute+0x222>
		case 3:
			MCU_Connected = 0;
 8003594:	4b79      	ldr	r3, [pc, #484]	; (800377c <UART_Execute+0x244>)
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
			break;
 800359a:	e0de      	b.n	800375a <UART_Execute+0x222>
		case 4:
			Max_Speed = Data_Frame2[1] * 10 / 255;
 800359c:	4b78      	ldr	r3, [pc, #480]	; (8003780 <UART_Execute+0x248>)
 800359e:	785b      	ldrb	r3, [r3, #1]
 80035a0:	461a      	mov	r2, r3
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4a76      	ldr	r2, [pc, #472]	; (8003784 <UART_Execute+0x24c>)
 80035ac:	fb82 1203 	smull	r1, r2, r2, r3
 80035b0:	441a      	add	r2, r3
 80035b2:	11d2      	asrs	r2, r2, #7
 80035b4:	17db      	asrs	r3, r3, #31
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c0:	4b71      	ldr	r3, [pc, #452]	; (8003788 <UART_Execute+0x250>)
 80035c2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80035c6:	e0c8      	b.n	800375a <UART_Execute+0x222>
		case 5:
			Goal_Mode = 1;
 80035c8:	4b70      	ldr	r3, [pc, #448]	; (800378c <UART_Execute+0x254>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
			Goal_Angle = (Data_Frame2[0] * 256) + Data_Frame2[1];
 80035ce:	4b6c      	ldr	r3, [pc, #432]	; (8003780 <UART_Execute+0x248>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	4a6a      	ldr	r2, [pc, #424]	; (8003780 <UART_Execute+0x248>)
 80035d6:	7852      	ldrb	r2, [r2, #1]
 80035d8:	4413      	add	r3, r2
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e2:	4b6b      	ldr	r3, [pc, #428]	; (8003790 <UART_Execute+0x258>)
 80035e4:	edc3 7a00 	vstr	s15, [r3]
			Goal_Angle = Goal_Angle / (pi * 10000) * 180.0;
 80035e8:	4b69      	ldr	r3, [pc, #420]	; (8003790 <UART_Execute+0x258>)
 80035ea:	edd3 6a00 	vldr	s13, [r3]
 80035ee:	4b69      	ldr	r3, [pc, #420]	; (8003794 <UART_Execute+0x25c>)
 80035f0:	edd3 7a00 	vldr	s15, [r3]
 80035f4:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003798 <UART_Execute+0x260>
 80035f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003600:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800379c <UART_Execute+0x264>
 8003604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003608:	4b61      	ldr	r3, [pc, #388]	; (8003790 <UART_Execute+0x258>)
 800360a:	edc3 7a00 	vstr	s15, [r3]
			angle = round(Goal_Angle);
 800360e:	4b60      	ldr	r3, [pc, #384]	; (8003790 <UART_Execute+0x258>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fc ff44 	bl	80004a0 <__aeabi_f2d>
 8003618:	4603      	mov	r3, r0
 800361a:	460c      	mov	r4, r1
 800361c:	ec44 3b10 	vmov	d0, r3, r4
 8003620:	f005 fe24 	bl	800926c <round>
 8003624:	ec54 3b10 	vmov	r3, r4, d0
 8003628:	4618      	mov	r0, r3
 800362a:	4621      	mov	r1, r4
 800362c:	f7fd fa40 	bl	8000ab0 <__aeabi_d2f>
 8003630:	4602      	mov	r2, r0
 8003632:	4b5b      	ldr	r3, [pc, #364]	; (80037a0 <UART_Execute+0x268>)
 8003634:	601a      	str	r2, [r3, #0]
			Lastest_Angle = Current_Angle;
 8003636:	4b5b      	ldr	r3, [pc, #364]	; (80037a4 <UART_Execute+0x26c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a5b      	ldr	r2, [pc, #364]	; (80037a8 <UART_Execute+0x270>)
 800363c:	6013      	str	r3, [r2, #0]
			break;
 800363e:	e08c      	b.n	800375a <UART_Execute+0x222>
		case 6:
			Goal_Mode = 2;
 8003640:	4b52      	ldr	r3, [pc, #328]	; (800378c <UART_Execute+0x254>)
 8003642:	2202      	movs	r2, #2
 8003644:	701a      	strb	r2, [r3, #0]
			Single_Station = Data_Frame2[1];
 8003646:	4b4e      	ldr	r3, [pc, #312]	; (8003780 <UART_Execute+0x248>)
 8003648:	785a      	ldrb	r2, [r3, #1]
 800364a:	4b58      	ldr	r3, [pc, #352]	; (80037ac <UART_Execute+0x274>)
 800364c:	701a      	strb	r2, [r3, #0]
			angle = Multi_Station_Angle[Single_Station];
 800364e:	4b57      	ldr	r3, [pc, #348]	; (80037ac <UART_Execute+0x274>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	4b56      	ldr	r3, [pc, #344]	; (80037b0 <UART_Execute+0x278>)
 8003656:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003662:	4b4f      	ldr	r3, [pc, #316]	; (80037a0 <UART_Execute+0x268>)
 8003664:	edc3 7a00 	vstr	s15, [r3]
			Lastest_Angle = Current_Angle;
 8003668:	4b4e      	ldr	r3, [pc, #312]	; (80037a4 <UART_Execute+0x26c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a4e      	ldr	r2, [pc, #312]	; (80037a8 <UART_Execute+0x270>)
 800366e:	6013      	str	r3, [r2, #0]
			break;
 8003670:	e073      	b.n	800375a <UART_Execute+0x222>
		case 7:
			Goal_Mode = 3;
 8003672:	4b46      	ldr	r3, [pc, #280]	; (800378c <UART_Execute+0x254>)
 8003674:	2203      	movs	r2, #3
 8003676:	701a      	strb	r2, [r3, #0]
			Current_Multi_Station = 0;
 8003678:	4b4e      	ldr	r3, [pc, #312]	; (80037b4 <UART_Execute+0x27c>)
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
			angle = Multi_Station_Angle[ Multi_Station[Current_Multi_Station] ];
 800367e:	4b4d      	ldr	r3, [pc, #308]	; (80037b4 <UART_Execute+0x27c>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	4b4c      	ldr	r3, [pc, #304]	; (80037b8 <UART_Execute+0x280>)
 8003686:	5c9b      	ldrb	r3, [r3, r2]
 8003688:	461a      	mov	r2, r3
 800368a:	4b49      	ldr	r3, [pc, #292]	; (80037b0 <UART_Execute+0x278>)
 800368c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003690:	ee07 3a90 	vmov	s15, r3
 8003694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003698:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <UART_Execute+0x268>)
 800369a:	edc3 7a00 	vstr	s15, [r3]
			Lastest_Angle = Current_Angle;
 800369e:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <UART_Execute+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a41      	ldr	r2, [pc, #260]	; (80037a8 <UART_Execute+0x270>)
 80036a4:	6013      	str	r3, [r2, #0]
			break;
 80036a6:	e058      	b.n	800375a <UART_Execute+0x222>
		case 8:
			t = 0;
 80036a8:	4b44      	ldr	r3, [pc, #272]	; (80037bc <UART_Execute+0x284>)
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
			Run = 1;
 80036b0:	4b43      	ldr	r3, [pc, #268]	; (80037c0 <UART_Execute+0x288>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	701a      	strb	r2, [r3, #0]
			break;
 80036b6:	e050      	b.n	800375a <UART_Execute+0x222>
		case 9:
			UART_Flow2();
 80036b8:	f7ff fd22 	bl	8003100 <UART_Flow2>
			break;
 80036bc:	e04d      	b.n	800375a <UART_Execute+0x222>
		case 10:
			Current_Angle = ( EncoderPosition_Update() * 360.0 / 7200.0 );
 80036be:	f7fe fa1b 	bl	8001af8 <EncoderPosition_Update>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fc fec9 	bl	800045c <__aeabi_ui2d>
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	4b3d      	ldr	r3, [pc, #244]	; (80037c4 <UART_Execute+0x28c>)
 80036d0:	f7fc ff3e 	bl	8000550 <__aeabi_dmul>
 80036d4:	4603      	mov	r3, r0
 80036d6:	460c      	mov	r4, r1
 80036d8:	4618      	mov	r0, r3
 80036da:	4621      	mov	r1, r4
 80036dc:	a322      	add	r3, pc, #136	; (adr r3, 8003768 <UART_Execute+0x230>)
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	f7fd f85f 	bl	80007a4 <__aeabi_ddiv>
 80036e6:	4603      	mov	r3, r0
 80036e8:	460c      	mov	r4, r1
 80036ea:	4618      	mov	r0, r3
 80036ec:	4621      	mov	r1, r4
 80036ee:	f7fd f9df 	bl	8000ab0 <__aeabi_d2f>
 80036f2:	4602      	mov	r2, r0
 80036f4:	4b2b      	ldr	r3, [pc, #172]	; (80037a4 <UART_Execute+0x26c>)
 80036f6:	601a      	str	r2, [r3, #0]
			UART_Flow2();
 80036f8:	f7ff fd02 	bl	8003100 <UART_Flow2>
			break;
 80036fc:	e02d      	b.n	800375a <UART_Execute+0x222>
		case 11:
			Speed = ( EncoderVelocity_Update() * 9.5493 );
 80036fe:	f7fe fa07 	bl	8001b10 <EncoderVelocity_Update>
 8003702:	ee10 3a10 	vmov	r3, s0
 8003706:	4618      	mov	r0, r3
 8003708:	f7fc feca 	bl	80004a0 <__aeabi_f2d>
 800370c:	a318      	add	r3, pc, #96	; (adr r3, 8003770 <UART_Execute+0x238>)
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	f7fc ff1d 	bl	8000550 <__aeabi_dmul>
 8003716:	4603      	mov	r3, r0
 8003718:	460c      	mov	r4, r1
 800371a:	4618      	mov	r0, r3
 800371c:	4621      	mov	r1, r4
 800371e:	f7fd f9c7 	bl	8000ab0 <__aeabi_d2f>
 8003722:	4602      	mov	r2, r0
 8003724:	4b28      	ldr	r3, [pc, #160]	; (80037c8 <UART_Execute+0x290>)
 8003726:	601a      	str	r2, [r3, #0]
			UART_Flow2();
 8003728:	f7ff fcea 	bl	8003100 <UART_Flow2>
			break;
 800372c:	e015      	b.n	800375a <UART_Execute+0x222>
		case 12:
			EndEff_Enable = 1;
 800372e:	4b27      	ldr	r3, [pc, #156]	; (80037cc <UART_Execute+0x294>)
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]
			break;
 8003734:	e011      	b.n	800375a <UART_Execute+0x222>
		case 13:
			EndEff_Enable = 0;
 8003736:	4b25      	ldr	r3, [pc, #148]	; (80037cc <UART_Execute+0x294>)
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
			break;
 800373c:	e00d      	b.n	800375a <UART_Execute+0x222>
		case 14:
			Home = 1;
 800373e:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <UART_Execute+0x298>)
 8003740:	2201      	movs	r2, #1
 8003742:	701a      	strb	r2, [r3, #0]
			HomeMode = 1;
 8003744:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <UART_Execute+0x29c>)
 8003746:	2201      	movs	r2, #1
 8003748:	701a      	strb	r2, [r3, #0]
			HomeTimestamp = micros();
 800374a:	f7fe f8cb 	bl	80018e4 <micros>
 800374e:	4603      	mov	r3, r0
 8003750:	460c      	mov	r4, r1
 8003752:	4a21      	ldr	r2, [pc, #132]	; (80037d8 <UART_Execute+0x2a0>)
 8003754:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8003758:	bf00      	nop
		case 15:
			break;
	}
	UART_Mode = 0;
 800375a:	4b07      	ldr	r3, [pc, #28]	; (8003778 <UART_Execute+0x240>)
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
}
 8003760:	bf00      	nop
 8003762:	bd98      	pop	{r3, r4, r7, pc}
 8003764:	f3af 8000 	nop.w
 8003768:	00000000 	.word	0x00000000
 800376c:	40bc2000 	.word	0x40bc2000
 8003770:	d97f62b7 	.word	0xd97f62b7
 8003774:	4023193d 	.word	0x4023193d
 8003778:	200001ea 	.word	0x200001ea
 800377c:	200001b9 	.word	0x200001b9
 8003780:	200001cc 	.word	0x200001cc
 8003784:	80808081 	.word	0x80808081
 8003788:	200001bc 	.word	0x200001bc
 800378c:	20000020 	.word	0x20000020
 8003790:	200001c0 	.word	0x200001c0
 8003794:	2000001c 	.word	0x2000001c
 8003798:	461c4000 	.word	0x461c4000
 800379c:	43340000 	.word	0x43340000
 80037a0:	2000017c 	.word	0x2000017c
 80037a4:	200001a8 	.word	0x200001a8
 80037a8:	200001a4 	.word	0x200001a4
 80037ac:	200001c4 	.word	0x200001c4
 80037b0:	20000024 	.word	0x20000024
 80037b4:	200001ad 	.word	0x200001ad
 80037b8:	200001d8 	.word	0x200001d8
 80037bc:	20000160 	.word	0x20000160
 80037c0:	200001b6 	.word	0x200001b6
 80037c4:	40768000 	.word	0x40768000
 80037c8:	200001b0 	.word	0x200001b0
 80037cc:	200001ba 	.word	0x200001ba
 80037d0:	200001b7 	.word	0x200001b7
 80037d4:	200000f0 	.word	0x200000f0
 80037d8:	200000e0 	.word	0x200000e0

080037dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037e0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037e2:	e7fe      	b.n	80037e2 <Error_Handler+0x6>

080037e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <HAL_MspInit+0x4c>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	4a0f      	ldr	r2, [pc, #60]	; (8003830 <HAL_MspInit+0x4c>)
 80037f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f8:	6453      	str	r3, [r2, #68]	; 0x44
 80037fa:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <HAL_MspInit+0x4c>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4b09      	ldr	r3, [pc, #36]	; (8003830 <HAL_MspInit+0x4c>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	4a08      	ldr	r2, [pc, #32]	; (8003830 <HAL_MspInit+0x4c>)
 8003810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003814:	6413      	str	r3, [r2, #64]	; 0x40
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_MspInit+0x4c>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003822:	2007      	movs	r0, #7
 8003824:	f000 fc46 	bl	80040b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40023800 	.word	0x40023800

08003834 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383c:	f107 0314 	add.w	r3, r7, #20
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a21      	ldr	r2, [pc, #132]	; (80038d8 <HAL_I2C_MspInit+0xa4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d13b      	bne.n	80038ce <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	4b20      	ldr	r3, [pc, #128]	; (80038dc <HAL_I2C_MspInit+0xa8>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	4a1f      	ldr	r2, [pc, #124]	; (80038dc <HAL_I2C_MspInit+0xa8>)
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	6313      	str	r3, [r2, #48]	; 0x30
 8003866:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <HAL_I2C_MspInit+0xa8>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003872:	23c0      	movs	r3, #192	; 0xc0
 8003874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003876:	2312      	movs	r3, #18
 8003878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800387a:	2301      	movs	r3, #1
 800387c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387e:	2303      	movs	r3, #3
 8003880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003882:	2304      	movs	r3, #4
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003886:	f107 0314 	add.w	r3, r7, #20
 800388a:	4619      	mov	r1, r3
 800388c:	4814      	ldr	r0, [pc, #80]	; (80038e0 <HAL_I2C_MspInit+0xac>)
 800388e:	f000 fff1 	bl	8004874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	4b11      	ldr	r3, [pc, #68]	; (80038dc <HAL_I2C_MspInit+0xa8>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	4a10      	ldr	r2, [pc, #64]	; (80038dc <HAL_I2C_MspInit+0xa8>)
 800389c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038a0:	6413      	str	r3, [r2, #64]	; 0x40
 80038a2:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <HAL_I2C_MspInit+0xa8>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80038ae:	2200      	movs	r2, #0
 80038b0:	2100      	movs	r1, #0
 80038b2:	201f      	movs	r0, #31
 80038b4:	f000 fc09 	bl	80040ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80038b8:	201f      	movs	r0, #31
 80038ba:	f000 fc22 	bl	8004102 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80038be:	2200      	movs	r2, #0
 80038c0:	2100      	movs	r1, #0
 80038c2:	2020      	movs	r0, #32
 80038c4:	f000 fc01 	bl	80040ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80038c8:	2020      	movs	r0, #32
 80038ca:	f000 fc1a 	bl	8004102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80038ce:	bf00      	nop
 80038d0:	3728      	adds	r7, #40	; 0x28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40005400 	.word	0x40005400
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40020400 	.word	0x40020400

080038e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	; 0x28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ec:	f107 0314 	add.w	r3, r7, #20
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	609a      	str	r2, [r3, #8]
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a19      	ldr	r2, [pc, #100]	; (8003968 <HAL_TIM_Encoder_MspInit+0x84>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d12c      	bne.n	8003960 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	4b18      	ldr	r3, [pc, #96]	; (800396c <HAL_TIM_Encoder_MspInit+0x88>)
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	4a17      	ldr	r2, [pc, #92]	; (800396c <HAL_TIM_Encoder_MspInit+0x88>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6453      	str	r3, [r2, #68]	; 0x44
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_TIM_Encoder_MspInit+0x88>)
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	4b11      	ldr	r3, [pc, #68]	; (800396c <HAL_TIM_Encoder_MspInit+0x88>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	4a10      	ldr	r2, [pc, #64]	; (800396c <HAL_TIM_Encoder_MspInit+0x88>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6313      	str	r3, [r2, #48]	; 0x30
 8003932:	4b0e      	ldr	r3, [pc, #56]	; (800396c <HAL_TIM_Encoder_MspInit+0x88>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800393e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003944:	2302      	movs	r3, #2
 8003946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394c:	2300      	movs	r3, #0
 800394e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003950:	2301      	movs	r3, #1
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003954:	f107 0314 	add.w	r3, r7, #20
 8003958:	4619      	mov	r1, r3
 800395a:	4805      	ldr	r0, [pc, #20]	; (8003970 <HAL_TIM_Encoder_MspInit+0x8c>)
 800395c:	f000 ff8a 	bl	8004874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003960:	bf00      	nop
 8003962:	3728      	adds	r7, #40	; 0x28
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40010000 	.word	0x40010000
 800396c:	40023800 	.word	0x40023800
 8003970:	40020000 	.word	0x40020000

08003974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003984:	d116      	bne.n	80039b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <HAL_TIM_Base_MspInit+0x80>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	4a19      	ldr	r2, [pc, #100]	; (80039f4 <HAL_TIM_Base_MspInit+0x80>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	6413      	str	r3, [r2, #64]	; 0x40
 8003996:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <HAL_TIM_Base_MspInit+0x80>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2100      	movs	r1, #0
 80039a6:	201c      	movs	r0, #28
 80039a8:	f000 fb8f 	bl	80040ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039ac:	201c      	movs	r0, #28
 80039ae:	f000 fba8 	bl	8004102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80039b2:	e01a      	b.n	80039ea <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0f      	ldr	r2, [pc, #60]	; (80039f8 <HAL_TIM_Base_MspInit+0x84>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d115      	bne.n	80039ea <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <HAL_TIM_Base_MspInit+0x80>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <HAL_TIM_Base_MspInit+0x80>)
 80039c8:	f043 0304 	orr.w	r3, r3, #4
 80039cc:	6413      	str	r3, [r2, #64]	; 0x40
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <HAL_TIM_Base_MspInit+0x80>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80039da:	2200      	movs	r2, #0
 80039dc:	2100      	movs	r1, #0
 80039de:	201e      	movs	r0, #30
 80039e0:	f000 fb73 	bl	80040ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039e4:	201e      	movs	r0, #30
 80039e6:	f000 fb8c 	bl	8004102 <HAL_NVIC_EnableIRQ>
}
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40000800 	.word	0x40000800

080039fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a0b      	ldr	r2, [pc, #44]	; (8003a38 <HAL_TIM_PWM_MspInit+0x3c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d10d      	bne.n	8003a2a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <HAL_TIM_PWM_MspInit+0x40>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <HAL_TIM_PWM_MspInit+0x40>)
 8003a18:	f043 0302 	orr.w	r3, r3, #2
 8003a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1e:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <HAL_TIM_PWM_MspInit+0x40>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40000400 	.word	0x40000400
 8003a3c:	40023800 	.word	0x40023800

08003a40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a48:	f107 030c 	add.w	r3, r7, #12
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <HAL_TIM_MspPostInit+0x68>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d11d      	bne.n	8003a9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	4b11      	ldr	r3, [pc, #68]	; (8003aac <HAL_TIM_MspPostInit+0x6c>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	4a10      	ldr	r2, [pc, #64]	; (8003aac <HAL_TIM_MspPostInit+0x6c>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6313      	str	r3, [r2, #48]	; 0x30
 8003a72:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <HAL_TIM_MspPostInit+0x6c>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a7e:	23c0      	movs	r3, #192	; 0xc0
 8003a80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a82:	2302      	movs	r3, #2
 8003a84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a92:	f107 030c 	add.w	r3, r7, #12
 8003a96:	4619      	mov	r1, r3
 8003a98:	4805      	ldr	r0, [pc, #20]	; (8003ab0 <HAL_TIM_MspPostInit+0x70>)
 8003a9a:	f000 feeb 	bl	8004874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003a9e:	bf00      	nop
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40020000 	.word	0x40020000

08003ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003abc:	f107 0314 	add.w	r3, r7, #20
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a4c      	ldr	r2, [pc, #304]	; (8003c04 <HAL_UART_MspInit+0x150>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	f040 8091 	bne.w	8003bfa <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	4b4a      	ldr	r3, [pc, #296]	; (8003c08 <HAL_UART_MspInit+0x154>)
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	4a49      	ldr	r2, [pc, #292]	; (8003c08 <HAL_UART_MspInit+0x154>)
 8003ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae8:	4b47      	ldr	r3, [pc, #284]	; (8003c08 <HAL_UART_MspInit+0x154>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_UART_MspInit+0x154>)
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	4a42      	ldr	r2, [pc, #264]	; (8003c08 <HAL_UART_MspInit+0x154>)
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	6313      	str	r3, [r2, #48]	; 0x30
 8003b04:	4b40      	ldr	r3, [pc, #256]	; (8003c08 <HAL_UART_MspInit+0x154>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003b10:	230c      	movs	r3, #12
 8003b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b14:	2302      	movs	r3, #2
 8003b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b20:	2307      	movs	r3, #7
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b24:	f107 0314 	add.w	r3, r7, #20
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4838      	ldr	r0, [pc, #224]	; (8003c0c <HAL_UART_MspInit+0x158>)
 8003b2c:	f000 fea2 	bl	8004874 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003b30:	4b37      	ldr	r3, [pc, #220]	; (8003c10 <HAL_UART_MspInit+0x15c>)
 8003b32:	4a38      	ldr	r2, [pc, #224]	; (8003c14 <HAL_UART_MspInit+0x160>)
 8003b34:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003b36:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <HAL_UART_MspInit+0x15c>)
 8003b38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b3e:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <HAL_UART_MspInit+0x15c>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b44:	4b32      	ldr	r3, [pc, #200]	; (8003c10 <HAL_UART_MspInit+0x15c>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b4a:	4b31      	ldr	r3, [pc, #196]	; (8003c10 <HAL_UART_MspInit+0x15c>)
 8003b4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b50:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b52:	4b2f      	ldr	r3, [pc, #188]	; (8003c10 <HAL_UART_MspInit+0x15c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b58:	4b2d      	ldr	r3, [pc, #180]	; (8003c10 <HAL_UART_MspInit+0x15c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003b5e:	4b2c      	ldr	r3, [pc, #176]	; (8003c10 <HAL_UART_MspInit+0x15c>)
 8003b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b64:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b66:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <HAL_UART_MspInit+0x15c>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b6c:	4b28      	ldr	r3, [pc, #160]	; (8003c10 <HAL_UART_MspInit+0x15c>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003b72:	4827      	ldr	r0, [pc, #156]	; (8003c10 <HAL_UART_MspInit+0x15c>)
 8003b74:	f000 fae0 	bl	8004138 <HAL_DMA_Init>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003b7e:	f7ff fe2d 	bl	80037dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a22      	ldr	r2, [pc, #136]	; (8003c10 <HAL_UART_MspInit+0x15c>)
 8003b86:	635a      	str	r2, [r3, #52]	; 0x34
 8003b88:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <HAL_UART_MspInit+0x15c>)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003b8e:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <HAL_UART_MspInit+0x164>)
 8003b90:	4a22      	ldr	r2, [pc, #136]	; (8003c1c <HAL_UART_MspInit+0x168>)
 8003b92:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003b94:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <HAL_UART_MspInit+0x164>)
 8003b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b9a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b9c:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <HAL_UART_MspInit+0x164>)
 8003b9e:	2240      	movs	r2, #64	; 0x40
 8003ba0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <HAL_UART_MspInit+0x164>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <HAL_UART_MspInit+0x164>)
 8003baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bae:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bb0:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <HAL_UART_MspInit+0x164>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <HAL_UART_MspInit+0x164>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003bbc:	4b16      	ldr	r3, [pc, #88]	; (8003c18 <HAL_UART_MspInit+0x164>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bc2:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <HAL_UART_MspInit+0x164>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bc8:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <HAL_UART_MspInit+0x164>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003bce:	4812      	ldr	r0, [pc, #72]	; (8003c18 <HAL_UART_MspInit+0x164>)
 8003bd0:	f000 fab2 	bl	8004138 <HAL_DMA_Init>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003bda:	f7ff fdff 	bl	80037dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a0d      	ldr	r2, [pc, #52]	; (8003c18 <HAL_UART_MspInit+0x164>)
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
 8003be4:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <HAL_UART_MspInit+0x164>)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003bea:	2200      	movs	r2, #0
 8003bec:	2100      	movs	r1, #0
 8003bee:	2026      	movs	r0, #38	; 0x26
 8003bf0:	f000 fa6b 	bl	80040ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bf4:	2026      	movs	r0, #38	; 0x26
 8003bf6:	f000 fa84 	bl	8004102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bfa:	bf00      	nop
 8003bfc:	3728      	adds	r7, #40	; 0x28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40004400 	.word	0x40004400
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	40020000 	.word	0x40020000
 8003c10:	20000210 	.word	0x20000210
 8003c14:	40026088 	.word	0x40026088
 8003c18:	2000034c 	.word	0x2000034c
 8003c1c:	400260a0 	.word	0x400260a0

08003c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c24:	e7fe      	b.n	8003c24 <NMI_Handler+0x4>

08003c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c2a:	e7fe      	b.n	8003c2a <HardFault_Handler+0x4>

08003c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c30:	e7fe      	b.n	8003c30 <MemManage_Handler+0x4>

08003c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c32:	b480      	push	{r7}
 8003c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c36:	e7fe      	b.n	8003c36 <BusFault_Handler+0x4>

08003c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c3c:	e7fe      	b.n	8003c3c <UsageFault_Handler+0x4>

08003c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c50:	bf00      	nop
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c6c:	f000 f910 	bl	8003e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c70:	bf00      	nop
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003c78:	4802      	ldr	r0, [pc, #8]	; (8003c84 <DMA1_Stream5_IRQHandler+0x10>)
 8003c7a:	f000 fb85 	bl	8004388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000210 	.word	0x20000210

08003c88 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003c8c:	4802      	ldr	r0, [pc, #8]	; (8003c98 <DMA1_Stream6_IRQHandler+0x10>)
 8003c8e:	f000 fb7b 	bl	8004388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	2000034c 	.word	0x2000034c

08003c9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ca0:	4802      	ldr	r0, [pc, #8]	; (8003cac <TIM2_IRQHandler+0x10>)
 8003ca2:	f003 fc44 	bl	800752e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	200003ec 	.word	0x200003ec

08003cb0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003cb4:	4802      	ldr	r0, [pc, #8]	; (8003cc0 <TIM4_IRQHandler+0x10>)
 8003cb6:	f003 fc3a 	bl	800752e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20000270 	.word	0x20000270

08003cc4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003cc8:	4802      	ldr	r0, [pc, #8]	; (8003cd4 <I2C1_EV_IRQHandler+0x10>)
 8003cca:	f001 f97f 	bl	8004fcc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003cce:	bf00      	nop
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200002b4 	.word	0x200002b4

08003cd8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003cdc:	4802      	ldr	r0, [pc, #8]	; (8003ce8 <I2C1_ER_IRQHandler+0x10>)
 8003cde:	f001 fae2 	bl	80052a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200002b4 	.word	0x200002b4

08003cec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003cf0:	4802      	ldr	r0, [pc, #8]	; (8003cfc <USART2_IRQHandler+0x10>)
 8003cf2:	f004 fb53 	bl	800839c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003cf6:	bf00      	nop
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	2000042c 	.word	0x2000042c

08003d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d08:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <_sbrk+0x5c>)
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <_sbrk+0x60>)
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d14:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <_sbrk+0x64>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <_sbrk+0x64>)
 8003d1e:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <_sbrk+0x68>)
 8003d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <_sbrk+0x64>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d207      	bcs.n	8003d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d30:	f005 f9e4 	bl	80090fc <__errno>
 8003d34:	4602      	mov	r2, r0
 8003d36:	230c      	movs	r3, #12
 8003d38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d3e:	e009      	b.n	8003d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d40:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <_sbrk+0x64>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d46:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <_sbrk+0x64>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	4a05      	ldr	r2, [pc, #20]	; (8003d64 <_sbrk+0x64>)
 8003d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d52:	68fb      	ldr	r3, [r7, #12]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20020000 	.word	0x20020000
 8003d60:	00000400 	.word	0x00000400
 8003d64:	20000200 	.word	0x20000200
 8003d68:	20000478 	.word	0x20000478

08003d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d70:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <SystemInit+0x28>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	4a07      	ldr	r2, [pc, #28]	; (8003d94 <SystemInit+0x28>)
 8003d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d80:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <SystemInit+0x28>)
 8003d82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d86:	609a      	str	r2, [r3, #8]
#endif
}
 8003d88:	bf00      	nop
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d9e:	e003      	b.n	8003da8 <LoopCopyDataInit>

08003da0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003da0:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003da2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003da4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003da6:	3104      	adds	r1, #4

08003da8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003da8:	480b      	ldr	r0, [pc, #44]	; (8003dd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003daa:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003dac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003dae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003db0:	d3f6      	bcc.n	8003da0 <CopyDataInit>
  ldr  r2, =_sbss
 8003db2:	4a0b      	ldr	r2, [pc, #44]	; (8003de0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003db4:	e002      	b.n	8003dbc <LoopFillZerobss>

08003db6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003db6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003db8:	f842 3b04 	str.w	r3, [r2], #4

08003dbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003dbc:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003dbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003dc0:	d3f9      	bcc.n	8003db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003dc2:	f7ff ffd3 	bl	8003d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dc6:	f005 f99f 	bl	8009108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dca:	f7fd f951 	bl	8001070 <main>
  bx  lr    
 8003dce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003dd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003dd4:	0800a440 	.word	0x0800a440
  ldr  r0, =_sdata
 8003dd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ddc:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8003de0:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8003de4:	20000474 	.word	0x20000474

08003de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003de8:	e7fe      	b.n	8003de8 <ADC_IRQHandler>
	...

08003dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003df0:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <HAL_Init+0x40>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a0d      	ldr	r2, [pc, #52]	; (8003e2c <HAL_Init+0x40>)
 8003df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_Init+0x40>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <HAL_Init+0x40>)
 8003e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <HAL_Init+0x40>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <HAL_Init+0x40>)
 8003e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e14:	2003      	movs	r0, #3
 8003e16:	f000 f94d 	bl	80040b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	f000 f808 	bl	8003e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e20:	f7ff fce0 	bl	80037e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40023c00 	.word	0x40023c00

08003e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e38:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <HAL_InitTick+0x54>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4b12      	ldr	r3, [pc, #72]	; (8003e88 <HAL_InitTick+0x58>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	4619      	mov	r1, r3
 8003e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f965 	bl	800411e <HAL_SYSTICK_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e00e      	b.n	8003e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b0f      	cmp	r3, #15
 8003e62:	d80a      	bhi.n	8003e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e64:	2200      	movs	r2, #0
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e6c:	f000 f92d 	bl	80040ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e70:	4a06      	ldr	r2, [pc, #24]	; (8003e8c <HAL_InitTick+0x5c>)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	e000      	b.n	8003e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	2000003c 	.word	0x2000003c
 8003e88:	20000044 	.word	0x20000044
 8003e8c:	20000040 	.word	0x20000040

08003e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e94:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <HAL_IncTick+0x20>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_IncTick+0x24>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	4a04      	ldr	r2, [pc, #16]	; (8003eb4 <HAL_IncTick+0x24>)
 8003ea2:	6013      	str	r3, [r2, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20000044 	.word	0x20000044
 8003eb4:	2000046c 	.word	0x2000046c

08003eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  return uwTick;
 8003ebc:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <HAL_GetTick+0x14>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	2000046c 	.word	0x2000046c

08003ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ed8:	f7ff ffee 	bl	8003eb8 <HAL_GetTick>
 8003edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee8:	d005      	beq.n	8003ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <HAL_Delay+0x40>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ef6:	bf00      	nop
 8003ef8:	f7ff ffde 	bl	8003eb8 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d8f7      	bhi.n	8003ef8 <HAL_Delay+0x28>
  {
  }
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000044 	.word	0x20000044

08003f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f24:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <__NVIC_SetPriorityGrouping+0x44>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f30:	4013      	ands	r3, r2
 8003f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f46:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <__NVIC_SetPriorityGrouping+0x44>)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	60d3      	str	r3, [r2, #12]
}
 8003f4c:	bf00      	nop
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f60:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <__NVIC_GetPriorityGrouping+0x18>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	0a1b      	lsrs	r3, r3, #8
 8003f66:	f003 0307 	and.w	r3, r3, #7
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000ed00 	.word	0xe000ed00

08003f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	db0b      	blt.n	8003fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	f003 021f 	and.w	r2, r3, #31
 8003f90:	4907      	ldr	r1, [pc, #28]	; (8003fb0 <__NVIC_EnableIRQ+0x38>)
 8003f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	2001      	movs	r0, #1
 8003f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	e000e100 	.word	0xe000e100

08003fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	6039      	str	r1, [r7, #0]
 8003fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	db0a      	blt.n	8003fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	490c      	ldr	r1, [pc, #48]	; (8004000 <__NVIC_SetPriority+0x4c>)
 8003fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd2:	0112      	lsls	r2, r2, #4
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fdc:	e00a      	b.n	8003ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	4908      	ldr	r1, [pc, #32]	; (8004004 <__NVIC_SetPriority+0x50>)
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	3b04      	subs	r3, #4
 8003fec:	0112      	lsls	r2, r2, #4
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	761a      	strb	r2, [r3, #24]
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	e000e100 	.word	0xe000e100
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004008:	b480      	push	{r7}
 800400a:	b089      	sub	sp, #36	; 0x24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f1c3 0307 	rsb	r3, r3, #7
 8004022:	2b04      	cmp	r3, #4
 8004024:	bf28      	it	cs
 8004026:	2304      	movcs	r3, #4
 8004028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	3304      	adds	r3, #4
 800402e:	2b06      	cmp	r3, #6
 8004030:	d902      	bls.n	8004038 <NVIC_EncodePriority+0x30>
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	3b03      	subs	r3, #3
 8004036:	e000      	b.n	800403a <NVIC_EncodePriority+0x32>
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800403c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	43da      	mvns	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	401a      	ands	r2, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004050:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	fa01 f303 	lsl.w	r3, r1, r3
 800405a:	43d9      	mvns	r1, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004060:	4313      	orrs	r3, r2
         );
}
 8004062:	4618      	mov	r0, r3
 8004064:	3724      	adds	r7, #36	; 0x24
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3b01      	subs	r3, #1
 800407c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004080:	d301      	bcc.n	8004086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004082:	2301      	movs	r3, #1
 8004084:	e00f      	b.n	80040a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004086:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <SysTick_Config+0x40>)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3b01      	subs	r3, #1
 800408c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800408e:	210f      	movs	r1, #15
 8004090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004094:	f7ff ff8e 	bl	8003fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <SysTick_Config+0x40>)
 800409a:	2200      	movs	r2, #0
 800409c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800409e:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <SysTick_Config+0x40>)
 80040a0:	2207      	movs	r2, #7
 80040a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	e000e010 	.word	0xe000e010

080040b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ff29 	bl	8003f14 <__NVIC_SetPriorityGrouping>
}
 80040c2:	bf00      	nop
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b086      	sub	sp, #24
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	4603      	mov	r3, r0
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040dc:	f7ff ff3e 	bl	8003f5c <__NVIC_GetPriorityGrouping>
 80040e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	6978      	ldr	r0, [r7, #20]
 80040e8:	f7ff ff8e 	bl	8004008 <NVIC_EncodePriority>
 80040ec:	4602      	mov	r2, r0
 80040ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040f2:	4611      	mov	r1, r2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff ff5d 	bl	8003fb4 <__NVIC_SetPriority>
}
 80040fa:	bf00      	nop
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	4603      	mov	r3, r0
 800410a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800410c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff ff31 	bl	8003f78 <__NVIC_EnableIRQ>
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff ffa2 	bl	8004070 <SysTick_Config>
 800412c:	4603      	mov	r3, r0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004144:	f7ff feb8 	bl	8003eb8 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e099      	b.n	8004288 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004174:	e00f      	b.n	8004196 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004176:	f7ff fe9f 	bl	8003eb8 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b05      	cmp	r3, #5
 8004182:	d908      	bls.n	8004196 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2203      	movs	r2, #3
 800418e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e078      	b.n	8004288 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e8      	bne.n	8004176 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4b38      	ldr	r3, [pc, #224]	; (8004290 <HAL_DMA_Init+0x158>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d107      	bne.n	8004200 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	4313      	orrs	r3, r2
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f023 0307 	bic.w	r3, r3, #7
 8004216:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	2b04      	cmp	r3, #4
 8004228:	d117      	bne.n	800425a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00e      	beq.n	800425a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fa9f 	bl	8004780 <DMA_CheckFifoParam>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2240      	movs	r2, #64	; 0x40
 800424c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004256:	2301      	movs	r3, #1
 8004258:	e016      	b.n	8004288 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fa56 	bl	8004714 <DMA_CalcBaseAndBitshift>
 8004268:	4603      	mov	r3, r0
 800426a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004270:	223f      	movs	r2, #63	; 0x3f
 8004272:	409a      	lsls	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	f010803f 	.word	0xf010803f

08004294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_DMA_Start_IT+0x26>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e040      	b.n	800433c <HAL_DMA_Start_IT+0xa8>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d12f      	bne.n	800432e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2202      	movs	r2, #2
 80042d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f9e8 	bl	80046b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ec:	223f      	movs	r2, #63	; 0x3f
 80042ee:	409a      	lsls	r2, r3
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0216 	orr.w	r2, r2, #22
 8004302:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d007      	beq.n	800431c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0208 	orr.w	r2, r2, #8
 800431a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	e005      	b.n	800433a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004336:	2302      	movs	r3, #2
 8004338:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d004      	beq.n	8004362 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2280      	movs	r2, #128	; 0x80
 800435c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e00c      	b.n	800437c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2205      	movs	r2, #5
 8004366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004394:	4b92      	ldr	r3, [pc, #584]	; (80045e0 <HAL_DMA_IRQHandler+0x258>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a92      	ldr	r2, [pc, #584]	; (80045e4 <HAL_DMA_IRQHandler+0x25c>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	0a9b      	lsrs	r3, r3, #10
 80043a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b2:	2208      	movs	r2, #8
 80043b4:	409a      	lsls	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01a      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d013      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0204 	bic.w	r2, r2, #4
 80043da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e0:	2208      	movs	r2, #8
 80043e2:	409a      	lsls	r2, r3
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ec:	f043 0201 	orr.w	r2, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f8:	2201      	movs	r2, #1
 80043fa:	409a      	lsls	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4013      	ands	r3, r2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d012      	beq.n	800442a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004416:	2201      	movs	r2, #1
 8004418:	409a      	lsls	r2, r3
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	f043 0202 	orr.w	r2, r3, #2
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442e:	2204      	movs	r2, #4
 8004430:	409a      	lsls	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4013      	ands	r3, r2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d012      	beq.n	8004460 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00b      	beq.n	8004460 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	2204      	movs	r2, #4
 800444e:	409a      	lsls	r2, r3
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004458:	f043 0204 	orr.w	r2, r3, #4
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004464:	2210      	movs	r2, #16
 8004466:	409a      	lsls	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d043      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d03c      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	2210      	movs	r2, #16
 8004484:	409a      	lsls	r2, r3
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d018      	beq.n	80044ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d108      	bne.n	80044b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d024      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4798      	blx	r3
 80044b6:	e01f      	b.n	80044f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01b      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
 80044c8:	e016      	b.n	80044f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d107      	bne.n	80044e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0208 	bic.w	r2, r2, #8
 80044e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fc:	2220      	movs	r2, #32
 80044fe:	409a      	lsls	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4013      	ands	r3, r2
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 808e 	beq.w	8004626 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8086 	beq.w	8004626 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451e:	2220      	movs	r2, #32
 8004520:	409a      	lsls	r2, r3
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b05      	cmp	r3, #5
 8004530:	d136      	bne.n	80045a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0216 	bic.w	r2, r2, #22
 8004540:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004550:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <HAL_DMA_IRQHandler+0x1da>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0208 	bic.w	r2, r2, #8
 8004570:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004576:	223f      	movs	r2, #63	; 0x3f
 8004578:	409a      	lsls	r2, r3
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004592:	2b00      	cmp	r3, #0
 8004594:	d07d      	beq.n	8004692 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	4798      	blx	r3
        }
        return;
 800459e:	e078      	b.n	8004692 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d01c      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d108      	bne.n	80045ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d030      	beq.n	8004626 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	4798      	blx	r3
 80045cc:	e02b      	b.n	8004626 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d027      	beq.n	8004626 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	4798      	blx	r3
 80045de:	e022      	b.n	8004626 <HAL_DMA_IRQHandler+0x29e>
 80045e0:	2000003c 	.word	0x2000003c
 80045e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10f      	bne.n	8004616 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0210 	bic.w	r2, r2, #16
 8004604:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	2b00      	cmp	r3, #0
 800462c:	d032      	beq.n	8004694 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d022      	beq.n	8004680 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2205      	movs	r2, #5
 800463e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0201 	bic.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	3301      	adds	r3, #1
 8004656:	60bb      	str	r3, [r7, #8]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	429a      	cmp	r2, r3
 800465c:	d307      	bcc.n	800466e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f2      	bne.n	8004652 <HAL_DMA_IRQHandler+0x2ca>
 800466c:	e000      	b.n	8004670 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800466e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	4798      	blx	r3
 8004690:	e000      	b.n	8004694 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004692:	bf00      	nop
    }
  }
}
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop

0800469c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046aa:	b2db      	uxtb	r3, r3
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b40      	cmp	r3, #64	; 0x40
 80046e4:	d108      	bne.n	80046f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046f6:	e007      	b.n	8004708 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	60da      	str	r2, [r3, #12]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	3b10      	subs	r3, #16
 8004724:	4a14      	ldr	r2, [pc, #80]	; (8004778 <DMA_CalcBaseAndBitshift+0x64>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800472e:	4a13      	ldr	r2, [pc, #76]	; (800477c <DMA_CalcBaseAndBitshift+0x68>)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b03      	cmp	r3, #3
 8004740:	d909      	bls.n	8004756 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800474a:	f023 0303 	bic.w	r3, r3, #3
 800474e:	1d1a      	adds	r2, r3, #4
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	659a      	str	r2, [r3, #88]	; 0x58
 8004754:	e007      	b.n	8004766 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800475e:	f023 0303 	bic.w	r3, r3, #3
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	aaaaaaab 	.word	0xaaaaaaab
 800477c:	0800a3e0 	.word	0x0800a3e0

08004780 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d11f      	bne.n	80047da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b03      	cmp	r3, #3
 800479e:	d855      	bhi.n	800484c <DMA_CheckFifoParam+0xcc>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <DMA_CheckFifoParam+0x28>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047b9 	.word	0x080047b9
 80047ac:	080047cb 	.word	0x080047cb
 80047b0:	080047b9 	.word	0x080047b9
 80047b4:	0800484d 	.word	0x0800484d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d045      	beq.n	8004850 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047c8:	e042      	b.n	8004850 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047d2:	d13f      	bne.n	8004854 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d8:	e03c      	b.n	8004854 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e2:	d121      	bne.n	8004828 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d836      	bhi.n	8004858 <DMA_CheckFifoParam+0xd8>
 80047ea:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <DMA_CheckFifoParam+0x70>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	08004801 	.word	0x08004801
 80047f4:	08004807 	.word	0x08004807
 80047f8:	08004801 	.word	0x08004801
 80047fc:	08004819 	.word	0x08004819
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
      break;
 8004804:	e02f      	b.n	8004866 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d024      	beq.n	800485c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004816:	e021      	b.n	800485c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004820:	d11e      	bne.n	8004860 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004826:	e01b      	b.n	8004860 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d902      	bls.n	8004834 <DMA_CheckFifoParam+0xb4>
 800482e:	2b03      	cmp	r3, #3
 8004830:	d003      	beq.n	800483a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004832:	e018      	b.n	8004866 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
      break;
 8004838:	e015      	b.n	8004866 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00e      	beq.n	8004864 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
      break;
 800484a:	e00b      	b.n	8004864 <DMA_CheckFifoParam+0xe4>
      break;
 800484c:	bf00      	nop
 800484e:	e00a      	b.n	8004866 <DMA_CheckFifoParam+0xe6>
      break;
 8004850:	bf00      	nop
 8004852:	e008      	b.n	8004866 <DMA_CheckFifoParam+0xe6>
      break;
 8004854:	bf00      	nop
 8004856:	e006      	b.n	8004866 <DMA_CheckFifoParam+0xe6>
      break;
 8004858:	bf00      	nop
 800485a:	e004      	b.n	8004866 <DMA_CheckFifoParam+0xe6>
      break;
 800485c:	bf00      	nop
 800485e:	e002      	b.n	8004866 <DMA_CheckFifoParam+0xe6>
      break;   
 8004860:	bf00      	nop
 8004862:	e000      	b.n	8004866 <DMA_CheckFifoParam+0xe6>
      break;
 8004864:	bf00      	nop
    }
  } 
  
  return status; 
 8004866:	7bfb      	ldrb	r3, [r7, #15]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004882:	2300      	movs	r3, #0
 8004884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004886:	2300      	movs	r3, #0
 8004888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	e159      	b.n	8004b44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004890:	2201      	movs	r2, #1
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4013      	ands	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	f040 8148 	bne.w	8004b3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d00b      	beq.n	80048ce <HAL_GPIO_Init+0x5a>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d007      	beq.n	80048ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048c2:	2b11      	cmp	r3, #17
 80048c4:	d003      	beq.n	80048ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b12      	cmp	r3, #18
 80048cc:	d130      	bne.n	8004930 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	2203      	movs	r2, #3
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43db      	mvns	r3, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4013      	ands	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004904:	2201      	movs	r2, #1
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	43db      	mvns	r3, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4013      	ands	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f003 0201 	and.w	r2, r3, #1
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	2203      	movs	r2, #3
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4013      	ands	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4313      	orrs	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d003      	beq.n	8004970 <HAL_GPIO_Init+0xfc>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b12      	cmp	r3, #18
 800496e:	d123      	bne.n	80049b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	08da      	lsrs	r2, r3, #3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3208      	adds	r2, #8
 8004978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800497c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	220f      	movs	r2, #15
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	08da      	lsrs	r2, r3, #3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3208      	adds	r2, #8
 80049b2:	69b9      	ldr	r1, [r7, #24]
 80049b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	2203      	movs	r2, #3
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4013      	ands	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 0203 	and.w	r2, r3, #3
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80a2 	beq.w	8004b3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	4b56      	ldr	r3, [pc, #344]	; (8004b58 <HAL_GPIO_Init+0x2e4>)
 8004a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a02:	4a55      	ldr	r2, [pc, #340]	; (8004b58 <HAL_GPIO_Init+0x2e4>)
 8004a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a08:	6453      	str	r3, [r2, #68]	; 0x44
 8004a0a:	4b53      	ldr	r3, [pc, #332]	; (8004b58 <HAL_GPIO_Init+0x2e4>)
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a16:	4a51      	ldr	r2, [pc, #324]	; (8004b5c <HAL_GPIO_Init+0x2e8>)
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	089b      	lsrs	r3, r3, #2
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	220f      	movs	r2, #15
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	43db      	mvns	r3, r3
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4013      	ands	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a48      	ldr	r2, [pc, #288]	; (8004b60 <HAL_GPIO_Init+0x2ec>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d019      	beq.n	8004a76 <HAL_GPIO_Init+0x202>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a47      	ldr	r2, [pc, #284]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d013      	beq.n	8004a72 <HAL_GPIO_Init+0x1fe>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a46      	ldr	r2, [pc, #280]	; (8004b68 <HAL_GPIO_Init+0x2f4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00d      	beq.n	8004a6e <HAL_GPIO_Init+0x1fa>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a45      	ldr	r2, [pc, #276]	; (8004b6c <HAL_GPIO_Init+0x2f8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d007      	beq.n	8004a6a <HAL_GPIO_Init+0x1f6>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a44      	ldr	r2, [pc, #272]	; (8004b70 <HAL_GPIO_Init+0x2fc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d101      	bne.n	8004a66 <HAL_GPIO_Init+0x1f2>
 8004a62:	2304      	movs	r3, #4
 8004a64:	e008      	b.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a66:	2307      	movs	r3, #7
 8004a68:	e006      	b.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e004      	b.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e002      	b.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a76:	2300      	movs	r3, #0
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	f002 0203 	and.w	r2, r2, #3
 8004a7e:	0092      	lsls	r2, r2, #2
 8004a80:	4093      	lsls	r3, r2
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a88:	4934      	ldr	r1, [pc, #208]	; (8004b5c <HAL_GPIO_Init+0x2e8>)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	089b      	lsrs	r3, r3, #2
 8004a8e:	3302      	adds	r3, #2
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a96:	4b37      	ldr	r3, [pc, #220]	; (8004b74 <HAL_GPIO_Init+0x300>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aba:	4a2e      	ldr	r2, [pc, #184]	; (8004b74 <HAL_GPIO_Init+0x300>)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ac0:	4b2c      	ldr	r3, [pc, #176]	; (8004b74 <HAL_GPIO_Init+0x300>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ae4:	4a23      	ldr	r2, [pc, #140]	; (8004b74 <HAL_GPIO_Init+0x300>)
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aea:	4b22      	ldr	r3, [pc, #136]	; (8004b74 <HAL_GPIO_Init+0x300>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	43db      	mvns	r3, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4013      	ands	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b0e:	4a19      	ldr	r2, [pc, #100]	; (8004b74 <HAL_GPIO_Init+0x300>)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b14:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <HAL_GPIO_Init+0x300>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4013      	ands	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b38:	4a0e      	ldr	r2, [pc, #56]	; (8004b74 <HAL_GPIO_Init+0x300>)
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3301      	adds	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2b0f      	cmp	r3, #15
 8004b48:	f67f aea2 	bls.w	8004890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b4c:	bf00      	nop
 8004b4e:	3724      	adds	r7, #36	; 0x24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	40013800 	.word	0x40013800
 8004b60:	40020000 	.word	0x40020000
 8004b64:	40020400 	.word	0x40020400
 8004b68:	40020800 	.word	0x40020800
 8004b6c:	40020c00 	.word	0x40020c00
 8004b70:	40021000 	.word	0x40021000
 8004b74:	40013c00 	.word	0x40013c00

08004b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	887b      	ldrh	r3, [r7, #2]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b90:	2301      	movs	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]
 8004b94:	e001      	b.n	8004b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	807b      	strh	r3, [r7, #2]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bb8:	787b      	ldrb	r3, [r7, #1]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bbe:	887a      	ldrh	r2, [r7, #2]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bc4:	e003      	b.n	8004bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bc6:	887b      	ldrh	r3, [r7, #2]
 8004bc8:	041a      	lsls	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	619a      	str	r2, [r3, #24]
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	460b      	mov	r3, r1
 8004be4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695a      	ldr	r2, [r3, #20]
 8004bea:	887b      	ldrh	r3, [r7, #2]
 8004bec:	401a      	ands	r2, r3
 8004bee:	887b      	ldrh	r3, [r7, #2]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d104      	bne.n	8004bfe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004bf4:	887b      	ldrh	r3, [r7, #2]
 8004bf6:	041a      	lsls	r2, r3, #16
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004bfc:	e002      	b.n	8004c04 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004bfe:	887a      	ldrh	r2, [r7, #2]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	619a      	str	r2, [r3, #24]
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e11f      	b.n	8004e62 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fe fdfc 	bl	8003834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	; 0x24
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c74:	f002 fa9a 	bl	80071ac <HAL_RCC_GetPCLK1Freq>
 8004c78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4a7b      	ldr	r2, [pc, #492]	; (8004e6c <HAL_I2C_Init+0x25c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d807      	bhi.n	8004c94 <HAL_I2C_Init+0x84>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a7a      	ldr	r2, [pc, #488]	; (8004e70 <HAL_I2C_Init+0x260>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	bf94      	ite	ls
 8004c8c:	2301      	movls	r3, #1
 8004c8e:	2300      	movhi	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	e006      	b.n	8004ca2 <HAL_I2C_Init+0x92>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a77      	ldr	r2, [pc, #476]	; (8004e74 <HAL_I2C_Init+0x264>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	bf94      	ite	ls
 8004c9c:	2301      	movls	r3, #1
 8004c9e:	2300      	movhi	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e0db      	b.n	8004e62 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4a72      	ldr	r2, [pc, #456]	; (8004e78 <HAL_I2C_Init+0x268>)
 8004cae:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb2:	0c9b      	lsrs	r3, r3, #18
 8004cb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a64      	ldr	r2, [pc, #400]	; (8004e6c <HAL_I2C_Init+0x25c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d802      	bhi.n	8004ce4 <HAL_I2C_Init+0xd4>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	e009      	b.n	8004cf8 <HAL_I2C_Init+0xe8>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cea:	fb02 f303 	mul.w	r3, r2, r3
 8004cee:	4a63      	ldr	r2, [pc, #396]	; (8004e7c <HAL_I2C_Init+0x26c>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	099b      	lsrs	r3, r3, #6
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	4956      	ldr	r1, [pc, #344]	; (8004e6c <HAL_I2C_Init+0x25c>)
 8004d14:	428b      	cmp	r3, r1
 8004d16:	d80d      	bhi.n	8004d34 <HAL_I2C_Init+0x124>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	1e59      	subs	r1, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d26:	3301      	adds	r3, #1
 8004d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	bf38      	it	cc
 8004d30:	2304      	movcc	r3, #4
 8004d32:	e04f      	b.n	8004dd4 <HAL_I2C_Init+0x1c4>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d111      	bne.n	8004d60 <HAL_I2C_Init+0x150>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1e58      	subs	r0, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	440b      	add	r3, r1
 8004d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d4e:	3301      	adds	r3, #1
 8004d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	bf0c      	ite	eq
 8004d58:	2301      	moveq	r3, #1
 8004d5a:	2300      	movne	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e012      	b.n	8004d86 <HAL_I2C_Init+0x176>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	1e58      	subs	r0, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6859      	ldr	r1, [r3, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	0099      	lsls	r1, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d76:	3301      	adds	r3, #1
 8004d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_I2C_Init+0x17e>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e022      	b.n	8004dd4 <HAL_I2C_Init+0x1c4>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10e      	bne.n	8004db4 <HAL_I2C_Init+0x1a4>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1e58      	subs	r0, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6859      	ldr	r1, [r3, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	440b      	add	r3, r1
 8004da4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004da8:	3301      	adds	r3, #1
 8004daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db2:	e00f      	b.n	8004dd4 <HAL_I2C_Init+0x1c4>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1e58      	subs	r0, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6859      	ldr	r1, [r3, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	0099      	lsls	r1, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dca:	3301      	adds	r3, #1
 8004dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	6809      	ldr	r1, [r1, #0]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69da      	ldr	r2, [r3, #28]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6911      	ldr	r1, [r2, #16]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	68d2      	ldr	r2, [r2, #12]
 8004e0e:	4311      	orrs	r1, r2
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	430b      	orrs	r3, r1
 8004e16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695a      	ldr	r2, [r3, #20]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	000186a0 	.word	0x000186a0
 8004e70:	001e847f 	.word	0x001e847f
 8004e74:	003d08ff 	.word	0x003d08ff
 8004e78:	431bde83 	.word	0x431bde83
 8004e7c:	10624dd3 	.word	0x10624dd3

08004e80 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	607a      	str	r2, [r7, #4]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	817b      	strh	r3, [r7, #10]
 8004e90:	4613      	mov	r3, r2
 8004e92:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	f040 8085 	bne.w	8004fb0 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ea6:	4b46      	ldr	r3, [pc, #280]	; (8004fc0 <HAL_I2C_Master_Transmit_IT+0x140>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	08db      	lsrs	r3, r3, #3
 8004eac:	4a45      	ldr	r2, [pc, #276]	; (8004fc4 <HAL_I2C_Master_Transmit_IT+0x144>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	0a1a      	lsrs	r2, r3, #8
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	009a      	lsls	r2, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d116      	bne.n	8004efa <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f043 0220 	orr.w	r2, r3, #32
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e05b      	b.n	8004fb2 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d0db      	beq.n	8004ec0 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_I2C_Master_Transmit_IT+0x96>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e04d      	b.n	8004fb2 <HAL_I2C_Master_Transmit_IT+0x132>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d007      	beq.n	8004f3c <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2221      	movs	r2, #33	; 0x21
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2210      	movs	r2, #16
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	893a      	ldrh	r2, [r7, #8]
 8004f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4a13      	ldr	r2, [pc, #76]	; (8004fc8 <HAL_I2C_Master_Transmit_IT+0x148>)
 8004f7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004f7e:	897a      	ldrh	r2, [r7, #10]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f92:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004faa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e000      	b.n	8004fb2 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8004fb0:	2302      	movs	r3, #2
  }
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	2000003c 	.word	0x2000003c
 8004fc4:	14f8b589 	.word	0x14f8b589
 8004fc8:	ffff0000 	.word	0xffff0000

08004fcc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
 8004ff8:	2b10      	cmp	r3, #16
 8004ffa:	d003      	beq.n	8005004 <HAL_I2C_EV_IRQHandler+0x38>
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	2b40      	cmp	r3, #64	; 0x40
 8005000:	f040 80bd 	bne.w	800517e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10d      	bne.n	800503a <HAL_I2C_EV_IRQHandler+0x6e>
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005024:	d003      	beq.n	800502e <HAL_I2C_EV_IRQHandler+0x62>
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800502c:	d101      	bne.n	8005032 <HAL_I2C_EV_IRQHandler+0x66>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <HAL_I2C_EV_IRQHandler+0x68>
 8005032:	2300      	movs	r3, #0
 8005034:	2b01      	cmp	r3, #1
 8005036:	f000 812e 	beq.w	8005296 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00c      	beq.n	800505e <HAL_I2C_EV_IRQHandler+0x92>
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	0a5b      	lsrs	r3, r3, #9
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d006      	beq.n	800505e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f001 fc55 	bl	8006900 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fd62 	bl	8005b20 <I2C_Master_SB>
 800505c:	e08e      	b.n	800517c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	08db      	lsrs	r3, r3, #3
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <HAL_I2C_EV_IRQHandler+0xb2>
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	0a5b      	lsrs	r3, r3, #9
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fdd8 	bl	8005c2c <I2C_Master_ADD10>
 800507c:	e07e      	b.n	800517c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d009      	beq.n	800509e <HAL_I2C_EV_IRQHandler+0xd2>
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	0a5b      	lsrs	r3, r3, #9
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fdf2 	bl	8005c80 <I2C_Master_ADDR>
 800509c:	e06e      	b.n	800517c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	089b      	lsrs	r3, r3, #2
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d037      	beq.n	800511a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b8:	f000 80ef 	beq.w	800529a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	09db      	lsrs	r3, r3, #7
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00f      	beq.n	80050e8 <HAL_I2C_EV_IRQHandler+0x11c>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	0a9b      	lsrs	r3, r3, #10
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d009      	beq.n	80050e8 <HAL_I2C_EV_IRQHandler+0x11c>
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	089b      	lsrs	r3, r3, #2
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d103      	bne.n	80050e8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f9ef 	bl	80054c4 <I2C_MasterTransmit_TXE>
 80050e6:	e049      	b.n	800517c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	089b      	lsrs	r3, r3, #2
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 80d2 	beq.w	800529a <HAL_I2C_EV_IRQHandler+0x2ce>
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	0a5b      	lsrs	r3, r3, #9
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 80cb 	beq.w	800529a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	2b10      	cmp	r3, #16
 8005108:	d103      	bne.n	8005112 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fa76 	bl	80055fc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005110:	e0c3      	b.n	800529a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fada 	bl	80056cc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005118:	e0bf      	b.n	800529a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005128:	f000 80b7 	beq.w	800529a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	099b      	lsrs	r3, r3, #6
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00f      	beq.n	8005158 <HAL_I2C_EV_IRQHandler+0x18c>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	0a9b      	lsrs	r3, r3, #10
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d009      	beq.n	8005158 <HAL_I2C_EV_IRQHandler+0x18c>
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	089b      	lsrs	r3, r3, #2
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fb4a 	bl	80057ea <I2C_MasterReceive_RXNE>
 8005156:	e011      	b.n	800517c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	089b      	lsrs	r3, r3, #2
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 809a 	beq.w	800529a <HAL_I2C_EV_IRQHandler+0x2ce>
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	0a5b      	lsrs	r3, r3, #9
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8093 	beq.w	800529a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fbe9 	bl	800594c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800517a:	e08e      	b.n	800529a <HAL_I2C_EV_IRQHandler+0x2ce>
 800517c:	e08d      	b.n	800529a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d004      	beq.n	8005190 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	e007      	b.n	80051a0 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	085b      	lsrs	r3, r3, #1
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d012      	beq.n	80051d2 <HAL_I2C_EV_IRQHandler+0x206>
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	0a5b      	lsrs	r3, r3, #9
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00c      	beq.n	80051d2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80051c8:	69b9      	ldr	r1, [r7, #24]
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 ffa7 	bl	800611e <I2C_Slave_ADDR>
 80051d0:	e066      	b.n	80052a0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	091b      	lsrs	r3, r3, #4
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <HAL_I2C_EV_IRQHandler+0x226>
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	0a5b      	lsrs	r3, r3, #9
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 ffdc 	bl	80061a8 <I2C_Slave_STOPF>
 80051f0:	e056      	b.n	80052a0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051f2:	7bbb      	ldrb	r3, [r7, #14]
 80051f4:	2b21      	cmp	r3, #33	; 0x21
 80051f6:	d002      	beq.n	80051fe <HAL_I2C_EV_IRQHandler+0x232>
 80051f8:	7bbb      	ldrb	r3, [r7, #14]
 80051fa:	2b29      	cmp	r3, #41	; 0x29
 80051fc:	d125      	bne.n	800524a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	09db      	lsrs	r3, r3, #7
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00f      	beq.n	800522a <HAL_I2C_EV_IRQHandler+0x25e>
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	0a9b      	lsrs	r3, r3, #10
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <HAL_I2C_EV_IRQHandler+0x25e>
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	089b      	lsrs	r3, r3, #2
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d103      	bne.n	800522a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 febd 	bl	8005fa2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005228:	e039      	b.n	800529e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	089b      	lsrs	r3, r3, #2
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d033      	beq.n	800529e <HAL_I2C_EV_IRQHandler+0x2d2>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	0a5b      	lsrs	r3, r3, #9
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d02d      	beq.n	800529e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 feea 	bl	800601c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005248:	e029      	b.n	800529e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	099b      	lsrs	r3, r3, #6
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00f      	beq.n	8005276 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	0a9b      	lsrs	r3, r3, #10
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d009      	beq.n	8005276 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	089b      	lsrs	r3, r3, #2
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d103      	bne.n	8005276 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fef5 	bl	800605e <I2C_SlaveReceive_RXNE>
 8005274:	e014      	b.n	80052a0 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	089b      	lsrs	r3, r3, #2
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00e      	beq.n	80052a0 <HAL_I2C_EV_IRQHandler+0x2d4>
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	0a5b      	lsrs	r3, r3, #9
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d008      	beq.n	80052a0 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 ff23 	bl	80060da <I2C_SlaveReceive_BTF>
 8005294:	e004      	b.n	80052a0 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8005296:	bf00      	nop
 8005298:	e002      	b.n	80052a0 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800529a:	bf00      	nop
 800529c:	e000      	b.n	80052a0 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800529e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b08a      	sub	sp, #40	; 0x28
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80052be:	2300      	movs	r3, #0
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052c8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	0a1b      	lsrs	r3, r3, #8
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00e      	beq.n	80052f4 <HAL_I2C_ER_IRQHandler+0x4e>
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	0a1b      	lsrs	r3, r3, #8
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d008      	beq.n	80052f4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052f2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	0a5b      	lsrs	r3, r3, #9
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00e      	beq.n	800531e <HAL_I2C_ER_IRQHandler+0x78>
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	0a1b      	lsrs	r3, r3, #8
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	f043 0302 	orr.w	r3, r3, #2
 8005312:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800531c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	0a9b      	lsrs	r3, r3, #10
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d03f      	beq.n	80053aa <HAL_I2C_ER_IRQHandler+0x104>
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	0a1b      	lsrs	r3, r3, #8
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d039      	beq.n	80053aa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005336:	7efb      	ldrb	r3, [r7, #27]
 8005338:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005348:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005350:	7ebb      	ldrb	r3, [r7, #26]
 8005352:	2b20      	cmp	r3, #32
 8005354:	d112      	bne.n	800537c <HAL_I2C_ER_IRQHandler+0xd6>
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10f      	bne.n	800537c <HAL_I2C_ER_IRQHandler+0xd6>
 800535c:	7cfb      	ldrb	r3, [r7, #19]
 800535e:	2b21      	cmp	r3, #33	; 0x21
 8005360:	d008      	beq.n	8005374 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005362:	7cfb      	ldrb	r3, [r7, #19]
 8005364:	2b29      	cmp	r3, #41	; 0x29
 8005366:	d005      	beq.n	8005374 <HAL_I2C_ER_IRQHandler+0xce>
 8005368:	7cfb      	ldrb	r3, [r7, #19]
 800536a:	2b28      	cmp	r3, #40	; 0x28
 800536c:	d106      	bne.n	800537c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b21      	cmp	r3, #33	; 0x21
 8005372:	d103      	bne.n	800537c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f001 f847 	bl	8006408 <I2C_Slave_AF>
 800537a:	e016      	b.n	80053aa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005384:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	f043 0304 	orr.w	r3, r3, #4
 800538c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800538e:	7efb      	ldrb	r3, [r7, #27]
 8005390:	2b10      	cmp	r3, #16
 8005392:	d002      	beq.n	800539a <HAL_I2C_ER_IRQHandler+0xf4>
 8005394:	7efb      	ldrb	r3, [r7, #27]
 8005396:	2b40      	cmp	r3, #64	; 0x40
 8005398:	d107      	bne.n	80053aa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053a8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	0adb      	lsrs	r3, r3, #11
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00e      	beq.n	80053d4 <HAL_I2C_ER_IRQHandler+0x12e>
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	0a1b      	lsrs	r3, r3, #8
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	f043 0308 	orr.w	r3, r3, #8
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80053d2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	431a      	orrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f001 f87e 	bl	80064e8 <I2C_ITError>
  }
}
 80053ec:	bf00      	nop
 80053ee:	3728      	adds	r7, #40	; 0x28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
 8005450:	4613      	mov	r3, r2
 8005452:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d150      	bne.n	800558c <I2C_MasterTransmit_TXE+0xc8>
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
 80054ec:	2b21      	cmp	r3, #33	; 0x21
 80054ee:	d14d      	bne.n	800558c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d01d      	beq.n	8005532 <I2C_MasterTransmit_TXE+0x6e>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d01a      	beq.n	8005532 <I2C_MasterTransmit_TXE+0x6e>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005502:	d016      	beq.n	8005532 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005512:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2211      	movs	r2, #17
 8005518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7ff ff62 	bl	80053f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005530:	e060      	b.n	80055f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005540:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005550:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b40      	cmp	r3, #64	; 0x40
 800556a:	d107      	bne.n	800557c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff ff7d 	bl	8005474 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800557a:	e03b      	b.n	80055f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff ff35 	bl	80053f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800558a:	e033      	b.n	80055f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800558c:	7bfb      	ldrb	r3, [r7, #15]
 800558e:	2b21      	cmp	r3, #33	; 0x21
 8005590:	d005      	beq.n	800559e <I2C_MasterTransmit_TXE+0xda>
 8005592:	7bbb      	ldrb	r3, [r7, #14]
 8005594:	2b40      	cmp	r3, #64	; 0x40
 8005596:	d12d      	bne.n	80055f4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b22      	cmp	r3, #34	; 0x22
 800559c:	d12a      	bne.n	80055f4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d108      	bne.n	80055ba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80055b8:	e01c      	b.n	80055f4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b40      	cmp	r3, #64	; 0x40
 80055c4:	d103      	bne.n	80055ce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f880 	bl	80056cc <I2C_MemoryTransmit_TXE_BTF>
}
 80055cc:	e012      	b.n	80055f4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	781a      	ldrb	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055f2:	e7ff      	b.n	80055f4 <I2C_MasterTransmit_TXE+0x130>
 80055f4:	bf00      	nop
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b21      	cmp	r3, #33	; 0x21
 8005614:	d156      	bne.n	80056c4 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561a:	b29b      	uxth	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d012      	beq.n	8005646 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	781a      	ldrb	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005644:	e03e      	b.n	80056c4 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b08      	cmp	r3, #8
 800564a:	d01d      	beq.n	8005688 <I2C_MasterTransmit_BTF+0x8c>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b20      	cmp	r3, #32
 8005650:	d01a      	beq.n	8005688 <I2C_MasterTransmit_BTF+0x8c>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005658:	d016      	beq.n	8005688 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005668:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2211      	movs	r2, #17
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff feb7 	bl	80053f4 <HAL_I2C_MasterTxCpltCallback>
}
 8005686:	e01d      	b.n	80056c4 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005696:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff fe98 	bl	80053f4 <HAL_I2C_MasterTxCpltCallback>
}
 80056c4:	bf00      	nop
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d11d      	bne.n	8005720 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d10b      	bne.n	8005704 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fc:	1c9a      	adds	r2, r3, #2
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005702:	e06e      	b.n	80057e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005708:	b29b      	uxth	r3, r3
 800570a:	121b      	asrs	r3, r3, #8
 800570c:	b2da      	uxtb	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800571e:	e060      	b.n	80057e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005724:	2b01      	cmp	r3, #1
 8005726:	d10b      	bne.n	8005740 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800572c:	b2da      	uxtb	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800573e:	e050      	b.n	80057e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005744:	2b02      	cmp	r3, #2
 8005746:	d14c      	bne.n	80057e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	2b22      	cmp	r3, #34	; 0x22
 800574c:	d108      	bne.n	8005760 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800575c:	601a      	str	r2, [r3, #0]
}
 800575e:	e040      	b.n	80057e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d015      	beq.n	8005796 <I2C_MemoryTransmit_TXE_BTF+0xca>
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	2b21      	cmp	r3, #33	; 0x21
 800576e:	d112      	bne.n	8005796 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	781a      	ldrb	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578a:	b29b      	uxth	r3, r3
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005794:	e025      	b.n	80057e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d120      	bne.n	80057e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b21      	cmp	r3, #33	; 0x21
 80057a4:	d11d      	bne.n	80057e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057b4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff fe49 	bl	8005474 <HAL_I2C_MemTxCpltCallback>
}
 80057e2:	bf00      	nop
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b22      	cmp	r3, #34	; 0x22
 80057fc:	f040 80a2 	bne.w	8005944 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b03      	cmp	r3, #3
 800580c:	d921      	bls.n	8005852 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b03      	cmp	r3, #3
 800583c:	f040 8082 	bne.w	8005944 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005850:	e078      	b.n	8005944 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	2b02      	cmp	r3, #2
 8005858:	d074      	beq.n	8005944 <I2C_MasterReceive_RXNE+0x15a>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d002      	beq.n	8005866 <I2C_MasterReceive_RXNE+0x7c>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d16e      	bne.n	8005944 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f001 f818 	bl	800689c <I2C_WaitOnSTOPRequestThroughIT>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d142      	bne.n	80058f8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005880:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005890:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b40      	cmp	r3, #64	; 0x40
 80058ca:	d10a      	bne.n	80058e2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff fdd4 	bl	8005488 <HAL_I2C_MemRxCpltCallback>
}
 80058e0:	e030      	b.n	8005944 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2212      	movs	r2, #18
 80058ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff fd89 	bl	8005408 <HAL_I2C_MasterRxCpltCallback>
}
 80058f6:	e025      	b.n	8005944 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005906:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691a      	ldr	r2, [r3, #16]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff fdac 	bl	800549c <HAL_I2C_ErrorCallback>
}
 8005944:	bf00      	nop
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b04      	cmp	r3, #4
 8005962:	d11b      	bne.n	800599c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005972:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800599a:	e0bd      	b.n	8005b18 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d129      	bne.n	80059fa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d00a      	beq.n	80059d2 <I2C_MasterReceive_BTF+0x86>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d007      	beq.n	80059d2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	3b01      	subs	r3, #1
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80059f8:	e08e      	b.n	8005b18 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d176      	bne.n	8005af2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d002      	beq.n	8005a10 <I2C_MasterReceive_BTF+0xc4>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b10      	cmp	r3, #16
 8005a0e:	d108      	bne.n	8005a22 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	e019      	b.n	8005a56 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d002      	beq.n	8005a2e <I2C_MasterReceive_BTF+0xe2>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d108      	bne.n	8005a40 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	e00a      	b.n	8005a56 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b10      	cmp	r3, #16
 8005a44:	d007      	beq.n	8005a56 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a54:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691a      	ldr	r2, [r3, #16]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005ab0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b40      	cmp	r3, #64	; 0x40
 8005ac4:	d10a      	bne.n	8005adc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff fcd7 	bl	8005488 <HAL_I2C_MemRxCpltCallback>
}
 8005ada:	e01d      	b.n	8005b18 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2212      	movs	r2, #18
 8005ae8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff fc8c 	bl	8005408 <HAL_I2C_MasterRxCpltCallback>
}
 8005af0:	e012      	b.n	8005b18 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b18:	bf00      	nop
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d117      	bne.n	8005b64 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d109      	bne.n	8005b50 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	461a      	mov	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b4c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005b4e:	e067      	b.n	8005c20 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	611a      	str	r2, [r3, #16]
}
 8005b62:	e05d      	b.n	8005c20 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b6c:	d133      	bne.n	8005bd6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b21      	cmp	r3, #33	; 0x21
 8005b78:	d109      	bne.n	8005b8e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b8a:	611a      	str	r2, [r3, #16]
 8005b8c:	e008      	b.n	8005ba0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d004      	beq.n	8005bb2 <I2C_Master_SB+0x92>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d108      	bne.n	8005bc4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d032      	beq.n	8005c20 <I2C_Master_SB+0x100>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d02d      	beq.n	8005c20 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bd2:	605a      	str	r2, [r3, #4]
}
 8005bd4:	e024      	b.n	8005c20 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10e      	bne.n	8005bfc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	11db      	asrs	r3, r3, #7
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f003 0306 	and.w	r3, r3, #6
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	f063 030f 	orn	r3, r3, #15
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	611a      	str	r2, [r3, #16]
}
 8005bfa:	e011      	b.n	8005c20 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d10d      	bne.n	8005c20 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	11db      	asrs	r3, r3, #7
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	f003 0306 	and.w	r3, r3, #6
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	f063 030e 	orn	r3, r3, #14
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	611a      	str	r2, [r3, #16]
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d103      	bne.n	8005c50 <I2C_Master_ADD10+0x24>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d011      	beq.n	8005c74 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d104      	bne.n	8005c64 <I2C_Master_ADD10+0x38>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c72:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b091      	sub	sp, #68	; 0x44
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b22      	cmp	r3, #34	; 0x22
 8005ca8:	f040 8169 	bne.w	8005f7e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10f      	bne.n	8005cd4 <I2C_Master_ADDR+0x54>
 8005cb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005cb8:	2b40      	cmp	r3, #64	; 0x40
 8005cba:	d10b      	bne.n	8005cd4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	633b      	str	r3, [r7, #48]	; 0x30
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	e160      	b.n	8005f96 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d11d      	bne.n	8005d18 <I2C_Master_ADDR+0x98>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ce4:	d118      	bne.n	8005d18 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d0a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	651a      	str	r2, [r3, #80]	; 0x50
 8005d16:	e13e      	b.n	8005f96 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d113      	bne.n	8005d4a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d22:	2300      	movs	r3, #0
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	e115      	b.n	8005f76 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	f040 808a 	bne.w	8005e6a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d5c:	d137      	bne.n	8005dce <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d6c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d7c:	d113      	bne.n	8005da6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d8c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d8e:	2300      	movs	r3, #0
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	e0e7      	b.n	8005f76 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da6:	2300      	movs	r3, #0
 8005da8:	623b      	str	r3, [r7, #32]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	623b      	str	r3, [r7, #32]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	623b      	str	r3, [r7, #32]
 8005dba:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e0d3      	b.n	8005f76 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d02e      	beq.n	8005e32 <I2C_Master_ADDR+0x1b2>
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d02b      	beq.n	8005e32 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ddc:	2b12      	cmp	r3, #18
 8005dde:	d102      	bne.n	8005de6 <I2C_Master_ADDR+0x166>
 8005de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d125      	bne.n	8005e32 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d00e      	beq.n	8005e0a <I2C_Master_ADDR+0x18a>
 8005dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d00b      	beq.n	8005e0a <I2C_Master_ADDR+0x18a>
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	2b10      	cmp	r3, #16
 8005df6:	d008      	beq.n	8005e0a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	e007      	b.n	8005e1a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e18:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	61fb      	str	r3, [r7, #28]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	e0a1      	b.n	8005f76 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e40:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e42:	2300      	movs	r3, #0
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	e085      	b.n	8005f76 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d14d      	bne.n	8005f10 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d016      	beq.n	8005ea8 <I2C_Master_ADDR+0x228>
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d013      	beq.n	8005ea8 <I2C_Master_ADDR+0x228>
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	2b10      	cmp	r3, #16
 8005e84:	d010      	beq.n	8005ea8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e94:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e007      	b.n	8005eb8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005eb6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec6:	d117      	bne.n	8005ef8 <I2C_Master_ADDR+0x278>
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ece:	d00b      	beq.n	8005ee8 <I2C_Master_ADDR+0x268>
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d008      	beq.n	8005ee8 <I2C_Master_ADDR+0x268>
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d005      	beq.n	8005ee8 <I2C_Master_ADDR+0x268>
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	2b10      	cmp	r3, #16
 8005ee0:	d002      	beq.n	8005ee8 <I2C_Master_ADDR+0x268>
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	d107      	bne.n	8005ef8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ef6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	e032      	b.n	8005f76 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f1e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2e:	d117      	bne.n	8005f60 <I2C_Master_ADDR+0x2e0>
 8005f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f36:	d00b      	beq.n	8005f50 <I2C_Master_ADDR+0x2d0>
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d008      	beq.n	8005f50 <I2C_Master_ADDR+0x2d0>
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d005      	beq.n	8005f50 <I2C_Master_ADDR+0x2d0>
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d002      	beq.n	8005f50 <I2C_Master_ADDR+0x2d0>
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	2b20      	cmp	r3, #32
 8005f4e:	d107      	bne.n	8005f60 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f5e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f60:	2300      	movs	r3, #0
 8005f62:	613b      	str	r3, [r7, #16]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	613b      	str	r3, [r7, #16]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005f7c:	e00b      	b.n	8005f96 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	68fb      	ldr	r3, [r7, #12]
}
 8005f94:	e7ff      	b.n	8005f96 <I2C_Master_ADDR+0x316>
 8005f96:	bf00      	nop
 8005f98:	3744      	adds	r7, #68	; 0x44
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d02b      	beq.n	8006014 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	781a      	ldrb	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d114      	bne.n	8006014 <I2C_SlaveTransmit_TXE+0x72>
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b29      	cmp	r3, #41	; 0x29
 8005fee:	d111      	bne.n	8006014 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ffe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2221      	movs	r2, #33	; 0x21
 8006004:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2228      	movs	r2, #40	; 0x28
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff fa04 	bl	800541c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d011      	beq.n	8006052 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	781a      	ldrb	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800606c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d02c      	beq.n	80060d2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691a      	ldr	r2, [r3, #16]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d114      	bne.n	80060d2 <I2C_SlaveReceive_RXNE+0x74>
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	2b2a      	cmp	r3, #42	; 0x2a
 80060ac:	d111      	bne.n	80060d2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2222      	movs	r2, #34	; 0x22
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2228      	movs	r2, #40	; 0x28
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff f9af 	bl	8005430 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80060d2:	bf00      	nop
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d012      	beq.n	8006112 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006128:	2300      	movs	r3, #0
 800612a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006132:	b2db      	uxtb	r3, r3
 8006134:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006138:	2b28      	cmp	r3, #40	; 0x28
 800613a:	d127      	bne.n	800618c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800614a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	089b      	lsrs	r3, r3, #2
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006158:	2301      	movs	r3, #1
 800615a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	09db      	lsrs	r3, r3, #7
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d103      	bne.n	8006170 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	81bb      	strh	r3, [r7, #12]
 800616e:	e002      	b.n	8006176 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800617e:	89ba      	ldrh	r2, [r7, #12]
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff f95d 	bl	8005444 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800618a:	e008      	b.n	800619e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0202 	mvn.w	r2, #2
 8006194:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800619e:	bf00      	nop
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061c6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80061c8:	2300      	movs	r3, #0
 80061ca:	60bb      	str	r3, [r7, #8]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	60bb      	str	r3, [r7, #8]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006204:	d172      	bne.n	80062ec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006206:	7bfb      	ldrb	r3, [r7, #15]
 8006208:	2b22      	cmp	r3, #34	; 0x22
 800620a:	d002      	beq.n	8006212 <I2C_Slave_STOPF+0x6a>
 800620c:	7bfb      	ldrb	r3, [r7, #15]
 800620e:	2b2a      	cmp	r3, #42	; 0x2a
 8006210:	d135      	bne.n	800627e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	b29a      	uxth	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	f043 0204 	orr.w	r2, r3, #4
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006244:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fa26 	bl	800469c <HAL_DMA_GetState>
 8006250:	4603      	mov	r3, r0
 8006252:	2b01      	cmp	r3, #1
 8006254:	d049      	beq.n	80062ea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	4a69      	ldr	r2, [pc, #420]	; (8006400 <I2C_Slave_STOPF+0x258>)
 800625c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe f86e 	bl	8004344 <HAL_DMA_Abort_IT>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d03d      	beq.n	80062ea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006278:	4610      	mov	r0, r2
 800627a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800627c:	e035      	b.n	80062ea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	b29a      	uxth	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006290:	b29b      	uxth	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d005      	beq.n	80062a2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	f043 0204 	orr.w	r2, r3, #4
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe f9f0 	bl	800469c <HAL_DMA_GetState>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d014      	beq.n	80062ec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c6:	4a4e      	ldr	r2, [pc, #312]	; (8006400 <I2C_Slave_STOPF+0x258>)
 80062c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fe f838 	bl	8004344 <HAL_DMA_Abort_IT>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d008      	beq.n	80062ec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062e4:	4610      	mov	r0, r2
 80062e6:	4798      	blx	r3
 80062e8:	e000      	b.n	80062ec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062ea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d03e      	beq.n	8006374 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b04      	cmp	r3, #4
 8006302:	d112      	bne.n	800632a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006320:	b29b      	uxth	r3, r3
 8006322:	3b01      	subs	r3, #1
 8006324:	b29a      	uxth	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006334:	2b40      	cmp	r3, #64	; 0x40
 8006336:	d112      	bne.n	800635e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691a      	ldr	r2, [r3, #16]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	f043 0204 	orr.w	r2, r3, #4
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f8b3 	bl	80064e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006382:	e039      	b.n	80063f8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	2b2a      	cmp	r3, #42	; 0x2a
 8006388:	d109      	bne.n	800639e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2228      	movs	r2, #40	; 0x28
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7ff f849 	bl	8005430 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b28      	cmp	r3, #40	; 0x28
 80063a8:	d111      	bne.n	80063ce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a15      	ldr	r2, [pc, #84]	; (8006404 <I2C_Slave_STOPF+0x25c>)
 80063ae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff f84a 	bl	8005460 <HAL_I2C_ListenCpltCallback>
}
 80063cc:	e014      	b.n	80063f8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	2b22      	cmp	r3, #34	; 0x22
 80063d4:	d002      	beq.n	80063dc <I2C_Slave_STOPF+0x234>
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	2b22      	cmp	r3, #34	; 0x22
 80063da:	d10d      	bne.n	80063f8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff f81c 	bl	8005430 <HAL_I2C_SlaveRxCpltCallback>
}
 80063f8:	bf00      	nop
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	0800674d 	.word	0x0800674d
 8006404:	ffff0000 	.word	0xffff0000

08006408 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006416:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b08      	cmp	r3, #8
 8006422:	d002      	beq.n	800642a <I2C_Slave_AF+0x22>
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b20      	cmp	r3, #32
 8006428:	d129      	bne.n	800647e <I2C_Slave_AF+0x76>
 800642a:	7bfb      	ldrb	r3, [r7, #15]
 800642c:	2b28      	cmp	r3, #40	; 0x28
 800642e:	d126      	bne.n	800647e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a2c      	ldr	r2, [pc, #176]	; (80064e4 <I2C_Slave_AF+0xdc>)
 8006434:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006444:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800644e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800645e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fe fff2 	bl	8005460 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800647c:	e02e      	b.n	80064dc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2b21      	cmp	r3, #33	; 0x21
 8006482:	d126      	bne.n	80064d2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a17      	ldr	r2, [pc, #92]	; (80064e4 <I2C_Slave_AF+0xdc>)
 8006488:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2221      	movs	r2, #33	; 0x21
 800648e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064ae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064b8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fe ffa6 	bl	800541c <HAL_I2C_SlaveTxCpltCallback>
}
 80064d0:	e004      	b.n	80064dc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064da:	615a      	str	r2, [r3, #20]
}
 80064dc:	bf00      	nop
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	ffff0000 	.word	0xffff0000

080064e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	2b10      	cmp	r3, #16
 8006504:	d002      	beq.n	800650c <I2C_ITError+0x24>
 8006506:	7bbb      	ldrb	r3, [r7, #14]
 8006508:	2b40      	cmp	r3, #64	; 0x40
 800650a:	d10a      	bne.n	8006522 <I2C_ITError+0x3a>
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	2b22      	cmp	r3, #34	; 0x22
 8006510:	d107      	bne.n	8006522 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006520:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006528:	2b28      	cmp	r3, #40	; 0x28
 800652a:	d107      	bne.n	800653c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2228      	movs	r2, #40	; 0x28
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800653a:	e015      	b.n	8006568 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800654a:	d00a      	beq.n	8006562 <I2C_ITError+0x7a>
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	2b60      	cmp	r3, #96	; 0x60
 8006550:	d007      	beq.n	8006562 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2220      	movs	r2, #32
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006576:	d162      	bne.n	800663e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006586:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b01      	cmp	r3, #1
 8006594:	d020      	beq.n	80065d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659a:	4a6a      	ldr	r2, [pc, #424]	; (8006744 <I2C_ITError+0x25c>)
 800659c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fd fece 	bl	8004344 <HAL_DMA_Abort_IT>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 8089 	beq.w	80066c2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0201 	bic.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065d2:	4610      	mov	r0, r2
 80065d4:	4798      	blx	r3
 80065d6:	e074      	b.n	80066c2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	4a59      	ldr	r2, [pc, #356]	; (8006744 <I2C_ITError+0x25c>)
 80065de:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fd fead 	bl	8004344 <HAL_DMA_Abort_IT>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d068      	beq.n	80066c2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fa:	2b40      	cmp	r3, #64	; 0x40
 80065fc:	d10b      	bne.n	8006616 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	691a      	ldr	r2, [r3, #16]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0201 	bic.w	r2, r2, #1
 8006624:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2220      	movs	r2, #32
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006638:	4610      	mov	r0, r2
 800663a:	4798      	blx	r3
 800663c:	e041      	b.n	80066c2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b60      	cmp	r3, #96	; 0x60
 8006648:	d125      	bne.n	8006696 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2220      	movs	r2, #32
 800664e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d10b      	bne.n	800667e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691a      	ldr	r2, [r3, #16]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0201 	bic.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7fe ff0e 	bl	80054b0 <HAL_I2C_AbortCpltCallback>
 8006694:	e015      	b.n	80066c2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a0:	2b40      	cmp	r3, #64	; 0x40
 80066a2:	d10b      	bne.n	80066bc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7fe feed 	bl	800549c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10e      	bne.n	80066f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d109      	bne.n	80066f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066fe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006706:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b04      	cmp	r3, #4
 8006712:	d113      	bne.n	800673c <I2C_ITError+0x254>
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	2b28      	cmp	r3, #40	; 0x28
 8006718:	d110      	bne.n	800673c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a0a      	ldr	r2, [pc, #40]	; (8006748 <I2C_ITError+0x260>)
 800671e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7fe fe92 	bl	8005460 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	0800674d 	.word	0x0800674d
 8006748:	ffff0000 	.word	0xffff0000

0800674c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006764:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006766:	4b4b      	ldr	r3, [pc, #300]	; (8006894 <I2C_DMAAbort+0x148>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	08db      	lsrs	r3, r3, #3
 800676c:	4a4a      	ldr	r2, [pc, #296]	; (8006898 <I2C_DMAAbort+0x14c>)
 800676e:	fba2 2303 	umull	r2, r3, r2, r3
 8006772:	0a1a      	lsrs	r2, r3, #8
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	00da      	lsls	r2, r3, #3
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	f043 0220 	orr.w	r2, r3, #32
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006792:	e00a      	b.n	80067aa <I2C_DMAAbort+0x5e>
    }
    count--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3b01      	subs	r3, #1
 8006798:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a8:	d0ea      	beq.n	8006780 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b6:	2200      	movs	r2, #0
 80067b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	2200      	movs	r2, #0
 80067c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2200      	movs	r2, #0
 80067de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ec:	2200      	movs	r2, #0
 80067ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d003      	beq.n	8006800 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	2200      	movs	r2, #0
 80067fe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0201 	bic.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b60      	cmp	r3, #96	; 0x60
 800681a:	d10e      	bne.n	800683a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	2220      	movs	r2, #32
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	2200      	movs	r2, #0
 8006830:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006832:	6978      	ldr	r0, [r7, #20]
 8006834:	f7fe fe3c 	bl	80054b0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006838:	e027      	b.n	800688a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800683a:	7cfb      	ldrb	r3, [r7, #19]
 800683c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006840:	2b28      	cmp	r3, #40	; 0x28
 8006842:	d117      	bne.n	8006874 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0201 	orr.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006862:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2200      	movs	r2, #0
 8006868:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2228      	movs	r2, #40	; 0x28
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006872:	e007      	b.n	8006884 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006884:	6978      	ldr	r0, [r7, #20]
 8006886:	f7fe fe09 	bl	800549c <HAL_I2C_ErrorCallback>
}
 800688a:	bf00      	nop
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	2000003c 	.word	0x2000003c
 8006898:	14f8b589 	.word	0x14f8b589

0800689c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80068a8:	4b13      	ldr	r3, [pc, #76]	; (80068f8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	08db      	lsrs	r3, r3, #3
 80068ae:	4a13      	ldr	r2, [pc, #76]	; (80068fc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80068b0:	fba2 2303 	umull	r2, r3, r2, r3
 80068b4:	0a1a      	lsrs	r2, r3, #8
 80068b6:	4613      	mov	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d107      	bne.n	80068da <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f043 0220 	orr.w	r2, r3, #32
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e008      	b.n	80068ec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e8:	d0e9      	beq.n	80068be <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	2000003c 	.word	0x2000003c
 80068fc:	14f8b589 	.word	0x14f8b589

08006900 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006910:	d103      	bne.n	800691a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006918:	e007      	b.n	800692a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006922:	d102      	bne.n	800692a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2208      	movs	r2, #8
 8006928:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e25b      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d075      	beq.n	8006a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006956:	4ba3      	ldr	r3, [pc, #652]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 030c 	and.w	r3, r3, #12
 800695e:	2b04      	cmp	r3, #4
 8006960:	d00c      	beq.n	800697c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006962:	4ba0      	ldr	r3, [pc, #640]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800696a:	2b08      	cmp	r3, #8
 800696c:	d112      	bne.n	8006994 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800696e:	4b9d      	ldr	r3, [pc, #628]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800697a:	d10b      	bne.n	8006994 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800697c:	4b99      	ldr	r3, [pc, #612]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d05b      	beq.n	8006a40 <HAL_RCC_OscConfig+0x108>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d157      	bne.n	8006a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e236      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800699c:	d106      	bne.n	80069ac <HAL_RCC_OscConfig+0x74>
 800699e:	4b91      	ldr	r3, [pc, #580]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a90      	ldr	r2, [pc, #576]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	e01d      	b.n	80069e8 <HAL_RCC_OscConfig+0xb0>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069b4:	d10c      	bne.n	80069d0 <HAL_RCC_OscConfig+0x98>
 80069b6:	4b8b      	ldr	r3, [pc, #556]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a8a      	ldr	r2, [pc, #552]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	4b88      	ldr	r3, [pc, #544]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a87      	ldr	r2, [pc, #540]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069cc:	6013      	str	r3, [r2, #0]
 80069ce:	e00b      	b.n	80069e8 <HAL_RCC_OscConfig+0xb0>
 80069d0:	4b84      	ldr	r3, [pc, #528]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a83      	ldr	r2, [pc, #524]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	4b81      	ldr	r3, [pc, #516]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a80      	ldr	r2, [pc, #512]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 80069e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d013      	beq.n	8006a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f0:	f7fd fa62 	bl	8003eb8 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069f8:	f7fd fa5e 	bl	8003eb8 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b64      	cmp	r3, #100	; 0x64
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e1fb      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0a:	4b76      	ldr	r3, [pc, #472]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0f0      	beq.n	80069f8 <HAL_RCC_OscConfig+0xc0>
 8006a16:	e014      	b.n	8006a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a18:	f7fd fa4e 	bl	8003eb8 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a20:	f7fd fa4a 	bl	8003eb8 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b64      	cmp	r3, #100	; 0x64
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e1e7      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a32:	4b6c      	ldr	r3, [pc, #432]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1f0      	bne.n	8006a20 <HAL_RCC_OscConfig+0xe8>
 8006a3e:	e000      	b.n	8006a42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d063      	beq.n	8006b16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a4e:	4b65      	ldr	r3, [pc, #404]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 030c 	and.w	r3, r3, #12
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00b      	beq.n	8006a72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a5a:	4b62      	ldr	r3, [pc, #392]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a62:	2b08      	cmp	r3, #8
 8006a64:	d11c      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a66:	4b5f      	ldr	r3, [pc, #380]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d116      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a72:	4b5c      	ldr	r3, [pc, #368]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d005      	beq.n	8006a8a <HAL_RCC_OscConfig+0x152>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d001      	beq.n	8006a8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e1bb      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a8a:	4b56      	ldr	r3, [pc, #344]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	4952      	ldr	r1, [pc, #328]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a9e:	e03a      	b.n	8006b16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d020      	beq.n	8006aea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006aa8:	4b4f      	ldr	r3, [pc, #316]	; (8006be8 <HAL_RCC_OscConfig+0x2b0>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aae:	f7fd fa03 	bl	8003eb8 <HAL_GetTick>
 8006ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ab6:	f7fd f9ff 	bl	8003eb8 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e19c      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac8:	4b46      	ldr	r3, [pc, #280]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0f0      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad4:	4b43      	ldr	r3, [pc, #268]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	4940      	ldr	r1, [pc, #256]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	600b      	str	r3, [r1, #0]
 8006ae8:	e015      	b.n	8006b16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aea:	4b3f      	ldr	r3, [pc, #252]	; (8006be8 <HAL_RCC_OscConfig+0x2b0>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af0:	f7fd f9e2 	bl	8003eb8 <HAL_GetTick>
 8006af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006af6:	e008      	b.n	8006b0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006af8:	f7fd f9de 	bl	8003eb8 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e17b      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b0a:	4b36      	ldr	r3, [pc, #216]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1f0      	bne.n	8006af8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d030      	beq.n	8006b84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d016      	beq.n	8006b58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b2a:	4b30      	ldr	r3, [pc, #192]	; (8006bec <HAL_RCC_OscConfig+0x2b4>)
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b30:	f7fd f9c2 	bl	8003eb8 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b38:	f7fd f9be 	bl	8003eb8 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e15b      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b4a:	4b26      	ldr	r3, [pc, #152]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0f0      	beq.n	8006b38 <HAL_RCC_OscConfig+0x200>
 8006b56:	e015      	b.n	8006b84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b58:	4b24      	ldr	r3, [pc, #144]	; (8006bec <HAL_RCC_OscConfig+0x2b4>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b5e:	f7fd f9ab 	bl	8003eb8 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b66:	f7fd f9a7 	bl	8003eb8 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e144      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b78:	4b1a      	ldr	r3, [pc, #104]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1f0      	bne.n	8006b66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0304 	and.w	r3, r3, #4
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 80a0 	beq.w	8006cd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b92:	2300      	movs	r3, #0
 8006b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b96:	4b13      	ldr	r3, [pc, #76]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10f      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60bb      	str	r3, [r7, #8]
 8006ba6:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	4a0e      	ldr	r2, [pc, #56]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <HAL_RCC_OscConfig+0x2ac>)
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bba:	60bb      	str	r3, [r7, #8]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc2:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <HAL_RCC_OscConfig+0x2b8>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d121      	bne.n	8006c12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bce:	4b08      	ldr	r3, [pc, #32]	; (8006bf0 <HAL_RCC_OscConfig+0x2b8>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a07      	ldr	r2, [pc, #28]	; (8006bf0 <HAL_RCC_OscConfig+0x2b8>)
 8006bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bda:	f7fd f96d 	bl	8003eb8 <HAL_GetTick>
 8006bde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006be0:	e011      	b.n	8006c06 <HAL_RCC_OscConfig+0x2ce>
 8006be2:	bf00      	nop
 8006be4:	40023800 	.word	0x40023800
 8006be8:	42470000 	.word	0x42470000
 8006bec:	42470e80 	.word	0x42470e80
 8006bf0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bf4:	f7fd f960 	bl	8003eb8 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e0fd      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c06:	4b81      	ldr	r3, [pc, #516]	; (8006e0c <HAL_RCC_OscConfig+0x4d4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0f0      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d106      	bne.n	8006c28 <HAL_RCC_OscConfig+0x2f0>
 8006c1a:	4b7d      	ldr	r3, [pc, #500]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1e:	4a7c      	ldr	r2, [pc, #496]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c20:	f043 0301 	orr.w	r3, r3, #1
 8006c24:	6713      	str	r3, [r2, #112]	; 0x70
 8006c26:	e01c      	b.n	8006c62 <HAL_RCC_OscConfig+0x32a>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	2b05      	cmp	r3, #5
 8006c2e:	d10c      	bne.n	8006c4a <HAL_RCC_OscConfig+0x312>
 8006c30:	4b77      	ldr	r3, [pc, #476]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c34:	4a76      	ldr	r2, [pc, #472]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c36:	f043 0304 	orr.w	r3, r3, #4
 8006c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c3c:	4b74      	ldr	r3, [pc, #464]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c40:	4a73      	ldr	r2, [pc, #460]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c42:	f043 0301 	orr.w	r3, r3, #1
 8006c46:	6713      	str	r3, [r2, #112]	; 0x70
 8006c48:	e00b      	b.n	8006c62 <HAL_RCC_OscConfig+0x32a>
 8006c4a:	4b71      	ldr	r3, [pc, #452]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4e:	4a70      	ldr	r2, [pc, #448]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c50:	f023 0301 	bic.w	r3, r3, #1
 8006c54:	6713      	str	r3, [r2, #112]	; 0x70
 8006c56:	4b6e      	ldr	r3, [pc, #440]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	4a6d      	ldr	r2, [pc, #436]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c5c:	f023 0304 	bic.w	r3, r3, #4
 8006c60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d015      	beq.n	8006c96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c6a:	f7fd f925 	bl	8003eb8 <HAL_GetTick>
 8006c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c70:	e00a      	b.n	8006c88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c72:	f7fd f921 	bl	8003eb8 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e0bc      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c88:	4b61      	ldr	r3, [pc, #388]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0ee      	beq.n	8006c72 <HAL_RCC_OscConfig+0x33a>
 8006c94:	e014      	b.n	8006cc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c96:	f7fd f90f 	bl	8003eb8 <HAL_GetTick>
 8006c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c9c:	e00a      	b.n	8006cb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c9e:	f7fd f90b 	bl	8003eb8 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e0a6      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cb4:	4b56      	ldr	r3, [pc, #344]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1ee      	bne.n	8006c9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d105      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cc6:	4b52      	ldr	r3, [pc, #328]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	4a51      	ldr	r2, [pc, #324]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 8092 	beq.w	8006e00 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cdc:	4b4c      	ldr	r3, [pc, #304]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f003 030c 	and.w	r3, r3, #12
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d05c      	beq.n	8006da2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d141      	bne.n	8006d74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cf0:	4b48      	ldr	r3, [pc, #288]	; (8006e14 <HAL_RCC_OscConfig+0x4dc>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf6:	f7fd f8df 	bl	8003eb8 <HAL_GetTick>
 8006cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cfc:	e008      	b.n	8006d10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cfe:	f7fd f8db 	bl	8003eb8 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e078      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d10:	4b3f      	ldr	r3, [pc, #252]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f0      	bne.n	8006cfe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	019b      	lsls	r3, r3, #6
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d32:	085b      	lsrs	r3, r3, #1
 8006d34:	3b01      	subs	r3, #1
 8006d36:	041b      	lsls	r3, r3, #16
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3e:	061b      	lsls	r3, r3, #24
 8006d40:	4933      	ldr	r1, [pc, #204]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d46:	4b33      	ldr	r3, [pc, #204]	; (8006e14 <HAL_RCC_OscConfig+0x4dc>)
 8006d48:	2201      	movs	r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d4c:	f7fd f8b4 	bl	8003eb8 <HAL_GetTick>
 8006d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d52:	e008      	b.n	8006d66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d54:	f7fd f8b0 	bl	8003eb8 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e04d      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d66:	4b2a      	ldr	r3, [pc, #168]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0f0      	beq.n	8006d54 <HAL_RCC_OscConfig+0x41c>
 8006d72:	e045      	b.n	8006e00 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d74:	4b27      	ldr	r3, [pc, #156]	; (8006e14 <HAL_RCC_OscConfig+0x4dc>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d7a:	f7fd f89d 	bl	8003eb8 <HAL_GetTick>
 8006d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d80:	e008      	b.n	8006d94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d82:	f7fd f899 	bl	8003eb8 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e036      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d94:	4b1e      	ldr	r3, [pc, #120]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1f0      	bne.n	8006d82 <HAL_RCC_OscConfig+0x44a>
 8006da0:	e02e      	b.n	8006e00 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e029      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006dae:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <HAL_RCC_OscConfig+0x4d8>)
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d11c      	bne.n	8006dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d115      	bne.n	8006dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d10d      	bne.n	8006dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d106      	bne.n	8006dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d001      	beq.n	8006e00 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e000      	b.n	8006e02 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	40007000 	.word	0x40007000
 8006e10:	40023800 	.word	0x40023800
 8006e14:	42470060 	.word	0x42470060

08006e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e0cc      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e2c:	4b68      	ldr	r3, [pc, #416]	; (8006fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d90c      	bls.n	8006e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e3a:	4b65      	ldr	r3, [pc, #404]	; (8006fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	b2d2      	uxtb	r2, r2
 8006e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e42:	4b63      	ldr	r3, [pc, #396]	; (8006fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 030f 	and.w	r3, r3, #15
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d001      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e0b8      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d020      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d005      	beq.n	8006e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e6c:	4b59      	ldr	r3, [pc, #356]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	4a58      	ldr	r2, [pc, #352]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0308 	and.w	r3, r3, #8
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e84:	4b53      	ldr	r3, [pc, #332]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	4a52      	ldr	r2, [pc, #328]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e90:	4b50      	ldr	r3, [pc, #320]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	494d      	ldr	r1, [pc, #308]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d044      	beq.n	8006f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d107      	bne.n	8006ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eb6:	4b47      	ldr	r3, [pc, #284]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d119      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e07f      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d003      	beq.n	8006ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d107      	bne.n	8006ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ed6:	4b3f      	ldr	r3, [pc, #252]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d109      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e06f      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ee6:	4b3b      	ldr	r3, [pc, #236]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e067      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ef6:	4b37      	ldr	r3, [pc, #220]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f023 0203 	bic.w	r2, r3, #3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	4934      	ldr	r1, [pc, #208]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f08:	f7fc ffd6 	bl	8003eb8 <HAL_GetTick>
 8006f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f0e:	e00a      	b.n	8006f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f10:	f7fc ffd2 	bl	8003eb8 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e04f      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f26:	4b2b      	ldr	r3, [pc, #172]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f003 020c 	and.w	r2, r3, #12
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d1eb      	bne.n	8006f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f38:	4b25      	ldr	r3, [pc, #148]	; (8006fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 030f 	and.w	r3, r3, #15
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d20c      	bcs.n	8006f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f46:	4b22      	ldr	r3, [pc, #136]	; (8006fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f4e:	4b20      	ldr	r3, [pc, #128]	; (8006fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d001      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e032      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d008      	beq.n	8006f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f6c:	4b19      	ldr	r3, [pc, #100]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	4916      	ldr	r1, [pc, #88]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d009      	beq.n	8006f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f8a:	4b12      	ldr	r3, [pc, #72]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	490e      	ldr	r1, [pc, #56]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f9e:	f000 f821 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8006fa2:	4601      	mov	r1, r0
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	091b      	lsrs	r3, r3, #4
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	4a0a      	ldr	r2, [pc, #40]	; (8006fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8006fb0:	5cd3      	ldrb	r3, [r2, r3]
 8006fb2:	fa21 f303 	lsr.w	r3, r1, r3
 8006fb6:	4a09      	ldr	r2, [pc, #36]	; (8006fdc <HAL_RCC_ClockConfig+0x1c4>)
 8006fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006fba:	4b09      	ldr	r3, [pc, #36]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fc ff36 	bl	8003e30 <HAL_InitTick>

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	40023c00 	.word	0x40023c00
 8006fd4:	40023800 	.word	0x40023800
 8006fd8:	0800a3c8 	.word	0x0800a3c8
 8006fdc:	2000003c 	.word	0x2000003c
 8006fe0:	20000040 	.word	0x20000040

08006fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	607b      	str	r3, [r7, #4]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ffa:	4b63      	ldr	r3, [pc, #396]	; (8007188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 030c 	and.w	r3, r3, #12
 8007002:	2b04      	cmp	r3, #4
 8007004:	d007      	beq.n	8007016 <HAL_RCC_GetSysClockFreq+0x32>
 8007006:	2b08      	cmp	r3, #8
 8007008:	d008      	beq.n	800701c <HAL_RCC_GetSysClockFreq+0x38>
 800700a:	2b00      	cmp	r3, #0
 800700c:	f040 80b4 	bne.w	8007178 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007010:	4b5e      	ldr	r3, [pc, #376]	; (800718c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007012:	60bb      	str	r3, [r7, #8]
       break;
 8007014:	e0b3      	b.n	800717e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007016:	4b5e      	ldr	r3, [pc, #376]	; (8007190 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007018:	60bb      	str	r3, [r7, #8]
      break;
 800701a:	e0b0      	b.n	800717e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800701c:	4b5a      	ldr	r3, [pc, #360]	; (8007188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007024:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007026:	4b58      	ldr	r3, [pc, #352]	; (8007188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d04a      	beq.n	80070c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007032:	4b55      	ldr	r3, [pc, #340]	; (8007188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	099b      	lsrs	r3, r3, #6
 8007038:	f04f 0400 	mov.w	r4, #0
 800703c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	ea03 0501 	and.w	r5, r3, r1
 8007048:	ea04 0602 	and.w	r6, r4, r2
 800704c:	4629      	mov	r1, r5
 800704e:	4632      	mov	r2, r6
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	f04f 0400 	mov.w	r4, #0
 8007058:	0154      	lsls	r4, r2, #5
 800705a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800705e:	014b      	lsls	r3, r1, #5
 8007060:	4619      	mov	r1, r3
 8007062:	4622      	mov	r2, r4
 8007064:	1b49      	subs	r1, r1, r5
 8007066:	eb62 0206 	sbc.w	r2, r2, r6
 800706a:	f04f 0300 	mov.w	r3, #0
 800706e:	f04f 0400 	mov.w	r4, #0
 8007072:	0194      	lsls	r4, r2, #6
 8007074:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007078:	018b      	lsls	r3, r1, #6
 800707a:	1a5b      	subs	r3, r3, r1
 800707c:	eb64 0402 	sbc.w	r4, r4, r2
 8007080:	f04f 0100 	mov.w	r1, #0
 8007084:	f04f 0200 	mov.w	r2, #0
 8007088:	00e2      	lsls	r2, r4, #3
 800708a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800708e:	00d9      	lsls	r1, r3, #3
 8007090:	460b      	mov	r3, r1
 8007092:	4614      	mov	r4, r2
 8007094:	195b      	adds	r3, r3, r5
 8007096:	eb44 0406 	adc.w	r4, r4, r6
 800709a:	f04f 0100 	mov.w	r1, #0
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	0262      	lsls	r2, r4, #9
 80070a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80070a8:	0259      	lsls	r1, r3, #9
 80070aa:	460b      	mov	r3, r1
 80070ac:	4614      	mov	r4, r2
 80070ae:	4618      	mov	r0, r3
 80070b0:	4621      	mov	r1, r4
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f04f 0400 	mov.w	r4, #0
 80070b8:	461a      	mov	r2, r3
 80070ba:	4623      	mov	r3, r4
 80070bc:	f7f9 fe56 	bl	8000d6c <__aeabi_uldivmod>
 80070c0:	4603      	mov	r3, r0
 80070c2:	460c      	mov	r4, r1
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	e049      	b.n	800715c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070c8:	4b2f      	ldr	r3, [pc, #188]	; (8007188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	099b      	lsrs	r3, r3, #6
 80070ce:	f04f 0400 	mov.w	r4, #0
 80070d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80070d6:	f04f 0200 	mov.w	r2, #0
 80070da:	ea03 0501 	and.w	r5, r3, r1
 80070de:	ea04 0602 	and.w	r6, r4, r2
 80070e2:	4629      	mov	r1, r5
 80070e4:	4632      	mov	r2, r6
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	f04f 0400 	mov.w	r4, #0
 80070ee:	0154      	lsls	r4, r2, #5
 80070f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80070f4:	014b      	lsls	r3, r1, #5
 80070f6:	4619      	mov	r1, r3
 80070f8:	4622      	mov	r2, r4
 80070fa:	1b49      	subs	r1, r1, r5
 80070fc:	eb62 0206 	sbc.w	r2, r2, r6
 8007100:	f04f 0300 	mov.w	r3, #0
 8007104:	f04f 0400 	mov.w	r4, #0
 8007108:	0194      	lsls	r4, r2, #6
 800710a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800710e:	018b      	lsls	r3, r1, #6
 8007110:	1a5b      	subs	r3, r3, r1
 8007112:	eb64 0402 	sbc.w	r4, r4, r2
 8007116:	f04f 0100 	mov.w	r1, #0
 800711a:	f04f 0200 	mov.w	r2, #0
 800711e:	00e2      	lsls	r2, r4, #3
 8007120:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007124:	00d9      	lsls	r1, r3, #3
 8007126:	460b      	mov	r3, r1
 8007128:	4614      	mov	r4, r2
 800712a:	195b      	adds	r3, r3, r5
 800712c:	eb44 0406 	adc.w	r4, r4, r6
 8007130:	f04f 0100 	mov.w	r1, #0
 8007134:	f04f 0200 	mov.w	r2, #0
 8007138:	02a2      	lsls	r2, r4, #10
 800713a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800713e:	0299      	lsls	r1, r3, #10
 8007140:	460b      	mov	r3, r1
 8007142:	4614      	mov	r4, r2
 8007144:	4618      	mov	r0, r3
 8007146:	4621      	mov	r1, r4
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f04f 0400 	mov.w	r4, #0
 800714e:	461a      	mov	r2, r3
 8007150:	4623      	mov	r3, r4
 8007152:	f7f9 fe0b 	bl	8000d6c <__aeabi_uldivmod>
 8007156:	4603      	mov	r3, r0
 8007158:	460c      	mov	r4, r1
 800715a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800715c:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	0c1b      	lsrs	r3, r3, #16
 8007162:	f003 0303 	and.w	r3, r3, #3
 8007166:	3301      	adds	r3, #1
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	fbb2 f3f3 	udiv	r3, r2, r3
 8007174:	60bb      	str	r3, [r7, #8]
      break;
 8007176:	e002      	b.n	800717e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007178:	4b04      	ldr	r3, [pc, #16]	; (800718c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800717a:	60bb      	str	r3, [r7, #8]
      break;
 800717c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800717e:	68bb      	ldr	r3, [r7, #8]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007188:	40023800 	.word	0x40023800
 800718c:	00f42400 	.word	0x00f42400
 8007190:	007a1200 	.word	0x007a1200

08007194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007198:	4b03      	ldr	r3, [pc, #12]	; (80071a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800719a:	681b      	ldr	r3, [r3, #0]
}
 800719c:	4618      	mov	r0, r3
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	2000003c 	.word	0x2000003c

080071ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071b0:	f7ff fff0 	bl	8007194 <HAL_RCC_GetHCLKFreq>
 80071b4:	4601      	mov	r1, r0
 80071b6:	4b05      	ldr	r3, [pc, #20]	; (80071cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	0a9b      	lsrs	r3, r3, #10
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	4a03      	ldr	r2, [pc, #12]	; (80071d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071c2:	5cd3      	ldrb	r3, [r2, r3]
 80071c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	40023800 	.word	0x40023800
 80071d0:	0800a3d8 	.word	0x0800a3d8

080071d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071d8:	f7ff ffdc 	bl	8007194 <HAL_RCC_GetHCLKFreq>
 80071dc:	4601      	mov	r1, r0
 80071de:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	0b5b      	lsrs	r3, r3, #13
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	4a03      	ldr	r2, [pc, #12]	; (80071f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071ea:	5cd3      	ldrb	r3, [r2, r3]
 80071ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	40023800 	.word	0x40023800
 80071f8:	0800a3d8 	.word	0x0800a3d8

080071fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e01d      	b.n	800724a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d106      	bne.n	8007228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7fc fba6 	bl	8003974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3304      	adds	r3, #4
 8007238:	4619      	mov	r1, r3
 800723a:	4610      	mov	r0, r2
 800723c:	f000 fc26 	bl	8007a8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007252:	b480      	push	{r7}
 8007254:	b085      	sub	sp, #20
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2b06      	cmp	r3, #6
 8007272:	d007      	beq.n	8007284 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0201 	orr.w	r2, r2, #1
 8007282:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800729a:	b480      	push	{r7}
 800729c:	b085      	sub	sp, #20
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0201 	orr.w	r2, r2, #1
 80072b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b06      	cmp	r3, #6
 80072c2:	d007      	beq.n	80072d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0201 	orr.w	r2, r2, #1
 80072d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b082      	sub	sp, #8
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e01d      	b.n	8007330 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d106      	bne.n	800730e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7fc fb77 	bl	80039fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2202      	movs	r2, #2
 8007312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3304      	adds	r3, #4
 800731e:	4619      	mov	r1, r3
 8007320:	4610      	mov	r0, r2
 8007322:	f000 fbb3 	bl	8007a8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2201      	movs	r2, #1
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fe44 	bl	8007fd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a10      	ldr	r2, [pc, #64]	; (8007398 <HAL_TIM_PWM_Start+0x60>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d107      	bne.n	800736a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007368:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b06      	cmp	r3, #6
 800737a:	d007      	beq.n	800738c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0201 	orr.w	r2, r2, #1
 800738a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	40010000 	.word	0x40010000

0800739c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e083      	b.n	80074b8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d106      	bne.n	80073ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7fc fa8d 	bl	80038e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2202      	movs	r2, #2
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6812      	ldr	r2, [r2, #0]
 80073dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073e0:	f023 0307 	bic.w	r3, r3, #7
 80073e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f000 fb4b 	bl	8007a8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	4313      	orrs	r3, r2
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	4313      	orrs	r3, r2
 8007434:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800743c:	f023 030c 	bic.w	r3, r3, #12
 8007440:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800744c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	021b      	lsls	r3, r3, #8
 8007458:	4313      	orrs	r3, r2
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	4313      	orrs	r3, r2
 800745e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	011a      	lsls	r2, r3, #4
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	031b      	lsls	r3, r3, #12
 800746c:	4313      	orrs	r3, r2
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800747a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007482:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	011b      	lsls	r3, r3, #4
 800748e:	4313      	orrs	r3, r2
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <HAL_TIM_Encoder_Start+0x16>
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	d008      	beq.n	80074e6 <HAL_TIM_Encoder_Start+0x26>
 80074d4:	e00f      	b.n	80074f6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2201      	movs	r2, #1
 80074dc:	2100      	movs	r1, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fd7a 	bl	8007fd8 <TIM_CCxChannelCmd>
      break;
 80074e4:	e016      	b.n	8007514 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2201      	movs	r2, #1
 80074ec:	2104      	movs	r1, #4
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 fd72 	bl	8007fd8 <TIM_CCxChannelCmd>
      break;
 80074f4:	e00e      	b.n	8007514 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2201      	movs	r2, #1
 80074fc:	2100      	movs	r1, #0
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fd6a 	bl	8007fd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2201      	movs	r2, #1
 800750a:	2104      	movs	r1, #4
 800750c:	4618      	mov	r0, r3
 800750e:	f000 fd63 	bl	8007fd8 <TIM_CCxChannelCmd>
      break;
 8007512:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0201 	orr.w	r2, r2, #1
 8007522:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b02      	cmp	r3, #2
 8007542:	d122      	bne.n	800758a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b02      	cmp	r3, #2
 8007550:	d11b      	bne.n	800758a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f06f 0202 	mvn.w	r2, #2
 800755a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	f003 0303 	and.w	r3, r3, #3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fa6c 	bl	8007a4e <HAL_TIM_IC_CaptureCallback>
 8007576:	e005      	b.n	8007584 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fa5e 	bl	8007a3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fa6f 	bl	8007a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	2b04      	cmp	r3, #4
 8007596:	d122      	bne.n	80075de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	f003 0304 	and.w	r3, r3, #4
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d11b      	bne.n	80075de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f06f 0204 	mvn.w	r2, #4
 80075ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fa42 	bl	8007a4e <HAL_TIM_IC_CaptureCallback>
 80075ca:	e005      	b.n	80075d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fa34 	bl	8007a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fa45 	bl	8007a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	f003 0308 	and.w	r3, r3, #8
 80075e8:	2b08      	cmp	r3, #8
 80075ea:	d122      	bne.n	8007632 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	f003 0308 	and.w	r3, r3, #8
 80075f6:	2b08      	cmp	r3, #8
 80075f8:	d11b      	bne.n	8007632 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f06f 0208 	mvn.w	r2, #8
 8007602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2204      	movs	r2, #4
 8007608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	f003 0303 	and.w	r3, r3, #3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fa18 	bl	8007a4e <HAL_TIM_IC_CaptureCallback>
 800761e:	e005      	b.n	800762c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fa0a 	bl	8007a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fa1b 	bl	8007a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	f003 0310 	and.w	r3, r3, #16
 800763c:	2b10      	cmp	r3, #16
 800763e:	d122      	bne.n	8007686 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f003 0310 	and.w	r3, r3, #16
 800764a:	2b10      	cmp	r3, #16
 800764c:	d11b      	bne.n	8007686 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f06f 0210 	mvn.w	r2, #16
 8007656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2208      	movs	r2, #8
 800765c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	69db      	ldr	r3, [r3, #28]
 8007664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f9ee 	bl	8007a4e <HAL_TIM_IC_CaptureCallback>
 8007672:	e005      	b.n	8007680 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f9e0 	bl	8007a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f9f1 	bl	8007a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b01      	cmp	r3, #1
 8007692:	d10e      	bne.n	80076b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d107      	bne.n	80076b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f06f 0201 	mvn.w	r2, #1
 80076aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7fa f8fd 	bl	80018ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076bc:	2b80      	cmp	r3, #128	; 0x80
 80076be:	d10e      	bne.n	80076de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ca:	2b80      	cmp	r3, #128	; 0x80
 80076cc:	d107      	bne.n	80076de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fd1b 	bl	8008114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e8:	2b40      	cmp	r3, #64	; 0x40
 80076ea:	d10e      	bne.n	800770a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f6:	2b40      	cmp	r3, #64	; 0x40
 80076f8:	d107      	bne.n	800770a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f9b6 	bl	8007a76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f003 0320 	and.w	r3, r3, #32
 8007714:	2b20      	cmp	r3, #32
 8007716:	d10e      	bne.n	8007736 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b20      	cmp	r3, #32
 8007724:	d107      	bne.n	8007736 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f06f 0220 	mvn.w	r2, #32
 800772e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fce5 	bl	8008100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007736:	bf00      	nop
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007756:	2302      	movs	r3, #2
 8007758:	e0b4      	b.n	80078c4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2202      	movs	r2, #2
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b0c      	cmp	r3, #12
 800776e:	f200 809f 	bhi.w	80078b0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007772:	a201      	add	r2, pc, #4	; (adr r2, 8007778 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007778:	080077ad 	.word	0x080077ad
 800777c:	080078b1 	.word	0x080078b1
 8007780:	080078b1 	.word	0x080078b1
 8007784:	080078b1 	.word	0x080078b1
 8007788:	080077ed 	.word	0x080077ed
 800778c:	080078b1 	.word	0x080078b1
 8007790:	080078b1 	.word	0x080078b1
 8007794:	080078b1 	.word	0x080078b1
 8007798:	0800782f 	.word	0x0800782f
 800779c:	080078b1 	.word	0x080078b1
 80077a0:	080078b1 	.word	0x080078b1
 80077a4:	080078b1 	.word	0x080078b1
 80077a8:	0800786f 	.word	0x0800786f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68b9      	ldr	r1, [r7, #8]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 f9ea 	bl	8007b8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699a      	ldr	r2, [r3, #24]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f042 0208 	orr.w	r2, r2, #8
 80077c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0204 	bic.w	r2, r2, #4
 80077d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6999      	ldr	r1, [r3, #24]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	691a      	ldr	r2, [r3, #16]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	430a      	orrs	r2, r1
 80077e8:	619a      	str	r2, [r3, #24]
      break;
 80077ea:	e062      	b.n	80078b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68b9      	ldr	r1, [r7, #8]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 fa30 	bl	8007c58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699a      	ldr	r2, [r3, #24]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6999      	ldr	r1, [r3, #24]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	021a      	lsls	r2, r3, #8
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	619a      	str	r2, [r3, #24]
      break;
 800782c:	e041      	b.n	80078b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68b9      	ldr	r1, [r7, #8]
 8007834:	4618      	mov	r0, r3
 8007836:	f000 fa7b 	bl	8007d30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69da      	ldr	r2, [r3, #28]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f042 0208 	orr.w	r2, r2, #8
 8007848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69da      	ldr	r2, [r3, #28]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 0204 	bic.w	r2, r2, #4
 8007858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69d9      	ldr	r1, [r3, #28]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	691a      	ldr	r2, [r3, #16]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	61da      	str	r2, [r3, #28]
      break;
 800786c:	e021      	b.n	80078b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68b9      	ldr	r1, [r7, #8]
 8007874:	4618      	mov	r0, r3
 8007876:	f000 fac5 	bl	8007e04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69da      	ldr	r2, [r3, #28]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	69da      	ldr	r2, [r3, #28]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69d9      	ldr	r1, [r3, #28]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	021a      	lsls	r2, r3, #8
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	61da      	str	r2, [r3, #28]
      break;
 80078ae:	e000      	b.n	80078b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80078b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_TIM_ConfigClockSource+0x18>
 80078e0:	2302      	movs	r3, #2
 80078e2:	e0a6      	b.n	8007a32 <HAL_TIM_ConfigClockSource+0x166>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007902:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800790a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b40      	cmp	r3, #64	; 0x40
 800791a:	d067      	beq.n	80079ec <HAL_TIM_ConfigClockSource+0x120>
 800791c:	2b40      	cmp	r3, #64	; 0x40
 800791e:	d80b      	bhi.n	8007938 <HAL_TIM_ConfigClockSource+0x6c>
 8007920:	2b10      	cmp	r3, #16
 8007922:	d073      	beq.n	8007a0c <HAL_TIM_ConfigClockSource+0x140>
 8007924:	2b10      	cmp	r3, #16
 8007926:	d802      	bhi.n	800792e <HAL_TIM_ConfigClockSource+0x62>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d06f      	beq.n	8007a0c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800792c:	e078      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800792e:	2b20      	cmp	r3, #32
 8007930:	d06c      	beq.n	8007a0c <HAL_TIM_ConfigClockSource+0x140>
 8007932:	2b30      	cmp	r3, #48	; 0x30
 8007934:	d06a      	beq.n	8007a0c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007936:	e073      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007938:	2b70      	cmp	r3, #112	; 0x70
 800793a:	d00d      	beq.n	8007958 <HAL_TIM_ConfigClockSource+0x8c>
 800793c:	2b70      	cmp	r3, #112	; 0x70
 800793e:	d804      	bhi.n	800794a <HAL_TIM_ConfigClockSource+0x7e>
 8007940:	2b50      	cmp	r3, #80	; 0x50
 8007942:	d033      	beq.n	80079ac <HAL_TIM_ConfigClockSource+0xe0>
 8007944:	2b60      	cmp	r3, #96	; 0x60
 8007946:	d041      	beq.n	80079cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007948:	e06a      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800794a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794e:	d066      	beq.n	8007a1e <HAL_TIM_ConfigClockSource+0x152>
 8007950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007954:	d017      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007956:	e063      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6818      	ldr	r0, [r3, #0]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	6899      	ldr	r1, [r3, #8]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f000 fb16 	bl	8007f98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800797a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	609a      	str	r2, [r3, #8]
      break;
 8007984:	e04c      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6899      	ldr	r1, [r3, #8]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f000 faff 	bl	8007f98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079a8:	609a      	str	r2, [r3, #8]
      break;
 80079aa:	e039      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6818      	ldr	r0, [r3, #0]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	6859      	ldr	r1, [r3, #4]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	461a      	mov	r2, r3
 80079ba:	f000 fa73 	bl	8007ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2150      	movs	r1, #80	; 0x50
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 facc 	bl	8007f62 <TIM_ITRx_SetConfig>
      break;
 80079ca:	e029      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	6859      	ldr	r1, [r3, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	461a      	mov	r2, r3
 80079da:	f000 fa92 	bl	8007f02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2160      	movs	r1, #96	; 0x60
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 fabc 	bl	8007f62 <TIM_ITRx_SetConfig>
      break;
 80079ea:	e019      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	6859      	ldr	r1, [r3, #4]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	461a      	mov	r2, r3
 80079fa:	f000 fa53 	bl	8007ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2140      	movs	r1, #64	; 0x40
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 faac 	bl	8007f62 <TIM_ITRx_SetConfig>
      break;
 8007a0a:	e009      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4619      	mov	r1, r3
 8007a16:	4610      	mov	r0, r2
 8007a18:	f000 faa3 	bl	8007f62 <TIM_ITRx_SetConfig>
      break;
 8007a1c:	e000      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007a1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a42:	bf00      	nop
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b083      	sub	sp, #12
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a6a:	bf00      	nop
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a7e:	bf00      	nop
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
	...

08007a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a34      	ldr	r2, [pc, #208]	; (8007b70 <TIM_Base_SetConfig+0xe4>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d00f      	beq.n	8007ac4 <TIM_Base_SetConfig+0x38>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aaa:	d00b      	beq.n	8007ac4 <TIM_Base_SetConfig+0x38>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a31      	ldr	r2, [pc, #196]	; (8007b74 <TIM_Base_SetConfig+0xe8>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d007      	beq.n	8007ac4 <TIM_Base_SetConfig+0x38>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a30      	ldr	r2, [pc, #192]	; (8007b78 <TIM_Base_SetConfig+0xec>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d003      	beq.n	8007ac4 <TIM_Base_SetConfig+0x38>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a2f      	ldr	r2, [pc, #188]	; (8007b7c <TIM_Base_SetConfig+0xf0>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d108      	bne.n	8007ad6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a25      	ldr	r2, [pc, #148]	; (8007b70 <TIM_Base_SetConfig+0xe4>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d01b      	beq.n	8007b16 <TIM_Base_SetConfig+0x8a>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae4:	d017      	beq.n	8007b16 <TIM_Base_SetConfig+0x8a>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a22      	ldr	r2, [pc, #136]	; (8007b74 <TIM_Base_SetConfig+0xe8>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d013      	beq.n	8007b16 <TIM_Base_SetConfig+0x8a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a21      	ldr	r2, [pc, #132]	; (8007b78 <TIM_Base_SetConfig+0xec>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d00f      	beq.n	8007b16 <TIM_Base_SetConfig+0x8a>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a20      	ldr	r2, [pc, #128]	; (8007b7c <TIM_Base_SetConfig+0xf0>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d00b      	beq.n	8007b16 <TIM_Base_SetConfig+0x8a>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a1f      	ldr	r2, [pc, #124]	; (8007b80 <TIM_Base_SetConfig+0xf4>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d007      	beq.n	8007b16 <TIM_Base_SetConfig+0x8a>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a1e      	ldr	r2, [pc, #120]	; (8007b84 <TIM_Base_SetConfig+0xf8>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d003      	beq.n	8007b16 <TIM_Base_SetConfig+0x8a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a1d      	ldr	r2, [pc, #116]	; (8007b88 <TIM_Base_SetConfig+0xfc>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d108      	bne.n	8007b28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	689a      	ldr	r2, [r3, #8]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a08      	ldr	r2, [pc, #32]	; (8007b70 <TIM_Base_SetConfig+0xe4>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d103      	bne.n	8007b5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	691a      	ldr	r2, [r3, #16]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	615a      	str	r2, [r3, #20]
}
 8007b62:	bf00      	nop
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	40010000 	.word	0x40010000
 8007b74:	40000400 	.word	0x40000400
 8007b78:	40000800 	.word	0x40000800
 8007b7c:	40000c00 	.word	0x40000c00
 8007b80:	40014000 	.word	0x40014000
 8007b84:	40014400 	.word	0x40014400
 8007b88:	40014800 	.word	0x40014800

08007b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	f023 0201 	bic.w	r2, r3, #1
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 0303 	bic.w	r3, r3, #3
 8007bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f023 0302 	bic.w	r3, r3, #2
 8007bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a1c      	ldr	r2, [pc, #112]	; (8007c54 <TIM_OC1_SetConfig+0xc8>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d10c      	bne.n	8007c02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f023 0308 	bic.w	r3, r3, #8
 8007bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f023 0304 	bic.w	r3, r3, #4
 8007c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a13      	ldr	r2, [pc, #76]	; (8007c54 <TIM_OC1_SetConfig+0xc8>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d111      	bne.n	8007c2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	621a      	str	r2, [r3, #32]
}
 8007c48:	bf00      	nop
 8007c4a:	371c      	adds	r7, #28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	40010000 	.word	0x40010000

08007c58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	f023 0210 	bic.w	r2, r3, #16
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	021b      	lsls	r3, r3, #8
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f023 0320 	bic.w	r3, r3, #32
 8007ca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	011b      	lsls	r3, r3, #4
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a1e      	ldr	r2, [pc, #120]	; (8007d2c <TIM_OC2_SetConfig+0xd4>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d10d      	bne.n	8007cd4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	011b      	lsls	r3, r3, #4
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a15      	ldr	r2, [pc, #84]	; (8007d2c <TIM_OC2_SetConfig+0xd4>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d113      	bne.n	8007d04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	621a      	str	r2, [r3, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	40010000 	.word	0x40010000

08007d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0303 	bic.w	r3, r3, #3
 8007d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a1d      	ldr	r2, [pc, #116]	; (8007e00 <TIM_OC3_SetConfig+0xd0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d10d      	bne.n	8007daa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	021b      	lsls	r3, r3, #8
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a14      	ldr	r2, [pc, #80]	; (8007e00 <TIM_OC3_SetConfig+0xd0>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d113      	bne.n	8007dda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	011b      	lsls	r3, r3, #4
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	685a      	ldr	r2, [r3, #4]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	621a      	str	r2, [r3, #32]
}
 8007df4:	bf00      	nop
 8007df6:	371c      	adds	r7, #28
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	40010000 	.word	0x40010000

08007e04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	021b      	lsls	r3, r3, #8
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	031b      	lsls	r3, r3, #12
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a10      	ldr	r2, [pc, #64]	; (8007ea0 <TIM_OC4_SetConfig+0x9c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d109      	bne.n	8007e78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	019b      	lsls	r3, r3, #6
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	621a      	str	r2, [r3, #32]
}
 8007e92:	bf00      	nop
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40010000 	.word	0x40010000

08007ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	f023 0201 	bic.w	r2, r3, #1
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	011b      	lsls	r3, r3, #4
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	f023 030a 	bic.w	r3, r3, #10
 8007ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	621a      	str	r2, [r3, #32]
}
 8007ef6:	bf00      	nop
 8007ef8:	371c      	adds	r7, #28
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b087      	sub	sp, #28
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	f023 0210 	bic.w	r2, r3, #16
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	031b      	lsls	r3, r3, #12
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	011b      	lsls	r3, r3, #4
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	621a      	str	r2, [r3, #32]
}
 8007f56:	bf00      	nop
 8007f58:	371c      	adds	r7, #28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b085      	sub	sp, #20
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	f043 0307 	orr.w	r3, r3, #7
 8007f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	609a      	str	r2, [r3, #8]
}
 8007f8c:	bf00      	nop
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
 8007fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	021a      	lsls	r2, r3, #8
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	609a      	str	r2, [r3, #8]
}
 8007fcc:	bf00      	nop
 8007fce:	371c      	adds	r7, #28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f003 031f 	and.w	r3, r3, #31
 8007fea:	2201      	movs	r2, #1
 8007fec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6a1a      	ldr	r2, [r3, #32]
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	43db      	mvns	r3, r3
 8007ffa:	401a      	ands	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6a1a      	ldr	r2, [r3, #32]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f003 031f 	and.w	r3, r3, #31
 800800a:	6879      	ldr	r1, [r7, #4]
 800800c:	fa01 f303 	lsl.w	r3, r1, r3
 8008010:	431a      	orrs	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	621a      	str	r2, [r3, #32]
}
 8008016:	bf00      	nop
 8008018:	371c      	adds	r7, #28
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
	...

08008024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008034:	2b01      	cmp	r3, #1
 8008036:	d101      	bne.n	800803c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008038:	2302      	movs	r3, #2
 800803a:	e050      	b.n	80080de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a1c      	ldr	r2, [pc, #112]	; (80080ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d018      	beq.n	80080b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008088:	d013      	beq.n	80080b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a18      	ldr	r2, [pc, #96]	; (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d00e      	beq.n	80080b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a16      	ldr	r2, [pc, #88]	; (80080f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d009      	beq.n	80080b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a15      	ldr	r2, [pc, #84]	; (80080f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d004      	beq.n	80080b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a13      	ldr	r2, [pc, #76]	; (80080fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d10c      	bne.n	80080cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	40010000 	.word	0x40010000
 80080f0:	40000400 	.word	0x40000400
 80080f4:	40000800 	.word	0x40000800
 80080f8:	40000c00 	.word	0x40000c00
 80080fc:	40014000 	.word	0x40014000

08008100 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e03f      	b.n	80081ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7fb fcb0 	bl	8003ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2224      	movs	r2, #36	; 0x24
 8008158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800816a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fc41 	bl	80089f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	691a      	ldr	r2, [r3, #16]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	695a      	ldr	r2, [r3, #20]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68da      	ldr	r2, [r3, #12]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2220      	movs	r2, #32
 80081ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2220      	movs	r2, #32
 80081b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	4613      	mov	r3, r2
 80081d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b20      	cmp	r3, #32
 80081dc:	d153      	bne.n	8008286 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <HAL_UART_Transmit_DMA+0x26>
 80081e4:	88fb      	ldrh	r3, [r7, #6]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e04c      	b.n	8008288 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d101      	bne.n	80081fc <HAL_UART_Transmit_DMA+0x38>
 80081f8:	2302      	movs	r3, #2
 80081fa:	e045      	b.n	8008288 <HAL_UART_Transmit_DMA+0xc4>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	88fa      	ldrh	r2, [r7, #6]
 800820e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	88fa      	ldrh	r2, [r7, #6]
 8008214:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2221      	movs	r2, #33	; 0x21
 8008220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008228:	4a19      	ldr	r2, [pc, #100]	; (8008290 <HAL_UART_Transmit_DMA+0xcc>)
 800822a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008230:	4a18      	ldr	r2, [pc, #96]	; (8008294 <HAL_UART_Transmit_DMA+0xd0>)
 8008232:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008238:	4a17      	ldr	r2, [pc, #92]	; (8008298 <HAL_UART_Transmit_DMA+0xd4>)
 800823a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008240:	2200      	movs	r2, #0
 8008242:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008244:	f107 0308 	add.w	r3, r7, #8
 8008248:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	6819      	ldr	r1, [r3, #0]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3304      	adds	r3, #4
 8008258:	461a      	mov	r2, r3
 800825a:	88fb      	ldrh	r3, [r7, #6]
 800825c:	f7fc f81a 	bl	8004294 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008268:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	695a      	ldr	r2, [r3, #20]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008280:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	e000      	b.n	8008288 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8008286:	2302      	movs	r3, #2
  }
}
 8008288:	4618      	mov	r0, r3
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	08008601 	.word	0x08008601
 8008294:	08008653 	.word	0x08008653
 8008298:	080086f3 	.word	0x080086f3

0800829c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	4613      	mov	r3, r2
 80082a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b20      	cmp	r3, #32
 80082b4:	d166      	bne.n	8008384 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <HAL_UART_Receive_DMA+0x26>
 80082bc:	88fb      	ldrh	r3, [r7, #6]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e05f      	b.n	8008386 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d101      	bne.n	80082d4 <HAL_UART_Receive_DMA+0x38>
 80082d0:	2302      	movs	r3, #2
 80082d2:	e058      	b.n	8008386 <HAL_UART_Receive_DMA+0xea>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	88fa      	ldrh	r2, [r7, #6]
 80082e6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2222      	movs	r2, #34	; 0x22
 80082f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fa:	4a25      	ldr	r2, [pc, #148]	; (8008390 <HAL_UART_Receive_DMA+0xf4>)
 80082fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008302:	4a24      	ldr	r2, [pc, #144]	; (8008394 <HAL_UART_Receive_DMA+0xf8>)
 8008304:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800830a:	4a23      	ldr	r2, [pc, #140]	; (8008398 <HAL_UART_Receive_DMA+0xfc>)
 800830c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008312:	2200      	movs	r2, #0
 8008314:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8008316:	f107 0308 	add.w	r3, r7, #8
 800831a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3304      	adds	r3, #4
 8008326:	4619      	mov	r1, r3
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	88fb      	ldrh	r3, [r7, #6]
 800832e:	f7fb ffb1 	bl	8004294 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008332:	2300      	movs	r3, #0
 8008334:	613b      	str	r3, [r7, #16]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	613b      	str	r3, [r7, #16]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	613b      	str	r3, [r7, #16]
 8008346:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68da      	ldr	r2, [r3, #12]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800835e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	695a      	ldr	r2, [r3, #20]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f042 0201 	orr.w	r2, r2, #1
 800836e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	695a      	ldr	r2, [r3, #20]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800837e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	e000      	b.n	8008386 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008384:	2302      	movs	r3, #2
  }
}
 8008386:	4618      	mov	r0, r3
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	0800866f 	.word	0x0800866f
 8008394:	080086d7 	.word	0x080086d7
 8008398:	080086f3 	.word	0x080086f3

0800839c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80083bc:	2300      	movs	r3, #0
 80083be:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	f003 030f 	and.w	r3, r3, #15
 80083ca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10d      	bne.n	80083ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	f003 0320 	and.w	r3, r3, #32
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d008      	beq.n	80083ee <HAL_UART_IRQHandler+0x52>
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	f003 0320 	and.w	r3, r3, #32
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fa83 	bl	80088f2 <UART_Receive_IT>
      return;
 80083ec:	e0d1      	b.n	8008592 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 80b0 	beq.w	8008556 <HAL_UART_IRQHandler+0x1ba>
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d105      	bne.n	800840c <HAL_UART_IRQHandler+0x70>
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 80a5 	beq.w	8008556 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00a      	beq.n	800842c <HAL_UART_IRQHandler+0x90>
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800841c:	2b00      	cmp	r3, #0
 800841e:	d005      	beq.n	800842c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008424:	f043 0201 	orr.w	r2, r3, #1
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	f003 0304 	and.w	r3, r3, #4
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <HAL_UART_IRQHandler+0xb0>
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	d005      	beq.n	800844c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008444:	f043 0202 	orr.w	r2, r3, #2
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	f003 0302 	and.w	r3, r3, #2
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00a      	beq.n	800846c <HAL_UART_IRQHandler+0xd0>
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b00      	cmp	r3, #0
 800845e:	d005      	beq.n	800846c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008464:	f043 0204 	orr.w	r2, r3, #4
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	f003 0308 	and.w	r3, r3, #8
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00f      	beq.n	8008496 <HAL_UART_IRQHandler+0xfa>
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	f003 0320 	and.w	r3, r3, #32
 800847c:	2b00      	cmp	r3, #0
 800847e:	d104      	bne.n	800848a <HAL_UART_IRQHandler+0xee>
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d005      	beq.n	8008496 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848e:	f043 0208 	orr.w	r2, r3, #8
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849a:	2b00      	cmp	r3, #0
 800849c:	d078      	beq.n	8008590 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	f003 0320 	and.w	r3, r3, #32
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d007      	beq.n	80084b8 <HAL_UART_IRQHandler+0x11c>
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	f003 0320 	and.w	r3, r3, #32
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fa1d 	bl	80088f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c2:	2b40      	cmp	r3, #64	; 0x40
 80084c4:	bf0c      	ite	eq
 80084c6:	2301      	moveq	r3, #1
 80084c8:	2300      	movne	r3, #0
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d2:	f003 0308 	and.w	r3, r3, #8
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d102      	bne.n	80084e0 <HAL_UART_IRQHandler+0x144>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d031      	beq.n	8008544 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f966 	bl	80087b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f0:	2b40      	cmp	r3, #64	; 0x40
 80084f2:	d123      	bne.n	800853c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	695a      	ldr	r2, [r3, #20]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008502:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008508:	2b00      	cmp	r3, #0
 800850a:	d013      	beq.n	8008534 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008510:	4a21      	ldr	r2, [pc, #132]	; (8008598 <HAL_UART_IRQHandler+0x1fc>)
 8008512:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008518:	4618      	mov	r0, r3
 800851a:	f7fb ff13 	bl	8004344 <HAL_DMA_Abort_IT>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d016      	beq.n	8008552 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800852e:	4610      	mov	r0, r2
 8008530:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008532:	e00e      	b.n	8008552 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f859 	bl	80085ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800853a:	e00a      	b.n	8008552 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f855 	bl	80085ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008542:	e006      	b.n	8008552 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f851 	bl	80085ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008550:	e01e      	b.n	8008590 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008552:	bf00      	nop
    return;
 8008554:	e01c      	b.n	8008590 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800855c:	2b00      	cmp	r3, #0
 800855e:	d008      	beq.n	8008572 <HAL_UART_IRQHandler+0x1d6>
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f953 	bl	8008816 <UART_Transmit_IT>
    return;
 8008570:	e00f      	b.n	8008592 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00a      	beq.n	8008592 <HAL_UART_IRQHandler+0x1f6>
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008582:	2b00      	cmp	r3, #0
 8008584:	d005      	beq.n	8008592 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f99b 	bl	80088c2 <UART_EndTransmit_IT>
    return;
 800858c:	bf00      	nop
 800858e:	e000      	b.n	8008592 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008590:	bf00      	nop
  }
}
 8008592:	3720      	adds	r7, #32
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	080087ef 	.word	0x080087ef

0800859c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008618:	2b00      	cmp	r3, #0
 800861a:	d113      	bne.n	8008644 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	695a      	ldr	r2, [r3, #20]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008630:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68da      	ldr	r2, [r3, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008640:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008642:	e002      	b.n	800864a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f7ff ffa9 	bl	800859c <HAL_UART_TxCpltCallback>
}
 800864a:	bf00      	nop
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7ff ffa5 	bl	80085b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008666:	bf00      	nop
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008686:	2b00      	cmp	r3, #0
 8008688:	d11e      	bne.n	80086c8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800869e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	695a      	ldr	r2, [r3, #20]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f022 0201 	bic.w	r2, r2, #1
 80086ae:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	695a      	ldr	r2, [r3, #20]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086be:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f7ff ff7b 	bl	80085c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ce:	bf00      	nop
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f7ff ff77 	bl	80085d8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ea:	bf00      	nop
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80086fa:	2300      	movs	r3, #0
 80086fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008702:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870e:	2b80      	cmp	r3, #128	; 0x80
 8008710:	bf0c      	ite	eq
 8008712:	2301      	moveq	r3, #1
 8008714:	2300      	movne	r3, #0
 8008716:	b2db      	uxtb	r3, r3
 8008718:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b21      	cmp	r3, #33	; 0x21
 8008724:	d108      	bne.n	8008738 <UART_DMAError+0x46>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d005      	beq.n	8008738 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2200      	movs	r2, #0
 8008730:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008732:	68b8      	ldr	r0, [r7, #8]
 8008734:	f000 f827 	bl	8008786 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008742:	2b40      	cmp	r3, #64	; 0x40
 8008744:	bf0c      	ite	eq
 8008746:	2301      	moveq	r3, #1
 8008748:	2300      	movne	r3, #0
 800874a:	b2db      	uxtb	r3, r3
 800874c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b22      	cmp	r3, #34	; 0x22
 8008758:	d108      	bne.n	800876c <UART_DMAError+0x7a>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d005      	beq.n	800876c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2200      	movs	r2, #0
 8008764:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008766:	68b8      	ldr	r0, [r7, #8]
 8008768:	f000 f823 	bl	80087b2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008770:	f043 0210 	orr.w	r2, r3, #16
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008778:	68b8      	ldr	r0, [r7, #8]
 800877a:	f7ff ff37 	bl	80085ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800877e:	bf00      	nop
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68da      	ldr	r2, [r3, #12]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800879c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2220      	movs	r2, #32
 80087a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68da      	ldr	r2, [r3, #12]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80087c8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	695a      	ldr	r2, [r3, #20]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f022 0201 	bic.w	r2, r2, #1
 80087d8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2220      	movs	r2, #32
 80087de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f7ff feef 	bl	80085ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800880e:	bf00      	nop
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008816:	b480      	push	{r7}
 8008818:	b085      	sub	sp, #20
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b21      	cmp	r3, #33	; 0x21
 8008828:	d144      	bne.n	80088b4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008832:	d11a      	bne.n	800886a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	881b      	ldrh	r3, [r3, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008848:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d105      	bne.n	800885e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	1c9a      	adds	r2, r3, #2
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	621a      	str	r2, [r3, #32]
 800885c:	e00e      	b.n	800887c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	621a      	str	r2, [r3, #32]
 8008868:	e008      	b.n	800887c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	1c59      	adds	r1, r3, #1
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	6211      	str	r1, [r2, #32]
 8008874:	781a      	ldrb	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008880:	b29b      	uxth	r3, r3
 8008882:	3b01      	subs	r3, #1
 8008884:	b29b      	uxth	r3, r3
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	4619      	mov	r1, r3
 800888a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10f      	bne.n	80088b0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800889e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68da      	ldr	r2, [r3, #12]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	e000      	b.n	80088b6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80088b4:	2302      	movs	r3, #2
  }
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68da      	ldr	r2, [r3, #12]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2220      	movs	r2, #32
 80088de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7ff fe5a 	bl	800859c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b22      	cmp	r3, #34	; 0x22
 8008904:	d171      	bne.n	80089ea <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800890e:	d123      	bne.n	8008958 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008914:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10e      	bne.n	800893c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	b29b      	uxth	r3, r3
 8008926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800892a:	b29a      	uxth	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	1c9a      	adds	r2, r3, #2
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	629a      	str	r2, [r3, #40]	; 0x28
 800893a:	e029      	b.n	8008990 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	b29b      	uxth	r3, r3
 8008944:	b2db      	uxtb	r3, r3
 8008946:	b29a      	uxth	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008950:	1c5a      	adds	r2, r3, #1
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	629a      	str	r2, [r3, #40]	; 0x28
 8008956:	e01b      	b.n	8008990 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10a      	bne.n	8008976 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6858      	ldr	r0, [r3, #4]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896a:	1c59      	adds	r1, r3, #1
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	6291      	str	r1, [r2, #40]	; 0x28
 8008970:	b2c2      	uxtb	r2, r0
 8008972:	701a      	strb	r2, [r3, #0]
 8008974:	e00c      	b.n	8008990 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	b2da      	uxtb	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008982:	1c58      	adds	r0, r3, #1
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	6288      	str	r0, [r1, #40]	; 0x28
 8008988:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800898c:	b2d2      	uxtb	r2, r2
 800898e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008994:	b29b      	uxth	r3, r3
 8008996:	3b01      	subs	r3, #1
 8008998:	b29b      	uxth	r3, r3
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	4619      	mov	r1, r3
 800899e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d120      	bne.n	80089e6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68da      	ldr	r2, [r3, #12]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 0220 	bic.w	r2, r2, #32
 80089b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68da      	ldr	r2, [r3, #12]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	695a      	ldr	r2, [r3, #20]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f022 0201 	bic.w	r2, r2, #1
 80089d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2220      	movs	r2, #32
 80089d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff fdf1 	bl	80085c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	e002      	b.n	80089ec <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	e000      	b.n	80089ec <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80089ea:	2302      	movs	r3, #2
  }
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68da      	ldr	r2, [r3, #12]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	430a      	orrs	r2, r1
 8008a12:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	689a      	ldr	r2, [r3, #8]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	431a      	orrs	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	69db      	ldr	r3, [r3, #28]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008a36:	f023 030c 	bic.w	r3, r3, #12
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	6812      	ldr	r2, [r2, #0]
 8008a3e:	68f9      	ldr	r1, [r7, #12]
 8008a40:	430b      	orrs	r3, r1
 8008a42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	699a      	ldr	r2, [r3, #24]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	430a      	orrs	r2, r1
 8008a58:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a62:	f040 818b 	bne.w	8008d7c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4ac1      	ldr	r2, [pc, #772]	; (8008d70 <UART_SetConfig+0x37c>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d005      	beq.n	8008a7c <UART_SetConfig+0x88>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4abf      	ldr	r2, [pc, #764]	; (8008d74 <UART_SetConfig+0x380>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	f040 80bd 	bne.w	8008bf6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a7c:	f7fe fbaa 	bl	80071d4 <HAL_RCC_GetPCLK2Freq>
 8008a80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	461d      	mov	r5, r3
 8008a86:	f04f 0600 	mov.w	r6, #0
 8008a8a:	46a8      	mov	r8, r5
 8008a8c:	46b1      	mov	r9, r6
 8008a8e:	eb18 0308 	adds.w	r3, r8, r8
 8008a92:	eb49 0409 	adc.w	r4, r9, r9
 8008a96:	4698      	mov	r8, r3
 8008a98:	46a1      	mov	r9, r4
 8008a9a:	eb18 0805 	adds.w	r8, r8, r5
 8008a9e:	eb49 0906 	adc.w	r9, r9, r6
 8008aa2:	f04f 0100 	mov.w	r1, #0
 8008aa6:	f04f 0200 	mov.w	r2, #0
 8008aaa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008aae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008ab2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008ab6:	4688      	mov	r8, r1
 8008ab8:	4691      	mov	r9, r2
 8008aba:	eb18 0005 	adds.w	r0, r8, r5
 8008abe:	eb49 0106 	adc.w	r1, r9, r6
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	461d      	mov	r5, r3
 8008ac8:	f04f 0600 	mov.w	r6, #0
 8008acc:	196b      	adds	r3, r5, r5
 8008ace:	eb46 0406 	adc.w	r4, r6, r6
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	4623      	mov	r3, r4
 8008ad6:	f7f8 f949 	bl	8000d6c <__aeabi_uldivmod>
 8008ada:	4603      	mov	r3, r0
 8008adc:	460c      	mov	r4, r1
 8008ade:	461a      	mov	r2, r3
 8008ae0:	4ba5      	ldr	r3, [pc, #660]	; (8008d78 <UART_SetConfig+0x384>)
 8008ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ae6:	095b      	lsrs	r3, r3, #5
 8008ae8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	461d      	mov	r5, r3
 8008af0:	f04f 0600 	mov.w	r6, #0
 8008af4:	46a9      	mov	r9, r5
 8008af6:	46b2      	mov	sl, r6
 8008af8:	eb19 0309 	adds.w	r3, r9, r9
 8008afc:	eb4a 040a 	adc.w	r4, sl, sl
 8008b00:	4699      	mov	r9, r3
 8008b02:	46a2      	mov	sl, r4
 8008b04:	eb19 0905 	adds.w	r9, r9, r5
 8008b08:	eb4a 0a06 	adc.w	sl, sl, r6
 8008b0c:	f04f 0100 	mov.w	r1, #0
 8008b10:	f04f 0200 	mov.w	r2, #0
 8008b14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b20:	4689      	mov	r9, r1
 8008b22:	4692      	mov	sl, r2
 8008b24:	eb19 0005 	adds.w	r0, r9, r5
 8008b28:	eb4a 0106 	adc.w	r1, sl, r6
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	461d      	mov	r5, r3
 8008b32:	f04f 0600 	mov.w	r6, #0
 8008b36:	196b      	adds	r3, r5, r5
 8008b38:	eb46 0406 	adc.w	r4, r6, r6
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	4623      	mov	r3, r4
 8008b40:	f7f8 f914 	bl	8000d6c <__aeabi_uldivmod>
 8008b44:	4603      	mov	r3, r0
 8008b46:	460c      	mov	r4, r1
 8008b48:	461a      	mov	r2, r3
 8008b4a:	4b8b      	ldr	r3, [pc, #556]	; (8008d78 <UART_SetConfig+0x384>)
 8008b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b50:	095b      	lsrs	r3, r3, #5
 8008b52:	2164      	movs	r1, #100	; 0x64
 8008b54:	fb01 f303 	mul.w	r3, r1, r3
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	3332      	adds	r3, #50	; 0x32
 8008b5e:	4a86      	ldr	r2, [pc, #536]	; (8008d78 <UART_SetConfig+0x384>)
 8008b60:	fba2 2303 	umull	r2, r3, r2, r3
 8008b64:	095b      	lsrs	r3, r3, #5
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b6c:	4498      	add	r8, r3
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	461d      	mov	r5, r3
 8008b72:	f04f 0600 	mov.w	r6, #0
 8008b76:	46a9      	mov	r9, r5
 8008b78:	46b2      	mov	sl, r6
 8008b7a:	eb19 0309 	adds.w	r3, r9, r9
 8008b7e:	eb4a 040a 	adc.w	r4, sl, sl
 8008b82:	4699      	mov	r9, r3
 8008b84:	46a2      	mov	sl, r4
 8008b86:	eb19 0905 	adds.w	r9, r9, r5
 8008b8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8008b8e:	f04f 0100 	mov.w	r1, #0
 8008b92:	f04f 0200 	mov.w	r2, #0
 8008b96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ba2:	4689      	mov	r9, r1
 8008ba4:	4692      	mov	sl, r2
 8008ba6:	eb19 0005 	adds.w	r0, r9, r5
 8008baa:	eb4a 0106 	adc.w	r1, sl, r6
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	461d      	mov	r5, r3
 8008bb4:	f04f 0600 	mov.w	r6, #0
 8008bb8:	196b      	adds	r3, r5, r5
 8008bba:	eb46 0406 	adc.w	r4, r6, r6
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	4623      	mov	r3, r4
 8008bc2:	f7f8 f8d3 	bl	8000d6c <__aeabi_uldivmod>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	460c      	mov	r4, r1
 8008bca:	461a      	mov	r2, r3
 8008bcc:	4b6a      	ldr	r3, [pc, #424]	; (8008d78 <UART_SetConfig+0x384>)
 8008bce:	fba3 1302 	umull	r1, r3, r3, r2
 8008bd2:	095b      	lsrs	r3, r3, #5
 8008bd4:	2164      	movs	r1, #100	; 0x64
 8008bd6:	fb01 f303 	mul.w	r3, r1, r3
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	00db      	lsls	r3, r3, #3
 8008bde:	3332      	adds	r3, #50	; 0x32
 8008be0:	4a65      	ldr	r2, [pc, #404]	; (8008d78 <UART_SetConfig+0x384>)
 8008be2:	fba2 2303 	umull	r2, r3, r2, r3
 8008be6:	095b      	lsrs	r3, r3, #5
 8008be8:	f003 0207 	and.w	r2, r3, #7
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4442      	add	r2, r8
 8008bf2:	609a      	str	r2, [r3, #8]
 8008bf4:	e26f      	b.n	80090d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bf6:	f7fe fad9 	bl	80071ac <HAL_RCC_GetPCLK1Freq>
 8008bfa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	461d      	mov	r5, r3
 8008c00:	f04f 0600 	mov.w	r6, #0
 8008c04:	46a8      	mov	r8, r5
 8008c06:	46b1      	mov	r9, r6
 8008c08:	eb18 0308 	adds.w	r3, r8, r8
 8008c0c:	eb49 0409 	adc.w	r4, r9, r9
 8008c10:	4698      	mov	r8, r3
 8008c12:	46a1      	mov	r9, r4
 8008c14:	eb18 0805 	adds.w	r8, r8, r5
 8008c18:	eb49 0906 	adc.w	r9, r9, r6
 8008c1c:	f04f 0100 	mov.w	r1, #0
 8008c20:	f04f 0200 	mov.w	r2, #0
 8008c24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008c28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008c2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008c30:	4688      	mov	r8, r1
 8008c32:	4691      	mov	r9, r2
 8008c34:	eb18 0005 	adds.w	r0, r8, r5
 8008c38:	eb49 0106 	adc.w	r1, r9, r6
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	461d      	mov	r5, r3
 8008c42:	f04f 0600 	mov.w	r6, #0
 8008c46:	196b      	adds	r3, r5, r5
 8008c48:	eb46 0406 	adc.w	r4, r6, r6
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	4623      	mov	r3, r4
 8008c50:	f7f8 f88c 	bl	8000d6c <__aeabi_uldivmod>
 8008c54:	4603      	mov	r3, r0
 8008c56:	460c      	mov	r4, r1
 8008c58:	461a      	mov	r2, r3
 8008c5a:	4b47      	ldr	r3, [pc, #284]	; (8008d78 <UART_SetConfig+0x384>)
 8008c5c:	fba3 2302 	umull	r2, r3, r3, r2
 8008c60:	095b      	lsrs	r3, r3, #5
 8008c62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	461d      	mov	r5, r3
 8008c6a:	f04f 0600 	mov.w	r6, #0
 8008c6e:	46a9      	mov	r9, r5
 8008c70:	46b2      	mov	sl, r6
 8008c72:	eb19 0309 	adds.w	r3, r9, r9
 8008c76:	eb4a 040a 	adc.w	r4, sl, sl
 8008c7a:	4699      	mov	r9, r3
 8008c7c:	46a2      	mov	sl, r4
 8008c7e:	eb19 0905 	adds.w	r9, r9, r5
 8008c82:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c86:	f04f 0100 	mov.w	r1, #0
 8008c8a:	f04f 0200 	mov.w	r2, #0
 8008c8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c9a:	4689      	mov	r9, r1
 8008c9c:	4692      	mov	sl, r2
 8008c9e:	eb19 0005 	adds.w	r0, r9, r5
 8008ca2:	eb4a 0106 	adc.w	r1, sl, r6
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	461d      	mov	r5, r3
 8008cac:	f04f 0600 	mov.w	r6, #0
 8008cb0:	196b      	adds	r3, r5, r5
 8008cb2:	eb46 0406 	adc.w	r4, r6, r6
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	4623      	mov	r3, r4
 8008cba:	f7f8 f857 	bl	8000d6c <__aeabi_uldivmod>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	460c      	mov	r4, r1
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	4b2c      	ldr	r3, [pc, #176]	; (8008d78 <UART_SetConfig+0x384>)
 8008cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8008cca:	095b      	lsrs	r3, r3, #5
 8008ccc:	2164      	movs	r1, #100	; 0x64
 8008cce:	fb01 f303 	mul.w	r3, r1, r3
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	00db      	lsls	r3, r3, #3
 8008cd6:	3332      	adds	r3, #50	; 0x32
 8008cd8:	4a27      	ldr	r2, [pc, #156]	; (8008d78 <UART_SetConfig+0x384>)
 8008cda:	fba2 2303 	umull	r2, r3, r2, r3
 8008cde:	095b      	lsrs	r3, r3, #5
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ce6:	4498      	add	r8, r3
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	461d      	mov	r5, r3
 8008cec:	f04f 0600 	mov.w	r6, #0
 8008cf0:	46a9      	mov	r9, r5
 8008cf2:	46b2      	mov	sl, r6
 8008cf4:	eb19 0309 	adds.w	r3, r9, r9
 8008cf8:	eb4a 040a 	adc.w	r4, sl, sl
 8008cfc:	4699      	mov	r9, r3
 8008cfe:	46a2      	mov	sl, r4
 8008d00:	eb19 0905 	adds.w	r9, r9, r5
 8008d04:	eb4a 0a06 	adc.w	sl, sl, r6
 8008d08:	f04f 0100 	mov.w	r1, #0
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d1c:	4689      	mov	r9, r1
 8008d1e:	4692      	mov	sl, r2
 8008d20:	eb19 0005 	adds.w	r0, r9, r5
 8008d24:	eb4a 0106 	adc.w	r1, sl, r6
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	461d      	mov	r5, r3
 8008d2e:	f04f 0600 	mov.w	r6, #0
 8008d32:	196b      	adds	r3, r5, r5
 8008d34:	eb46 0406 	adc.w	r4, r6, r6
 8008d38:	461a      	mov	r2, r3
 8008d3a:	4623      	mov	r3, r4
 8008d3c:	f7f8 f816 	bl	8000d6c <__aeabi_uldivmod>
 8008d40:	4603      	mov	r3, r0
 8008d42:	460c      	mov	r4, r1
 8008d44:	461a      	mov	r2, r3
 8008d46:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <UART_SetConfig+0x384>)
 8008d48:	fba3 1302 	umull	r1, r3, r3, r2
 8008d4c:	095b      	lsrs	r3, r3, #5
 8008d4e:	2164      	movs	r1, #100	; 0x64
 8008d50:	fb01 f303 	mul.w	r3, r1, r3
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	00db      	lsls	r3, r3, #3
 8008d58:	3332      	adds	r3, #50	; 0x32
 8008d5a:	4a07      	ldr	r2, [pc, #28]	; (8008d78 <UART_SetConfig+0x384>)
 8008d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d60:	095b      	lsrs	r3, r3, #5
 8008d62:	f003 0207 	and.w	r2, r3, #7
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4442      	add	r2, r8
 8008d6c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008d6e:	e1b2      	b.n	80090d6 <UART_SetConfig+0x6e2>
 8008d70:	40011000 	.word	0x40011000
 8008d74:	40011400 	.word	0x40011400
 8008d78:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4ad7      	ldr	r2, [pc, #860]	; (80090e0 <UART_SetConfig+0x6ec>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d005      	beq.n	8008d92 <UART_SetConfig+0x39e>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4ad6      	ldr	r2, [pc, #856]	; (80090e4 <UART_SetConfig+0x6f0>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	f040 80d1 	bne.w	8008f34 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d92:	f7fe fa1f 	bl	80071d4 <HAL_RCC_GetPCLK2Freq>
 8008d96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	469a      	mov	sl, r3
 8008d9c:	f04f 0b00 	mov.w	fp, #0
 8008da0:	46d0      	mov	r8, sl
 8008da2:	46d9      	mov	r9, fp
 8008da4:	eb18 0308 	adds.w	r3, r8, r8
 8008da8:	eb49 0409 	adc.w	r4, r9, r9
 8008dac:	4698      	mov	r8, r3
 8008dae:	46a1      	mov	r9, r4
 8008db0:	eb18 080a 	adds.w	r8, r8, sl
 8008db4:	eb49 090b 	adc.w	r9, r9, fp
 8008db8:	f04f 0100 	mov.w	r1, #0
 8008dbc:	f04f 0200 	mov.w	r2, #0
 8008dc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008dc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008dc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008dcc:	4688      	mov	r8, r1
 8008dce:	4691      	mov	r9, r2
 8008dd0:	eb1a 0508 	adds.w	r5, sl, r8
 8008dd4:	eb4b 0609 	adc.w	r6, fp, r9
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	f04f 0200 	mov.w	r2, #0
 8008de2:	f04f 0300 	mov.w	r3, #0
 8008de6:	f04f 0400 	mov.w	r4, #0
 8008dea:	0094      	lsls	r4, r2, #2
 8008dec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008df0:	008b      	lsls	r3, r1, #2
 8008df2:	461a      	mov	r2, r3
 8008df4:	4623      	mov	r3, r4
 8008df6:	4628      	mov	r0, r5
 8008df8:	4631      	mov	r1, r6
 8008dfa:	f7f7 ffb7 	bl	8000d6c <__aeabi_uldivmod>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	460c      	mov	r4, r1
 8008e02:	461a      	mov	r2, r3
 8008e04:	4bb8      	ldr	r3, [pc, #736]	; (80090e8 <UART_SetConfig+0x6f4>)
 8008e06:	fba3 2302 	umull	r2, r3, r3, r2
 8008e0a:	095b      	lsrs	r3, r3, #5
 8008e0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	469b      	mov	fp, r3
 8008e14:	f04f 0c00 	mov.w	ip, #0
 8008e18:	46d9      	mov	r9, fp
 8008e1a:	46e2      	mov	sl, ip
 8008e1c:	eb19 0309 	adds.w	r3, r9, r9
 8008e20:	eb4a 040a 	adc.w	r4, sl, sl
 8008e24:	4699      	mov	r9, r3
 8008e26:	46a2      	mov	sl, r4
 8008e28:	eb19 090b 	adds.w	r9, r9, fp
 8008e2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008e30:	f04f 0100 	mov.w	r1, #0
 8008e34:	f04f 0200 	mov.w	r2, #0
 8008e38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e44:	4689      	mov	r9, r1
 8008e46:	4692      	mov	sl, r2
 8008e48:	eb1b 0509 	adds.w	r5, fp, r9
 8008e4c:	eb4c 060a 	adc.w	r6, ip, sl
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	4619      	mov	r1, r3
 8008e56:	f04f 0200 	mov.w	r2, #0
 8008e5a:	f04f 0300 	mov.w	r3, #0
 8008e5e:	f04f 0400 	mov.w	r4, #0
 8008e62:	0094      	lsls	r4, r2, #2
 8008e64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008e68:	008b      	lsls	r3, r1, #2
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	4623      	mov	r3, r4
 8008e6e:	4628      	mov	r0, r5
 8008e70:	4631      	mov	r1, r6
 8008e72:	f7f7 ff7b 	bl	8000d6c <__aeabi_uldivmod>
 8008e76:	4603      	mov	r3, r0
 8008e78:	460c      	mov	r4, r1
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	4b9a      	ldr	r3, [pc, #616]	; (80090e8 <UART_SetConfig+0x6f4>)
 8008e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8008e82:	095b      	lsrs	r3, r3, #5
 8008e84:	2164      	movs	r1, #100	; 0x64
 8008e86:	fb01 f303 	mul.w	r3, r1, r3
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	011b      	lsls	r3, r3, #4
 8008e8e:	3332      	adds	r3, #50	; 0x32
 8008e90:	4a95      	ldr	r2, [pc, #596]	; (80090e8 <UART_SetConfig+0x6f4>)
 8008e92:	fba2 2303 	umull	r2, r3, r2, r3
 8008e96:	095b      	lsrs	r3, r3, #5
 8008e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e9c:	4498      	add	r8, r3
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	469b      	mov	fp, r3
 8008ea2:	f04f 0c00 	mov.w	ip, #0
 8008ea6:	46d9      	mov	r9, fp
 8008ea8:	46e2      	mov	sl, ip
 8008eaa:	eb19 0309 	adds.w	r3, r9, r9
 8008eae:	eb4a 040a 	adc.w	r4, sl, sl
 8008eb2:	4699      	mov	r9, r3
 8008eb4:	46a2      	mov	sl, r4
 8008eb6:	eb19 090b 	adds.w	r9, r9, fp
 8008eba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008ebe:	f04f 0100 	mov.w	r1, #0
 8008ec2:	f04f 0200 	mov.w	r2, #0
 8008ec6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008eca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ece:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ed2:	4689      	mov	r9, r1
 8008ed4:	4692      	mov	sl, r2
 8008ed6:	eb1b 0509 	adds.w	r5, fp, r9
 8008eda:	eb4c 060a 	adc.w	r6, ip, sl
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	f04f 0200 	mov.w	r2, #0
 8008ee8:	f04f 0300 	mov.w	r3, #0
 8008eec:	f04f 0400 	mov.w	r4, #0
 8008ef0:	0094      	lsls	r4, r2, #2
 8008ef2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ef6:	008b      	lsls	r3, r1, #2
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4623      	mov	r3, r4
 8008efc:	4628      	mov	r0, r5
 8008efe:	4631      	mov	r1, r6
 8008f00:	f7f7 ff34 	bl	8000d6c <__aeabi_uldivmod>
 8008f04:	4603      	mov	r3, r0
 8008f06:	460c      	mov	r4, r1
 8008f08:	461a      	mov	r2, r3
 8008f0a:	4b77      	ldr	r3, [pc, #476]	; (80090e8 <UART_SetConfig+0x6f4>)
 8008f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f10:	095b      	lsrs	r3, r3, #5
 8008f12:	2164      	movs	r1, #100	; 0x64
 8008f14:	fb01 f303 	mul.w	r3, r1, r3
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	011b      	lsls	r3, r3, #4
 8008f1c:	3332      	adds	r3, #50	; 0x32
 8008f1e:	4a72      	ldr	r2, [pc, #456]	; (80090e8 <UART_SetConfig+0x6f4>)
 8008f20:	fba2 2303 	umull	r2, r3, r2, r3
 8008f24:	095b      	lsrs	r3, r3, #5
 8008f26:	f003 020f 	and.w	r2, r3, #15
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4442      	add	r2, r8
 8008f30:	609a      	str	r2, [r3, #8]
 8008f32:	e0d0      	b.n	80090d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f34:	f7fe f93a 	bl	80071ac <HAL_RCC_GetPCLK1Freq>
 8008f38:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	469a      	mov	sl, r3
 8008f3e:	f04f 0b00 	mov.w	fp, #0
 8008f42:	46d0      	mov	r8, sl
 8008f44:	46d9      	mov	r9, fp
 8008f46:	eb18 0308 	adds.w	r3, r8, r8
 8008f4a:	eb49 0409 	adc.w	r4, r9, r9
 8008f4e:	4698      	mov	r8, r3
 8008f50:	46a1      	mov	r9, r4
 8008f52:	eb18 080a 	adds.w	r8, r8, sl
 8008f56:	eb49 090b 	adc.w	r9, r9, fp
 8008f5a:	f04f 0100 	mov.w	r1, #0
 8008f5e:	f04f 0200 	mov.w	r2, #0
 8008f62:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008f66:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008f6a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008f6e:	4688      	mov	r8, r1
 8008f70:	4691      	mov	r9, r2
 8008f72:	eb1a 0508 	adds.w	r5, sl, r8
 8008f76:	eb4b 0609 	adc.w	r6, fp, r9
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	f04f 0200 	mov.w	r2, #0
 8008f84:	f04f 0300 	mov.w	r3, #0
 8008f88:	f04f 0400 	mov.w	r4, #0
 8008f8c:	0094      	lsls	r4, r2, #2
 8008f8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f92:	008b      	lsls	r3, r1, #2
 8008f94:	461a      	mov	r2, r3
 8008f96:	4623      	mov	r3, r4
 8008f98:	4628      	mov	r0, r5
 8008f9a:	4631      	mov	r1, r6
 8008f9c:	f7f7 fee6 	bl	8000d6c <__aeabi_uldivmod>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	4b50      	ldr	r3, [pc, #320]	; (80090e8 <UART_SetConfig+0x6f4>)
 8008fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8008fac:	095b      	lsrs	r3, r3, #5
 8008fae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	469b      	mov	fp, r3
 8008fb6:	f04f 0c00 	mov.w	ip, #0
 8008fba:	46d9      	mov	r9, fp
 8008fbc:	46e2      	mov	sl, ip
 8008fbe:	eb19 0309 	adds.w	r3, r9, r9
 8008fc2:	eb4a 040a 	adc.w	r4, sl, sl
 8008fc6:	4699      	mov	r9, r3
 8008fc8:	46a2      	mov	sl, r4
 8008fca:	eb19 090b 	adds.w	r9, r9, fp
 8008fce:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008fd2:	f04f 0100 	mov.w	r1, #0
 8008fd6:	f04f 0200 	mov.w	r2, #0
 8008fda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008fe2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008fe6:	4689      	mov	r9, r1
 8008fe8:	4692      	mov	sl, r2
 8008fea:	eb1b 0509 	adds.w	r5, fp, r9
 8008fee:	eb4c 060a 	adc.w	r6, ip, sl
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	f04f 0200 	mov.w	r2, #0
 8008ffc:	f04f 0300 	mov.w	r3, #0
 8009000:	f04f 0400 	mov.w	r4, #0
 8009004:	0094      	lsls	r4, r2, #2
 8009006:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800900a:	008b      	lsls	r3, r1, #2
 800900c:	461a      	mov	r2, r3
 800900e:	4623      	mov	r3, r4
 8009010:	4628      	mov	r0, r5
 8009012:	4631      	mov	r1, r6
 8009014:	f7f7 feaa 	bl	8000d6c <__aeabi_uldivmod>
 8009018:	4603      	mov	r3, r0
 800901a:	460c      	mov	r4, r1
 800901c:	461a      	mov	r2, r3
 800901e:	4b32      	ldr	r3, [pc, #200]	; (80090e8 <UART_SetConfig+0x6f4>)
 8009020:	fba3 1302 	umull	r1, r3, r3, r2
 8009024:	095b      	lsrs	r3, r3, #5
 8009026:	2164      	movs	r1, #100	; 0x64
 8009028:	fb01 f303 	mul.w	r3, r1, r3
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	3332      	adds	r3, #50	; 0x32
 8009032:	4a2d      	ldr	r2, [pc, #180]	; (80090e8 <UART_SetConfig+0x6f4>)
 8009034:	fba2 2303 	umull	r2, r3, r2, r3
 8009038:	095b      	lsrs	r3, r3, #5
 800903a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800903e:	4498      	add	r8, r3
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	469b      	mov	fp, r3
 8009044:	f04f 0c00 	mov.w	ip, #0
 8009048:	46d9      	mov	r9, fp
 800904a:	46e2      	mov	sl, ip
 800904c:	eb19 0309 	adds.w	r3, r9, r9
 8009050:	eb4a 040a 	adc.w	r4, sl, sl
 8009054:	4699      	mov	r9, r3
 8009056:	46a2      	mov	sl, r4
 8009058:	eb19 090b 	adds.w	r9, r9, fp
 800905c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009060:	f04f 0100 	mov.w	r1, #0
 8009064:	f04f 0200 	mov.w	r2, #0
 8009068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800906c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009070:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009074:	4689      	mov	r9, r1
 8009076:	4692      	mov	sl, r2
 8009078:	eb1b 0509 	adds.w	r5, fp, r9
 800907c:	eb4c 060a 	adc.w	r6, ip, sl
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	4619      	mov	r1, r3
 8009086:	f04f 0200 	mov.w	r2, #0
 800908a:	f04f 0300 	mov.w	r3, #0
 800908e:	f04f 0400 	mov.w	r4, #0
 8009092:	0094      	lsls	r4, r2, #2
 8009094:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009098:	008b      	lsls	r3, r1, #2
 800909a:	461a      	mov	r2, r3
 800909c:	4623      	mov	r3, r4
 800909e:	4628      	mov	r0, r5
 80090a0:	4631      	mov	r1, r6
 80090a2:	f7f7 fe63 	bl	8000d6c <__aeabi_uldivmod>
 80090a6:	4603      	mov	r3, r0
 80090a8:	460c      	mov	r4, r1
 80090aa:	461a      	mov	r2, r3
 80090ac:	4b0e      	ldr	r3, [pc, #56]	; (80090e8 <UART_SetConfig+0x6f4>)
 80090ae:	fba3 1302 	umull	r1, r3, r3, r2
 80090b2:	095b      	lsrs	r3, r3, #5
 80090b4:	2164      	movs	r1, #100	; 0x64
 80090b6:	fb01 f303 	mul.w	r3, r1, r3
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	011b      	lsls	r3, r3, #4
 80090be:	3332      	adds	r3, #50	; 0x32
 80090c0:	4a09      	ldr	r2, [pc, #36]	; (80090e8 <UART_SetConfig+0x6f4>)
 80090c2:	fba2 2303 	umull	r2, r3, r2, r3
 80090c6:	095b      	lsrs	r3, r3, #5
 80090c8:	f003 020f 	and.w	r2, r3, #15
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4442      	add	r2, r8
 80090d2:	609a      	str	r2, [r3, #8]
}
 80090d4:	e7ff      	b.n	80090d6 <UART_SetConfig+0x6e2>
 80090d6:	bf00      	nop
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e0:	40011000 	.word	0x40011000
 80090e4:	40011400 	.word	0x40011400
 80090e8:	51eb851f 	.word	0x51eb851f

080090ec <calloc>:
 80090ec:	4b02      	ldr	r3, [pc, #8]	; (80090f8 <calloc+0xc>)
 80090ee:	460a      	mov	r2, r1
 80090f0:	4601      	mov	r1, r0
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	f000 b83f 	b.w	8009176 <_calloc_r>
 80090f8:	20000048 	.word	0x20000048

080090fc <__errno>:
 80090fc:	4b01      	ldr	r3, [pc, #4]	; (8009104 <__errno+0x8>)
 80090fe:	6818      	ldr	r0, [r3, #0]
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20000048 	.word	0x20000048

08009108 <__libc_init_array>:
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	4e0d      	ldr	r6, [pc, #52]	; (8009140 <__libc_init_array+0x38>)
 800910c:	4c0d      	ldr	r4, [pc, #52]	; (8009144 <__libc_init_array+0x3c>)
 800910e:	1ba4      	subs	r4, r4, r6
 8009110:	10a4      	asrs	r4, r4, #2
 8009112:	2500      	movs	r5, #0
 8009114:	42a5      	cmp	r5, r4
 8009116:	d109      	bne.n	800912c <__libc_init_array+0x24>
 8009118:	4e0b      	ldr	r6, [pc, #44]	; (8009148 <__libc_init_array+0x40>)
 800911a:	4c0c      	ldr	r4, [pc, #48]	; (800914c <__libc_init_array+0x44>)
 800911c:	f001 f946 	bl	800a3ac <_init>
 8009120:	1ba4      	subs	r4, r4, r6
 8009122:	10a4      	asrs	r4, r4, #2
 8009124:	2500      	movs	r5, #0
 8009126:	42a5      	cmp	r5, r4
 8009128:	d105      	bne.n	8009136 <__libc_init_array+0x2e>
 800912a:	bd70      	pop	{r4, r5, r6, pc}
 800912c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009130:	4798      	blx	r3
 8009132:	3501      	adds	r5, #1
 8009134:	e7ee      	b.n	8009114 <__libc_init_array+0xc>
 8009136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800913a:	4798      	blx	r3
 800913c:	3501      	adds	r5, #1
 800913e:	e7f2      	b.n	8009126 <__libc_init_array+0x1e>
 8009140:	0800a438 	.word	0x0800a438
 8009144:	0800a438 	.word	0x0800a438
 8009148:	0800a438 	.word	0x0800a438
 800914c:	0800a43c 	.word	0x0800a43c

08009150 <memcpy>:
 8009150:	b510      	push	{r4, lr}
 8009152:	1e43      	subs	r3, r0, #1
 8009154:	440a      	add	r2, r1
 8009156:	4291      	cmp	r1, r2
 8009158:	d100      	bne.n	800915c <memcpy+0xc>
 800915a:	bd10      	pop	{r4, pc}
 800915c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009160:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009164:	e7f7      	b.n	8009156 <memcpy+0x6>

08009166 <memset>:
 8009166:	4402      	add	r2, r0
 8009168:	4603      	mov	r3, r0
 800916a:	4293      	cmp	r3, r2
 800916c:	d100      	bne.n	8009170 <memset+0xa>
 800916e:	4770      	bx	lr
 8009170:	f803 1b01 	strb.w	r1, [r3], #1
 8009174:	e7f9      	b.n	800916a <memset+0x4>

08009176 <_calloc_r>:
 8009176:	b538      	push	{r3, r4, r5, lr}
 8009178:	fb02 f401 	mul.w	r4, r2, r1
 800917c:	4621      	mov	r1, r4
 800917e:	f000 f809 	bl	8009194 <_malloc_r>
 8009182:	4605      	mov	r5, r0
 8009184:	b118      	cbz	r0, 800918e <_calloc_r+0x18>
 8009186:	4622      	mov	r2, r4
 8009188:	2100      	movs	r1, #0
 800918a:	f7ff ffec 	bl	8009166 <memset>
 800918e:	4628      	mov	r0, r5
 8009190:	bd38      	pop	{r3, r4, r5, pc}
	...

08009194 <_malloc_r>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	1ccd      	adds	r5, r1, #3
 8009198:	f025 0503 	bic.w	r5, r5, #3
 800919c:	3508      	adds	r5, #8
 800919e:	2d0c      	cmp	r5, #12
 80091a0:	bf38      	it	cc
 80091a2:	250c      	movcc	r5, #12
 80091a4:	2d00      	cmp	r5, #0
 80091a6:	4606      	mov	r6, r0
 80091a8:	db01      	blt.n	80091ae <_malloc_r+0x1a>
 80091aa:	42a9      	cmp	r1, r5
 80091ac:	d903      	bls.n	80091b6 <_malloc_r+0x22>
 80091ae:	230c      	movs	r3, #12
 80091b0:	6033      	str	r3, [r6, #0]
 80091b2:	2000      	movs	r0, #0
 80091b4:	bd70      	pop	{r4, r5, r6, pc}
 80091b6:	f000 f857 	bl	8009268 <__malloc_lock>
 80091ba:	4a21      	ldr	r2, [pc, #132]	; (8009240 <_malloc_r+0xac>)
 80091bc:	6814      	ldr	r4, [r2, #0]
 80091be:	4621      	mov	r1, r4
 80091c0:	b991      	cbnz	r1, 80091e8 <_malloc_r+0x54>
 80091c2:	4c20      	ldr	r4, [pc, #128]	; (8009244 <_malloc_r+0xb0>)
 80091c4:	6823      	ldr	r3, [r4, #0]
 80091c6:	b91b      	cbnz	r3, 80091d0 <_malloc_r+0x3c>
 80091c8:	4630      	mov	r0, r6
 80091ca:	f000 f83d 	bl	8009248 <_sbrk_r>
 80091ce:	6020      	str	r0, [r4, #0]
 80091d0:	4629      	mov	r1, r5
 80091d2:	4630      	mov	r0, r6
 80091d4:	f000 f838 	bl	8009248 <_sbrk_r>
 80091d8:	1c43      	adds	r3, r0, #1
 80091da:	d124      	bne.n	8009226 <_malloc_r+0x92>
 80091dc:	230c      	movs	r3, #12
 80091de:	6033      	str	r3, [r6, #0]
 80091e0:	4630      	mov	r0, r6
 80091e2:	f000 f842 	bl	800926a <__malloc_unlock>
 80091e6:	e7e4      	b.n	80091b2 <_malloc_r+0x1e>
 80091e8:	680b      	ldr	r3, [r1, #0]
 80091ea:	1b5b      	subs	r3, r3, r5
 80091ec:	d418      	bmi.n	8009220 <_malloc_r+0x8c>
 80091ee:	2b0b      	cmp	r3, #11
 80091f0:	d90f      	bls.n	8009212 <_malloc_r+0x7e>
 80091f2:	600b      	str	r3, [r1, #0]
 80091f4:	50cd      	str	r5, [r1, r3]
 80091f6:	18cc      	adds	r4, r1, r3
 80091f8:	4630      	mov	r0, r6
 80091fa:	f000 f836 	bl	800926a <__malloc_unlock>
 80091fe:	f104 000b 	add.w	r0, r4, #11
 8009202:	1d23      	adds	r3, r4, #4
 8009204:	f020 0007 	bic.w	r0, r0, #7
 8009208:	1ac3      	subs	r3, r0, r3
 800920a:	d0d3      	beq.n	80091b4 <_malloc_r+0x20>
 800920c:	425a      	negs	r2, r3
 800920e:	50e2      	str	r2, [r4, r3]
 8009210:	e7d0      	b.n	80091b4 <_malloc_r+0x20>
 8009212:	428c      	cmp	r4, r1
 8009214:	684b      	ldr	r3, [r1, #4]
 8009216:	bf16      	itet	ne
 8009218:	6063      	strne	r3, [r4, #4]
 800921a:	6013      	streq	r3, [r2, #0]
 800921c:	460c      	movne	r4, r1
 800921e:	e7eb      	b.n	80091f8 <_malloc_r+0x64>
 8009220:	460c      	mov	r4, r1
 8009222:	6849      	ldr	r1, [r1, #4]
 8009224:	e7cc      	b.n	80091c0 <_malloc_r+0x2c>
 8009226:	1cc4      	adds	r4, r0, #3
 8009228:	f024 0403 	bic.w	r4, r4, #3
 800922c:	42a0      	cmp	r0, r4
 800922e:	d005      	beq.n	800923c <_malloc_r+0xa8>
 8009230:	1a21      	subs	r1, r4, r0
 8009232:	4630      	mov	r0, r6
 8009234:	f000 f808 	bl	8009248 <_sbrk_r>
 8009238:	3001      	adds	r0, #1
 800923a:	d0cf      	beq.n	80091dc <_malloc_r+0x48>
 800923c:	6025      	str	r5, [r4, #0]
 800923e:	e7db      	b.n	80091f8 <_malloc_r+0x64>
 8009240:	20000204 	.word	0x20000204
 8009244:	20000208 	.word	0x20000208

08009248 <_sbrk_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4c06      	ldr	r4, [pc, #24]	; (8009264 <_sbrk_r+0x1c>)
 800924c:	2300      	movs	r3, #0
 800924e:	4605      	mov	r5, r0
 8009250:	4608      	mov	r0, r1
 8009252:	6023      	str	r3, [r4, #0]
 8009254:	f7fa fd54 	bl	8003d00 <_sbrk>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d102      	bne.n	8009262 <_sbrk_r+0x1a>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	b103      	cbz	r3, 8009262 <_sbrk_r+0x1a>
 8009260:	602b      	str	r3, [r5, #0]
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	20000470 	.word	0x20000470

08009268 <__malloc_lock>:
 8009268:	4770      	bx	lr

0800926a <__malloc_unlock>:
 800926a:	4770      	bx	lr

0800926c <round>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	ec57 6b10 	vmov	r6, r7, d0
 8009272:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8009276:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800927a:	2c13      	cmp	r4, #19
 800927c:	463b      	mov	r3, r7
 800927e:	463d      	mov	r5, r7
 8009280:	dc17      	bgt.n	80092b2 <round+0x46>
 8009282:	2c00      	cmp	r4, #0
 8009284:	da09      	bge.n	800929a <round+0x2e>
 8009286:	3401      	adds	r4, #1
 8009288:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800928c:	d103      	bne.n	8009296 <round+0x2a>
 800928e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009292:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009296:	2100      	movs	r1, #0
 8009298:	e02c      	b.n	80092f4 <round+0x88>
 800929a:	4a18      	ldr	r2, [pc, #96]	; (80092fc <round+0x90>)
 800929c:	4122      	asrs	r2, r4
 800929e:	4217      	tst	r7, r2
 80092a0:	d100      	bne.n	80092a4 <round+0x38>
 80092a2:	b19e      	cbz	r6, 80092cc <round+0x60>
 80092a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80092a8:	4123      	asrs	r3, r4
 80092aa:	442b      	add	r3, r5
 80092ac:	ea23 0302 	bic.w	r3, r3, r2
 80092b0:	e7f1      	b.n	8009296 <round+0x2a>
 80092b2:	2c33      	cmp	r4, #51	; 0x33
 80092b4:	dd0d      	ble.n	80092d2 <round+0x66>
 80092b6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80092ba:	d107      	bne.n	80092cc <round+0x60>
 80092bc:	4630      	mov	r0, r6
 80092be:	4639      	mov	r1, r7
 80092c0:	ee10 2a10 	vmov	r2, s0
 80092c4:	f7f6 ff8e 	bl	80001e4 <__adddf3>
 80092c8:	4606      	mov	r6, r0
 80092ca:	460f      	mov	r7, r1
 80092cc:	ec47 6b10 	vmov	d0, r6, r7
 80092d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092d2:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80092d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092da:	40d0      	lsrs	r0, r2
 80092dc:	4206      	tst	r6, r0
 80092de:	d0f5      	beq.n	80092cc <round+0x60>
 80092e0:	2201      	movs	r2, #1
 80092e2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80092e6:	fa02 f404 	lsl.w	r4, r2, r4
 80092ea:	1931      	adds	r1, r6, r4
 80092ec:	bf28      	it	cs
 80092ee:	189b      	addcs	r3, r3, r2
 80092f0:	ea21 0100 	bic.w	r1, r1, r0
 80092f4:	461f      	mov	r7, r3
 80092f6:	460e      	mov	r6, r1
 80092f8:	e7e8      	b.n	80092cc <round+0x60>
 80092fa:	bf00      	nop
 80092fc:	000fffff 	.word	0x000fffff

08009300 <pow>:
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	ed2d 8b04 	vpush	{d8-d9}
 8009308:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80095dc <pow+0x2dc>
 800930c:	b08d      	sub	sp, #52	; 0x34
 800930e:	ec57 6b10 	vmov	r6, r7, d0
 8009312:	ec55 4b11 	vmov	r4, r5, d1
 8009316:	f000 f963 	bl	80095e0 <__ieee754_pow>
 800931a:	f999 3000 	ldrsb.w	r3, [r9]
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	3301      	adds	r3, #1
 8009322:	eeb0 8a40 	vmov.f32	s16, s0
 8009326:	eef0 8a60 	vmov.f32	s17, s1
 800932a:	46c8      	mov	r8, r9
 800932c:	d05f      	beq.n	80093ee <pow+0xee>
 800932e:	4622      	mov	r2, r4
 8009330:	462b      	mov	r3, r5
 8009332:	4620      	mov	r0, r4
 8009334:	4629      	mov	r1, r5
 8009336:	f7f7 fba5 	bl	8000a84 <__aeabi_dcmpun>
 800933a:	4683      	mov	fp, r0
 800933c:	2800      	cmp	r0, #0
 800933e:	d156      	bne.n	80093ee <pow+0xee>
 8009340:	4632      	mov	r2, r6
 8009342:	463b      	mov	r3, r7
 8009344:	4630      	mov	r0, r6
 8009346:	4639      	mov	r1, r7
 8009348:	f7f7 fb9c 	bl	8000a84 <__aeabi_dcmpun>
 800934c:	9001      	str	r0, [sp, #4]
 800934e:	b1e8      	cbz	r0, 800938c <pow+0x8c>
 8009350:	2200      	movs	r2, #0
 8009352:	2300      	movs	r3, #0
 8009354:	4620      	mov	r0, r4
 8009356:	4629      	mov	r1, r5
 8009358:	f7f7 fb62 	bl	8000a20 <__aeabi_dcmpeq>
 800935c:	2800      	cmp	r0, #0
 800935e:	d046      	beq.n	80093ee <pow+0xee>
 8009360:	2301      	movs	r3, #1
 8009362:	9302      	str	r3, [sp, #8]
 8009364:	4b96      	ldr	r3, [pc, #600]	; (80095c0 <pow+0x2c0>)
 8009366:	9303      	str	r3, [sp, #12]
 8009368:	4b96      	ldr	r3, [pc, #600]	; (80095c4 <pow+0x2c4>)
 800936a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800936e:	2200      	movs	r2, #0
 8009370:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009374:	9b00      	ldr	r3, [sp, #0]
 8009376:	2b02      	cmp	r3, #2
 8009378:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800937c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009380:	d033      	beq.n	80093ea <pow+0xea>
 8009382:	a802      	add	r0, sp, #8
 8009384:	f000 fefb 	bl	800a17e <matherr>
 8009388:	bb48      	cbnz	r0, 80093de <pow+0xde>
 800938a:	e05d      	b.n	8009448 <pow+0x148>
 800938c:	f04f 0a00 	mov.w	sl, #0
 8009390:	f04f 0b00 	mov.w	fp, #0
 8009394:	4652      	mov	r2, sl
 8009396:	465b      	mov	r3, fp
 8009398:	4630      	mov	r0, r6
 800939a:	4639      	mov	r1, r7
 800939c:	f7f7 fb40 	bl	8000a20 <__aeabi_dcmpeq>
 80093a0:	ec4b ab19 	vmov	d9, sl, fp
 80093a4:	2800      	cmp	r0, #0
 80093a6:	d054      	beq.n	8009452 <pow+0x152>
 80093a8:	4652      	mov	r2, sl
 80093aa:	465b      	mov	r3, fp
 80093ac:	4620      	mov	r0, r4
 80093ae:	4629      	mov	r1, r5
 80093b0:	f7f7 fb36 	bl	8000a20 <__aeabi_dcmpeq>
 80093b4:	4680      	mov	r8, r0
 80093b6:	b318      	cbz	r0, 8009400 <pow+0x100>
 80093b8:	2301      	movs	r3, #1
 80093ba:	9302      	str	r3, [sp, #8]
 80093bc:	4b80      	ldr	r3, [pc, #512]	; (80095c0 <pow+0x2c0>)
 80093be:	9303      	str	r3, [sp, #12]
 80093c0:	9b01      	ldr	r3, [sp, #4]
 80093c2:	930a      	str	r3, [sp, #40]	; 0x28
 80093c4:	9b00      	ldr	r3, [sp, #0]
 80093c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80093ca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80093ce:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d0d5      	beq.n	8009382 <pow+0x82>
 80093d6:	4b7b      	ldr	r3, [pc, #492]	; (80095c4 <pow+0x2c4>)
 80093d8:	2200      	movs	r2, #0
 80093da:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e0:	b11b      	cbz	r3, 80093ea <pow+0xea>
 80093e2:	f7ff fe8b 	bl	80090fc <__errno>
 80093e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e8:	6003      	str	r3, [r0, #0]
 80093ea:	ed9d 8b08 	vldr	d8, [sp, #32]
 80093ee:	eeb0 0a48 	vmov.f32	s0, s16
 80093f2:	eef0 0a68 	vmov.f32	s1, s17
 80093f6:	b00d      	add	sp, #52	; 0x34
 80093f8:	ecbd 8b04 	vpop	{d8-d9}
 80093fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009400:	ec45 4b10 	vmov	d0, r4, r5
 8009404:	f000 feb3 	bl	800a16e <finite>
 8009408:	2800      	cmp	r0, #0
 800940a:	d0f0      	beq.n	80093ee <pow+0xee>
 800940c:	4652      	mov	r2, sl
 800940e:	465b      	mov	r3, fp
 8009410:	4620      	mov	r0, r4
 8009412:	4629      	mov	r1, r5
 8009414:	f7f7 fb0e 	bl	8000a34 <__aeabi_dcmplt>
 8009418:	2800      	cmp	r0, #0
 800941a:	d0e8      	beq.n	80093ee <pow+0xee>
 800941c:	2301      	movs	r3, #1
 800941e:	9302      	str	r3, [sp, #8]
 8009420:	4b67      	ldr	r3, [pc, #412]	; (80095c0 <pow+0x2c0>)
 8009422:	9303      	str	r3, [sp, #12]
 8009424:	f999 3000 	ldrsb.w	r3, [r9]
 8009428:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800942c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009430:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009434:	b913      	cbnz	r3, 800943c <pow+0x13c>
 8009436:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800943a:	e7a2      	b.n	8009382 <pow+0x82>
 800943c:	4962      	ldr	r1, [pc, #392]	; (80095c8 <pow+0x2c8>)
 800943e:	2000      	movs	r0, #0
 8009440:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009444:	2b02      	cmp	r3, #2
 8009446:	d19c      	bne.n	8009382 <pow+0x82>
 8009448:	f7ff fe58 	bl	80090fc <__errno>
 800944c:	2321      	movs	r3, #33	; 0x21
 800944e:	6003      	str	r3, [r0, #0]
 8009450:	e7c5      	b.n	80093de <pow+0xde>
 8009452:	eeb0 0a48 	vmov.f32	s0, s16
 8009456:	eef0 0a68 	vmov.f32	s1, s17
 800945a:	f000 fe88 	bl	800a16e <finite>
 800945e:	9000      	str	r0, [sp, #0]
 8009460:	2800      	cmp	r0, #0
 8009462:	f040 8081 	bne.w	8009568 <pow+0x268>
 8009466:	ec47 6b10 	vmov	d0, r6, r7
 800946a:	f000 fe80 	bl	800a16e <finite>
 800946e:	2800      	cmp	r0, #0
 8009470:	d07a      	beq.n	8009568 <pow+0x268>
 8009472:	ec45 4b10 	vmov	d0, r4, r5
 8009476:	f000 fe7a 	bl	800a16e <finite>
 800947a:	2800      	cmp	r0, #0
 800947c:	d074      	beq.n	8009568 <pow+0x268>
 800947e:	ec53 2b18 	vmov	r2, r3, d8
 8009482:	ee18 0a10 	vmov	r0, s16
 8009486:	4619      	mov	r1, r3
 8009488:	f7f7 fafc 	bl	8000a84 <__aeabi_dcmpun>
 800948c:	f999 9000 	ldrsb.w	r9, [r9]
 8009490:	4b4b      	ldr	r3, [pc, #300]	; (80095c0 <pow+0x2c0>)
 8009492:	b1b0      	cbz	r0, 80094c2 <pow+0x1c2>
 8009494:	2201      	movs	r2, #1
 8009496:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800949a:	9b00      	ldr	r3, [sp, #0]
 800949c:	930a      	str	r3, [sp, #40]	; 0x28
 800949e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80094a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80094a6:	f1b9 0f00 	cmp.w	r9, #0
 80094aa:	d0c4      	beq.n	8009436 <pow+0x136>
 80094ac:	4652      	mov	r2, sl
 80094ae:	465b      	mov	r3, fp
 80094b0:	4650      	mov	r0, sl
 80094b2:	4659      	mov	r1, fp
 80094b4:	f7f7 f976 	bl	80007a4 <__aeabi_ddiv>
 80094b8:	f1b9 0f02 	cmp.w	r9, #2
 80094bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80094c0:	e7c1      	b.n	8009446 <pow+0x146>
 80094c2:	2203      	movs	r2, #3
 80094c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094c8:	900a      	str	r0, [sp, #40]	; 0x28
 80094ca:	4629      	mov	r1, r5
 80094cc:	4620      	mov	r0, r4
 80094ce:	2200      	movs	r2, #0
 80094d0:	4b3e      	ldr	r3, [pc, #248]	; (80095cc <pow+0x2cc>)
 80094d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80094d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80094da:	f7f7 f839 	bl	8000550 <__aeabi_dmul>
 80094de:	4604      	mov	r4, r0
 80094e0:	460d      	mov	r5, r1
 80094e2:	f1b9 0f00 	cmp.w	r9, #0
 80094e6:	d124      	bne.n	8009532 <pow+0x232>
 80094e8:	4b39      	ldr	r3, [pc, #228]	; (80095d0 <pow+0x2d0>)
 80094ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80094ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094f2:	4630      	mov	r0, r6
 80094f4:	4652      	mov	r2, sl
 80094f6:	465b      	mov	r3, fp
 80094f8:	4639      	mov	r1, r7
 80094fa:	f7f7 fa9b 	bl	8000a34 <__aeabi_dcmplt>
 80094fe:	2800      	cmp	r0, #0
 8009500:	d056      	beq.n	80095b0 <pow+0x2b0>
 8009502:	ec45 4b10 	vmov	d0, r4, r5
 8009506:	f000 fe47 	bl	800a198 <rint>
 800950a:	4622      	mov	r2, r4
 800950c:	462b      	mov	r3, r5
 800950e:	ec51 0b10 	vmov	r0, r1, d0
 8009512:	f7f7 fa85 	bl	8000a20 <__aeabi_dcmpeq>
 8009516:	b920      	cbnz	r0, 8009522 <pow+0x222>
 8009518:	4b2e      	ldr	r3, [pc, #184]	; (80095d4 <pow+0x2d4>)
 800951a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800951e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009522:	f998 3000 	ldrsb.w	r3, [r8]
 8009526:	2b02      	cmp	r3, #2
 8009528:	d142      	bne.n	80095b0 <pow+0x2b0>
 800952a:	f7ff fde7 	bl	80090fc <__errno>
 800952e:	2322      	movs	r3, #34	; 0x22
 8009530:	e78d      	b.n	800944e <pow+0x14e>
 8009532:	4b29      	ldr	r3, [pc, #164]	; (80095d8 <pow+0x2d8>)
 8009534:	2200      	movs	r2, #0
 8009536:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800953a:	4630      	mov	r0, r6
 800953c:	4652      	mov	r2, sl
 800953e:	465b      	mov	r3, fp
 8009540:	4639      	mov	r1, r7
 8009542:	f7f7 fa77 	bl	8000a34 <__aeabi_dcmplt>
 8009546:	2800      	cmp	r0, #0
 8009548:	d0eb      	beq.n	8009522 <pow+0x222>
 800954a:	ec45 4b10 	vmov	d0, r4, r5
 800954e:	f000 fe23 	bl	800a198 <rint>
 8009552:	4622      	mov	r2, r4
 8009554:	462b      	mov	r3, r5
 8009556:	ec51 0b10 	vmov	r0, r1, d0
 800955a:	f7f7 fa61 	bl	8000a20 <__aeabi_dcmpeq>
 800955e:	2800      	cmp	r0, #0
 8009560:	d1df      	bne.n	8009522 <pow+0x222>
 8009562:	2200      	movs	r2, #0
 8009564:	4b18      	ldr	r3, [pc, #96]	; (80095c8 <pow+0x2c8>)
 8009566:	e7da      	b.n	800951e <pow+0x21e>
 8009568:	2200      	movs	r2, #0
 800956a:	2300      	movs	r3, #0
 800956c:	ec51 0b18 	vmov	r0, r1, d8
 8009570:	f7f7 fa56 	bl	8000a20 <__aeabi_dcmpeq>
 8009574:	2800      	cmp	r0, #0
 8009576:	f43f af3a 	beq.w	80093ee <pow+0xee>
 800957a:	ec47 6b10 	vmov	d0, r6, r7
 800957e:	f000 fdf6 	bl	800a16e <finite>
 8009582:	2800      	cmp	r0, #0
 8009584:	f43f af33 	beq.w	80093ee <pow+0xee>
 8009588:	ec45 4b10 	vmov	d0, r4, r5
 800958c:	f000 fdef 	bl	800a16e <finite>
 8009590:	2800      	cmp	r0, #0
 8009592:	f43f af2c 	beq.w	80093ee <pow+0xee>
 8009596:	2304      	movs	r3, #4
 8009598:	9302      	str	r3, [sp, #8]
 800959a:	4b09      	ldr	r3, [pc, #36]	; (80095c0 <pow+0x2c0>)
 800959c:	9303      	str	r3, [sp, #12]
 800959e:	2300      	movs	r3, #0
 80095a0:	930a      	str	r3, [sp, #40]	; 0x28
 80095a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80095a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80095aa:	ed8d 9b08 	vstr	d9, [sp, #32]
 80095ae:	e7b8      	b.n	8009522 <pow+0x222>
 80095b0:	a802      	add	r0, sp, #8
 80095b2:	f000 fde4 	bl	800a17e <matherr>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	f47f af11 	bne.w	80093de <pow+0xde>
 80095bc:	e7b5      	b.n	800952a <pow+0x22a>
 80095be:	bf00      	nop
 80095c0:	0800a3e8 	.word	0x0800a3e8
 80095c4:	3ff00000 	.word	0x3ff00000
 80095c8:	fff00000 	.word	0xfff00000
 80095cc:	3fe00000 	.word	0x3fe00000
 80095d0:	47efffff 	.word	0x47efffff
 80095d4:	c7efffff 	.word	0xc7efffff
 80095d8:	7ff00000 	.word	0x7ff00000
 80095dc:	200000ac 	.word	0x200000ac

080095e0 <__ieee754_pow>:
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	b091      	sub	sp, #68	; 0x44
 80095e6:	ed8d 1b00 	vstr	d1, [sp]
 80095ea:	e9dd 2900 	ldrd	r2, r9, [sp]
 80095ee:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80095f2:	ea58 0302 	orrs.w	r3, r8, r2
 80095f6:	ec57 6b10 	vmov	r6, r7, d0
 80095fa:	f000 84be 	beq.w	8009f7a <__ieee754_pow+0x99a>
 80095fe:	4b7a      	ldr	r3, [pc, #488]	; (80097e8 <__ieee754_pow+0x208>)
 8009600:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009604:	429c      	cmp	r4, r3
 8009606:	463d      	mov	r5, r7
 8009608:	ee10 aa10 	vmov	sl, s0
 800960c:	dc09      	bgt.n	8009622 <__ieee754_pow+0x42>
 800960e:	d103      	bne.n	8009618 <__ieee754_pow+0x38>
 8009610:	b93e      	cbnz	r6, 8009622 <__ieee754_pow+0x42>
 8009612:	45a0      	cmp	r8, r4
 8009614:	dc0d      	bgt.n	8009632 <__ieee754_pow+0x52>
 8009616:	e001      	b.n	800961c <__ieee754_pow+0x3c>
 8009618:	4598      	cmp	r8, r3
 800961a:	dc02      	bgt.n	8009622 <__ieee754_pow+0x42>
 800961c:	4598      	cmp	r8, r3
 800961e:	d10e      	bne.n	800963e <__ieee754_pow+0x5e>
 8009620:	b16a      	cbz	r2, 800963e <__ieee754_pow+0x5e>
 8009622:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009626:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800962a:	ea54 030a 	orrs.w	r3, r4, sl
 800962e:	f000 84a4 	beq.w	8009f7a <__ieee754_pow+0x99a>
 8009632:	486e      	ldr	r0, [pc, #440]	; (80097ec <__ieee754_pow+0x20c>)
 8009634:	b011      	add	sp, #68	; 0x44
 8009636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963a:	f000 bda5 	b.w	800a188 <nan>
 800963e:	2d00      	cmp	r5, #0
 8009640:	da53      	bge.n	80096ea <__ieee754_pow+0x10a>
 8009642:	4b6b      	ldr	r3, [pc, #428]	; (80097f0 <__ieee754_pow+0x210>)
 8009644:	4598      	cmp	r8, r3
 8009646:	dc4d      	bgt.n	80096e4 <__ieee754_pow+0x104>
 8009648:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800964c:	4598      	cmp	r8, r3
 800964e:	dd4c      	ble.n	80096ea <__ieee754_pow+0x10a>
 8009650:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009654:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009658:	2b14      	cmp	r3, #20
 800965a:	dd26      	ble.n	80096aa <__ieee754_pow+0xca>
 800965c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009660:	fa22 f103 	lsr.w	r1, r2, r3
 8009664:	fa01 f303 	lsl.w	r3, r1, r3
 8009668:	4293      	cmp	r3, r2
 800966a:	d13e      	bne.n	80096ea <__ieee754_pow+0x10a>
 800966c:	f001 0101 	and.w	r1, r1, #1
 8009670:	f1c1 0b02 	rsb	fp, r1, #2
 8009674:	2a00      	cmp	r2, #0
 8009676:	d15b      	bne.n	8009730 <__ieee754_pow+0x150>
 8009678:	4b5b      	ldr	r3, [pc, #364]	; (80097e8 <__ieee754_pow+0x208>)
 800967a:	4598      	cmp	r8, r3
 800967c:	d124      	bne.n	80096c8 <__ieee754_pow+0xe8>
 800967e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009682:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009686:	ea53 030a 	orrs.w	r3, r3, sl
 800968a:	f000 8476 	beq.w	8009f7a <__ieee754_pow+0x99a>
 800968e:	4b59      	ldr	r3, [pc, #356]	; (80097f4 <__ieee754_pow+0x214>)
 8009690:	429c      	cmp	r4, r3
 8009692:	dd2d      	ble.n	80096f0 <__ieee754_pow+0x110>
 8009694:	f1b9 0f00 	cmp.w	r9, #0
 8009698:	f280 8473 	bge.w	8009f82 <__ieee754_pow+0x9a2>
 800969c:	2000      	movs	r0, #0
 800969e:	2100      	movs	r1, #0
 80096a0:	ec41 0b10 	vmov	d0, r0, r1
 80096a4:	b011      	add	sp, #68	; 0x44
 80096a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096aa:	2a00      	cmp	r2, #0
 80096ac:	d13e      	bne.n	800972c <__ieee754_pow+0x14c>
 80096ae:	f1c3 0314 	rsb	r3, r3, #20
 80096b2:	fa48 f103 	asr.w	r1, r8, r3
 80096b6:	fa01 f303 	lsl.w	r3, r1, r3
 80096ba:	4543      	cmp	r3, r8
 80096bc:	f040 8469 	bne.w	8009f92 <__ieee754_pow+0x9b2>
 80096c0:	f001 0101 	and.w	r1, r1, #1
 80096c4:	f1c1 0b02 	rsb	fp, r1, #2
 80096c8:	4b4b      	ldr	r3, [pc, #300]	; (80097f8 <__ieee754_pow+0x218>)
 80096ca:	4598      	cmp	r8, r3
 80096cc:	d118      	bne.n	8009700 <__ieee754_pow+0x120>
 80096ce:	f1b9 0f00 	cmp.w	r9, #0
 80096d2:	f280 845a 	bge.w	8009f8a <__ieee754_pow+0x9aa>
 80096d6:	4948      	ldr	r1, [pc, #288]	; (80097f8 <__ieee754_pow+0x218>)
 80096d8:	4632      	mov	r2, r6
 80096da:	463b      	mov	r3, r7
 80096dc:	2000      	movs	r0, #0
 80096de:	f7f7 f861 	bl	80007a4 <__aeabi_ddiv>
 80096e2:	e7dd      	b.n	80096a0 <__ieee754_pow+0xc0>
 80096e4:	f04f 0b02 	mov.w	fp, #2
 80096e8:	e7c4      	b.n	8009674 <__ieee754_pow+0x94>
 80096ea:	f04f 0b00 	mov.w	fp, #0
 80096ee:	e7c1      	b.n	8009674 <__ieee754_pow+0x94>
 80096f0:	f1b9 0f00 	cmp.w	r9, #0
 80096f4:	dad2      	bge.n	800969c <__ieee754_pow+0xbc>
 80096f6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80096fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80096fe:	e7cf      	b.n	80096a0 <__ieee754_pow+0xc0>
 8009700:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009704:	d106      	bne.n	8009714 <__ieee754_pow+0x134>
 8009706:	4632      	mov	r2, r6
 8009708:	463b      	mov	r3, r7
 800970a:	4610      	mov	r0, r2
 800970c:	4619      	mov	r1, r3
 800970e:	f7f6 ff1f 	bl	8000550 <__aeabi_dmul>
 8009712:	e7c5      	b.n	80096a0 <__ieee754_pow+0xc0>
 8009714:	4b39      	ldr	r3, [pc, #228]	; (80097fc <__ieee754_pow+0x21c>)
 8009716:	4599      	cmp	r9, r3
 8009718:	d10a      	bne.n	8009730 <__ieee754_pow+0x150>
 800971a:	2d00      	cmp	r5, #0
 800971c:	db08      	blt.n	8009730 <__ieee754_pow+0x150>
 800971e:	ec47 6b10 	vmov	d0, r6, r7
 8009722:	b011      	add	sp, #68	; 0x44
 8009724:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009728:	f000 bc68 	b.w	8009ffc <__ieee754_sqrt>
 800972c:	f04f 0b00 	mov.w	fp, #0
 8009730:	ec47 6b10 	vmov	d0, r6, r7
 8009734:	f000 fd12 	bl	800a15c <fabs>
 8009738:	ec51 0b10 	vmov	r0, r1, d0
 800973c:	f1ba 0f00 	cmp.w	sl, #0
 8009740:	d127      	bne.n	8009792 <__ieee754_pow+0x1b2>
 8009742:	b124      	cbz	r4, 800974e <__ieee754_pow+0x16e>
 8009744:	4b2c      	ldr	r3, [pc, #176]	; (80097f8 <__ieee754_pow+0x218>)
 8009746:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800974a:	429a      	cmp	r2, r3
 800974c:	d121      	bne.n	8009792 <__ieee754_pow+0x1b2>
 800974e:	f1b9 0f00 	cmp.w	r9, #0
 8009752:	da05      	bge.n	8009760 <__ieee754_pow+0x180>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	2000      	movs	r0, #0
 800975a:	4927      	ldr	r1, [pc, #156]	; (80097f8 <__ieee754_pow+0x218>)
 800975c:	f7f7 f822 	bl	80007a4 <__aeabi_ddiv>
 8009760:	2d00      	cmp	r5, #0
 8009762:	da9d      	bge.n	80096a0 <__ieee754_pow+0xc0>
 8009764:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009768:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800976c:	ea54 030b 	orrs.w	r3, r4, fp
 8009770:	d108      	bne.n	8009784 <__ieee754_pow+0x1a4>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	4610      	mov	r0, r2
 8009778:	4619      	mov	r1, r3
 800977a:	f7f6 fd31 	bl	80001e0 <__aeabi_dsub>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	e7ac      	b.n	80096de <__ieee754_pow+0xfe>
 8009784:	f1bb 0f01 	cmp.w	fp, #1
 8009788:	d18a      	bne.n	80096a0 <__ieee754_pow+0xc0>
 800978a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800978e:	4619      	mov	r1, r3
 8009790:	e786      	b.n	80096a0 <__ieee754_pow+0xc0>
 8009792:	0fed      	lsrs	r5, r5, #31
 8009794:	1e6b      	subs	r3, r5, #1
 8009796:	930d      	str	r3, [sp, #52]	; 0x34
 8009798:	ea5b 0303 	orrs.w	r3, fp, r3
 800979c:	d102      	bne.n	80097a4 <__ieee754_pow+0x1c4>
 800979e:	4632      	mov	r2, r6
 80097a0:	463b      	mov	r3, r7
 80097a2:	e7e8      	b.n	8009776 <__ieee754_pow+0x196>
 80097a4:	4b16      	ldr	r3, [pc, #88]	; (8009800 <__ieee754_pow+0x220>)
 80097a6:	4598      	cmp	r8, r3
 80097a8:	f340 80fe 	ble.w	80099a8 <__ieee754_pow+0x3c8>
 80097ac:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80097b0:	4598      	cmp	r8, r3
 80097b2:	dd0a      	ble.n	80097ca <__ieee754_pow+0x1ea>
 80097b4:	4b0f      	ldr	r3, [pc, #60]	; (80097f4 <__ieee754_pow+0x214>)
 80097b6:	429c      	cmp	r4, r3
 80097b8:	dc0d      	bgt.n	80097d6 <__ieee754_pow+0x1f6>
 80097ba:	f1b9 0f00 	cmp.w	r9, #0
 80097be:	f6bf af6d 	bge.w	800969c <__ieee754_pow+0xbc>
 80097c2:	a307      	add	r3, pc, #28	; (adr r3, 80097e0 <__ieee754_pow+0x200>)
 80097c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c8:	e79f      	b.n	800970a <__ieee754_pow+0x12a>
 80097ca:	4b0e      	ldr	r3, [pc, #56]	; (8009804 <__ieee754_pow+0x224>)
 80097cc:	429c      	cmp	r4, r3
 80097ce:	ddf4      	ble.n	80097ba <__ieee754_pow+0x1da>
 80097d0:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <__ieee754_pow+0x218>)
 80097d2:	429c      	cmp	r4, r3
 80097d4:	dd18      	ble.n	8009808 <__ieee754_pow+0x228>
 80097d6:	f1b9 0f00 	cmp.w	r9, #0
 80097da:	dcf2      	bgt.n	80097c2 <__ieee754_pow+0x1e2>
 80097dc:	e75e      	b.n	800969c <__ieee754_pow+0xbc>
 80097de:	bf00      	nop
 80097e0:	8800759c 	.word	0x8800759c
 80097e4:	7e37e43c 	.word	0x7e37e43c
 80097e8:	7ff00000 	.word	0x7ff00000
 80097ec:	0800a3eb 	.word	0x0800a3eb
 80097f0:	433fffff 	.word	0x433fffff
 80097f4:	3fefffff 	.word	0x3fefffff
 80097f8:	3ff00000 	.word	0x3ff00000
 80097fc:	3fe00000 	.word	0x3fe00000
 8009800:	41e00000 	.word	0x41e00000
 8009804:	3feffffe 	.word	0x3feffffe
 8009808:	2200      	movs	r2, #0
 800980a:	4b63      	ldr	r3, [pc, #396]	; (8009998 <__ieee754_pow+0x3b8>)
 800980c:	f7f6 fce8 	bl	80001e0 <__aeabi_dsub>
 8009810:	a355      	add	r3, pc, #340	; (adr r3, 8009968 <__ieee754_pow+0x388>)
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	4604      	mov	r4, r0
 8009818:	460d      	mov	r5, r1
 800981a:	f7f6 fe99 	bl	8000550 <__aeabi_dmul>
 800981e:	a354      	add	r3, pc, #336	; (adr r3, 8009970 <__ieee754_pow+0x390>)
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	4606      	mov	r6, r0
 8009826:	460f      	mov	r7, r1
 8009828:	4620      	mov	r0, r4
 800982a:	4629      	mov	r1, r5
 800982c:	f7f6 fe90 	bl	8000550 <__aeabi_dmul>
 8009830:	2200      	movs	r2, #0
 8009832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009836:	4b59      	ldr	r3, [pc, #356]	; (800999c <__ieee754_pow+0x3bc>)
 8009838:	4620      	mov	r0, r4
 800983a:	4629      	mov	r1, r5
 800983c:	f7f6 fe88 	bl	8000550 <__aeabi_dmul>
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	a14c      	add	r1, pc, #304	; (adr r1, 8009978 <__ieee754_pow+0x398>)
 8009846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800984a:	f7f6 fcc9 	bl	80001e0 <__aeabi_dsub>
 800984e:	4622      	mov	r2, r4
 8009850:	462b      	mov	r3, r5
 8009852:	f7f6 fe7d 	bl	8000550 <__aeabi_dmul>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	2000      	movs	r0, #0
 800985c:	4950      	ldr	r1, [pc, #320]	; (80099a0 <__ieee754_pow+0x3c0>)
 800985e:	f7f6 fcbf 	bl	80001e0 <__aeabi_dsub>
 8009862:	4622      	mov	r2, r4
 8009864:	462b      	mov	r3, r5
 8009866:	4680      	mov	r8, r0
 8009868:	4689      	mov	r9, r1
 800986a:	4620      	mov	r0, r4
 800986c:	4629      	mov	r1, r5
 800986e:	f7f6 fe6f 	bl	8000550 <__aeabi_dmul>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	4640      	mov	r0, r8
 8009878:	4649      	mov	r1, r9
 800987a:	f7f6 fe69 	bl	8000550 <__aeabi_dmul>
 800987e:	a340      	add	r3, pc, #256	; (adr r3, 8009980 <__ieee754_pow+0x3a0>)
 8009880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009884:	f7f6 fe64 	bl	8000550 <__aeabi_dmul>
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009890:	f7f6 fca6 	bl	80001e0 <__aeabi_dsub>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	4604      	mov	r4, r0
 800989a:	460d      	mov	r5, r1
 800989c:	4630      	mov	r0, r6
 800989e:	4639      	mov	r1, r7
 80098a0:	f7f6 fca0 	bl	80001e4 <__adddf3>
 80098a4:	2000      	movs	r0, #0
 80098a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098aa:	4632      	mov	r2, r6
 80098ac:	463b      	mov	r3, r7
 80098ae:	f7f6 fc97 	bl	80001e0 <__aeabi_dsub>
 80098b2:	4602      	mov	r2, r0
 80098b4:	460b      	mov	r3, r1
 80098b6:	4620      	mov	r0, r4
 80098b8:	4629      	mov	r1, r5
 80098ba:	f7f6 fc91 	bl	80001e0 <__aeabi_dsub>
 80098be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098c0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80098c4:	4313      	orrs	r3, r2
 80098c6:	4606      	mov	r6, r0
 80098c8:	460f      	mov	r7, r1
 80098ca:	f040 81eb 	bne.w	8009ca4 <__ieee754_pow+0x6c4>
 80098ce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009988 <__ieee754_pow+0x3a8>
 80098d2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80098d6:	2400      	movs	r4, #0
 80098d8:	4622      	mov	r2, r4
 80098da:	462b      	mov	r3, r5
 80098dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098e4:	f7f6 fc7c 	bl	80001e0 <__aeabi_dsub>
 80098e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098ec:	f7f6 fe30 	bl	8000550 <__aeabi_dmul>
 80098f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098f4:	4680      	mov	r8, r0
 80098f6:	4689      	mov	r9, r1
 80098f8:	4630      	mov	r0, r6
 80098fa:	4639      	mov	r1, r7
 80098fc:	f7f6 fe28 	bl	8000550 <__aeabi_dmul>
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	4640      	mov	r0, r8
 8009906:	4649      	mov	r1, r9
 8009908:	f7f6 fc6c 	bl	80001e4 <__adddf3>
 800990c:	4622      	mov	r2, r4
 800990e:	462b      	mov	r3, r5
 8009910:	4680      	mov	r8, r0
 8009912:	4689      	mov	r9, r1
 8009914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009918:	f7f6 fe1a 	bl	8000550 <__aeabi_dmul>
 800991c:	460b      	mov	r3, r1
 800991e:	4604      	mov	r4, r0
 8009920:	460d      	mov	r5, r1
 8009922:	4602      	mov	r2, r0
 8009924:	4649      	mov	r1, r9
 8009926:	4640      	mov	r0, r8
 8009928:	e9cd 4500 	strd	r4, r5, [sp]
 800992c:	f7f6 fc5a 	bl	80001e4 <__adddf3>
 8009930:	4b1c      	ldr	r3, [pc, #112]	; (80099a4 <__ieee754_pow+0x3c4>)
 8009932:	4299      	cmp	r1, r3
 8009934:	4606      	mov	r6, r0
 8009936:	460f      	mov	r7, r1
 8009938:	468b      	mov	fp, r1
 800993a:	f340 82f7 	ble.w	8009f2c <__ieee754_pow+0x94c>
 800993e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009942:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009946:	4303      	orrs	r3, r0
 8009948:	f000 81ea 	beq.w	8009d20 <__ieee754_pow+0x740>
 800994c:	a310      	add	r3, pc, #64	; (adr r3, 8009990 <__ieee754_pow+0x3b0>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009956:	f7f6 fdfb 	bl	8000550 <__aeabi_dmul>
 800995a:	a30d      	add	r3, pc, #52	; (adr r3, 8009990 <__ieee754_pow+0x3b0>)
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	e6d5      	b.n	800970e <__ieee754_pow+0x12e>
 8009962:	bf00      	nop
 8009964:	f3af 8000 	nop.w
 8009968:	60000000 	.word	0x60000000
 800996c:	3ff71547 	.word	0x3ff71547
 8009970:	f85ddf44 	.word	0xf85ddf44
 8009974:	3e54ae0b 	.word	0x3e54ae0b
 8009978:	55555555 	.word	0x55555555
 800997c:	3fd55555 	.word	0x3fd55555
 8009980:	652b82fe 	.word	0x652b82fe
 8009984:	3ff71547 	.word	0x3ff71547
 8009988:	00000000 	.word	0x00000000
 800998c:	bff00000 	.word	0xbff00000
 8009990:	8800759c 	.word	0x8800759c
 8009994:	7e37e43c 	.word	0x7e37e43c
 8009998:	3ff00000 	.word	0x3ff00000
 800999c:	3fd00000 	.word	0x3fd00000
 80099a0:	3fe00000 	.word	0x3fe00000
 80099a4:	408fffff 	.word	0x408fffff
 80099a8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80099ac:	f04f 0200 	mov.w	r2, #0
 80099b0:	da05      	bge.n	80099be <__ieee754_pow+0x3de>
 80099b2:	4bd3      	ldr	r3, [pc, #844]	; (8009d00 <__ieee754_pow+0x720>)
 80099b4:	f7f6 fdcc 	bl	8000550 <__aeabi_dmul>
 80099b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80099bc:	460c      	mov	r4, r1
 80099be:	1523      	asrs	r3, r4, #20
 80099c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80099c4:	4413      	add	r3, r2
 80099c6:	9309      	str	r3, [sp, #36]	; 0x24
 80099c8:	4bce      	ldr	r3, [pc, #824]	; (8009d04 <__ieee754_pow+0x724>)
 80099ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80099ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80099d2:	429c      	cmp	r4, r3
 80099d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80099d8:	dd08      	ble.n	80099ec <__ieee754_pow+0x40c>
 80099da:	4bcb      	ldr	r3, [pc, #812]	; (8009d08 <__ieee754_pow+0x728>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	f340 815e 	ble.w	8009c9e <__ieee754_pow+0x6be>
 80099e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e4:	3301      	adds	r3, #1
 80099e6:	9309      	str	r3, [sp, #36]	; 0x24
 80099e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80099ec:	f04f 0a00 	mov.w	sl, #0
 80099f0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80099f4:	930c      	str	r3, [sp, #48]	; 0x30
 80099f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099f8:	4bc4      	ldr	r3, [pc, #784]	; (8009d0c <__ieee754_pow+0x72c>)
 80099fa:	4413      	add	r3, r2
 80099fc:	ed93 7b00 	vldr	d7, [r3]
 8009a00:	4629      	mov	r1, r5
 8009a02:	ec53 2b17 	vmov	r2, r3, d7
 8009a06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009a0e:	f7f6 fbe7 	bl	80001e0 <__aeabi_dsub>
 8009a12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a16:	4606      	mov	r6, r0
 8009a18:	460f      	mov	r7, r1
 8009a1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a1e:	f7f6 fbe1 	bl	80001e4 <__adddf3>
 8009a22:	4602      	mov	r2, r0
 8009a24:	460b      	mov	r3, r1
 8009a26:	2000      	movs	r0, #0
 8009a28:	49b9      	ldr	r1, [pc, #740]	; (8009d10 <__ieee754_pow+0x730>)
 8009a2a:	f7f6 febb 	bl	80007a4 <__aeabi_ddiv>
 8009a2e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
 8009a36:	4630      	mov	r0, r6
 8009a38:	4639      	mov	r1, r7
 8009a3a:	f7f6 fd89 	bl	8000550 <__aeabi_dmul>
 8009a3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a42:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009a46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9302      	str	r3, [sp, #8]
 8009a4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009a52:	106d      	asrs	r5, r5, #1
 8009a54:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009a58:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009a62:	4640      	mov	r0, r8
 8009a64:	4649      	mov	r1, r9
 8009a66:	4614      	mov	r4, r2
 8009a68:	461d      	mov	r5, r3
 8009a6a:	f7f6 fd71 	bl	8000550 <__aeabi_dmul>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	460b      	mov	r3, r1
 8009a72:	4630      	mov	r0, r6
 8009a74:	4639      	mov	r1, r7
 8009a76:	f7f6 fbb3 	bl	80001e0 <__aeabi_dsub>
 8009a7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a7e:	4606      	mov	r6, r0
 8009a80:	460f      	mov	r7, r1
 8009a82:	4620      	mov	r0, r4
 8009a84:	4629      	mov	r1, r5
 8009a86:	f7f6 fbab 	bl	80001e0 <__aeabi_dsub>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a92:	f7f6 fba5 	bl	80001e0 <__aeabi_dsub>
 8009a96:	4642      	mov	r2, r8
 8009a98:	464b      	mov	r3, r9
 8009a9a:	f7f6 fd59 	bl	8000550 <__aeabi_dmul>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	4639      	mov	r1, r7
 8009aa6:	f7f6 fb9b 	bl	80001e0 <__aeabi_dsub>
 8009aaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009aae:	f7f6 fd4f 	bl	8000550 <__aeabi_dmul>
 8009ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ab6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009aba:	4610      	mov	r0, r2
 8009abc:	4619      	mov	r1, r3
 8009abe:	f7f6 fd47 	bl	8000550 <__aeabi_dmul>
 8009ac2:	a37b      	add	r3, pc, #492	; (adr r3, 8009cb0 <__ieee754_pow+0x6d0>)
 8009ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac8:	4604      	mov	r4, r0
 8009aca:	460d      	mov	r5, r1
 8009acc:	f7f6 fd40 	bl	8000550 <__aeabi_dmul>
 8009ad0:	a379      	add	r3, pc, #484	; (adr r3, 8009cb8 <__ieee754_pow+0x6d8>)
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f7f6 fb85 	bl	80001e4 <__adddf3>
 8009ada:	4622      	mov	r2, r4
 8009adc:	462b      	mov	r3, r5
 8009ade:	f7f6 fd37 	bl	8000550 <__aeabi_dmul>
 8009ae2:	a377      	add	r3, pc, #476	; (adr r3, 8009cc0 <__ieee754_pow+0x6e0>)
 8009ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae8:	f7f6 fb7c 	bl	80001e4 <__adddf3>
 8009aec:	4622      	mov	r2, r4
 8009aee:	462b      	mov	r3, r5
 8009af0:	f7f6 fd2e 	bl	8000550 <__aeabi_dmul>
 8009af4:	a374      	add	r3, pc, #464	; (adr r3, 8009cc8 <__ieee754_pow+0x6e8>)
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	f7f6 fb73 	bl	80001e4 <__adddf3>
 8009afe:	4622      	mov	r2, r4
 8009b00:	462b      	mov	r3, r5
 8009b02:	f7f6 fd25 	bl	8000550 <__aeabi_dmul>
 8009b06:	a372      	add	r3, pc, #456	; (adr r3, 8009cd0 <__ieee754_pow+0x6f0>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f7f6 fb6a 	bl	80001e4 <__adddf3>
 8009b10:	4622      	mov	r2, r4
 8009b12:	462b      	mov	r3, r5
 8009b14:	f7f6 fd1c 	bl	8000550 <__aeabi_dmul>
 8009b18:	a36f      	add	r3, pc, #444	; (adr r3, 8009cd8 <__ieee754_pow+0x6f8>)
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f7f6 fb61 	bl	80001e4 <__adddf3>
 8009b22:	4622      	mov	r2, r4
 8009b24:	4606      	mov	r6, r0
 8009b26:	460f      	mov	r7, r1
 8009b28:	462b      	mov	r3, r5
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	f7f6 fd0f 	bl	8000550 <__aeabi_dmul>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4630      	mov	r0, r6
 8009b38:	4639      	mov	r1, r7
 8009b3a:	f7f6 fd09 	bl	8000550 <__aeabi_dmul>
 8009b3e:	4642      	mov	r2, r8
 8009b40:	4604      	mov	r4, r0
 8009b42:	460d      	mov	r5, r1
 8009b44:	464b      	mov	r3, r9
 8009b46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b4a:	f7f6 fb4b 	bl	80001e4 <__adddf3>
 8009b4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b52:	f7f6 fcfd 	bl	8000550 <__aeabi_dmul>
 8009b56:	4622      	mov	r2, r4
 8009b58:	462b      	mov	r3, r5
 8009b5a:	f7f6 fb43 	bl	80001e4 <__adddf3>
 8009b5e:	4642      	mov	r2, r8
 8009b60:	4606      	mov	r6, r0
 8009b62:	460f      	mov	r7, r1
 8009b64:	464b      	mov	r3, r9
 8009b66:	4640      	mov	r0, r8
 8009b68:	4649      	mov	r1, r9
 8009b6a:	f7f6 fcf1 	bl	8000550 <__aeabi_dmul>
 8009b6e:	2200      	movs	r2, #0
 8009b70:	4b68      	ldr	r3, [pc, #416]	; (8009d14 <__ieee754_pow+0x734>)
 8009b72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009b76:	f7f6 fb35 	bl	80001e4 <__adddf3>
 8009b7a:	4632      	mov	r2, r6
 8009b7c:	463b      	mov	r3, r7
 8009b7e:	f7f6 fb31 	bl	80001e4 <__adddf3>
 8009b82:	9802      	ldr	r0, [sp, #8]
 8009b84:	460d      	mov	r5, r1
 8009b86:	4604      	mov	r4, r0
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4640      	mov	r0, r8
 8009b8e:	4649      	mov	r1, r9
 8009b90:	f7f6 fcde 	bl	8000550 <__aeabi_dmul>
 8009b94:	2200      	movs	r2, #0
 8009b96:	4680      	mov	r8, r0
 8009b98:	4689      	mov	r9, r1
 8009b9a:	4b5e      	ldr	r3, [pc, #376]	; (8009d14 <__ieee754_pow+0x734>)
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	f7f6 fb1e 	bl	80001e0 <__aeabi_dsub>
 8009ba4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ba8:	f7f6 fb1a 	bl	80001e0 <__aeabi_dsub>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f6 fb14 	bl	80001e0 <__aeabi_dsub>
 8009bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bbc:	f7f6 fcc8 	bl	8000550 <__aeabi_dmul>
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	460f      	mov	r7, r1
 8009bc6:	462b      	mov	r3, r5
 8009bc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bcc:	f7f6 fcc0 	bl	8000550 <__aeabi_dmul>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	4639      	mov	r1, r7
 8009bd8:	f7f6 fb04 	bl	80001e4 <__adddf3>
 8009bdc:	4606      	mov	r6, r0
 8009bde:	460f      	mov	r7, r1
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	4640      	mov	r0, r8
 8009be6:	4649      	mov	r1, r9
 8009be8:	f7f6 fafc 	bl	80001e4 <__adddf3>
 8009bec:	9802      	ldr	r0, [sp, #8]
 8009bee:	a33c      	add	r3, pc, #240	; (adr r3, 8009ce0 <__ieee754_pow+0x700>)
 8009bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	460d      	mov	r5, r1
 8009bf8:	f7f6 fcaa 	bl	8000550 <__aeabi_dmul>
 8009bfc:	4642      	mov	r2, r8
 8009bfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c02:	464b      	mov	r3, r9
 8009c04:	4620      	mov	r0, r4
 8009c06:	4629      	mov	r1, r5
 8009c08:	f7f6 faea 	bl	80001e0 <__aeabi_dsub>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	4630      	mov	r0, r6
 8009c12:	4639      	mov	r1, r7
 8009c14:	f7f6 fae4 	bl	80001e0 <__aeabi_dsub>
 8009c18:	a333      	add	r3, pc, #204	; (adr r3, 8009ce8 <__ieee754_pow+0x708>)
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	f7f6 fc97 	bl	8000550 <__aeabi_dmul>
 8009c22:	a333      	add	r3, pc, #204	; (adr r3, 8009cf0 <__ieee754_pow+0x710>)
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	4606      	mov	r6, r0
 8009c2a:	460f      	mov	r7, r1
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	4629      	mov	r1, r5
 8009c30:	f7f6 fc8e 	bl	8000550 <__aeabi_dmul>
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	4630      	mov	r0, r6
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	f7f6 fad2 	bl	80001e4 <__adddf3>
 8009c40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c42:	4b35      	ldr	r3, [pc, #212]	; (8009d18 <__ieee754_pow+0x738>)
 8009c44:	4413      	add	r3, r2
 8009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4a:	f7f6 facb 	bl	80001e4 <__adddf3>
 8009c4e:	4604      	mov	r4, r0
 8009c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c52:	460d      	mov	r5, r1
 8009c54:	f7f6 fc12 	bl	800047c <__aeabi_i2d>
 8009c58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c5a:	4b30      	ldr	r3, [pc, #192]	; (8009d1c <__ieee754_pow+0x73c>)
 8009c5c:	4413      	add	r3, r2
 8009c5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c62:	4606      	mov	r6, r0
 8009c64:	460f      	mov	r7, r1
 8009c66:	4622      	mov	r2, r4
 8009c68:	462b      	mov	r3, r5
 8009c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c6e:	f7f6 fab9 	bl	80001e4 <__adddf3>
 8009c72:	4642      	mov	r2, r8
 8009c74:	464b      	mov	r3, r9
 8009c76:	f7f6 fab5 	bl	80001e4 <__adddf3>
 8009c7a:	4632      	mov	r2, r6
 8009c7c:	463b      	mov	r3, r7
 8009c7e:	f7f6 fab1 	bl	80001e4 <__adddf3>
 8009c82:	9802      	ldr	r0, [sp, #8]
 8009c84:	4632      	mov	r2, r6
 8009c86:	463b      	mov	r3, r7
 8009c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c8c:	f7f6 faa8 	bl	80001e0 <__aeabi_dsub>
 8009c90:	4642      	mov	r2, r8
 8009c92:	464b      	mov	r3, r9
 8009c94:	f7f6 faa4 	bl	80001e0 <__aeabi_dsub>
 8009c98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c9c:	e607      	b.n	80098ae <__ieee754_pow+0x2ce>
 8009c9e:	f04f 0a01 	mov.w	sl, #1
 8009ca2:	e6a5      	b.n	80099f0 <__ieee754_pow+0x410>
 8009ca4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009cf8 <__ieee754_pow+0x718>
 8009ca8:	e613      	b.n	80098d2 <__ieee754_pow+0x2f2>
 8009caa:	bf00      	nop
 8009cac:	f3af 8000 	nop.w
 8009cb0:	4a454eef 	.word	0x4a454eef
 8009cb4:	3fca7e28 	.word	0x3fca7e28
 8009cb8:	93c9db65 	.word	0x93c9db65
 8009cbc:	3fcd864a 	.word	0x3fcd864a
 8009cc0:	a91d4101 	.word	0xa91d4101
 8009cc4:	3fd17460 	.word	0x3fd17460
 8009cc8:	518f264d 	.word	0x518f264d
 8009ccc:	3fd55555 	.word	0x3fd55555
 8009cd0:	db6fabff 	.word	0xdb6fabff
 8009cd4:	3fdb6db6 	.word	0x3fdb6db6
 8009cd8:	33333303 	.word	0x33333303
 8009cdc:	3fe33333 	.word	0x3fe33333
 8009ce0:	e0000000 	.word	0xe0000000
 8009ce4:	3feec709 	.word	0x3feec709
 8009ce8:	dc3a03fd 	.word	0xdc3a03fd
 8009cec:	3feec709 	.word	0x3feec709
 8009cf0:	145b01f5 	.word	0x145b01f5
 8009cf4:	be3e2fe0 	.word	0xbe3e2fe0
 8009cf8:	00000000 	.word	0x00000000
 8009cfc:	3ff00000 	.word	0x3ff00000
 8009d00:	43400000 	.word	0x43400000
 8009d04:	0003988e 	.word	0x0003988e
 8009d08:	000bb679 	.word	0x000bb679
 8009d0c:	0800a3f0 	.word	0x0800a3f0
 8009d10:	3ff00000 	.word	0x3ff00000
 8009d14:	40080000 	.word	0x40080000
 8009d18:	0800a410 	.word	0x0800a410
 8009d1c:	0800a400 	.word	0x0800a400
 8009d20:	a3b4      	add	r3, pc, #720	; (adr r3, 8009ff4 <__ieee754_pow+0xa14>)
 8009d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d26:	4640      	mov	r0, r8
 8009d28:	4649      	mov	r1, r9
 8009d2a:	f7f6 fa5b 	bl	80001e4 <__adddf3>
 8009d2e:	4622      	mov	r2, r4
 8009d30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d34:	462b      	mov	r3, r5
 8009d36:	4630      	mov	r0, r6
 8009d38:	4639      	mov	r1, r7
 8009d3a:	f7f6 fa51 	bl	80001e0 <__aeabi_dsub>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d46:	f7f6 fe93 	bl	8000a70 <__aeabi_dcmpgt>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	f47f adfe 	bne.w	800994c <__ieee754_pow+0x36c>
 8009d50:	4aa3      	ldr	r2, [pc, #652]	; (8009fe0 <__ieee754_pow+0xa00>)
 8009d52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d56:	4293      	cmp	r3, r2
 8009d58:	f340 810a 	ble.w	8009f70 <__ieee754_pow+0x990>
 8009d5c:	151b      	asrs	r3, r3, #20
 8009d5e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009d62:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009d66:	fa4a f303 	asr.w	r3, sl, r3
 8009d6a:	445b      	add	r3, fp
 8009d6c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009d70:	4e9c      	ldr	r6, [pc, #624]	; (8009fe4 <__ieee754_pow+0xa04>)
 8009d72:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009d76:	4116      	asrs	r6, r2
 8009d78:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	ea23 0106 	bic.w	r1, r3, r6
 8009d82:	f1c2 0214 	rsb	r2, r2, #20
 8009d86:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009d8a:	fa4a fa02 	asr.w	sl, sl, r2
 8009d8e:	f1bb 0f00 	cmp.w	fp, #0
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4620      	mov	r0, r4
 8009d98:	4629      	mov	r1, r5
 8009d9a:	bfb8      	it	lt
 8009d9c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009da0:	f7f6 fa1e 	bl	80001e0 <__aeabi_dsub>
 8009da4:	e9cd 0100 	strd	r0, r1, [sp]
 8009da8:	4642      	mov	r2, r8
 8009daa:	464b      	mov	r3, r9
 8009dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009db0:	f7f6 fa18 	bl	80001e4 <__adddf3>
 8009db4:	2000      	movs	r0, #0
 8009db6:	a378      	add	r3, pc, #480	; (adr r3, 8009f98 <__ieee754_pow+0x9b8>)
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	460d      	mov	r5, r1
 8009dc0:	f7f6 fbc6 	bl	8000550 <__aeabi_dmul>
 8009dc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dc8:	4606      	mov	r6, r0
 8009dca:	460f      	mov	r7, r1
 8009dcc:	4620      	mov	r0, r4
 8009dce:	4629      	mov	r1, r5
 8009dd0:	f7f6 fa06 	bl	80001e0 <__aeabi_dsub>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4640      	mov	r0, r8
 8009dda:	4649      	mov	r1, r9
 8009ddc:	f7f6 fa00 	bl	80001e0 <__aeabi_dsub>
 8009de0:	a36f      	add	r3, pc, #444	; (adr r3, 8009fa0 <__ieee754_pow+0x9c0>)
 8009de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de6:	f7f6 fbb3 	bl	8000550 <__aeabi_dmul>
 8009dea:	a36f      	add	r3, pc, #444	; (adr r3, 8009fa8 <__ieee754_pow+0x9c8>)
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	4680      	mov	r8, r0
 8009df2:	4689      	mov	r9, r1
 8009df4:	4620      	mov	r0, r4
 8009df6:	4629      	mov	r1, r5
 8009df8:	f7f6 fbaa 	bl	8000550 <__aeabi_dmul>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4640      	mov	r0, r8
 8009e02:	4649      	mov	r1, r9
 8009e04:	f7f6 f9ee 	bl	80001e4 <__adddf3>
 8009e08:	4604      	mov	r4, r0
 8009e0a:	460d      	mov	r5, r1
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4630      	mov	r0, r6
 8009e12:	4639      	mov	r1, r7
 8009e14:	f7f6 f9e6 	bl	80001e4 <__adddf3>
 8009e18:	4632      	mov	r2, r6
 8009e1a:	463b      	mov	r3, r7
 8009e1c:	4680      	mov	r8, r0
 8009e1e:	4689      	mov	r9, r1
 8009e20:	f7f6 f9de 	bl	80001e0 <__aeabi_dsub>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4620      	mov	r0, r4
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	f7f6 f9d8 	bl	80001e0 <__aeabi_dsub>
 8009e30:	4642      	mov	r2, r8
 8009e32:	4606      	mov	r6, r0
 8009e34:	460f      	mov	r7, r1
 8009e36:	464b      	mov	r3, r9
 8009e38:	4640      	mov	r0, r8
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	f7f6 fb88 	bl	8000550 <__aeabi_dmul>
 8009e40:	a35b      	add	r3, pc, #364	; (adr r3, 8009fb0 <__ieee754_pow+0x9d0>)
 8009e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e46:	4604      	mov	r4, r0
 8009e48:	460d      	mov	r5, r1
 8009e4a:	f7f6 fb81 	bl	8000550 <__aeabi_dmul>
 8009e4e:	a35a      	add	r3, pc, #360	; (adr r3, 8009fb8 <__ieee754_pow+0x9d8>)
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	f7f6 f9c4 	bl	80001e0 <__aeabi_dsub>
 8009e58:	4622      	mov	r2, r4
 8009e5a:	462b      	mov	r3, r5
 8009e5c:	f7f6 fb78 	bl	8000550 <__aeabi_dmul>
 8009e60:	a357      	add	r3, pc, #348	; (adr r3, 8009fc0 <__ieee754_pow+0x9e0>)
 8009e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e66:	f7f6 f9bd 	bl	80001e4 <__adddf3>
 8009e6a:	4622      	mov	r2, r4
 8009e6c:	462b      	mov	r3, r5
 8009e6e:	f7f6 fb6f 	bl	8000550 <__aeabi_dmul>
 8009e72:	a355      	add	r3, pc, #340	; (adr r3, 8009fc8 <__ieee754_pow+0x9e8>)
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f7f6 f9b2 	bl	80001e0 <__aeabi_dsub>
 8009e7c:	4622      	mov	r2, r4
 8009e7e:	462b      	mov	r3, r5
 8009e80:	f7f6 fb66 	bl	8000550 <__aeabi_dmul>
 8009e84:	a352      	add	r3, pc, #328	; (adr r3, 8009fd0 <__ieee754_pow+0x9f0>)
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	f7f6 f9ab 	bl	80001e4 <__adddf3>
 8009e8e:	4622      	mov	r2, r4
 8009e90:	462b      	mov	r3, r5
 8009e92:	f7f6 fb5d 	bl	8000550 <__aeabi_dmul>
 8009e96:	4602      	mov	r2, r0
 8009e98:	460b      	mov	r3, r1
 8009e9a:	4640      	mov	r0, r8
 8009e9c:	4649      	mov	r1, r9
 8009e9e:	f7f6 f99f 	bl	80001e0 <__aeabi_dsub>
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	460d      	mov	r5, r1
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	4640      	mov	r0, r8
 8009eac:	4649      	mov	r1, r9
 8009eae:	f7f6 fb4f 	bl	8000550 <__aeabi_dmul>
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	e9cd 0100 	strd	r0, r1, [sp]
 8009eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	f7f6 f98e 	bl	80001e0 <__aeabi_dsub>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ecc:	f7f6 fc6a 	bl	80007a4 <__aeabi_ddiv>
 8009ed0:	4632      	mov	r2, r6
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	460d      	mov	r5, r1
 8009ed6:	463b      	mov	r3, r7
 8009ed8:	4640      	mov	r0, r8
 8009eda:	4649      	mov	r1, r9
 8009edc:	f7f6 fb38 	bl	8000550 <__aeabi_dmul>
 8009ee0:	4632      	mov	r2, r6
 8009ee2:	463b      	mov	r3, r7
 8009ee4:	f7f6 f97e 	bl	80001e4 <__adddf3>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	4620      	mov	r0, r4
 8009eee:	4629      	mov	r1, r5
 8009ef0:	f7f6 f976 	bl	80001e0 <__aeabi_dsub>
 8009ef4:	4642      	mov	r2, r8
 8009ef6:	464b      	mov	r3, r9
 8009ef8:	f7f6 f972 	bl	80001e0 <__aeabi_dsub>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	2000      	movs	r0, #0
 8009f02:	4939      	ldr	r1, [pc, #228]	; (8009fe8 <__ieee754_pow+0xa08>)
 8009f04:	f7f6 f96c 	bl	80001e0 <__aeabi_dsub>
 8009f08:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009f0c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	da2f      	bge.n	8009f76 <__ieee754_pow+0x996>
 8009f16:	4650      	mov	r0, sl
 8009f18:	ec43 2b10 	vmov	d0, r2, r3
 8009f1c:	f000 f9c0 	bl	800a2a0 <scalbn>
 8009f20:	ec51 0b10 	vmov	r0, r1, d0
 8009f24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f28:	f7ff bbf1 	b.w	800970e <__ieee754_pow+0x12e>
 8009f2c:	4b2f      	ldr	r3, [pc, #188]	; (8009fec <__ieee754_pow+0xa0c>)
 8009f2e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009f32:	429e      	cmp	r6, r3
 8009f34:	f77f af0c 	ble.w	8009d50 <__ieee754_pow+0x770>
 8009f38:	4b2d      	ldr	r3, [pc, #180]	; (8009ff0 <__ieee754_pow+0xa10>)
 8009f3a:	440b      	add	r3, r1
 8009f3c:	4303      	orrs	r3, r0
 8009f3e:	d00b      	beq.n	8009f58 <__ieee754_pow+0x978>
 8009f40:	a325      	add	r3, pc, #148	; (adr r3, 8009fd8 <__ieee754_pow+0x9f8>)
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f4a:	f7f6 fb01 	bl	8000550 <__aeabi_dmul>
 8009f4e:	a322      	add	r3, pc, #136	; (adr r3, 8009fd8 <__ieee754_pow+0x9f8>)
 8009f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f54:	f7ff bbdb 	b.w	800970e <__ieee754_pow+0x12e>
 8009f58:	4622      	mov	r2, r4
 8009f5a:	462b      	mov	r3, r5
 8009f5c:	f7f6 f940 	bl	80001e0 <__aeabi_dsub>
 8009f60:	4642      	mov	r2, r8
 8009f62:	464b      	mov	r3, r9
 8009f64:	f7f6 fd7a 	bl	8000a5c <__aeabi_dcmpge>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	f43f aef1 	beq.w	8009d50 <__ieee754_pow+0x770>
 8009f6e:	e7e7      	b.n	8009f40 <__ieee754_pow+0x960>
 8009f70:	f04f 0a00 	mov.w	sl, #0
 8009f74:	e718      	b.n	8009da8 <__ieee754_pow+0x7c8>
 8009f76:	4621      	mov	r1, r4
 8009f78:	e7d4      	b.n	8009f24 <__ieee754_pow+0x944>
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	491a      	ldr	r1, [pc, #104]	; (8009fe8 <__ieee754_pow+0xa08>)
 8009f7e:	f7ff bb8f 	b.w	80096a0 <__ieee754_pow+0xc0>
 8009f82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f86:	f7ff bb8b 	b.w	80096a0 <__ieee754_pow+0xc0>
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	4639      	mov	r1, r7
 8009f8e:	f7ff bb87 	b.w	80096a0 <__ieee754_pow+0xc0>
 8009f92:	4693      	mov	fp, r2
 8009f94:	f7ff bb98 	b.w	80096c8 <__ieee754_pow+0xe8>
 8009f98:	00000000 	.word	0x00000000
 8009f9c:	3fe62e43 	.word	0x3fe62e43
 8009fa0:	fefa39ef 	.word	0xfefa39ef
 8009fa4:	3fe62e42 	.word	0x3fe62e42
 8009fa8:	0ca86c39 	.word	0x0ca86c39
 8009fac:	be205c61 	.word	0xbe205c61
 8009fb0:	72bea4d0 	.word	0x72bea4d0
 8009fb4:	3e663769 	.word	0x3e663769
 8009fb8:	c5d26bf1 	.word	0xc5d26bf1
 8009fbc:	3ebbbd41 	.word	0x3ebbbd41
 8009fc0:	af25de2c 	.word	0xaf25de2c
 8009fc4:	3f11566a 	.word	0x3f11566a
 8009fc8:	16bebd93 	.word	0x16bebd93
 8009fcc:	3f66c16c 	.word	0x3f66c16c
 8009fd0:	5555553e 	.word	0x5555553e
 8009fd4:	3fc55555 	.word	0x3fc55555
 8009fd8:	c2f8f359 	.word	0xc2f8f359
 8009fdc:	01a56e1f 	.word	0x01a56e1f
 8009fe0:	3fe00000 	.word	0x3fe00000
 8009fe4:	000fffff 	.word	0x000fffff
 8009fe8:	3ff00000 	.word	0x3ff00000
 8009fec:	4090cbff 	.word	0x4090cbff
 8009ff0:	3f6f3400 	.word	0x3f6f3400
 8009ff4:	652b82fe 	.word	0x652b82fe
 8009ff8:	3c971547 	.word	0x3c971547

08009ffc <__ieee754_sqrt>:
 8009ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a000:	4955      	ldr	r1, [pc, #340]	; (800a158 <__ieee754_sqrt+0x15c>)
 800a002:	ec55 4b10 	vmov	r4, r5, d0
 800a006:	43a9      	bics	r1, r5
 800a008:	462b      	mov	r3, r5
 800a00a:	462a      	mov	r2, r5
 800a00c:	d112      	bne.n	800a034 <__ieee754_sqrt+0x38>
 800a00e:	ee10 2a10 	vmov	r2, s0
 800a012:	ee10 0a10 	vmov	r0, s0
 800a016:	4629      	mov	r1, r5
 800a018:	f7f6 fa9a 	bl	8000550 <__aeabi_dmul>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4620      	mov	r0, r4
 800a022:	4629      	mov	r1, r5
 800a024:	f7f6 f8de 	bl	80001e4 <__adddf3>
 800a028:	4604      	mov	r4, r0
 800a02a:	460d      	mov	r5, r1
 800a02c:	ec45 4b10 	vmov	d0, r4, r5
 800a030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a034:	2d00      	cmp	r5, #0
 800a036:	ee10 0a10 	vmov	r0, s0
 800a03a:	4621      	mov	r1, r4
 800a03c:	dc0f      	bgt.n	800a05e <__ieee754_sqrt+0x62>
 800a03e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a042:	4330      	orrs	r0, r6
 800a044:	d0f2      	beq.n	800a02c <__ieee754_sqrt+0x30>
 800a046:	b155      	cbz	r5, 800a05e <__ieee754_sqrt+0x62>
 800a048:	ee10 2a10 	vmov	r2, s0
 800a04c:	4620      	mov	r0, r4
 800a04e:	4629      	mov	r1, r5
 800a050:	f7f6 f8c6 	bl	80001e0 <__aeabi_dsub>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	f7f6 fba4 	bl	80007a4 <__aeabi_ddiv>
 800a05c:	e7e4      	b.n	800a028 <__ieee754_sqrt+0x2c>
 800a05e:	151b      	asrs	r3, r3, #20
 800a060:	d073      	beq.n	800a14a <__ieee754_sqrt+0x14e>
 800a062:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a066:	07dd      	lsls	r5, r3, #31
 800a068:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a06c:	bf48      	it	mi
 800a06e:	0fc8      	lsrmi	r0, r1, #31
 800a070:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a074:	bf44      	itt	mi
 800a076:	0049      	lslmi	r1, r1, #1
 800a078:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a07c:	2500      	movs	r5, #0
 800a07e:	1058      	asrs	r0, r3, #1
 800a080:	0fcb      	lsrs	r3, r1, #31
 800a082:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a086:	0049      	lsls	r1, r1, #1
 800a088:	2316      	movs	r3, #22
 800a08a:	462c      	mov	r4, r5
 800a08c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a090:	19a7      	adds	r7, r4, r6
 800a092:	4297      	cmp	r7, r2
 800a094:	bfde      	ittt	le
 800a096:	19bc      	addle	r4, r7, r6
 800a098:	1bd2      	suble	r2, r2, r7
 800a09a:	19ad      	addle	r5, r5, r6
 800a09c:	0fcf      	lsrs	r7, r1, #31
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a0a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a0a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a0ac:	d1f0      	bne.n	800a090 <__ieee754_sqrt+0x94>
 800a0ae:	f04f 0c20 	mov.w	ip, #32
 800a0b2:	469e      	mov	lr, r3
 800a0b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a0b8:	42a2      	cmp	r2, r4
 800a0ba:	eb06 070e 	add.w	r7, r6, lr
 800a0be:	dc02      	bgt.n	800a0c6 <__ieee754_sqrt+0xca>
 800a0c0:	d112      	bne.n	800a0e8 <__ieee754_sqrt+0xec>
 800a0c2:	428f      	cmp	r7, r1
 800a0c4:	d810      	bhi.n	800a0e8 <__ieee754_sqrt+0xec>
 800a0c6:	2f00      	cmp	r7, #0
 800a0c8:	eb07 0e06 	add.w	lr, r7, r6
 800a0cc:	da42      	bge.n	800a154 <__ieee754_sqrt+0x158>
 800a0ce:	f1be 0f00 	cmp.w	lr, #0
 800a0d2:	db3f      	blt.n	800a154 <__ieee754_sqrt+0x158>
 800a0d4:	f104 0801 	add.w	r8, r4, #1
 800a0d8:	1b12      	subs	r2, r2, r4
 800a0da:	428f      	cmp	r7, r1
 800a0dc:	bf88      	it	hi
 800a0de:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a0e2:	1bc9      	subs	r1, r1, r7
 800a0e4:	4433      	add	r3, r6
 800a0e6:	4644      	mov	r4, r8
 800a0e8:	0052      	lsls	r2, r2, #1
 800a0ea:	f1bc 0c01 	subs.w	ip, ip, #1
 800a0ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a0f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a0f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a0fa:	d1dd      	bne.n	800a0b8 <__ieee754_sqrt+0xbc>
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	d006      	beq.n	800a10e <__ieee754_sqrt+0x112>
 800a100:	1c5c      	adds	r4, r3, #1
 800a102:	bf13      	iteet	ne
 800a104:	3301      	addne	r3, #1
 800a106:	3501      	addeq	r5, #1
 800a108:	4663      	moveq	r3, ip
 800a10a:	f023 0301 	bicne.w	r3, r3, #1
 800a10e:	106a      	asrs	r2, r5, #1
 800a110:	085b      	lsrs	r3, r3, #1
 800a112:	07e9      	lsls	r1, r5, #31
 800a114:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a118:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a11c:	bf48      	it	mi
 800a11e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a122:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a126:	461c      	mov	r4, r3
 800a128:	e780      	b.n	800a02c <__ieee754_sqrt+0x30>
 800a12a:	0aca      	lsrs	r2, r1, #11
 800a12c:	3815      	subs	r0, #21
 800a12e:	0549      	lsls	r1, r1, #21
 800a130:	2a00      	cmp	r2, #0
 800a132:	d0fa      	beq.n	800a12a <__ieee754_sqrt+0x12e>
 800a134:	02d6      	lsls	r6, r2, #11
 800a136:	d50a      	bpl.n	800a14e <__ieee754_sqrt+0x152>
 800a138:	f1c3 0420 	rsb	r4, r3, #32
 800a13c:	fa21 f404 	lsr.w	r4, r1, r4
 800a140:	1e5d      	subs	r5, r3, #1
 800a142:	4099      	lsls	r1, r3
 800a144:	4322      	orrs	r2, r4
 800a146:	1b43      	subs	r3, r0, r5
 800a148:	e78b      	b.n	800a062 <__ieee754_sqrt+0x66>
 800a14a:	4618      	mov	r0, r3
 800a14c:	e7f0      	b.n	800a130 <__ieee754_sqrt+0x134>
 800a14e:	0052      	lsls	r2, r2, #1
 800a150:	3301      	adds	r3, #1
 800a152:	e7ef      	b.n	800a134 <__ieee754_sqrt+0x138>
 800a154:	46a0      	mov	r8, r4
 800a156:	e7bf      	b.n	800a0d8 <__ieee754_sqrt+0xdc>
 800a158:	7ff00000 	.word	0x7ff00000

0800a15c <fabs>:
 800a15c:	ec51 0b10 	vmov	r0, r1, d0
 800a160:	ee10 2a10 	vmov	r2, s0
 800a164:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a168:	ec43 2b10 	vmov	d0, r2, r3
 800a16c:	4770      	bx	lr

0800a16e <finite>:
 800a16e:	ee10 3a90 	vmov	r3, s1
 800a172:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a176:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a17a:	0fc0      	lsrs	r0, r0, #31
 800a17c:	4770      	bx	lr

0800a17e <matherr>:
 800a17e:	2000      	movs	r0, #0
 800a180:	4770      	bx	lr
 800a182:	0000      	movs	r0, r0
 800a184:	0000      	movs	r0, r0
	...

0800a188 <nan>:
 800a188:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a190 <nan+0x8>
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	00000000 	.word	0x00000000
 800a194:	7ff80000 	.word	0x7ff80000

0800a198 <rint>:
 800a198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a19a:	ec51 0b10 	vmov	r0, r1, d0
 800a19e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a1a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a1a6:	2e13      	cmp	r6, #19
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	ee10 4a10 	vmov	r4, s0
 800a1ae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a1b2:	dc56      	bgt.n	800a262 <rint+0xca>
 800a1b4:	2e00      	cmp	r6, #0
 800a1b6:	da2b      	bge.n	800a210 <rint+0x78>
 800a1b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a1bc:	4302      	orrs	r2, r0
 800a1be:	d023      	beq.n	800a208 <rint+0x70>
 800a1c0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a1c4:	4302      	orrs	r2, r0
 800a1c6:	4254      	negs	r4, r2
 800a1c8:	4314      	orrs	r4, r2
 800a1ca:	0c4b      	lsrs	r3, r1, #17
 800a1cc:	0b24      	lsrs	r4, r4, #12
 800a1ce:	045b      	lsls	r3, r3, #17
 800a1d0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a1d4:	ea44 0103 	orr.w	r1, r4, r3
 800a1d8:	460b      	mov	r3, r1
 800a1da:	492f      	ldr	r1, [pc, #188]	; (800a298 <rint+0x100>)
 800a1dc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a1e0:	e9d1 6700 	ldrd	r6, r7, [r1]
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	f7f5 fffb 	bl	80001e4 <__adddf3>
 800a1ee:	e9cd 0100 	strd	r0, r1, [sp]
 800a1f2:	463b      	mov	r3, r7
 800a1f4:	4632      	mov	r2, r6
 800a1f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1fa:	f7f5 fff1 	bl	80001e0 <__aeabi_dsub>
 800a1fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a202:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a206:	4639      	mov	r1, r7
 800a208:	ec41 0b10 	vmov	d0, r0, r1
 800a20c:	b003      	add	sp, #12
 800a20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a210:	4a22      	ldr	r2, [pc, #136]	; (800a29c <rint+0x104>)
 800a212:	4132      	asrs	r2, r6
 800a214:	ea01 0702 	and.w	r7, r1, r2
 800a218:	4307      	orrs	r7, r0
 800a21a:	d0f5      	beq.n	800a208 <rint+0x70>
 800a21c:	0852      	lsrs	r2, r2, #1
 800a21e:	4011      	ands	r1, r2
 800a220:	430c      	orrs	r4, r1
 800a222:	d00b      	beq.n	800a23c <rint+0xa4>
 800a224:	ea23 0202 	bic.w	r2, r3, r2
 800a228:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a22c:	2e13      	cmp	r6, #19
 800a22e:	fa43 f306 	asr.w	r3, r3, r6
 800a232:	bf0c      	ite	eq
 800a234:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a238:	2400      	movne	r4, #0
 800a23a:	4313      	orrs	r3, r2
 800a23c:	4916      	ldr	r1, [pc, #88]	; (800a298 <rint+0x100>)
 800a23e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a242:	4622      	mov	r2, r4
 800a244:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a248:	4620      	mov	r0, r4
 800a24a:	4629      	mov	r1, r5
 800a24c:	f7f5 ffca 	bl	80001e4 <__adddf3>
 800a250:	e9cd 0100 	strd	r0, r1, [sp]
 800a254:	4622      	mov	r2, r4
 800a256:	462b      	mov	r3, r5
 800a258:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a25c:	f7f5 ffc0 	bl	80001e0 <__aeabi_dsub>
 800a260:	e7d2      	b.n	800a208 <rint+0x70>
 800a262:	2e33      	cmp	r6, #51	; 0x33
 800a264:	dd07      	ble.n	800a276 <rint+0xde>
 800a266:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a26a:	d1cd      	bne.n	800a208 <rint+0x70>
 800a26c:	ee10 2a10 	vmov	r2, s0
 800a270:	f7f5 ffb8 	bl	80001e4 <__adddf3>
 800a274:	e7c8      	b.n	800a208 <rint+0x70>
 800a276:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800a27a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a27e:	40f2      	lsrs	r2, r6
 800a280:	4210      	tst	r0, r2
 800a282:	d0c1      	beq.n	800a208 <rint+0x70>
 800a284:	0852      	lsrs	r2, r2, #1
 800a286:	4210      	tst	r0, r2
 800a288:	bf1f      	itttt	ne
 800a28a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a28e:	ea20 0202 	bicne.w	r2, r0, r2
 800a292:	4134      	asrne	r4, r6
 800a294:	4314      	orrne	r4, r2
 800a296:	e7d1      	b.n	800a23c <rint+0xa4>
 800a298:	0800a420 	.word	0x0800a420
 800a29c:	000fffff 	.word	0x000fffff

0800a2a0 <scalbn>:
 800a2a0:	b570      	push	{r4, r5, r6, lr}
 800a2a2:	ec55 4b10 	vmov	r4, r5, d0
 800a2a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	462b      	mov	r3, r5
 800a2ae:	b9aa      	cbnz	r2, 800a2dc <scalbn+0x3c>
 800a2b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a2b4:	4323      	orrs	r3, r4
 800a2b6:	d03b      	beq.n	800a330 <scalbn+0x90>
 800a2b8:	4b31      	ldr	r3, [pc, #196]	; (800a380 <scalbn+0xe0>)
 800a2ba:	4629      	mov	r1, r5
 800a2bc:	2200      	movs	r2, #0
 800a2be:	ee10 0a10 	vmov	r0, s0
 800a2c2:	f7f6 f945 	bl	8000550 <__aeabi_dmul>
 800a2c6:	4b2f      	ldr	r3, [pc, #188]	; (800a384 <scalbn+0xe4>)
 800a2c8:	429e      	cmp	r6, r3
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	460d      	mov	r5, r1
 800a2ce:	da12      	bge.n	800a2f6 <scalbn+0x56>
 800a2d0:	a327      	add	r3, pc, #156	; (adr r3, 800a370 <scalbn+0xd0>)
 800a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d6:	f7f6 f93b 	bl	8000550 <__aeabi_dmul>
 800a2da:	e009      	b.n	800a2f0 <scalbn+0x50>
 800a2dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a2e0:	428a      	cmp	r2, r1
 800a2e2:	d10c      	bne.n	800a2fe <scalbn+0x5e>
 800a2e4:	ee10 2a10 	vmov	r2, s0
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	f7f5 ff7a 	bl	80001e4 <__adddf3>
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	460d      	mov	r5, r1
 800a2f4:	e01c      	b.n	800a330 <scalbn+0x90>
 800a2f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	3a36      	subs	r2, #54	; 0x36
 800a2fe:	4432      	add	r2, r6
 800a300:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a304:	428a      	cmp	r2, r1
 800a306:	dd0b      	ble.n	800a320 <scalbn+0x80>
 800a308:	ec45 4b11 	vmov	d1, r4, r5
 800a30c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a378 <scalbn+0xd8>
 800a310:	f000 f83c 	bl	800a38c <copysign>
 800a314:	a318      	add	r3, pc, #96	; (adr r3, 800a378 <scalbn+0xd8>)
 800a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31a:	ec51 0b10 	vmov	r0, r1, d0
 800a31e:	e7da      	b.n	800a2d6 <scalbn+0x36>
 800a320:	2a00      	cmp	r2, #0
 800a322:	dd08      	ble.n	800a336 <scalbn+0x96>
 800a324:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a328:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a32c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a330:	ec45 4b10 	vmov	d0, r4, r5
 800a334:	bd70      	pop	{r4, r5, r6, pc}
 800a336:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a33a:	da0d      	bge.n	800a358 <scalbn+0xb8>
 800a33c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a340:	429e      	cmp	r6, r3
 800a342:	ec45 4b11 	vmov	d1, r4, r5
 800a346:	dce1      	bgt.n	800a30c <scalbn+0x6c>
 800a348:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a370 <scalbn+0xd0>
 800a34c:	f000 f81e 	bl	800a38c <copysign>
 800a350:	a307      	add	r3, pc, #28	; (adr r3, 800a370 <scalbn+0xd0>)
 800a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a356:	e7e0      	b.n	800a31a <scalbn+0x7a>
 800a358:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a35c:	3236      	adds	r2, #54	; 0x36
 800a35e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a362:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a366:	4620      	mov	r0, r4
 800a368:	4629      	mov	r1, r5
 800a36a:	2200      	movs	r2, #0
 800a36c:	4b06      	ldr	r3, [pc, #24]	; (800a388 <scalbn+0xe8>)
 800a36e:	e7b2      	b.n	800a2d6 <scalbn+0x36>
 800a370:	c2f8f359 	.word	0xc2f8f359
 800a374:	01a56e1f 	.word	0x01a56e1f
 800a378:	8800759c 	.word	0x8800759c
 800a37c:	7e37e43c 	.word	0x7e37e43c
 800a380:	43500000 	.word	0x43500000
 800a384:	ffff3cb0 	.word	0xffff3cb0
 800a388:	3c900000 	.word	0x3c900000

0800a38c <copysign>:
 800a38c:	ec51 0b10 	vmov	r0, r1, d0
 800a390:	ee11 0a90 	vmov	r0, s3
 800a394:	ee10 2a10 	vmov	r2, s0
 800a398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a39c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a3a0:	ea41 0300 	orr.w	r3, r1, r0
 800a3a4:	ec43 2b10 	vmov	d0, r2, r3
 800a3a8:	4770      	bx	lr
	...

0800a3ac <_init>:
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ae:	bf00      	nop
 800a3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b2:	bc08      	pop	{r3}
 800a3b4:	469e      	mov	lr, r3
 800a3b6:	4770      	bx	lr

0800a3b8 <_fini>:
 800a3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ba:	bf00      	nop
 800a3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3be:	bc08      	pop	{r3}
 800a3c0:	469e      	mov	lr, r3
 800a3c2:	4770      	bx	lr
