
SRJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a374  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a510  0800a510  0001a510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a578  0800a578  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a578  0800a578  0001a578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a580  0800a580  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a580  0800a580  0001a580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a584  0800a584  0001a584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800a588  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  200000c0  0800a648  000200c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  0800a648  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f458  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dfd  00000000  00000000  0002f548  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  00031348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  000322d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016e0c  00000000  00000000  000331a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad6f  00000000  00000000  00049fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000907c0  00000000  00000000  00054d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e54e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004874  00000000  00000000  000e5560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000c0 	.word	0x200000c0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a4f4 	.word	0x0800a4f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000c4 	.word	0x200000c4
 80001d4:	0800a4f4 	.word	0x0800a4f4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	d1ed      	bne.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d80:	f000 b972 	b.w	8001068 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9e08      	ldr	r6, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	4688      	mov	r8, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d14b      	bne.n	8000e42 <__udivmoddi4+0xa6>
 8000daa:	428a      	cmp	r2, r1
 8000dac:	4615      	mov	r5, r2
 8000dae:	d967      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	b14a      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db6:	f1c2 0720 	rsb	r7, r2, #32
 8000dba:	fa01 f302 	lsl.w	r3, r1, r2
 8000dbe:	fa20 f707 	lsr.w	r7, r0, r7
 8000dc2:	4095      	lsls	r5, r2
 8000dc4:	ea47 0803 	orr.w	r8, r7, r3
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000dd4:	fa1f fc85 	uxth.w	ip, r5
 8000dd8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ddc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de0:	fb07 f10c 	mul.w	r1, r7, ip
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18eb      	adds	r3, r5, r3
 8000dea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000dee:	f080 811b 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8118 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000df8:	3f02      	subs	r7, #2
 8000dfa:	442b      	add	r3, r5
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e10:	45a4      	cmp	ip, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	f080 8107 	bcs.w	800102c <__udivmoddi4+0x290>
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	f240 8104 	bls.w	800102c <__udivmoddi4+0x290>
 8000e24:	3802      	subs	r0, #2
 8000e26:	442c      	add	r4, r5
 8000e28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e2c:	eba4 040c 	sub.w	r4, r4, ip
 8000e30:	2700      	movs	r7, #0
 8000e32:	b11e      	cbz	r6, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d909      	bls.n	8000e5a <__udivmoddi4+0xbe>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	f000 80eb 	beq.w	8001022 <__udivmoddi4+0x286>
 8000e4c:	2700      	movs	r7, #0
 8000e4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000e52:	4638      	mov	r0, r7
 8000e54:	4639      	mov	r1, r7
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	fab3 f783 	clz	r7, r3
 8000e5e:	2f00      	cmp	r7, #0
 8000e60:	d147      	bne.n	8000ef2 <__udivmoddi4+0x156>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d302      	bcc.n	8000e6c <__udivmoddi4+0xd0>
 8000e66:	4282      	cmp	r2, r0
 8000e68:	f200 80fa 	bhi.w	8001060 <__udivmoddi4+0x2c4>
 8000e6c:	1a84      	subs	r4, r0, r2
 8000e6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e72:	2001      	movs	r0, #1
 8000e74:	4698      	mov	r8, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d0e0      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000e7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000e7e:	e7dd      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000e80:	b902      	cbnz	r2, 8000e84 <__udivmoddi4+0xe8>
 8000e82:	deff      	udf	#255	; 0xff
 8000e84:	fab2 f282 	clz	r2, r2
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	f040 808f 	bne.w	8000fac <__udivmoddi4+0x210>
 8000e8e:	1b49      	subs	r1, r1, r5
 8000e90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e94:	fa1f f885 	uxth.w	r8, r5
 8000e98:	2701      	movs	r7, #1
 8000e9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e9e:	0c23      	lsrs	r3, r4, #16
 8000ea0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ea4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea8:	fb08 f10c 	mul.w	r1, r8, ip
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d907      	bls.n	8000ec0 <__udivmoddi4+0x124>
 8000eb0:	18eb      	adds	r3, r5, r3
 8000eb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x122>
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	f200 80cd 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ebe:	4684      	mov	ip, r0
 8000ec0:	1a59      	subs	r1, r3, r1
 8000ec2:	b2a3      	uxth	r3, r4
 8000ec4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ecc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ed0:	fb08 f800 	mul.w	r8, r8, r0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x14c>
 8000ed8:	192c      	adds	r4, r5, r4
 8000eda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x14a>
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	f200 80b6 	bhi.w	8001052 <__udivmoddi4+0x2b6>
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	eba4 0408 	sub.w	r4, r4, r8
 8000eec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef0:	e79f      	b.n	8000e32 <__udivmoddi4+0x96>
 8000ef2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ef6:	40bb      	lsls	r3, r7
 8000ef8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000efc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000f00:	fa01 f407 	lsl.w	r4, r1, r7
 8000f04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000f08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000f0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000f10:	4325      	orrs	r5, r4
 8000f12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000f16:	0c2c      	lsrs	r4, r5, #16
 8000f18:	fb08 3319 	mls	r3, r8, r9, r3
 8000f1c:	fa1f fa8e 	uxth.w	sl, lr
 8000f20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f24:	fb09 f40a 	mul.w	r4, r9, sl
 8000f28:	429c      	cmp	r4, r3
 8000f2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000f2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b0>
 8000f34:	eb1e 0303 	adds.w	r3, lr, r3
 8000f38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f3c:	f080 8087 	bcs.w	800104e <__udivmoddi4+0x2b2>
 8000f40:	429c      	cmp	r4, r3
 8000f42:	f240 8084 	bls.w	800104e <__udivmoddi4+0x2b2>
 8000f46:	f1a9 0902 	sub.w	r9, r9, #2
 8000f4a:	4473      	add	r3, lr
 8000f4c:	1b1b      	subs	r3, r3, r4
 8000f4e:	b2ad      	uxth	r5, r5
 8000f50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f54:	fb08 3310 	mls	r3, r8, r0, r3
 8000f58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f60:	45a2      	cmp	sl, r4
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1da>
 8000f64:	eb1e 0404 	adds.w	r4, lr, r4
 8000f68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f6c:	d26b      	bcs.n	8001046 <__udivmoddi4+0x2aa>
 8000f6e:	45a2      	cmp	sl, r4
 8000f70:	d969      	bls.n	8001046 <__udivmoddi4+0x2aa>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4474      	add	r4, lr
 8000f76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7e:	eba4 040a 	sub.w	r4, r4, sl
 8000f82:	454c      	cmp	r4, r9
 8000f84:	46c2      	mov	sl, r8
 8000f86:	464b      	mov	r3, r9
 8000f88:	d354      	bcc.n	8001034 <__udivmoddi4+0x298>
 8000f8a:	d051      	beq.n	8001030 <__udivmoddi4+0x294>
 8000f8c:	2e00      	cmp	r6, #0
 8000f8e:	d069      	beq.n	8001064 <__udivmoddi4+0x2c8>
 8000f90:	ebb1 050a 	subs.w	r5, r1, sl
 8000f94:	eb64 0403 	sbc.w	r4, r4, r3
 8000f98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f9c:	40fd      	lsrs	r5, r7
 8000f9e:	40fc      	lsrs	r4, r7
 8000fa0:	ea4c 0505 	orr.w	r5, ip, r5
 8000fa4:	e9c6 5400 	strd	r5, r4, [r6]
 8000fa8:	2700      	movs	r7, #0
 8000faa:	e747      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000fac:	f1c2 0320 	rsb	r3, r2, #32
 8000fb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000fb4:	4095      	lsls	r5, r2
 8000fb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000fba:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fc2:	4338      	orrs	r0, r7
 8000fc4:	0c01      	lsrs	r1, r0, #16
 8000fc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fca:	fa1f f885 	uxth.w	r8, r5
 8000fce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd6:	fb07 f308 	mul.w	r3, r7, r8
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d907      	bls.n	8000ff2 <__udivmoddi4+0x256>
 8000fe2:	1869      	adds	r1, r5, r1
 8000fe4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000fe8:	d22f      	bcs.n	800104a <__udivmoddi4+0x2ae>
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d92d      	bls.n	800104a <__udivmoddi4+0x2ae>
 8000fee:	3f02      	subs	r7, #2
 8000ff0:	4429      	add	r1, r5
 8000ff2:	1acb      	subs	r3, r1, r3
 8000ff4:	b281      	uxth	r1, r0
 8000ff6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ffa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ffe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001002:	fb00 f308 	mul.w	r3, r0, r8
 8001006:	428b      	cmp	r3, r1
 8001008:	d907      	bls.n	800101a <__udivmoddi4+0x27e>
 800100a:	1869      	adds	r1, r5, r1
 800100c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8001010:	d217      	bcs.n	8001042 <__udivmoddi4+0x2a6>
 8001012:	428b      	cmp	r3, r1
 8001014:	d915      	bls.n	8001042 <__udivmoddi4+0x2a6>
 8001016:	3802      	subs	r0, #2
 8001018:	4429      	add	r1, r5
 800101a:	1ac9      	subs	r1, r1, r3
 800101c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001020:	e73b      	b.n	8000e9a <__udivmoddi4+0xfe>
 8001022:	4637      	mov	r7, r6
 8001024:	4630      	mov	r0, r6
 8001026:	e709      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001028:	4607      	mov	r7, r0
 800102a:	e6e7      	b.n	8000dfc <__udivmoddi4+0x60>
 800102c:	4618      	mov	r0, r3
 800102e:	e6fb      	b.n	8000e28 <__udivmoddi4+0x8c>
 8001030:	4541      	cmp	r1, r8
 8001032:	d2ab      	bcs.n	8000f8c <__udivmoddi4+0x1f0>
 8001034:	ebb8 0a02 	subs.w	sl, r8, r2
 8001038:	eb69 020e 	sbc.w	r2, r9, lr
 800103c:	3801      	subs	r0, #1
 800103e:	4613      	mov	r3, r2
 8001040:	e7a4      	b.n	8000f8c <__udivmoddi4+0x1f0>
 8001042:	4660      	mov	r0, ip
 8001044:	e7e9      	b.n	800101a <__udivmoddi4+0x27e>
 8001046:	4618      	mov	r0, r3
 8001048:	e795      	b.n	8000f76 <__udivmoddi4+0x1da>
 800104a:	4667      	mov	r7, ip
 800104c:	e7d1      	b.n	8000ff2 <__udivmoddi4+0x256>
 800104e:	4681      	mov	r9, r0
 8001050:	e77c      	b.n	8000f4c <__udivmoddi4+0x1b0>
 8001052:	3802      	subs	r0, #2
 8001054:	442c      	add	r4, r5
 8001056:	e747      	b.n	8000ee8 <__udivmoddi4+0x14c>
 8001058:	f1ac 0c02 	sub.w	ip, ip, #2
 800105c:	442b      	add	r3, r5
 800105e:	e72f      	b.n	8000ec0 <__udivmoddi4+0x124>
 8001060:	4638      	mov	r0, r7
 8001062:	e708      	b.n	8000e76 <__udivmoddi4+0xda>
 8001064:	4637      	mov	r7, r6
 8001066:	e6e9      	b.n	8000e3c <__udivmoddi4+0xa0>

08001068 <__aeabi_idiv0>:
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	0000      	movs	r0, r0
	...

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f002 ff5d 	bl	8003f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f97b 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107e:	f000 fbb9 	bl	80017f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001082:	f000 fb8f 	bl	80017a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001086:	f000 fb61 	bl	800174c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800108a:	f000 f9db 	bl	8001444 <MX_I2C1_Init>
  MX_TIM1_Init();
 800108e:	f000 fa07 	bl	80014a0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001092:	f000 faa9 	bl	80015e8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001096:	f000 fa5b 	bl	8001550 <MX_TIM2_Init>
  MX_TIM4_Init();
 800109a:	f000 fb09 	bl	80016b0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  UART2.huart = &huart2;
 800109e:	4b96      	ldr	r3, [pc, #600]	; (80012f8 <main+0x288>)
 80010a0:	4a96      	ldr	r2, [pc, #600]	; (80012fc <main+0x28c>)
 80010a2:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 80010a4:	4b94      	ldr	r3, [pc, #592]	; (80012f8 <main+0x288>)
 80010a6:	22ff      	movs	r2, #255	; 0xff
 80010a8:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 80010aa:	4b93      	ldr	r3, [pc, #588]	; (80012f8 <main+0x288>)
 80010ac:	22ff      	movs	r2, #255	; 0xff
 80010ae:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 80010b0:	4891      	ldr	r0, [pc, #580]	; (80012f8 <main+0x288>)
 80010b2:	f001 ff6d 	bl	8002f90 <UARTInit>
  UARTResetStart(&UART2);
 80010b6:	4890      	ldr	r0, [pc, #576]	; (80012f8 <main+0x288>)
 80010b8:	f001 ff92 	bl	8002fe0 <UARTResetStart>

  HAL_TIM_Base_Start_IT(&htim2);
 80010bc:	4890      	ldr	r0, [pc, #576]	; (8001300 <main+0x290>)
 80010be:	f006 f990 	bl	80073e2 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 80010c2:	4890      	ldr	r0, [pc, #576]	; (8001304 <main+0x294>)
 80010c4:	f006 f969 	bl	800739a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010c8:	2100      	movs	r1, #0
 80010ca:	488e      	ldr	r0, [pc, #568]	; (8001304 <main+0x294>)
 80010cc:	f006 f9d8 	bl	8007480 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010d0:	2104      	movs	r1, #4
 80010d2:	488c      	ldr	r0, [pc, #560]	; (8001304 <main+0x294>)
 80010d4:	f006 f9d4 	bl	8007480 <HAL_TIM_PWM_Start>

  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 1)
 80010d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010dc:	488a      	ldr	r0, [pc, #552]	; (8001308 <main+0x298>)
 80010de:	f003 fdef 	bl	8004cc0 <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d104      	bne.n	80010f2 <main+0x82>
  {
	  HomeMode = 10;
 80010e8:	4b88      	ldr	r3, [pc, #544]	; (800130c <main+0x29c>)
 80010ea:	220a      	movs	r2, #10
 80010ec:	701a      	strb	r2, [r3, #0]
	  SetHome();
 80010ee:	f000 fccb 	bl	8001a88 <SetHome>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /////////////////////////////////////////////////////////////
  while (1)
  {
	  if (micros() - Timestamp >= 10000) //10000us = 0.01s = 100Hz
 80010f2:	f000 fc8b 	bl	8001a0c <micros>
 80010f6:	460a      	mov	r2, r1
 80010f8:	4601      	mov	r1, r0
 80010fa:	4b85      	ldr	r3, [pc, #532]	; (8001310 <main+0x2a0>)
 80010fc:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001100:	460b      	mov	r3, r1
 8001102:	4614      	mov	r4, r2
 8001104:	ebb3 030b 	subs.w	r3, r3, fp
 8001108:	eb64 040c 	sbc.w	r4, r4, ip
 800110c:	f242 710f 	movw	r1, #9999	; 0x270f
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	42a2      	cmp	r2, r4
 8001116:	bf08      	it	eq
 8001118:	4299      	cmpeq	r1, r3
 800111a:	d2ea      	bcs.n	80010f2 <main+0x82>
	  {
		  Timestamp = micros();
 800111c:	f000 fc76 	bl	8001a0c <micros>
 8001120:	4603      	mov	r3, r0
 8001122:	460c      	mov	r4, r1
 8001124:	4a7a      	ldr	r2, [pc, #488]	; (8001310 <main+0x2a0>)
 8001126:	e9c2 3400 	strd	r3, r4, [r2]

		  NucleoCheck();
 800112a:	f000 fbed 	bl	8001908 <NucleoCheck>
		  EmergencyCheck();
 800112e:	f000 fc0f 	bl	8001950 <EmergencyCheck>

		  if(UART_Flow2_Ack)
 8001132:	4b78      	ldr	r3, [pc, #480]	; (8001314 <main+0x2a4>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d037      	beq.n	80011aa <main+0x13a>
		  {
			while(1)
			{
				while(1)
				{
					InputChar = UARTReadChar(&UART2);
 800113a:	486f      	ldr	r0, [pc, #444]	; (80012f8 <main+0x288>)
 800113c:	f001 ff74 	bl	8003028 <UARTReadChar>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b74      	ldr	r3, [pc, #464]	; (8001318 <main+0x2a8>)
 8001146:	801a      	strh	r2, [r3, #0]
					if(InputChar != -1)
 8001148:	4b73      	ldr	r3, [pc, #460]	; (8001318 <main+0x2a8>)
 800114a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001152:	d0f2      	beq.n	800113a <main+0xca>
					{
						InputByte = (uint8_t)InputChar;
 8001154:	4b70      	ldr	r3, [pc, #448]	; (8001318 <main+0x2a8>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b6f      	ldr	r3, [pc, #444]	; (800131c <main+0x2ac>)
 800115e:	701a      	strb	r2, [r3, #0]
						ak[0] = InputByte;
 8001160:	4b6e      	ldr	r3, [pc, #440]	; (800131c <main+0x2ac>)
 8001162:	781a      	ldrb	r2, [r3, #0]
 8001164:	4b6e      	ldr	r3, [pc, #440]	; (8001320 <main+0x2b0>)
 8001166:	701a      	strb	r2, [r3, #0]
						break;
					}
				}
				while(1)
				{
					InputChar = UARTReadChar(&UART2);
 8001168:	4863      	ldr	r0, [pc, #396]	; (80012f8 <main+0x288>)
 800116a:	f001 ff5d 	bl	8003028 <UARTReadChar>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	4b69      	ldr	r3, [pc, #420]	; (8001318 <main+0x2a8>)
 8001174:	801a      	strh	r2, [r3, #0]
					if(InputChar != -1)
 8001176:	4b68      	ldr	r3, [pc, #416]	; (8001318 <main+0x2a8>)
 8001178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001180:	d0f2      	beq.n	8001168 <main+0xf8>
					{
						InputByte = (uint8_t)InputChar;
 8001182:	4b65      	ldr	r3, [pc, #404]	; (8001318 <main+0x2a8>)
 8001184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b64      	ldr	r3, [pc, #400]	; (800131c <main+0x2ac>)
 800118c:	701a      	strb	r2, [r3, #0]
						ak[1] = InputByte;
 800118e:	4b63      	ldr	r3, [pc, #396]	; (800131c <main+0x2ac>)
 8001190:	781a      	ldrb	r2, [r3, #0]
 8001192:	4b63      	ldr	r3, [pc, #396]	; (8001320 <main+0x2b0>)
 8001194:	705a      	strb	r2, [r3, #1]
						break;
 8001196:	bf00      	nop
					}
				}
				if(ak[0] == 'X' && ak[1] == 'u')
 8001198:	4b61      	ldr	r3, [pc, #388]	; (8001320 <main+0x2b0>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b58      	cmp	r3, #88	; 0x58
 800119e:	d1cc      	bne.n	800113a <main+0xca>
 80011a0:	4b5f      	ldr	r3, [pc, #380]	; (8001320 <main+0x2b0>)
 80011a2:	785b      	ldrb	r3, [r3, #1]
 80011a4:	2b75      	cmp	r3, #117	; 0x75
 80011a6:	d003      	beq.n	80011b0 <main+0x140>
			while(1)
 80011a8:	e7c7      	b.n	800113a <main+0xca>
				}
			}
		  }
		  else
		  {
			  UART_Protocal();
 80011aa:	f002 f8f1 	bl	8003390 <UART_Protocal>
 80011ae:	e000      	b.n	80011b2 <main+0x142>
					break;
 80011b0:	bf00      	nop
		  }

		  //----------------------------------------------

		  if(Laser)
 80011b2:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <main+0x2b4>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d05f      	beq.n	800127a <main+0x20a>
		  {
			  if(EndEff_Enable) { LaserDelay = 5000000; } //5000000us = 5s
 80011ba:	4b5b      	ldr	r3, [pc, #364]	; (8001328 <main+0x2b8>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d006      	beq.n	80011d0 <main+0x160>
 80011c2:	4a5a      	ldr	r2, [pc, #360]	; (800132c <main+0x2bc>)
 80011c4:	a44a      	add	r4, pc, #296	; (adr r4, 80012f0 <main+0x280>)
 80011c6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80011ca:	e9c2 3400 	strd	r3, r4, [r2]
 80011ce:	e005      	b.n	80011dc <main+0x16c>
			  else              { LaserDelay = 1000000; } //1000000us = 1s
 80011d0:	4a56      	ldr	r2, [pc, #344]	; (800132c <main+0x2bc>)
 80011d2:	4b57      	ldr	r3, [pc, #348]	; (8001330 <main+0x2c0>)
 80011d4:	f04f 0400 	mov.w	r4, #0
 80011d8:	e9c2 3400 	strd	r3, r4, [r2]

			  if (micros() - LaserTimestamp >= LaserDelay)
 80011dc:	f000 fc16 	bl	8001a0c <micros>
 80011e0:	4683      	mov	fp, r0
 80011e2:	468c      	mov	ip, r1
 80011e4:	4b53      	ldr	r3, [pc, #332]	; (8001334 <main+0x2c4>)
 80011e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011ea:	4659      	mov	r1, fp
 80011ec:	4662      	mov	r2, ip
 80011ee:	1ac9      	subs	r1, r1, r3
 80011f0:	eb62 0204 	sbc.w	r2, r2, r4
 80011f4:	4b4d      	ldr	r3, [pc, #308]	; (800132c <main+0x2bc>)
 80011f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011fa:	42a2      	cmp	r2, r4
 80011fc:	bf08      	it	eq
 80011fe:	4299      	cmpeq	r1, r3
 8001200:	d33b      	bcc.n	800127a <main+0x20a>
			  {
				  if(Goal_Mode == 3)
 8001202:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <main+0x2c8>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d12b      	bne.n	8001262 <main+0x1f2>
				  {
					  if(Current_Multi_Station == Multi_Station_Amount-1)
 800120a:	4b4c      	ldr	r3, [pc, #304]	; (800133c <main+0x2cc>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	4b4b      	ldr	r3, [pc, #300]	; (8001340 <main+0x2d0>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	429a      	cmp	r2, r3
 8001218:	d105      	bne.n	8001226 <main+0x1b6>
					  {
						  UART_Ack2();
 800121a:	f001 ffe3 	bl	80031e4 <UART_Ack2>
						  Goal_Mode = 0;
 800121e:	4b46      	ldr	r3, [pc, #280]	; (8001338 <main+0x2c8>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	e022      	b.n	800126c <main+0x1fc>
					  }
					  else
					  {
						  Current_Multi_Station += 1;
 8001226:	4b45      	ldr	r3, [pc, #276]	; (800133c <main+0x2cc>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b43      	ldr	r3, [pc, #268]	; (800133c <main+0x2cc>)
 8001230:	701a      	strb	r2, [r3, #0]
						  angle = Multi_Station_Angle[ Multi_Station[Current_Multi_Station] ];
 8001232:	4b42      	ldr	r3, [pc, #264]	; (800133c <main+0x2cc>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	4b42      	ldr	r3, [pc, #264]	; (8001344 <main+0x2d4>)
 800123a:	5c9b      	ldrb	r3, [r3, r2]
 800123c:	461a      	mov	r2, r3
 800123e:	4b42      	ldr	r3, [pc, #264]	; (8001348 <main+0x2d8>)
 8001240:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124c:	4b3f      	ldr	r3, [pc, #252]	; (800134c <main+0x2dc>)
 800124e:	edc3 7a00 	vstr	s15, [r3]
						  Lastest_Angle = Current_Angle;
 8001252:	4b3f      	ldr	r3, [pc, #252]	; (8001350 <main+0x2e0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a3f      	ldr	r2, [pc, #252]	; (8001354 <main+0x2e4>)
 8001258:	6013      	str	r3, [r2, #0]
						  Run = 1;
 800125a:	4b3f      	ldr	r3, [pc, #252]	; (8001358 <main+0x2e8>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	e004      	b.n	800126c <main+0x1fc>
					  }
				  }
				  else
				  {
					  UART_Ack2();
 8001262:	f001 ffbf 	bl	80031e4 <UART_Ack2>
					  Goal_Mode = 0;
 8001266:	4b34      	ldr	r3, [pc, #208]	; (8001338 <main+0x2c8>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
				  }
				  Laser = 0;
 800126c:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <main+0x2b4>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
				  t = 0;
 8001272:	4b3a      	ldr	r3, [pc, #232]	; (800135c <main+0x2ec>)
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
			  }
		  }

		  if(Emergency)
 800127a:	4b39      	ldr	r3, [pc, #228]	; (8001360 <main+0x2f0>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f47f af37 	bne.w	80010f2 <main+0x82>
		  {
			  // Do Nothing
		  }
		  else if(Run)
 8001284:	4b34      	ldr	r3, [pc, #208]	; (8001358 <main+0x2e8>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d01f      	beq.n	80012cc <main+0x25c>
		  {
			  if(angle == 0)
 800128c:	4b2f      	ldr	r3, [pc, #188]	; (800134c <main+0x2dc>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	d106      	bne.n	80012aa <main+0x23a>
			  {
				  angle = 5;
 800129c:	4b2b      	ldr	r3, [pc, #172]	; (800134c <main+0x2dc>)
 800129e:	4a31      	ldr	r2, [pc, #196]	; (8001364 <main+0x2f4>)
 80012a0:	601a      	str	r2, [r3, #0]
				  SpecialHome = 1;
 80012a2:	4b31      	ldr	r3, [pc, #196]	; (8001368 <main+0x2f8>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
 80012a8:	e723      	b.n	80010f2 <main+0x82>
			  }
			  else
			  {
				  RobotArm_Position = EncoderPosition_Update();
 80012aa:	f000 fccd 	bl	8001c48 <EncoderPosition_Update>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <main+0x2fc>)
 80012b4:	801a      	strh	r2, [r3, #0]
				  EncoderVelocity_Update();
 80012b6:	f000 fcd3 	bl	8001c60 <EncoderVelocity_Update>
				  planning();
 80012ba:	f001 f8c5 	bl	8002448 <planning>
				  kalmanfilter();
 80012be:	f000 fd7f 	bl	8001dc0 <kalmanfilter>
				  pid();
 80012c2:	f001 fc95 	bl	8002bf0 <pid>
				  MotorDrive();
 80012c6:	f000 fbbb 	bl	8001a40 <MotorDrive>
 80012ca:	e712      	b.n	80010f2 <main+0x82>
			  }
		  }

		  else if(Home)
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <main+0x300>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f43f af0e 	beq.w	80010f2 <main+0x82>
		  {
			  RobotArm_Position = EncoderPosition_Update();
 80012d6:	f000 fcb7 	bl	8001c48 <EncoderPosition_Update>
 80012da:	4603      	mov	r3, r0
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <main+0x2fc>)
 80012e0:	801a      	strh	r2, [r3, #0]
			  kalmanfilter();
 80012e2:	f000 fd6d 	bl	8001dc0 <kalmanfilter>
			  SetHome();
 80012e6:	f000 fbcf 	bl	8001a88 <SetHome>
	  if (micros() - Timestamp >= 10000) //10000us = 0.01s = 100Hz
 80012ea:	e702      	b.n	80010f2 <main+0x82>
 80012ec:	f3af 8000 	nop.w
 80012f0:	004c4b40 	.word	0x004c4b40
 80012f4:	00000000 	.word	0x00000000
 80012f8:	200001b0 	.word	0x200001b0
 80012fc:	20000454 	.word	0x20000454
 8001300:	20000414 	.word	0x20000414
 8001304:	20000334 	.word	0x20000334
 8001308:	40020000 	.word	0x40020000
 800130c:	20000100 	.word	0x20000100
 8001310:	200000e8 	.word	0x200000e8
 8001314:	20000214 	.word	0x20000214
 8001318:	200001ee 	.word	0x200001ee
 800131c:	200001f0 	.word	0x200001f0
 8001320:	200001d8 	.word	0x200001d8
 8001324:	200001de 	.word	0x200001de
 8001328:	200001e0 	.word	0x200001e0
 800132c:	20000010 	.word	0x20000010
 8001330:	000f4240 	.word	0x000f4240
 8001334:	200000f8 	.word	0x200000f8
 8001338:	200001d2 	.word	0x200001d2
 800133c:	200001d1 	.word	0x200001d1
 8001340:	20000210 	.word	0x20000210
 8001344:	20000200 	.word	0x20000200
 8001348:	20000034 	.word	0x20000034
 800134c:	2000018c 	.word	0x2000018c
 8001350:	200001cc 	.word	0x200001cc
 8001354:	200001c8 	.word	0x200001c8
 8001358:	200001db 	.word	0x200001db
 800135c:	20000170 	.word	0x20000170
 8001360:	200001da 	.word	0x200001da
 8001364:	40a00000 	.word	0x40a00000
 8001368:	200001dd 	.word	0x200001dd
 800136c:	20000108 	.word	0x20000108
 8001370:	200001dc 	.word	0x200001dc

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b094      	sub	sp, #80	; 0x50
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 0320 	add.w	r3, r7, #32
 800137e:	2230      	movs	r2, #48	; 0x30
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f007 ff93 	bl	80092ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <SystemClock_Config+0xc8>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	4a26      	ldr	r2, [pc, #152]	; (800143c <SystemClock_Config+0xc8>)
 80013a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a6:	6413      	str	r3, [r2, #64]	; 0x40
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <SystemClock_Config+0xc8>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <SystemClock_Config+0xcc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a20      	ldr	r2, [pc, #128]	; (8001440 <SystemClock_Config+0xcc>)
 80013be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <SystemClock_Config+0xcc>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d0:	2302      	movs	r3, #2
 80013d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d4:	2301      	movs	r3, #1
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d8:	2310      	movs	r3, #16
 80013da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013dc:	2302      	movs	r3, #2
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e0:	2300      	movs	r3, #0
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013e4:	2308      	movs	r3, #8
 80013e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80013e8:	2364      	movs	r3, #100	; 0x64
 80013ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013f0:	2304      	movs	r3, #4
 80013f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f4:	f107 0320 	add.w	r3, r7, #32
 80013f8:	4618      	mov	r0, r3
 80013fa:	f005 fb41 	bl	8006a80 <HAL_RCC_OscConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001404:	f002 fa8e 	bl	8003924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001408:	230f      	movs	r3, #15
 800140a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140c:	2302      	movs	r3, #2
 800140e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	2103      	movs	r1, #3
 8001424:	4618      	mov	r0, r3
 8001426:	f005 fd9b 	bl	8006f60 <HAL_RCC_ClockConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001430:	f002 fa78 	bl	8003924 <Error_Handler>
  }
}
 8001434:	bf00      	nop
 8001436:	3750      	adds	r7, #80	; 0x50
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	40007000 	.word	0x40007000

08001444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <MX_I2C1_Init+0x54>)
 800144a:	4a14      	ldr	r2, [pc, #80]	; (800149c <MX_I2C1_Init+0x58>)
 800144c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_I2C1_Init+0x54>)
 8001450:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001454:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_I2C1_Init+0x54>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_I2C1_Init+0x54>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <MX_I2C1_Init+0x54>)
 8001464:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001468:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_I2C1_Init+0x54>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_I2C1_Init+0x54>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_I2C1_Init+0x54>)
 8001478:	2200      	movs	r2, #0
 800147a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_I2C1_Init+0x54>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_I2C1_Init+0x54>)
 8001484:	f003 fc68 	bl	8004d58 <HAL_I2C_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800148e:	f002 fa49 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200002dc 	.word	0x200002dc
 800149c:	40005400 	.word	0x40005400

080014a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	2224      	movs	r2, #36	; 0x24
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f007 fefd 	bl	80092ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <MX_TIM1_Init+0xa8>)
 80014be:	4a23      	ldr	r2, [pc, #140]	; (800154c <MX_TIM1_Init+0xac>)
 80014c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014c2:	4b21      	ldr	r3, [pc, #132]	; (8001548 <MX_TIM1_Init+0xa8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <MX_TIM1_Init+0xa8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80014ce:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <MX_TIM1_Init+0xa8>)
 80014d0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <MX_TIM1_Init+0xa8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MX_TIM1_Init+0xa8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b19      	ldr	r3, [pc, #100]	; (8001548 <MX_TIM1_Init+0xa8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014e8:	2303      	movs	r3, #3
 80014ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014ec:	2300      	movs	r3, #0
 80014ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f0:	2301      	movs	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80014fc:	2302      	movs	r3, #2
 80014fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001500:	2301      	movs	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	4619      	mov	r1, r3
 8001512:	480d      	ldr	r0, [pc, #52]	; (8001548 <MX_TIM1_Init+0xa8>)
 8001514:	f005 ffe6 	bl	80074e4 <HAL_TIM_Encoder_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800151e:	f002 fa01 	bl	8003924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4806      	ldr	r0, [pc, #24]	; (8001548 <MX_TIM1_Init+0xa8>)
 8001530:	f006 fe1c 	bl	800816c <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800153a:	f002 f9f3 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	3730      	adds	r7, #48	; 0x30
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200003d4 	.word	0x200003d4
 800154c:	40010000 	.word	0x40010000

08001550 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <MX_TIM2_Init+0x94>)
 800156e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001572:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_TIM2_Init+0x94>)
 8001576:	2263      	movs	r2, #99	; 0x63
 8001578:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_TIM2_Init+0x94>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_TIM2_Init+0x94>)
 8001582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001586:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_TIM2_Init+0x94>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <MX_TIM2_Init+0x94>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001594:	4813      	ldr	r0, [pc, #76]	; (80015e4 <MX_TIM2_Init+0x94>)
 8001596:	f005 fed5 	bl	8007344 <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015a0:	f002 f9c0 	bl	8003924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4619      	mov	r1, r3
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <MX_TIM2_Init+0x94>)
 80015b2:	f006 fa2f 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015bc:	f002 f9b2 	bl	8003924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_TIM2_Init+0x94>)
 80015ce:	f006 fdcd 	bl	800816c <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015d8:	f002 f9a4 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000414 	.word	0x20000414

080015e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ee:	f107 0320 	add.w	r3, r7, #32
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <MX_TIM3_Init+0xc0>)
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <MX_TIM3_Init+0xc4>)
 800160e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <MX_TIM3_Init+0xc0>)
 8001612:	2200      	movs	r2, #0
 8001614:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <MX_TIM3_Init+0xc0>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <MX_TIM3_Init+0xc0>)
 800161e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001622:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001624:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <MX_TIM3_Init+0xc0>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_TIM3_Init+0xc0>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001630:	481d      	ldr	r0, [pc, #116]	; (80016a8 <MX_TIM3_Init+0xc0>)
 8001632:	f005 fefa 	bl	800742a <HAL_TIM_PWM_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800163c:	f002 f972 	bl	8003924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001648:	f107 0320 	add.w	r3, r7, #32
 800164c:	4619      	mov	r1, r3
 800164e:	4816      	ldr	r0, [pc, #88]	; (80016a8 <MX_TIM3_Init+0xc0>)
 8001650:	f006 fd8c 	bl	800816c <HAL_TIMEx_MasterConfigSynchronization>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800165a:	f002 f963 	bl	8003924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165e:	2360      	movs	r3, #96	; 0x60
 8001660:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <MX_TIM3_Init+0xc0>)
 8001676:	f006 f907 	bl	8007888 <HAL_TIM_PWM_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001680:	f002 f950 	bl	8003924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2204      	movs	r2, #4
 8001688:	4619      	mov	r1, r3
 800168a:	4807      	ldr	r0, [pc, #28]	; (80016a8 <MX_TIM3_Init+0xc0>)
 800168c:	f006 f8fc 	bl	8007888 <HAL_TIM_PWM_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001696:	f002 f945 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_TIM3_Init+0xc0>)
 800169c:	f002 fa74 	bl	8003b88 <HAL_TIM_MspPostInit>

}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000334 	.word	0x20000334
 80016ac:	40000400 	.word	0x40000400

080016b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_TIM4_Init+0x94>)
 80016ce:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <MX_TIM4_Init+0x98>)
 80016d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <MX_TIM4_Init+0x94>)
 80016d4:	2263      	movs	r2, #99	; 0x63
 80016d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_TIM4_Init+0x94>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <MX_TIM4_Init+0x94>)
 80016e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80016e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_TIM4_Init+0x94>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_TIM4_Init+0x94>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016f2:	4814      	ldr	r0, [pc, #80]	; (8001744 <MX_TIM4_Init+0x94>)
 80016f4:	f005 fe26 	bl	8007344 <HAL_TIM_Base_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80016fe:	f002 f911 	bl	8003924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001706:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4619      	mov	r1, r3
 800170e:	480d      	ldr	r0, [pc, #52]	; (8001744 <MX_TIM4_Init+0x94>)
 8001710:	f006 f980 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800171a:	f002 f903 	bl	8003924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001726:	463b      	mov	r3, r7
 8001728:	4619      	mov	r1, r3
 800172a:	4806      	ldr	r0, [pc, #24]	; (8001744 <MX_TIM4_Init+0x94>)
 800172c:	f006 fd1e 	bl	800816c <HAL_TIMEx_MasterConfigSynchronization>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001736:	f002 f8f5 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000298 	.word	0x20000298
 8001748:	40000800 	.word	0x40000800

0800174c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_USART2_UART_Init+0x50>)
 8001752:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <MX_USART2_UART_Init+0x54>)
 8001754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_USART2_UART_Init+0x50>)
 8001758:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 800175c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_USART2_UART_Init+0x50>)
 8001760:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001764:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <MX_USART2_UART_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_USART2_UART_Init+0x50>)
 800176e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_USART2_UART_Init+0x50>)
 8001776:	220c      	movs	r2, #12
 8001778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <MX_USART2_UART_Init+0x50>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_USART2_UART_Init+0x50>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_USART2_UART_Init+0x50>)
 8001788:	f006 fd72 	bl	8008270 <HAL_UART_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001792:	f002 f8c7 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000454 	.word	0x20000454
 80017a0:	40004400 	.word	0x40004400

080017a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <MX_DMA_Init+0x4c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <MX_DMA_Init+0x4c>)
 80017b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <MX_DMA_Init+0x4c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	2010      	movs	r0, #16
 80017cc:	f002 fd21 	bl	8004212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017d0:	2010      	movs	r0, #16
 80017d2:	f002 fd3a 	bl	800424a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2011      	movs	r0, #17
 80017dc:	f002 fd19 	bl	8004212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80017e0:	2011      	movs	r0, #17
 80017e2:	f002 fd32 	bl	800424a <HAL_NVIC_EnableIRQ>

}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a38      	ldr	r2, [pc, #224]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <MX_GPIO_Init+0x100>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <MX_GPIO_Init+0x100>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a31      	ldr	r2, [pc, #196]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a2a      	ldr	r2, [pc, #168]	; (80018f4 <MX_GPIO_Init+0x100>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a23      	ldr	r2, [pc, #140]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <MX_GPIO_Init+0x100>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	2120      	movs	r1, #32
 800187e:	481e      	ldr	r0, [pc, #120]	; (80018f8 <MX_GPIO_Init+0x104>)
 8001880:	f003 fa36 	bl	8004cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800188a:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <MX_GPIO_Init+0x108>)
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4819      	ldr	r0, [pc, #100]	; (8001900 <MX_GPIO_Init+0x10c>)
 800189a:	f003 f88f 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800189e:	2320      	movs	r3, #32
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4810      	ldr	r0, [pc, #64]	; (80018f8 <MX_GPIO_Init+0x104>)
 80018b6:	f003 f881 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	480a      	ldr	r0, [pc, #40]	; (80018f8 <MX_GPIO_Init+0x104>)
 80018d0:	f003 f874 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018d4:	2330      	movs	r3, #48	; 0x30
 80018d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	4807      	ldr	r0, [pc, #28]	; (8001904 <MX_GPIO_Init+0x110>)
 80018e8:	f003 f868 	bl	80049bc <HAL_GPIO_Init>

}
 80018ec:	bf00      	nop
 80018ee:	3728      	adds	r7, #40	; 0x28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	10210000 	.word	0x10210000
 8001900:	40020800 	.word	0x40020800
 8001904:	40020400 	.word	0x40020400

08001908 <NucleoCheck>:

/* USER CODE BEGIN 4 */
//******************************************************************

void NucleoCheck()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	ButtonArray[1] = ButtonArray[0];
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <NucleoCheck+0x3c>)
 800190e:	781a      	ldrb	r2, [r3, #0]
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <NucleoCheck+0x3c>)
 8001912:	705a      	strb	r2, [r3, #1]
	ButtonArray[0] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001914:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001918:	480b      	ldr	r0, [pc, #44]	; (8001948 <NucleoCheck+0x40>)
 800191a:	f003 f9d1 	bl	8004cc0 <HAL_GPIO_ReadPin>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <NucleoCheck+0x3c>)
 8001924:	701a      	strb	r2, [r3, #0]

	if(ButtonArray[0]==1 && ButtonArray[1]==0) //When Released Button
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <NucleoCheck+0x3c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d107      	bne.n	800193e <NucleoCheck+0x36>
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <NucleoCheck+0x3c>)
 8001930:	785b      	ldrb	r3, [r3, #1]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <NucleoCheck+0x36>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001936:	2120      	movs	r1, #32
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <NucleoCheck+0x44>)
 800193a:	f003 f9f2 	bl	8004d22 <HAL_GPIO_TogglePin>
	}
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000000c 	.word	0x2000000c
 8001948:	40020800 	.word	0x40020800
 800194c:	40020000 	.word	0x40020000

08001950 <EmergencyCheck>:

void EmergencyCheck()
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	EmergencyArray[1] = EmergencyArray[0];
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <EmergencyCheck+0x68>)
 8001956:	781a      	ldrb	r2, [r3, #0]
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <EmergencyCheck+0x68>)
 800195a:	705a      	strb	r2, [r3, #1]
	EmergencyArray[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 800195c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001960:	4816      	ldr	r0, [pc, #88]	; (80019bc <EmergencyCheck+0x6c>)
 8001962:	f003 f9ad 	bl	8004cc0 <HAL_GPIO_ReadPin>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <EmergencyCheck+0x68>)
 800196c:	701a      	strb	r2, [r3, #0]

	if(EmergencyArray[0]==0 && EmergencyArray[1]==1) //When Pressed Emergency
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <EmergencyCheck+0x68>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10a      	bne.n	800198c <EmergencyCheck+0x3c>
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <EmergencyCheck+0x68>)
 8001978:	785b      	ldrb	r3, [r3, #1]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d106      	bne.n	800198c <EmergencyCheck+0x3c>
	{
		Emergency = 1;
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <EmergencyCheck+0x70>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <EmergencyCheck+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
	{
		Emergency = 0;
		Lastest_Angle = Current_Angle;
		t = 0;
	}
}
 800198a:	e012      	b.n	80019b2 <EmergencyCheck+0x62>
	else if(EmergencyArray[0]==1 && EmergencyArray[1]==0) //When Released Emergency
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <EmergencyCheck+0x68>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d10e      	bne.n	80019b2 <EmergencyCheck+0x62>
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <EmergencyCheck+0x68>)
 8001996:	785b      	ldrb	r3, [r3, #1]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10a      	bne.n	80019b2 <EmergencyCheck+0x62>
		Emergency = 0;
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <EmergencyCheck+0x70>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
		Lastest_Angle = Current_Angle;
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <EmergencyCheck+0x78>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <EmergencyCheck+0x7c>)
 80019a8:	6013      	str	r3, [r2, #0]
		t = 0;
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <EmergencyCheck+0x80>)
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000008 	.word	0x20000008
 80019bc:	40020000 	.word	0x40020000
 80019c0:	200001da 	.word	0x200001da
 80019c4:	20000104 	.word	0x20000104
 80019c8:	200001cc 	.word	0x200001cc
 80019cc:	200001c8 	.word	0x200001c8
 80019d0:	20000170 	.word	0x20000170

080019d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d4:	b490      	push	{r4, r7}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d109      	bne.n	80019f8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80019e6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80019ea:	f111 33ff 	adds.w	r3, r1, #4294967295	; 0xffffffff
 80019ee:	f142 0400 	adc.w	r4, r2, #0
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80019f4:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc90      	pop	{r4, r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000414 	.word	0x20000414
 8001a08:	200000e0 	.word	0x200000e0

08001a0c <micros>:

uint64_t micros()
{
 8001a0c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001a10:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <micros+0x2c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <micros+0x30>)
 8001a20:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001a24:	eb1b 0301 	adds.w	r3, fp, r1
 8001a28:	eb4c 0402 	adc.w	r4, ip, r2
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	4621      	mov	r1, r4
 8001a30:	46bd      	mov	sp, r7
 8001a32:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001a36:	4770      	bx	lr
 8001a38:	20000414 	.word	0x20000414
 8001a3c:	200000e0 	.word	0x200000e0

08001a40 <MotorDrive>:
	ProxiArray[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
	ProxiArray[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
}

void MotorDrive()
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
	if(PWMOut >= 0)
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MotorDrive+0x40>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db09      	blt.n	8001a60 <MotorDrive+0x20>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWMOut);
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MotorDrive+0x40>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MotorDrive+0x44>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <MotorDrive+0x44>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, -PWMOut);
	}
}
 8001a5e:	e009      	b.n	8001a74 <MotorDrive+0x34>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <MotorDrive+0x44>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2200      	movs	r2, #0
 8001a66:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, -PWMOut);
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <MotorDrive+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	425a      	negs	r2, r3
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <MotorDrive+0x44>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000104 	.word	0x20000104
 8001a84:	20000334 	.word	0x20000334

08001a88 <SetHome>:

void SetHome()
{
 8001a88:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001a8c:	af00      	add	r7, sp, #0
	if(HomeMode == 1)
 8001a8e:	4b61      	ldr	r3, [pc, #388]	; (8001c14 <SetHome+0x18c>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d11e      	bne.n	8001ad4 <SetHome+0x4c>
	{
		PWMOut = 750;
 8001a96:	4b60      	ldr	r3, [pc, #384]	; (8001c18 <SetHome+0x190>)
 8001a98:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a9c:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001a9e:	f7ff ffcf 	bl	8001a40 <MotorDrive>
		if (micros() - HomeTimestamp >= 200000) //200000us = 0.2s
 8001aa2:	f7ff ffb3 	bl	8001a0c <micros>
 8001aa6:	460a      	mov	r2, r1
 8001aa8:	4601      	mov	r1, r0
 8001aaa:	4b5c      	ldr	r3, [pc, #368]	; (8001c1c <SetHome+0x194>)
 8001aac:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	ebb3 030b 	subs.w	r3, r3, fp
 8001ab8:	eb64 040c 	sbc.w	r4, r4, ip
 8001abc:	4958      	ldr	r1, [pc, #352]	; (8001c20 <SetHome+0x198>)
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	42a2      	cmp	r2, r4
 8001ac4:	bf08      	it	eq
 8001ac6:	4299      	cmpeq	r1, r3
 8001ac8:	f080 80a0 	bcs.w	8001c0c <SetHome+0x184>
		{
			HomeMode = 2;
 8001acc:	4b51      	ldr	r3, [pc, #324]	; (8001c14 <SetHome+0x18c>)
 8001ace:	2202      	movs	r2, #2
 8001ad0:	701a      	strb	r2, [r3, #0]
		MotorDrive();
		HAL_Delay(500);
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
		HomeMode = 0;
	}
}
 8001ad2:	e09b      	b.n	8001c0c <SetHome+0x184>
	else if(HomeMode == 2)
 8001ad4:	4b4f      	ldr	r3, [pc, #316]	; (8001c14 <SetHome+0x18c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d110      	bne.n	8001afe <SetHome+0x76>
		PWMOut = -2500;
 8001adc:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <SetHome+0x190>)
 8001ade:	4a51      	ldr	r2, [pc, #324]	; (8001c24 <SetHome+0x19c>)
 8001ae0:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001ae2:	f7ff ffad 	bl	8001a40 <MotorDrive>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0)
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	484f      	ldr	r0, [pc, #316]	; (8001c28 <SetHome+0x1a0>)
 8001aea:	f003 f8e9 	bl	8004cc0 <HAL_GPIO_ReadPin>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f040 808b 	bne.w	8001c0c <SetHome+0x184>
			HomeMode = 3;
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <SetHome+0x18c>)
 8001af8:	2203      	movs	r2, #3
 8001afa:	701a      	strb	r2, [r3, #0]
}
 8001afc:	e086      	b.n	8001c0c <SetHome+0x184>
	else if(HomeMode == 3)
 8001afe:	4b45      	ldr	r3, [pc, #276]	; (8001c14 <SetHome+0x18c>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d116      	bne.n	8001b34 <SetHome+0xac>
		PWMOut = -600;
 8001b06:	4b44      	ldr	r3, [pc, #272]	; (8001c18 <SetHome+0x190>)
 8001b08:	4a48      	ldr	r2, [pc, #288]	; (8001c2c <SetHome+0x1a4>)
 8001b0a:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001b0c:	f7ff ff98 	bl	8001a40 <MotorDrive>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0)
 8001b10:	2120      	movs	r1, #32
 8001b12:	4845      	ldr	r0, [pc, #276]	; (8001c28 <SetHome+0x1a0>)
 8001b14:	f003 f8d4 	bl	8004cc0 <HAL_GPIO_ReadPin>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d176      	bne.n	8001c0c <SetHome+0x184>
			HomeMode = 4;
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <SetHome+0x18c>)
 8001b20:	2204      	movs	r2, #4
 8001b22:	701a      	strb	r2, [r3, #0]
			HomeTimestamp = micros();
 8001b24:	f7ff ff72 	bl	8001a0c <micros>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	460c      	mov	r4, r1
 8001b2c:	4a3b      	ldr	r2, [pc, #236]	; (8001c1c <SetHome+0x194>)
 8001b2e:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001b32:	e06b      	b.n	8001c0c <SetHome+0x184>
	else if(HomeMode == 4)
 8001b34:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <SetHome+0x18c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d130      	bne.n	8001b9e <SetHome+0x116>
		PWMOut = 0;
 8001b3c:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <SetHome+0x190>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001b42:	f7ff ff7d 	bl	8001a40 <MotorDrive>
		if (micros() - HomeTimestamp >= 500000) //500000us = 0.5s
 8001b46:	f7ff ff61 	bl	8001a0c <micros>
 8001b4a:	460a      	mov	r2, r1
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	4b33      	ldr	r3, [pc, #204]	; (8001c1c <SetHome+0x194>)
 8001b50:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001b54:	460b      	mov	r3, r1
 8001b56:	4614      	mov	r4, r2
 8001b58:	ebb3 030b 	subs.w	r3, r3, fp
 8001b5c:	eb64 040c 	sbc.w	r4, r4, ip
 8001b60:	4933      	ldr	r1, [pc, #204]	; (8001c30 <SetHome+0x1a8>)
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	42a2      	cmp	r2, r4
 8001b68:	bf08      	it	eq
 8001b6a:	4299      	cmpeq	r1, r3
 8001b6c:	d24e      	bcs.n	8001c0c <SetHome+0x184>
			htim1.Instance->CNT = 0;
 8001b6e:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <SetHome+0x1ac>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
			HomeMode = 0;
 8001b76:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <SetHome+0x18c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
			Home = 0;
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <SetHome+0x1b0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
			Lastest_Angle = 0;
 8001b82:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <SetHome+0x1b4>)
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
			if(Goal_Mode != 0)
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <SetHome+0x1b8>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d03c      	beq.n	8001c0c <SetHome+0x184>
				SpecialHome = 0;
 8001b92:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <SetHome+0x1bc>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
				ReachGoal();
 8001b98:	f000 ffdc 	bl	8002b54 <ReachGoal>
}
 8001b9c:	e036      	b.n	8001c0c <SetHome+0x184>
	else if(HomeMode == 10)
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <SetHome+0x18c>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b0a      	cmp	r3, #10
 8001ba4:	d132      	bne.n	8001c0c <SetHome+0x184>
		PWMOut = 750;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <SetHome+0x190>)
 8001ba8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001bac:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001bae:	f7ff ff47 	bl	8001a40 <MotorDrive>
		HAL_Delay(200);
 8001bb2:	20c8      	movs	r0, #200	; 0xc8
 8001bb4:	f002 fa30 	bl	8004018 <HAL_Delay>
		PWMOut = -2500;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <SetHome+0x190>)
 8001bba:	4a1a      	ldr	r2, [pc, #104]	; (8001c24 <SetHome+0x19c>)
 8001bbc:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8001bbe:	e001      	b.n	8001bc4 <SetHome+0x13c>
			MotorDrive();
 8001bc0:	f7ff ff3e 	bl	8001a40 <MotorDrive>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8001bc4:	2110      	movs	r1, #16
 8001bc6:	4818      	ldr	r0, [pc, #96]	; (8001c28 <SetHome+0x1a0>)
 8001bc8:	f003 f87a 	bl	8004cc0 <HAL_GPIO_ReadPin>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d0f6      	beq.n	8001bc0 <SetHome+0x138>
		PWMOut = -600;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <SetHome+0x190>)
 8001bd4:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <SetHome+0x1a4>)
 8001bd6:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1)
 8001bd8:	e001      	b.n	8001bde <SetHome+0x156>
			MotorDrive();
 8001bda:	f7ff ff31 	bl	8001a40 <MotorDrive>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1)
 8001bde:	2120      	movs	r1, #32
 8001be0:	4811      	ldr	r0, [pc, #68]	; (8001c28 <SetHome+0x1a0>)
 8001be2:	f003 f86d 	bl	8004cc0 <HAL_GPIO_ReadPin>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d0f6      	beq.n	8001bda <SetHome+0x152>
		PWMOut = 0;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <SetHome+0x190>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8001bf2:	f7ff ff25 	bl	8001a40 <MotorDrive>
		HAL_Delay(500);
 8001bf6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bfa:	f002 fa0d 	bl	8004018 <HAL_Delay>
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001bfe:	213c      	movs	r1, #60	; 0x3c
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <SetHome+0x1ac>)
 8001c02:	f005 fd01 	bl	8007608 <HAL_TIM_Encoder_Start>
		HomeMode = 0;
 8001c06:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <SetHome+0x18c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001c12:	bf00      	nop
 8001c14:	20000100 	.word	0x20000100
 8001c18:	20000104 	.word	0x20000104
 8001c1c:	200000f0 	.word	0x200000f0
 8001c20:	00030d3f 	.word	0x00030d3f
 8001c24:	fffff63c 	.word	0xfffff63c
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	fffffda8 	.word	0xfffffda8
 8001c30:	0007a11f 	.word	0x0007a11f
 8001c34:	200003d4 	.word	0x200003d4
 8001c38:	200001dc 	.word	0x200001dc
 8001c3c:	200001c8 	.word	0x200001c8
 8001c40:	200001d2 	.word	0x200001d2
 8001c44:	200001dd 	.word	0x200001dd

08001c48 <EncoderPosition_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 3600
#define  MAX_ENCODER_PERIOD 7200

uint32_t EncoderPosition_Update()
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
	return HTIM_ENCODER.Instance->CNT;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <EncoderPosition_Update+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	200003d4 	.word	0x200003d4

08001c60 <EncoderVelocity_Update>:

float EncoderVelocity_Update()
{
 8001c60:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001c64:	ed2d 8b02 	vpush	{d8}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001c6c:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <EncoderVelocity_Update+0x140>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8001c74:	f7ff feca 	bl	8001a0c <micros>
 8001c78:	e9c7 0102 	strd	r0, r1, [r7, #8]
	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff; sample2 = 102.0;
 8001c7c:	4b49      	ldr	r3, [pc, #292]	; (8001da4 <EncoderVelocity_Update+0x144>)
 8001c7e:	4a4a      	ldr	r2, [pc, #296]	; (8001da8 <EncoderVelocity_Update+0x148>)
 8001c80:	601a      	str	r2, [r3, #0]
	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001c82:	4b4a      	ldr	r3, [pc, #296]	; (8001dac <EncoderVelocity_Update+0x14c>)
 8001c84:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001c88:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4614      	mov	r4, r2
 8001c90:	ebb3 030b 	subs.w	r3, r3, fp
 8001c94:	eb64 040c 	sbc.w	r4, r4, ip
 8001c98:	e9c7 3400 	strd	r3, r4, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8001c9c:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <EncoderVelocity_Update+0x150>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001cac:	db04      	blt.n	8001cb8 <EncoderVelocity_Update+0x58>
	{EncoderPositionDiff -= MAX_ENCODER_PERIOD;}
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e008      	b.n	8001cca <EncoderVelocity_Update+0x6a>
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	425b      	negs	r3, r3
 8001cbc:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001cc0:	db03      	blt.n	8001cca <EncoderVelocity_Update+0x6a>
	{EncoderPositionDiff += MAX_ENCODER_PERIOD;}
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001cc8:	617b      	str	r3, [r7, #20]
	EncoderLastPosition = EncoderNowPosition;
 8001cca:	4a39      	ldr	r2, [pc, #228]	; (8001db0 <EncoderVelocity_Update+0x150>)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8001cd0:	4a36      	ldr	r2, [pc, #216]	; (8001dac <EncoderVelocity_Update+0x14c>)
 8001cd2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001cd6:	e9c2 3400 	strd	r3, r4, [r2]
	raw =(float)(EncoderPositionDiff * 1000000.00) / (float) EncoderTimeDiff;
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f7fe fbce 	bl	800047c <__aeabi_i2d>
 8001ce0:	a329      	add	r3, pc, #164	; (adr r3, 8001d88 <EncoderVelocity_Update+0x128>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	f7fe fc33 	bl	8000550 <__aeabi_dmul>
 8001cea:	4603      	mov	r3, r0
 8001cec:	460c      	mov	r4, r1
 8001cee:	4618      	mov	r0, r3
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	f7fe fedd 	bl	8000ab0 <__aeabi_d2f>
 8001cf6:	ee08 0a10 	vmov	s16, r0
 8001cfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cfe:	f7fe ffef 	bl	8000ce0 <__aeabi_ul2f>
 8001d02:	ee07 0a10 	vmov	s14, r0
 8001d06:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001d0a:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <EncoderVelocity_Update+0x154>)
 8001d0c:	edc3 7a00 	vstr	s15, [r3]
	rad = raw* 0.05*2.00*3.141592/360.00;
 8001d10:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <EncoderVelocity_Update+0x154>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fbc3 	bl	80004a0 <__aeabi_f2d>
 8001d1a:	a31d      	add	r3, pc, #116	; (adr r3, 8001d90 <EncoderVelocity_Update+0x130>)
 8001d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d20:	f7fe fc16 	bl	8000550 <__aeabi_dmul>
 8001d24:	4603      	mov	r3, r0
 8001d26:	460c      	mov	r4, r1
 8001d28:	4618      	mov	r0, r3
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	f7fe fa58 	bl	80001e4 <__adddf3>
 8001d34:	4603      	mov	r3, r0
 8001d36:	460c      	mov	r4, r1
 8001d38:	4618      	mov	r0, r3
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	a316      	add	r3, pc, #88	; (adr r3, 8001d98 <EncoderVelocity_Update+0x138>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe fc05 	bl	8000550 <__aeabi_dmul>
 8001d46:	4603      	mov	r3, r0
 8001d48:	460c      	mov	r4, r1
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <EncoderVelocity_Update+0x158>)
 8001d54:	f7fe fd26 	bl	80007a4 <__aeabi_ddiv>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	460c      	mov	r4, r1
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	4621      	mov	r1, r4
 8001d60:	f7fe fea6 	bl	8000ab0 <__aeabi_d2f>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <EncoderVelocity_Update+0x15c>)
 8001d68:	601a      	str	r2, [r3, #0]
	return rad;
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <EncoderVelocity_Update+0x15c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	ee07 3a90 	vmov	s15, r3
}
 8001d72:	eeb0 0a67 	vmov.f32	s0, s15
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	ecbd 8b02 	vpop	{d8}
 8001d7e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001d82:	bf00      	nop
 8001d84:	f3af 8000 	nop.w
 8001d88:	00000000 	.word	0x00000000
 8001d8c:	412e8480 	.word	0x412e8480
 8001d90:	9999999a 	.word	0x9999999a
 8001d94:	3fa99999 	.word	0x3fa99999
 8001d98:	fc8b007a 	.word	0xfc8b007a
 8001d9c:	400921fa 	.word	0x400921fa
 8001da0:	200003d4 	.word	0x200003d4
 8001da4:	20000004 	.word	0x20000004
 8001da8:	42cc0000 	.word	0x42cc0000
 8001dac:	20000218 	.word	0x20000218
 8001db0:	20000220 	.word	0x20000220
 8001db4:	20000114 	.word	0x20000114
 8001db8:	40768000 	.word	0x40768000
 8001dbc:	20000110 	.word	0x20000110

08001dc0 <kalmanfilter>:

void kalmanfilter()
{    Q = pow(a,2);
 8001dc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dc4:	ed2d 8b02 	vpush	{d8}
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4bd5      	ldr	r3, [pc, #852]	; (8002120 <kalmanfilter+0x360>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fb66 	bl	80004a0 <__aeabi_f2d>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	460c      	mov	r4, r1
 8001dd8:	ed9f 1bcd 	vldr	d1, [pc, #820]	; 8002110 <kalmanfilter+0x350>
 8001ddc:	ec44 3b10 	vmov	d0, r3, r4
 8001de0:	f007 fb32 	bl	8009448 <pow>
 8001de4:	ec54 3b10 	vmov	r3, r4, d0
 8001de8:	4618      	mov	r0, r3
 8001dea:	4621      	mov	r1, r4
 8001dec:	f7fe fe60 	bl	8000ab0 <__aeabi_d2f>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4bcc      	ldr	r3, [pc, #816]	; (8002124 <kalmanfilter+0x364>)
 8001df4:	601a      	str	r2, [r3, #0]
	 R = pow(w,2);
 8001df6:	4bcc      	ldr	r3, [pc, #816]	; (8002128 <kalmanfilter+0x368>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fb50 	bl	80004a0 <__aeabi_f2d>
 8001e00:	4603      	mov	r3, r0
 8001e02:	460c      	mov	r4, r1
 8001e04:	ed9f 1bc2 	vldr	d1, [pc, #776]	; 8002110 <kalmanfilter+0x350>
 8001e08:	ec44 3b10 	vmov	d0, r3, r4
 8001e0c:	f007 fb1c 	bl	8009448 <pow>
 8001e10:	ec54 3b10 	vmov	r3, r4, d0
 8001e14:	4618      	mov	r0, r3
 8001e16:	4621      	mov	r1, r4
 8001e18:	f7fe fe4a 	bl	8000ab0 <__aeabi_d2f>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4bc3      	ldr	r3, [pc, #780]	; (800212c <kalmanfilter+0x36c>)
 8001e20:	601a      	str	r2, [r3, #0]
	 theta_est = theta_pd + omega_pd*dt1;
 8001e22:	4bc3      	ldr	r3, [pc, #780]	; (8002130 <kalmanfilter+0x370>)
 8001e24:	ed93 7a00 	vldr	s14, [r3]
 8001e28:	4bc2      	ldr	r3, [pc, #776]	; (8002134 <kalmanfilter+0x374>)
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e32:	4bc1      	ldr	r3, [pc, #772]	; (8002138 <kalmanfilter+0x378>)
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3c:	4bbf      	ldr	r3, [pc, #764]	; (800213c <kalmanfilter+0x37c>)
 8001e3e:	edc3 7a00 	vstr	s15, [r3]
	 omega_est = omega_pd;
 8001e42:	4bbb      	ldr	r3, [pc, #748]	; (8002130 <kalmanfilter+0x370>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4abe      	ldr	r2, [pc, #760]	; (8002140 <kalmanfilter+0x380>)
 8001e48:	6013      	str	r3, [r2, #0]

	 v_pre = omega_est;
 8001e4a:	4bbd      	ldr	r3, [pc, #756]	; (8002140 <kalmanfilter+0x380>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4abd      	ldr	r2, [pc, #756]	; (8002144 <kalmanfilter+0x384>)
 8001e50:	6013      	str	r3, [r2, #0]

	 y = (rad-omega_est);
 8001e52:	4bbd      	ldr	r3, [pc, #756]	; (8002148 <kalmanfilter+0x388>)
 8001e54:	ed93 7a00 	vldr	s14, [r3]
 8001e58:	4bb9      	ldr	r3, [pc, #740]	; (8002140 <kalmanfilter+0x380>)
 8001e5a:	edd3 7a00 	vldr	s15, [r3]
 8001e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e62:	4bba      	ldr	r3, [pc, #744]	; (800214c <kalmanfilter+0x38c>)
 8001e64:	edc3 7a00 	vstr	s15, [r3]

    p11 = p11 + dt1*p21+ (Q*pow(dt1,4))/4 + (pow(dt1,2))*(p12+dt1*p22)/dt1;
 8001e68:	4bb2      	ldr	r3, [pc, #712]	; (8002134 <kalmanfilter+0x374>)
 8001e6a:	ed93 7a00 	vldr	s14, [r3]
 8001e6e:	4bb8      	ldr	r3, [pc, #736]	; (8002150 <kalmanfilter+0x390>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e78:	4bb6      	ldr	r3, [pc, #728]	; (8002154 <kalmanfilter+0x394>)
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e82:	ee17 0a90 	vmov	r0, s15
 8001e86:	f7fe fb0b 	bl	80004a0 <__aeabi_f2d>
 8001e8a:	4604      	mov	r4, r0
 8001e8c:	460d      	mov	r5, r1
 8001e8e:	4ba5      	ldr	r3, [pc, #660]	; (8002124 <kalmanfilter+0x364>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fb04 	bl	80004a0 <__aeabi_f2d>
 8001e98:	4680      	mov	r8, r0
 8001e9a:	4689      	mov	r9, r1
 8001e9c:	4ba5      	ldr	r3, [pc, #660]	; (8002134 <kalmanfilter+0x374>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fafd 	bl	80004a0 <__aeabi_f2d>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	ed9f 1b9b 	vldr	d1, [pc, #620]	; 8002118 <kalmanfilter+0x358>
 8001eae:	ec43 2b10 	vmov	d0, r2, r3
 8001eb2:	f007 fac9 	bl	8009448 <pow>
 8001eb6:	ec53 2b10 	vmov	r2, r3, d0
 8001eba:	4640      	mov	r0, r8
 8001ebc:	4649      	mov	r1, r9
 8001ebe:	f7fe fb47 	bl	8000550 <__aeabi_dmul>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4ba2      	ldr	r3, [pc, #648]	; (8002158 <kalmanfilter+0x398>)
 8001ed0:	f7fe fc68 	bl	80007a4 <__aeabi_ddiv>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4620      	mov	r0, r4
 8001eda:	4629      	mov	r1, r5
 8001edc:	f7fe f982 	bl	80001e4 <__adddf3>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	4625      	mov	r5, r4
 8001ee6:	461c      	mov	r4, r3
 8001ee8:	4b92      	ldr	r3, [pc, #584]	; (8002134 <kalmanfilter+0x374>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fad7 	bl	80004a0 <__aeabi_f2d>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	ed9f 1b86 	vldr	d1, [pc, #536]	; 8002110 <kalmanfilter+0x350>
 8001efa:	ec43 2b10 	vmov	d0, r2, r3
 8001efe:	f007 faa3 	bl	8009448 <pow>
 8001f02:	ec59 8b10 	vmov	r8, r9, d0
 8001f06:	4b8b      	ldr	r3, [pc, #556]	; (8002134 <kalmanfilter+0x374>)
 8001f08:	ed93 7a00 	vldr	s14, [r3]
 8001f0c:	4b93      	ldr	r3, [pc, #588]	; (800215c <kalmanfilter+0x39c>)
 8001f0e:	edd3 7a00 	vldr	s15, [r3]
 8001f12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f16:	4b92      	ldr	r3, [pc, #584]	; (8002160 <kalmanfilter+0x3a0>)
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f20:	ee17 0a90 	vmov	r0, s15
 8001f24:	f7fe fabc 	bl	80004a0 <__aeabi_f2d>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4640      	mov	r0, r8
 8001f2e:	4649      	mov	r1, r9
 8001f30:	f7fe fb0e 	bl	8000550 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4690      	mov	r8, r2
 8001f3a:	4699      	mov	r9, r3
 8001f3c:	4b7d      	ldr	r3, [pc, #500]	; (8002134 <kalmanfilter+0x374>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe faad 	bl	80004a0 <__aeabi_f2d>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4640      	mov	r0, r8
 8001f4c:	4649      	mov	r1, r9
 8001f4e:	f7fe fc29 	bl	80007a4 <__aeabi_ddiv>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4620      	mov	r0, r4
 8001f58:	4629      	mov	r1, r5
 8001f5a:	f7fe f943 	bl	80001e4 <__adddf3>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	460c      	mov	r4, r1
 8001f62:	4618      	mov	r0, r3
 8001f64:	4621      	mov	r1, r4
 8001f66:	f7fe fda3 	bl	8000ab0 <__aeabi_d2f>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4b79      	ldr	r3, [pc, #484]	; (8002154 <kalmanfilter+0x394>)
 8001f6e:	601a      	str	r2, [r3, #0]
    p12 = p12 + dt1*p22 + (Q*dt1*pow(dt1,2))/2;
 8001f70:	4b70      	ldr	r3, [pc, #448]	; (8002134 <kalmanfilter+0x374>)
 8001f72:	ed93 7a00 	vldr	s14, [r3]
 8001f76:	4b79      	ldr	r3, [pc, #484]	; (800215c <kalmanfilter+0x39c>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f80:	4b77      	ldr	r3, [pc, #476]	; (8002160 <kalmanfilter+0x3a0>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8a:	ee17 0a90 	vmov	r0, s15
 8001f8e:	f7fe fa87 	bl	80004a0 <__aeabi_f2d>
 8001f92:	4604      	mov	r4, r0
 8001f94:	460d      	mov	r5, r1
 8001f96:	4b63      	ldr	r3, [pc, #396]	; (8002124 <kalmanfilter+0x364>)
 8001f98:	ed93 7a00 	vldr	s14, [r3]
 8001f9c:	4b65      	ldr	r3, [pc, #404]	; (8002134 <kalmanfilter+0x374>)
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa6:	ee17 0a90 	vmov	r0, s15
 8001faa:	f7fe fa79 	bl	80004a0 <__aeabi_f2d>
 8001fae:	4680      	mov	r8, r0
 8001fb0:	4689      	mov	r9, r1
 8001fb2:	4b60      	ldr	r3, [pc, #384]	; (8002134 <kalmanfilter+0x374>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fa72 	bl	80004a0 <__aeabi_f2d>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8002110 <kalmanfilter+0x350>
 8001fc4:	ec43 2b10 	vmov	d0, r2, r3
 8001fc8:	f007 fa3e 	bl	8009448 <pow>
 8001fcc:	ec53 2b10 	vmov	r2, r3, d0
 8001fd0:	4640      	mov	r0, r8
 8001fd2:	4649      	mov	r1, r9
 8001fd4:	f7fe fabc 	bl	8000550 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fe8:	f7fe fbdc 	bl	80007a4 <__aeabi_ddiv>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	f7fe f8f6 	bl	80001e4 <__adddf3>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	460c      	mov	r4, r1
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	4621      	mov	r1, r4
 8002000:	f7fe fd56 	bl	8000ab0 <__aeabi_d2f>
 8002004:	4602      	mov	r2, r0
 8002006:	4b56      	ldr	r3, [pc, #344]	; (8002160 <kalmanfilter+0x3a0>)
 8002008:	601a      	str	r2, [r3, #0]
    p21 = (2*dt1*p21+Q*pow(dt1,4) + 2*p22*pow(dt1,2))/(2*dt1);
 800200a:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <kalmanfilter+0x374>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002014:	4b4e      	ldr	r3, [pc, #312]	; (8002150 <kalmanfilter+0x390>)
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	ee17 0a90 	vmov	r0, s15
 8002022:	f7fe fa3d 	bl	80004a0 <__aeabi_f2d>
 8002026:	4604      	mov	r4, r0
 8002028:	460d      	mov	r5, r1
 800202a:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <kalmanfilter+0x364>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fa36 	bl	80004a0 <__aeabi_f2d>
 8002034:	4680      	mov	r8, r0
 8002036:	4689      	mov	r9, r1
 8002038:	4b3e      	ldr	r3, [pc, #248]	; (8002134 <kalmanfilter+0x374>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fa2f 	bl	80004a0 <__aeabi_f2d>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8002118 <kalmanfilter+0x358>
 800204a:	ec43 2b10 	vmov	d0, r2, r3
 800204e:	f007 f9fb 	bl	8009448 <pow>
 8002052:	ec53 2b10 	vmov	r2, r3, d0
 8002056:	4640      	mov	r0, r8
 8002058:	4649      	mov	r1, r9
 800205a:	f7fe fa79 	bl	8000550 <__aeabi_dmul>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4620      	mov	r0, r4
 8002064:	4629      	mov	r1, r5
 8002066:	f7fe f8bd 	bl	80001e4 <__adddf3>
 800206a:	4603      	mov	r3, r0
 800206c:	460c      	mov	r4, r1
 800206e:	4625      	mov	r5, r4
 8002070:	461c      	mov	r4, r3
 8002072:	4b3a      	ldr	r3, [pc, #232]	; (800215c <kalmanfilter+0x39c>)
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800207c:	ee17 0a90 	vmov	r0, s15
 8002080:	f7fe fa0e 	bl	80004a0 <__aeabi_f2d>
 8002084:	4680      	mov	r8, r0
 8002086:	4689      	mov	r9, r1
 8002088:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <kalmanfilter+0x374>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa07 	bl	80004a0 <__aeabi_f2d>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8002110 <kalmanfilter+0x350>
 800209a:	ec43 2b10 	vmov	d0, r2, r3
 800209e:	f007 f9d3 	bl	8009448 <pow>
 80020a2:	ec53 2b10 	vmov	r2, r3, d0
 80020a6:	4640      	mov	r0, r8
 80020a8:	4649      	mov	r1, r9
 80020aa:	f7fe fa51 	bl	8000550 <__aeabi_dmul>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4620      	mov	r0, r4
 80020b4:	4629      	mov	r1, r5
 80020b6:	f7fe f895 	bl	80001e4 <__adddf3>
 80020ba:	4603      	mov	r3, r0
 80020bc:	460c      	mov	r4, r1
 80020be:	4625      	mov	r5, r4
 80020c0:	461c      	mov	r4, r3
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <kalmanfilter+0x374>)
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020cc:	ee17 0a90 	vmov	r0, s15
 80020d0:	f7fe f9e6 	bl	80004a0 <__aeabi_f2d>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4620      	mov	r0, r4
 80020da:	4629      	mov	r1, r5
 80020dc:	f7fe fb62 	bl	80007a4 <__aeabi_ddiv>
 80020e0:	4603      	mov	r3, r0
 80020e2:	460c      	mov	r4, r1
 80020e4:	4618      	mov	r0, r3
 80020e6:	4621      	mov	r1, r4
 80020e8:	f7fe fce2 	bl	8000ab0 <__aeabi_d2f>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <kalmanfilter+0x390>)
 80020f0:	601a      	str	r2, [r3, #0]
    p22 = Q*pow(dt1,2)+p22;
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <kalmanfilter+0x364>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe f9d2 	bl	80004a0 <__aeabi_f2d>
 80020fc:	4604      	mov	r4, r0
 80020fe:	460d      	mov	r5, r1
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <kalmanfilter+0x374>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe f9cb 	bl	80004a0 <__aeabi_f2d>
 800210a:	e02b      	b.n	8002164 <kalmanfilter+0x3a4>
 800210c:	f3af 8000 	nop.w
 8002110:	00000000 	.word	0x00000000
 8002114:	40000000 	.word	0x40000000
 8002118:	00000000 	.word	0x00000000
 800211c:	40100000 	.word	0x40100000
 8002120:	20000020 	.word	0x20000020
 8002124:	20000118 	.word	0x20000118
 8002128:	20000024 	.word	0x20000024
 800212c:	2000011c 	.word	0x2000011c
 8002130:	20000140 	.word	0x20000140
 8002134:	20000028 	.word	0x20000028
 8002138:	20000128 	.word	0x20000128
 800213c:	20000120 	.word	0x20000120
 8002140:	20000124 	.word	0x20000124
 8002144:	2000019c 	.word	0x2000019c
 8002148:	20000110 	.word	0x20000110
 800214c:	2000012c 	.word	0x2000012c
 8002150:	20000138 	.word	0x20000138
 8002154:	20000130 	.word	0x20000130
 8002158:	40100000 	.word	0x40100000
 800215c:	2000013c 	.word	0x2000013c
 8002160:	20000134 	.word	0x20000134
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	ed9f 1b9b 	vldr	d1, [pc, #620]	; 80023d8 <kalmanfilter+0x618>
 800216c:	ec43 2b10 	vmov	d0, r2, r3
 8002170:	f007 f96a 	bl	8009448 <pow>
 8002174:	ec53 2b10 	vmov	r2, r3, d0
 8002178:	4620      	mov	r0, r4
 800217a:	4629      	mov	r1, r5
 800217c:	f7fe f9e8 	bl	8000550 <__aeabi_dmul>
 8002180:	4603      	mov	r3, r0
 8002182:	460c      	mov	r4, r1
 8002184:	4625      	mov	r5, r4
 8002186:	461c      	mov	r4, r3
 8002188:	4b9b      	ldr	r3, [pc, #620]	; (80023f8 <kalmanfilter+0x638>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f987 	bl	80004a0 <__aeabi_f2d>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4620      	mov	r0, r4
 8002198:	4629      	mov	r1, r5
 800219a:	f7fe f823 	bl	80001e4 <__adddf3>
 800219e:	4603      	mov	r3, r0
 80021a0:	460c      	mov	r4, r1
 80021a2:	4618      	mov	r0, r3
 80021a4:	4621      	mov	r1, r4
 80021a6:	f7fe fc83 	bl	8000ab0 <__aeabi_d2f>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b92      	ldr	r3, [pc, #584]	; (80023f8 <kalmanfilter+0x638>)
 80021ae:	601a      	str	r2, [r3, #0]

    theta_est+= (p12*y)/(R+p22);
 80021b0:	4b92      	ldr	r3, [pc, #584]	; (80023fc <kalmanfilter+0x63c>)
 80021b2:	ed93 7a00 	vldr	s14, [r3]
 80021b6:	4b92      	ldr	r3, [pc, #584]	; (8002400 <kalmanfilter+0x640>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80021c0:	4b90      	ldr	r3, [pc, #576]	; (8002404 <kalmanfilter+0x644>)
 80021c2:	ed93 7a00 	vldr	s14, [r3]
 80021c6:	4b8c      	ldr	r3, [pc, #560]	; (80023f8 <kalmanfilter+0x638>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021d4:	4b8c      	ldr	r3, [pc, #560]	; (8002408 <kalmanfilter+0x648>)
 80021d6:	edd3 7a00 	vldr	s15, [r3]
 80021da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021de:	4b8a      	ldr	r3, [pc, #552]	; (8002408 <kalmanfilter+0x648>)
 80021e0:	edc3 7a00 	vstr	s15, [r3]
    omega_est+= (p22*y)/(R+p22);
 80021e4:	4b84      	ldr	r3, [pc, #528]	; (80023f8 <kalmanfilter+0x638>)
 80021e6:	ed93 7a00 	vldr	s14, [r3]
 80021ea:	4b85      	ldr	r3, [pc, #532]	; (8002400 <kalmanfilter+0x640>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80021f4:	4b83      	ldr	r3, [pc, #524]	; (8002404 <kalmanfilter+0x644>)
 80021f6:	ed93 7a00 	vldr	s14, [r3]
 80021fa:	4b7f      	ldr	r3, [pc, #508]	; (80023f8 <kalmanfilter+0x638>)
 80021fc:	edd3 7a00 	vldr	s15, [r3]
 8002200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002208:	4b80      	ldr	r3, [pc, #512]	; (800240c <kalmanfilter+0x64c>)
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002212:	4b7e      	ldr	r3, [pc, #504]	; (800240c <kalmanfilter+0x64c>)
 8002214:	edc3 7a00 	vstr	s15, [r3]

    p11=p11-(p12*p21)/(R+p22);
 8002218:	4b7d      	ldr	r3, [pc, #500]	; (8002410 <kalmanfilter+0x650>)
 800221a:	ed93 7a00 	vldr	s14, [r3]
 800221e:	4b77      	ldr	r3, [pc, #476]	; (80023fc <kalmanfilter+0x63c>)
 8002220:	edd3 6a00 	vldr	s13, [r3]
 8002224:	4b7b      	ldr	r3, [pc, #492]	; (8002414 <kalmanfilter+0x654>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800222e:	4b75      	ldr	r3, [pc, #468]	; (8002404 <kalmanfilter+0x644>)
 8002230:	edd3 6a00 	vldr	s13, [r3]
 8002234:	4b70      	ldr	r3, [pc, #448]	; (80023f8 <kalmanfilter+0x638>)
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800223e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002242:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002246:	4b72      	ldr	r3, [pc, #456]	; (8002410 <kalmanfilter+0x650>)
 8002248:	edc3 7a00 	vstr	s15, [r3]
    p12=p12-(p22*p21)/(R+p22);
 800224c:	4b6b      	ldr	r3, [pc, #428]	; (80023fc <kalmanfilter+0x63c>)
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	4b69      	ldr	r3, [pc, #420]	; (80023f8 <kalmanfilter+0x638>)
 8002254:	edd3 6a00 	vldr	s13, [r3]
 8002258:	4b6e      	ldr	r3, [pc, #440]	; (8002414 <kalmanfilter+0x654>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002262:	4b68      	ldr	r3, [pc, #416]	; (8002404 <kalmanfilter+0x644>)
 8002264:	edd3 6a00 	vldr	s13, [r3]
 8002268:	4b63      	ldr	r3, [pc, #396]	; (80023f8 <kalmanfilter+0x638>)
 800226a:	edd3 7a00 	vldr	s15, [r3]
 800226e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002272:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227a:	4b60      	ldr	r3, [pc, #384]	; (80023fc <kalmanfilter+0x63c>)
 800227c:	edc3 7a00 	vstr	s15, [r3]
    p21=-p21*(p22/(R+p22)-1);
 8002280:	4b64      	ldr	r3, [pc, #400]	; (8002414 <kalmanfilter+0x654>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	eeb1 7a67 	vneg.f32	s14, s15
 800228a:	4b5b      	ldr	r3, [pc, #364]	; (80023f8 <kalmanfilter+0x638>)
 800228c:	ed93 6a00 	vldr	s12, [r3]
 8002290:	4b5c      	ldr	r3, [pc, #368]	; (8002404 <kalmanfilter+0x644>)
 8002292:	edd3 6a00 	vldr	s13, [r3]
 8002296:	4b58      	ldr	r3, [pc, #352]	; (80023f8 <kalmanfilter+0x638>)
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022a0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80022a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80022ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b0:	4b58      	ldr	r3, [pc, #352]	; (8002414 <kalmanfilter+0x654>)
 80022b2:	edc3 7a00 	vstr	s15, [r3]
    p22=-p22*(p22/(R+p22)-1);
 80022b6:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <kalmanfilter+0x638>)
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	eeb1 7a67 	vneg.f32	s14, s15
 80022c0:	4b4d      	ldr	r3, [pc, #308]	; (80023f8 <kalmanfilter+0x638>)
 80022c2:	ed93 6a00 	vldr	s12, [r3]
 80022c6:	4b4f      	ldr	r3, [pc, #316]	; (8002404 <kalmanfilter+0x644>)
 80022c8:	edd3 6a00 	vldr	s13, [r3]
 80022cc:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <kalmanfilter+0x638>)
 80022ce:	edd3 7a00 	vldr	s15, [r3]
 80022d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022d6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80022da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80022e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e6:	4b44      	ldr	r3, [pc, #272]	; (80023f8 <kalmanfilter+0x638>)
 80022e8:	edc3 7a00 	vstr	s15, [r3]

    theta_pd=theta_est;
 80022ec:	4b46      	ldr	r3, [pc, #280]	; (8002408 <kalmanfilter+0x648>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a49      	ldr	r2, [pc, #292]	; (8002418 <kalmanfilter+0x658>)
 80022f2:	6013      	str	r3, [r2, #0]
    omega_pd=omega_est;
 80022f4:	4b45      	ldr	r3, [pc, #276]	; (800240c <kalmanfilter+0x64c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a48      	ldr	r2, [pc, #288]	; (800241c <kalmanfilter+0x65c>)
 80022fa:	6013      	str	r3, [r2, #0]

    kalman_theta=(float)(theta_est*57.2958);
 80022fc:	4b42      	ldr	r3, [pc, #264]	; (8002408 <kalmanfilter+0x648>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f8cd 	bl	80004a0 <__aeabi_f2d>
 8002306:	a336      	add	r3, pc, #216	; (adr r3, 80023e0 <kalmanfilter+0x620>)
 8002308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230c:	f7fe f920 	bl	8000550 <__aeabi_dmul>
 8002310:	4603      	mov	r3, r0
 8002312:	460c      	mov	r4, r1
 8002314:	4618      	mov	r0, r3
 8002316:	4621      	mov	r1, r4
 8002318:	f7fe fbca 	bl	8000ab0 <__aeabi_d2f>
 800231c:	4602      	mov	r2, r0
 800231e:	4b40      	ldr	r3, [pc, #256]	; (8002420 <kalmanfilter+0x660>)
 8002320:	601a      	str	r2, [r3, #0]

    p2graph = RobotArm_Position / 20.00;
 8002322:	4b40      	ldr	r3, [pc, #256]	; (8002424 <kalmanfilter+0x664>)
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe f8a8 	bl	800047c <__aeabi_i2d>
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <kalmanfilter+0x668>)
 8002332:	f7fe fa37 	bl	80007a4 <__aeabi_ddiv>
 8002336:	4603      	mov	r3, r0
 8002338:	460c      	mov	r4, r1
 800233a:	4618      	mov	r0, r3
 800233c:	4621      	mov	r1, r4
 800233e:	f7fe fbb7 	bl	8000ab0 <__aeabi_d2f>
 8002342:	4602      	mov	r2, r0
 8002344:	4b39      	ldr	r3, [pc, #228]	; (800242c <kalmanfilter+0x66c>)
 8002346:	601a      	str	r2, [r3, #0]
    v2graph = omega_est * 8.1493;
 8002348:	4b30      	ldr	r3, [pc, #192]	; (800240c <kalmanfilter+0x64c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f8a7 	bl	80004a0 <__aeabi_f2d>
 8002352:	a325      	add	r3, pc, #148	; (adr r3, 80023e8 <kalmanfilter+0x628>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f7fe f8fa 	bl	8000550 <__aeabi_dmul>
 800235c:	4603      	mov	r3, r0
 800235e:	460c      	mov	r4, r1
 8002360:	4618      	mov	r0, r3
 8002362:	4621      	mov	r1, r4
 8002364:	f7fe fba4 	bl	8000ab0 <__aeabi_d2f>
 8002368:	4602      	mov	r2, r0
 800236a:	4b31      	ldr	r3, [pc, #196]	; (8002430 <kalmanfilter+0x670>)
 800236c:	601a      	str	r2, [r3, #0]
    a2graph = ( ( a2graph*sample1 ) + ( (float)((v_pre-v_aft)/0.01) ) ) / sample2; //Add Low Pass Filter
 800236e:	4b31      	ldr	r3, [pc, #196]	; (8002434 <kalmanfilter+0x674>)
 8002370:	ed93 7a00 	vldr	s14, [r3]
 8002374:	4b30      	ldr	r3, [pc, #192]	; (8002438 <kalmanfilter+0x678>)
 8002376:	edd3 7a00 	vldr	s15, [r3]
 800237a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800237e:	4b2f      	ldr	r3, [pc, #188]	; (800243c <kalmanfilter+0x67c>)
 8002380:	ed93 7a00 	vldr	s14, [r3]
 8002384:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <kalmanfilter+0x680>)
 8002386:	edd3 7a00 	vldr	s15, [r3]
 800238a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238e:	ee17 0a90 	vmov	r0, s15
 8002392:	f7fe f885 	bl	80004a0 <__aeabi_f2d>
 8002396:	a316      	add	r3, pc, #88	; (adr r3, 80023f0 <kalmanfilter+0x630>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fe fa02 	bl	80007a4 <__aeabi_ddiv>
 80023a0:	4603      	mov	r3, r0
 80023a2:	460c      	mov	r4, r1
 80023a4:	4618      	mov	r0, r3
 80023a6:	4621      	mov	r1, r4
 80023a8:	f7fe fb82 	bl	8000ab0 <__aeabi_d2f>
 80023ac:	ee07 0a90 	vmov	s15, r0
 80023b0:	ee78 6a27 	vadd.f32	s13, s16, s15
 80023b4:	4b23      	ldr	r3, [pc, #140]	; (8002444 <kalmanfilter+0x684>)
 80023b6:	ed93 7a00 	vldr	s14, [r3]
 80023ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <kalmanfilter+0x674>)
 80023c0:	edc3 7a00 	vstr	s15, [r3]
    v_aft = v_pre;
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <kalmanfilter+0x67c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <kalmanfilter+0x680>)
 80023ca:	6013      	str	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	ecbd 8b02 	vpop	{d8}
 80023d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023d8:	00000000 	.word	0x00000000
 80023dc:	40000000 	.word	0x40000000
 80023e0:	c63f1412 	.word	0xc63f1412
 80023e4:	404ca5dc 	.word	0x404ca5dc
 80023e8:	0cb295ea 	.word	0x0cb295ea
 80023ec:	40204c71 	.word	0x40204c71
 80023f0:	47ae147b 	.word	0x47ae147b
 80023f4:	3f847ae1 	.word	0x3f847ae1
 80023f8:	2000013c 	.word	0x2000013c
 80023fc:	20000134 	.word	0x20000134
 8002400:	2000012c 	.word	0x2000012c
 8002404:	2000011c 	.word	0x2000011c
 8002408:	20000120 	.word	0x20000120
 800240c:	20000124 	.word	0x20000124
 8002410:	20000130 	.word	0x20000130
 8002414:	20000138 	.word	0x20000138
 8002418:	20000128 	.word	0x20000128
 800241c:	20000140 	.word	0x20000140
 8002420:	20000190 	.word	0x20000190
 8002424:	20000108 	.word	0x20000108
 8002428:	40340000 	.word	0x40340000
 800242c:	200001a4 	.word	0x200001a4
 8002430:	200001a8 	.word	0x200001a8
 8002434:	200001ac 	.word	0x200001ac
 8002438:	20000000 	.word	0x20000000
 800243c:	2000019c 	.word	0x2000019c
 8002440:	200001a0 	.word	0x200001a0
 8002444:	20000004 	.word	0x20000004

08002448 <planning>:

void planning()
{
 8002448:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800244c:	af00      	add	r7, sp, #0
  t=t+0.01;
 800244e:	4ba6      	ldr	r3, [pc, #664]	; (80026e8 <planning+0x2a0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f824 	bl	80004a0 <__aeabi_f2d>
 8002458:	a395      	add	r3, pc, #596	; (adr r3, 80026b0 <planning+0x268>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fd fec1 	bl	80001e4 <__adddf3>
 8002462:	4603      	mov	r3, r0
 8002464:	460c      	mov	r4, r1
 8002466:	4618      	mov	r0, r3
 8002468:	4621      	mov	r1, r4
 800246a:	f7fe fb21 	bl	8000ab0 <__aeabi_d2f>
 800246e:	4602      	mov	r2, r0
 8002470:	4b9d      	ldr	r3, [pc, #628]	; (80026e8 <planning+0x2a0>)
 8002472:	601a      	str	r2, [r3, #0]
  Vmax = Max_Speed * 0.10472 * 0.95;     //rad/s
 8002474:	4b9d      	ldr	r3, [pc, #628]	; (80026ec <planning+0x2a4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe f811 	bl	80004a0 <__aeabi_f2d>
 800247e:	a38e      	add	r3, pc, #568	; (adr r3, 80026b8 <planning+0x270>)
 8002480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002484:	f7fe f864 	bl	8000550 <__aeabi_dmul>
 8002488:	4603      	mov	r3, r0
 800248a:	460c      	mov	r4, r1
 800248c:	4618      	mov	r0, r3
 800248e:	4621      	mov	r1, r4
 8002490:	a38b      	add	r3, pc, #556	; (adr r3, 80026c0 <planning+0x278>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	f7fe f85b 	bl	8000550 <__aeabi_dmul>
 800249a:	4603      	mov	r3, r0
 800249c:	460c      	mov	r4, r1
 800249e:	4618      	mov	r0, r3
 80024a0:	4621      	mov	r1, r4
 80024a2:	f7fe fb05 	bl	8000ab0 <__aeabi_d2f>
 80024a6:	4602      	mov	r2, r0
 80024a8:	4b91      	ldr	r3, [pc, #580]	; (80026f0 <planning+0x2a8>)
 80024aa:	601a      	str	r2, [r3, #0]
  sb = angle*0.0174533;           //degree -> rad
 80024ac:	4b91      	ldr	r3, [pc, #580]	; (80026f4 <planning+0x2ac>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fd fff5 	bl	80004a0 <__aeabi_f2d>
 80024b6:	a384      	add	r3, pc, #528	; (adr r3, 80026c8 <planning+0x280>)
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f7fe f848 	bl	8000550 <__aeabi_dmul>
 80024c0:	4603      	mov	r3, r0
 80024c2:	460c      	mov	r4, r1
 80024c4:	4618      	mov	r0, r3
 80024c6:	4621      	mov	r1, r4
 80024c8:	f7fe faf2 	bl	8000ab0 <__aeabi_d2f>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b8a      	ldr	r3, [pc, #552]	; (80026f8 <planning+0x2b0>)
 80024d0:	601a      	str	r2, [r3, #0]
  sa = Lastest_Angle * 0.0174533; //degree -> rad
 80024d2:	4b8a      	ldr	r3, [pc, #552]	; (80026fc <planning+0x2b4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fd ffe2 	bl	80004a0 <__aeabi_f2d>
 80024dc:	a37a      	add	r3, pc, #488	; (adr r3, 80026c8 <planning+0x280>)
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	f7fe f835 	bl	8000550 <__aeabi_dmul>
 80024e6:	4603      	mov	r3, r0
 80024e8:	460c      	mov	r4, r1
 80024ea:	4618      	mov	r0, r3
 80024ec:	4621      	mov	r1, r4
 80024ee:	f7fe fadf 	bl	8000ab0 <__aeabi_d2f>
 80024f2:	4602      	mov	r2, r0
 80024f4:	4b82      	ldr	r3, [pc, #520]	; (8002700 <planning+0x2b8>)
 80024f6:	601a      	str	r2, [r3, #0]

  if(sb < sa) { reverse = 1; distance = Lastest_Angle - angle; tf = 15.00*(sa-sb)/(8.00*Vmax); }
 80024f8:	4b7f      	ldr	r3, [pc, #508]	; (80026f8 <planning+0x2b0>)
 80024fa:	ed93 7a00 	vldr	s14, [r3]
 80024fe:	4b80      	ldr	r3, [pc, #512]	; (8002700 <planning+0x2b8>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d53c      	bpl.n	8002588 <planning+0x140>
 800250e:	4b7d      	ldr	r3, [pc, #500]	; (8002704 <planning+0x2bc>)
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	4b79      	ldr	r3, [pc, #484]	; (80026fc <planning+0x2b4>)
 8002516:	ed93 7a00 	vldr	s14, [r3]
 800251a:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <planning+0x2ac>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002524:	4b78      	ldr	r3, [pc, #480]	; (8002708 <planning+0x2c0>)
 8002526:	edc3 7a00 	vstr	s15, [r3]
 800252a:	4b75      	ldr	r3, [pc, #468]	; (8002700 <planning+0x2b8>)
 800252c:	ed93 7a00 	vldr	s14, [r3]
 8002530:	4b71      	ldr	r3, [pc, #452]	; (80026f8 <planning+0x2b0>)
 8002532:	edd3 7a00 	vldr	s15, [r3]
 8002536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253a:	ee17 0a90 	vmov	r0, s15
 800253e:	f7fd ffaf 	bl	80004a0 <__aeabi_f2d>
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	4b71      	ldr	r3, [pc, #452]	; (800270c <planning+0x2c4>)
 8002548:	f7fe f802 	bl	8000550 <__aeabi_dmul>
 800254c:	4603      	mov	r3, r0
 800254e:	460c      	mov	r4, r1
 8002550:	4625      	mov	r5, r4
 8002552:	461c      	mov	r4, r3
 8002554:	4b66      	ldr	r3, [pc, #408]	; (80026f0 <planning+0x2a8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fd ffa1 	bl	80004a0 <__aeabi_f2d>
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	4b6b      	ldr	r3, [pc, #428]	; (8002710 <planning+0x2c8>)
 8002564:	f7fd fff4 	bl	8000550 <__aeabi_dmul>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f7fe f918 	bl	80007a4 <__aeabi_ddiv>
 8002574:	4603      	mov	r3, r0
 8002576:	460c      	mov	r4, r1
 8002578:	4618      	mov	r0, r3
 800257a:	4621      	mov	r1, r4
 800257c:	f7fe fa98 	bl	8000ab0 <__aeabi_d2f>
 8002580:	4602      	mov	r2, r0
 8002582:	4b64      	ldr	r3, [pc, #400]	; (8002714 <planning+0x2cc>)
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e03b      	b.n	8002600 <planning+0x1b8>
  else        { reverse = 0; distance = angle - Lastest_Angle; tf = 15.00*(sb-sa)/(8.00*Vmax); }
 8002588:	4b5e      	ldr	r3, [pc, #376]	; (8002704 <planning+0x2bc>)
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <planning+0x2ac>)
 8002590:	ed93 7a00 	vldr	s14, [r3]
 8002594:	4b59      	ldr	r3, [pc, #356]	; (80026fc <planning+0x2b4>)
 8002596:	edd3 7a00 	vldr	s15, [r3]
 800259a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259e:	4b5a      	ldr	r3, [pc, #360]	; (8002708 <planning+0x2c0>)
 80025a0:	edc3 7a00 	vstr	s15, [r3]
 80025a4:	4b54      	ldr	r3, [pc, #336]	; (80026f8 <planning+0x2b0>)
 80025a6:	ed93 7a00 	vldr	s14, [r3]
 80025aa:	4b55      	ldr	r3, [pc, #340]	; (8002700 <planning+0x2b8>)
 80025ac:	edd3 7a00 	vldr	s15, [r3]
 80025b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b4:	ee17 0a90 	vmov	r0, s15
 80025b8:	f7fd ff72 	bl	80004a0 <__aeabi_f2d>
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	4b52      	ldr	r3, [pc, #328]	; (800270c <planning+0x2c4>)
 80025c2:	f7fd ffc5 	bl	8000550 <__aeabi_dmul>
 80025c6:	4603      	mov	r3, r0
 80025c8:	460c      	mov	r4, r1
 80025ca:	4625      	mov	r5, r4
 80025cc:	461c      	mov	r4, r3
 80025ce:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <planning+0x2a8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ff64 	bl	80004a0 <__aeabi_f2d>
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	4b4c      	ldr	r3, [pc, #304]	; (8002710 <planning+0x2c8>)
 80025de:	f7fd ffb7 	bl	8000550 <__aeabi_dmul>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4620      	mov	r0, r4
 80025e8:	4629      	mov	r1, r5
 80025ea:	f7fe f8db 	bl	80007a4 <__aeabi_ddiv>
 80025ee:	4603      	mov	r3, r0
 80025f0:	460c      	mov	r4, r1
 80025f2:	4618      	mov	r0, r3
 80025f4:	4621      	mov	r1, r4
 80025f6:	f7fe fa5b 	bl	8000ab0 <__aeabi_d2f>
 80025fa:	4602      	mov	r2, r0
 80025fc:	4b45      	ldr	r3, [pc, #276]	; (8002714 <planning+0x2cc>)
 80025fe:	601a      	str	r2, [r3, #0]

  if (distance <=30)
 8002600:	4b41      	ldr	r3, [pc, #260]	; (8002708 <planning+0x2c0>)
 8002602:	edd3 7a00 	vldr	s15, [r3]
 8002606:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800260a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002612:	d802      	bhi.n	800261a <planning+0x1d2>
  { flag_case = 1; }
 8002614:	4b40      	ldr	r3, [pc, #256]	; (8002718 <planning+0x2d0>)
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]

  if (distance > 30){
 800261a:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <planning+0x2c0>)
 800261c:	edd3 7a00 	vldr	s15, [r3]
 8002620:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262c:	dc00      	bgt.n	8002630 <planning+0x1e8>
	  if(t<=tf){
		  sbf =  a3*pow(t,3)+a4*pow(t,4)+a5*pow(t,5);
		  vb= (float)((3*a3*pow(t,2))+(4*a4*pow(t,3))+(5*a5*pow(t,4)));}
	  else { vb=0; }
  }
}
 800262e:	e281      	b.n	8002b34 <planning+0x6ec>
	  flag_case = 2;
 8002630:	4b39      	ldr	r3, [pc, #228]	; (8002718 <planning+0x2d0>)
 8002632:	2202      	movs	r2, #2
 8002634:	701a      	strb	r2, [r3, #0]
	  if(reverse) { tf=pow((5.7335*(sa-sb)/0.5),0.5) * 0.9; }
 8002636:	4b33      	ldr	r3, [pc, #204]	; (8002704 <planning+0x2bc>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d070      	beq.n	8002720 <planning+0x2d8>
 800263e:	4b30      	ldr	r3, [pc, #192]	; (8002700 <planning+0x2b8>)
 8002640:	ed93 7a00 	vldr	s14, [r3]
 8002644:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <planning+0x2b0>)
 8002646:	edd3 7a00 	vldr	s15, [r3]
 800264a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800264e:	ee17 0a90 	vmov	r0, s15
 8002652:	f7fd ff25 	bl	80004a0 <__aeabi_f2d>
 8002656:	a31e      	add	r3, pc, #120	; (adr r3, 80026d0 <planning+0x288>)
 8002658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265c:	f7fd ff78 	bl	8000550 <__aeabi_dmul>
 8002660:	4603      	mov	r3, r0
 8002662:	460c      	mov	r4, r1
 8002664:	4618      	mov	r0, r3
 8002666:	4621      	mov	r1, r4
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	4b2b      	ldr	r3, [pc, #172]	; (800271c <planning+0x2d4>)
 800266e:	f7fe f899 	bl	80007a4 <__aeabi_ddiv>
 8002672:	4603      	mov	r3, r0
 8002674:	460c      	mov	r4, r1
 8002676:	ec44 3b17 	vmov	d7, r3, r4
 800267a:	ed9f 1b17 	vldr	d1, [pc, #92]	; 80026d8 <planning+0x290>
 800267e:	eeb0 0a47 	vmov.f32	s0, s14
 8002682:	eef0 0a67 	vmov.f32	s1, s15
 8002686:	f006 fedf 	bl	8009448 <pow>
 800268a:	ec51 0b10 	vmov	r0, r1, d0
 800268e:	a314      	add	r3, pc, #80	; (adr r3, 80026e0 <planning+0x298>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fd ff5c 	bl	8000550 <__aeabi_dmul>
 8002698:	4603      	mov	r3, r0
 800269a:	460c      	mov	r4, r1
 800269c:	4618      	mov	r0, r3
 800269e:	4621      	mov	r1, r4
 80026a0:	f7fe fa06 	bl	8000ab0 <__aeabi_d2f>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <planning+0x2cc>)
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e06f      	b.n	800278c <planning+0x344>
 80026ac:	f3af 8000 	nop.w
 80026b0:	47ae147b 	.word	0x47ae147b
 80026b4:	3f847ae1 	.word	0x3f847ae1
 80026b8:	0f3cb3e5 	.word	0x0f3cb3e5
 80026bc:	3fbaceee 	.word	0x3fbaceee
 80026c0:	66666666 	.word	0x66666666
 80026c4:	3fee6666 	.word	0x3fee6666
 80026c8:	22d4405f 	.word	0x22d4405f
 80026cc:	3f91df47 	.word	0x3f91df47
 80026d0:	9fbe76c9 	.word	0x9fbe76c9
 80026d4:	4016ef1a 	.word	0x4016ef1a
 80026d8:	00000000 	.word	0x00000000
 80026dc:	3fe00000 	.word	0x3fe00000
 80026e0:	cccccccd 	.word	0xcccccccd
 80026e4:	3feccccc 	.word	0x3feccccc
 80026e8:	20000170 	.word	0x20000170
 80026ec:	200001e4 	.word	0x200001e4
 80026f0:	20000174 	.word	0x20000174
 80026f4:	2000018c 	.word	0x2000018c
 80026f8:	2000015c 	.word	0x2000015c
 80026fc:	200001c8 	.word	0x200001c8
 8002700:	20000160 	.word	0x20000160
 8002704:	20000195 	.word	0x20000195
 8002708:	20000198 	.word	0x20000198
 800270c:	402e0000 	.word	0x402e0000
 8002710:	40200000 	.word	0x40200000
 8002714:	20000164 	.word	0x20000164
 8002718:	20000194 	.word	0x20000194
 800271c:	3fe00000 	.word	0x3fe00000
	  else        { tf=pow((5.7335*(sb-sa)/0.5),0.5) * 0.9; }
 8002720:	4bd9      	ldr	r3, [pc, #868]	; (8002a88 <planning+0x640>)
 8002722:	ed93 7a00 	vldr	s14, [r3]
 8002726:	4bd9      	ldr	r3, [pc, #868]	; (8002a8c <planning+0x644>)
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002730:	ee17 0a90 	vmov	r0, s15
 8002734:	f7fd feb4 	bl	80004a0 <__aeabi_f2d>
 8002738:	a3c5      	add	r3, pc, #788	; (adr r3, 8002a50 <planning+0x608>)
 800273a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273e:	f7fd ff07 	bl	8000550 <__aeabi_dmul>
 8002742:	4603      	mov	r3, r0
 8002744:	460c      	mov	r4, r1
 8002746:	4618      	mov	r0, r3
 8002748:	4621      	mov	r1, r4
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	4bd0      	ldr	r3, [pc, #832]	; (8002a90 <planning+0x648>)
 8002750:	f7fe f828 	bl	80007a4 <__aeabi_ddiv>
 8002754:	4603      	mov	r3, r0
 8002756:	460c      	mov	r4, r1
 8002758:	ec44 3b17 	vmov	d7, r3, r4
 800275c:	ed9f 1bbe 	vldr	d1, [pc, #760]	; 8002a58 <planning+0x610>
 8002760:	eeb0 0a47 	vmov.f32	s0, s14
 8002764:	eef0 0a67 	vmov.f32	s1, s15
 8002768:	f006 fe6e 	bl	8009448 <pow>
 800276c:	ec51 0b10 	vmov	r0, r1, d0
 8002770:	a3bb      	add	r3, pc, #748	; (adr r3, 8002a60 <planning+0x618>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f7fd feeb 	bl	8000550 <__aeabi_dmul>
 800277a:	4603      	mov	r3, r0
 800277c:	460c      	mov	r4, r1
 800277e:	4618      	mov	r0, r3
 8002780:	4621      	mov	r1, r4
 8002782:	f7fe f995 	bl	8000ab0 <__aeabi_d2f>
 8002786:	4602      	mov	r2, r0
 8002788:	4bc2      	ldr	r3, [pc, #776]	; (8002a94 <planning+0x64c>)
 800278a:	601a      	str	r2, [r3, #0]
	  a0=0;
 800278c:	4bc2      	ldr	r3, [pc, #776]	; (8002a98 <planning+0x650>)
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
	  a1=0;
 8002794:	4bc1      	ldr	r3, [pc, #772]	; (8002a9c <planning+0x654>)
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
	  a2=0;
 800279c:	4bc0      	ldr	r3, [pc, #768]	; (8002aa0 <planning+0x658>)
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
	  a3= 10.00*(sb-sa)/(pow(tf,3));
 80027a4:	4bb8      	ldr	r3, [pc, #736]	; (8002a88 <planning+0x640>)
 80027a6:	ed93 7a00 	vldr	s14, [r3]
 80027aa:	4bb8      	ldr	r3, [pc, #736]	; (8002a8c <planning+0x644>)
 80027ac:	edd3 7a00 	vldr	s15, [r3]
 80027b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b4:	ee17 0a90 	vmov	r0, s15
 80027b8:	f7fd fe72 	bl	80004a0 <__aeabi_f2d>
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	4bb8      	ldr	r3, [pc, #736]	; (8002aa4 <planning+0x65c>)
 80027c2:	f7fd fec5 	bl	8000550 <__aeabi_dmul>
 80027c6:	4603      	mov	r3, r0
 80027c8:	460c      	mov	r4, r1
 80027ca:	4625      	mov	r5, r4
 80027cc:	461c      	mov	r4, r3
 80027ce:	4bb1      	ldr	r3, [pc, #708]	; (8002a94 <planning+0x64c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fd fe64 	bl	80004a0 <__aeabi_f2d>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8002a68 <planning+0x620>
 80027e0:	ec43 2b10 	vmov	d0, r2, r3
 80027e4:	f006 fe30 	bl	8009448 <pow>
 80027e8:	ec53 2b10 	vmov	r2, r3, d0
 80027ec:	4620      	mov	r0, r4
 80027ee:	4629      	mov	r1, r5
 80027f0:	f7fd ffd8 	bl	80007a4 <__aeabi_ddiv>
 80027f4:	4603      	mov	r3, r0
 80027f6:	460c      	mov	r4, r1
 80027f8:	4618      	mov	r0, r3
 80027fa:	4621      	mov	r1, r4
 80027fc:	f7fe f958 	bl	8000ab0 <__aeabi_d2f>
 8002800:	4602      	mov	r2, r0
 8002802:	4ba9      	ldr	r3, [pc, #676]	; (8002aa8 <planning+0x660>)
 8002804:	601a      	str	r2, [r3, #0]
	  a4= -15.00*(sb-sa)/(pow(tf,4));
 8002806:	4ba0      	ldr	r3, [pc, #640]	; (8002a88 <planning+0x640>)
 8002808:	ed93 7a00 	vldr	s14, [r3]
 800280c:	4b9f      	ldr	r3, [pc, #636]	; (8002a8c <planning+0x644>)
 800280e:	edd3 7a00 	vldr	s15, [r3]
 8002812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002816:	ee17 0a90 	vmov	r0, s15
 800281a:	f7fd fe41 	bl	80004a0 <__aeabi_f2d>
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	4ba2      	ldr	r3, [pc, #648]	; (8002aac <planning+0x664>)
 8002824:	f7fd fe94 	bl	8000550 <__aeabi_dmul>
 8002828:	4603      	mov	r3, r0
 800282a:	460c      	mov	r4, r1
 800282c:	4625      	mov	r5, r4
 800282e:	461c      	mov	r4, r3
 8002830:	4b98      	ldr	r3, [pc, #608]	; (8002a94 <planning+0x64c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd fe33 	bl	80004a0 <__aeabi_f2d>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8002a70 <planning+0x628>
 8002842:	ec43 2b10 	vmov	d0, r2, r3
 8002846:	f006 fdff 	bl	8009448 <pow>
 800284a:	ec53 2b10 	vmov	r2, r3, d0
 800284e:	4620      	mov	r0, r4
 8002850:	4629      	mov	r1, r5
 8002852:	f7fd ffa7 	bl	80007a4 <__aeabi_ddiv>
 8002856:	4603      	mov	r3, r0
 8002858:	460c      	mov	r4, r1
 800285a:	4618      	mov	r0, r3
 800285c:	4621      	mov	r1, r4
 800285e:	f7fe f927 	bl	8000ab0 <__aeabi_d2f>
 8002862:	4602      	mov	r2, r0
 8002864:	4b92      	ldr	r3, [pc, #584]	; (8002ab0 <planning+0x668>)
 8002866:	601a      	str	r2, [r3, #0]
	  a5= 6.00*(sb-sa)/(pow(tf,5));
 8002868:	4b87      	ldr	r3, [pc, #540]	; (8002a88 <planning+0x640>)
 800286a:	ed93 7a00 	vldr	s14, [r3]
 800286e:	4b87      	ldr	r3, [pc, #540]	; (8002a8c <planning+0x644>)
 8002870:	edd3 7a00 	vldr	s15, [r3]
 8002874:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002878:	ee17 0a90 	vmov	r0, s15
 800287c:	f7fd fe10 	bl	80004a0 <__aeabi_f2d>
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	4b8b      	ldr	r3, [pc, #556]	; (8002ab4 <planning+0x66c>)
 8002886:	f7fd fe63 	bl	8000550 <__aeabi_dmul>
 800288a:	4603      	mov	r3, r0
 800288c:	460c      	mov	r4, r1
 800288e:	4625      	mov	r5, r4
 8002890:	461c      	mov	r4, r3
 8002892:	4b80      	ldr	r3, [pc, #512]	; (8002a94 <planning+0x64c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fe02 	bl	80004a0 <__aeabi_f2d>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	ed9f 1b75 	vldr	d1, [pc, #468]	; 8002a78 <planning+0x630>
 80028a4:	ec43 2b10 	vmov	d0, r2, r3
 80028a8:	f006 fdce 	bl	8009448 <pow>
 80028ac:	ec53 2b10 	vmov	r2, r3, d0
 80028b0:	4620      	mov	r0, r4
 80028b2:	4629      	mov	r1, r5
 80028b4:	f7fd ff76 	bl	80007a4 <__aeabi_ddiv>
 80028b8:	4603      	mov	r3, r0
 80028ba:	460c      	mov	r4, r1
 80028bc:	4618      	mov	r0, r3
 80028be:	4621      	mov	r1, r4
 80028c0:	f7fe f8f6 	bl	8000ab0 <__aeabi_d2f>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b7c      	ldr	r3, [pc, #496]	; (8002ab8 <planning+0x670>)
 80028c8:	601a      	str	r2, [r3, #0]
	  if(t<=tf){
 80028ca:	4b7c      	ldr	r3, [pc, #496]	; (8002abc <planning+0x674>)
 80028cc:	ed93 7a00 	vldr	s14, [r3]
 80028d0:	4b70      	ldr	r3, [pc, #448]	; (8002a94 <planning+0x64c>)
 80028d2:	edd3 7a00 	vldr	s15, [r3]
 80028d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028de:	f200 8125 	bhi.w	8002b2c <planning+0x6e4>
		  sbf =  a3*pow(t,3)+a4*pow(t,4)+a5*pow(t,5);
 80028e2:	4b71      	ldr	r3, [pc, #452]	; (8002aa8 <planning+0x660>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fdda 	bl	80004a0 <__aeabi_f2d>
 80028ec:	4604      	mov	r4, r0
 80028ee:	460d      	mov	r5, r1
 80028f0:	4b72      	ldr	r3, [pc, #456]	; (8002abc <planning+0x674>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fdd3 	bl	80004a0 <__aeabi_f2d>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8002a68 <planning+0x620>
 8002902:	ec43 2b10 	vmov	d0, r2, r3
 8002906:	f006 fd9f 	bl	8009448 <pow>
 800290a:	ec53 2b10 	vmov	r2, r3, d0
 800290e:	4620      	mov	r0, r4
 8002910:	4629      	mov	r1, r5
 8002912:	f7fd fe1d 	bl	8000550 <__aeabi_dmul>
 8002916:	4603      	mov	r3, r0
 8002918:	460c      	mov	r4, r1
 800291a:	4625      	mov	r5, r4
 800291c:	461c      	mov	r4, r3
 800291e:	4b64      	ldr	r3, [pc, #400]	; (8002ab0 <planning+0x668>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fdbc 	bl	80004a0 <__aeabi_f2d>
 8002928:	4680      	mov	r8, r0
 800292a:	4689      	mov	r9, r1
 800292c:	4b63      	ldr	r3, [pc, #396]	; (8002abc <planning+0x674>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7fd fdb5 	bl	80004a0 <__aeabi_f2d>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8002a70 <planning+0x628>
 800293e:	ec43 2b10 	vmov	d0, r2, r3
 8002942:	f006 fd81 	bl	8009448 <pow>
 8002946:	ec53 2b10 	vmov	r2, r3, d0
 800294a:	4640      	mov	r0, r8
 800294c:	4649      	mov	r1, r9
 800294e:	f7fd fdff 	bl	8000550 <__aeabi_dmul>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4620      	mov	r0, r4
 8002958:	4629      	mov	r1, r5
 800295a:	f7fd fc43 	bl	80001e4 <__adddf3>
 800295e:	4603      	mov	r3, r0
 8002960:	460c      	mov	r4, r1
 8002962:	4625      	mov	r5, r4
 8002964:	461c      	mov	r4, r3
 8002966:	4b54      	ldr	r3, [pc, #336]	; (8002ab8 <planning+0x670>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fd98 	bl	80004a0 <__aeabi_f2d>
 8002970:	4680      	mov	r8, r0
 8002972:	4689      	mov	r9, r1
 8002974:	4b51      	ldr	r3, [pc, #324]	; (8002abc <planning+0x674>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fd91 	bl	80004a0 <__aeabi_f2d>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8002a78 <planning+0x630>
 8002986:	ec43 2b10 	vmov	d0, r2, r3
 800298a:	f006 fd5d 	bl	8009448 <pow>
 800298e:	ec53 2b10 	vmov	r2, r3, d0
 8002992:	4640      	mov	r0, r8
 8002994:	4649      	mov	r1, r9
 8002996:	f7fd fddb 	bl	8000550 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4620      	mov	r0, r4
 80029a0:	4629      	mov	r1, r5
 80029a2:	f7fd fc1f 	bl	80001e4 <__adddf3>
 80029a6:	4603      	mov	r3, r0
 80029a8:	460c      	mov	r4, r1
 80029aa:	4618      	mov	r0, r3
 80029ac:	4621      	mov	r1, r4
 80029ae:	f7fe f87f 	bl	8000ab0 <__aeabi_d2f>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b42      	ldr	r3, [pc, #264]	; (8002ac0 <planning+0x678>)
 80029b6:	601a      	str	r2, [r3, #0]
		  vb= (float)((3*a3*pow(t,2))+(4*a4*pow(t,3))+(5*a5*pow(t,4)));}
 80029b8:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <planning+0x660>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80029c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029c6:	ee17 0a90 	vmov	r0, s15
 80029ca:	f7fd fd69 	bl	80004a0 <__aeabi_f2d>
 80029ce:	4604      	mov	r4, r0
 80029d0:	460d      	mov	r5, r1
 80029d2:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <planning+0x674>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fd62 	bl	80004a0 <__aeabi_f2d>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8002a80 <planning+0x638>
 80029e4:	ec43 2b10 	vmov	d0, r2, r3
 80029e8:	f006 fd2e 	bl	8009448 <pow>
 80029ec:	ec53 2b10 	vmov	r2, r3, d0
 80029f0:	4620      	mov	r0, r4
 80029f2:	4629      	mov	r1, r5
 80029f4:	f7fd fdac 	bl	8000550 <__aeabi_dmul>
 80029f8:	4603      	mov	r3, r0
 80029fa:	460c      	mov	r4, r1
 80029fc:	4625      	mov	r5, r4
 80029fe:	461c      	mov	r4, r3
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <planning+0x668>)
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002a0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0e:	ee17 0a90 	vmov	r0, s15
 8002a12:	f7fd fd45 	bl	80004a0 <__aeabi_f2d>
 8002a16:	4680      	mov	r8, r0
 8002a18:	4689      	mov	r9, r1
 8002a1a:	4b28      	ldr	r3, [pc, #160]	; (8002abc <planning+0x674>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fd3e 	bl	80004a0 <__aeabi_f2d>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8002a68 <planning+0x620>
 8002a2c:	ec43 2b10 	vmov	d0, r2, r3
 8002a30:	f006 fd0a 	bl	8009448 <pow>
 8002a34:	ec53 2b10 	vmov	r2, r3, d0
 8002a38:	4640      	mov	r0, r8
 8002a3a:	4649      	mov	r1, r9
 8002a3c:	f7fd fd88 	bl	8000550 <__aeabi_dmul>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4620      	mov	r0, r4
 8002a46:	4629      	mov	r1, r5
 8002a48:	f7fd fbcc 	bl	80001e4 <__adddf3>
 8002a4c:	e03a      	b.n	8002ac4 <planning+0x67c>
 8002a4e:	bf00      	nop
 8002a50:	9fbe76c9 	.word	0x9fbe76c9
 8002a54:	4016ef1a 	.word	0x4016ef1a
 8002a58:	00000000 	.word	0x00000000
 8002a5c:	3fe00000 	.word	0x3fe00000
 8002a60:	cccccccd 	.word	0xcccccccd
 8002a64:	3feccccc 	.word	0x3feccccc
 8002a68:	00000000 	.word	0x00000000
 8002a6c:	40080000 	.word	0x40080000
 8002a70:	00000000 	.word	0x00000000
 8002a74:	40100000 	.word	0x40100000
 8002a78:	00000000 	.word	0x00000000
 8002a7c:	40140000 	.word	0x40140000
 8002a80:	00000000 	.word	0x00000000
 8002a84:	40000000 	.word	0x40000000
 8002a88:	2000015c 	.word	0x2000015c
 8002a8c:	20000160 	.word	0x20000160
 8002a90:	3fe00000 	.word	0x3fe00000
 8002a94:	20000164 	.word	0x20000164
 8002a98:	20000144 	.word	0x20000144
 8002a9c:	20000148 	.word	0x20000148
 8002aa0:	2000014c 	.word	0x2000014c
 8002aa4:	40240000 	.word	0x40240000
 8002aa8:	20000150 	.word	0x20000150
 8002aac:	c02e0000 	.word	0xc02e0000
 8002ab0:	20000154 	.word	0x20000154
 8002ab4:	40180000 	.word	0x40180000
 8002ab8:	20000158 	.word	0x20000158
 8002abc:	20000170 	.word	0x20000170
 8002ac0:	2000016c 	.word	0x2000016c
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	460c      	mov	r4, r1
 8002ac8:	4625      	mov	r5, r4
 8002aca:	461c      	mov	r4, r3
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <planning+0x700>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ada:	ee17 0a90 	vmov	r0, s15
 8002ade:	f7fd fcdf 	bl	80004a0 <__aeabi_f2d>
 8002ae2:	4680      	mov	r8, r0
 8002ae4:	4689      	mov	r9, r1
 8002ae6:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <planning+0x704>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fcd8 	bl	80004a0 <__aeabi_f2d>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002b40 <planning+0x6f8>
 8002af8:	ec43 2b10 	vmov	d0, r2, r3
 8002afc:	f006 fca4 	bl	8009448 <pow>
 8002b00:	ec53 2b10 	vmov	r2, r3, d0
 8002b04:	4640      	mov	r0, r8
 8002b06:	4649      	mov	r1, r9
 8002b08:	f7fd fd22 	bl	8000550 <__aeabi_dmul>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4620      	mov	r0, r4
 8002b12:	4629      	mov	r1, r5
 8002b14:	f7fd fb66 	bl	80001e4 <__adddf3>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	460c      	mov	r4, r1
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	4621      	mov	r1, r4
 8002b20:	f7fd ffc6 	bl	8000ab0 <__aeabi_d2f>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <planning+0x708>)
 8002b28:	601a      	str	r2, [r3, #0]
}
 8002b2a:	e003      	b.n	8002b34 <planning+0x6ec>
	  else { vb=0; }
 8002b2c:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <planning+0x708>)
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
}
 8002b34:	bf00      	nop
 8002b36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b3a:	bf00      	nop
 8002b3c:	f3af 8000 	nop.w
 8002b40:	00000000 	.word	0x00000000
 8002b44:	40100000 	.word	0x40100000
 8002b48:	20000158 	.word	0x20000158
 8002b4c:	20000170 	.word	0x20000170
 8002b50:	20000168 	.word	0x20000168

08002b54 <ReachGoal>:

void ReachGoal()
{
 8002b54:	b598      	push	{r3, r4, r7, lr}
 8002b56:	af00      	add	r7, sp, #0
	if(SpecialHome)
 8002b58:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <ReachGoal+0x70>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00e      	beq.n	8002b7e <ReachGoal+0x2a>
	{
	  PWMOut=0;
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <ReachGoal+0x74>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
	  MotorDrive();
 8002b66:	f7fe ff6b 	bl	8001a40 <MotorDrive>
	  Run = 0;
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <ReachGoal+0x78>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
	  Home = 1;
 8002b70:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <ReachGoal+0x7c>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
	  HomeMode = 2;
 8002b76:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <ReachGoal+0x80>)
 8002b78:	2202      	movs	r2, #2
 8002b7a:	701a      	strb	r2, [r3, #0]
		Run=0;
		if(EndEff_Enable) { HAL_I2C_Master_Transmit_IT(&hi2c1, EndeffAddress, LaserOpenCommand, 1); }
		Laser = 1;
		LaserTimestamp = micros();
	}
}
 8002b7c:	e01f      	b.n	8002bbe <ReachGoal+0x6a>
		omega_est = 0;
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <ReachGoal+0x84>)
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
		PWMOut=0;
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <ReachGoal+0x74>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
		MotorDrive();
 8002b8c:	f7fe ff58 	bl	8001a40 <MotorDrive>
		Run=0;
 8002b90:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <ReachGoal+0x78>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
		if(EndEff_Enable) { HAL_I2C_Master_Transmit_IT(&hi2c1, EndeffAddress, LaserOpenCommand, 1); }
 8002b96:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <ReachGoal+0x88>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <ReachGoal+0x56>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	4a0f      	ldr	r2, [pc, #60]	; (8002be0 <ReachGoal+0x8c>)
 8002ba2:	2146      	movs	r1, #70	; 0x46
 8002ba4:	480f      	ldr	r0, [pc, #60]	; (8002be4 <ReachGoal+0x90>)
 8002ba6:	f002 fa0f 	bl	8004fc8 <HAL_I2C_Master_Transmit_IT>
		Laser = 1;
 8002baa:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <ReachGoal+0x94>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
		LaserTimestamp = micros();
 8002bb0:	f7fe ff2c 	bl	8001a0c <micros>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	460c      	mov	r4, r1
 8002bb8:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <ReachGoal+0x98>)
 8002bba:	e9c2 3400 	strd	r3, r4, [r2]
}
 8002bbe:	bf00      	nop
 8002bc0:	bd98      	pop	{r3, r4, r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200001dd 	.word	0x200001dd
 8002bc8:	20000104 	.word	0x20000104
 8002bcc:	200001db 	.word	0x200001db
 8002bd0:	200001dc 	.word	0x200001dc
 8002bd4:	20000100 	.word	0x20000100
 8002bd8:	20000124 	.word	0x20000124
 8002bdc:	200001e0 	.word	0x200001e0
 8002be0:	2000002c 	.word	0x2000002c
 8002be4:	200002dc 	.word	0x200002dc
 8002be8:	200001de 	.word	0x200001de
 8002bec:	200000f8 	.word	0x200000f8

08002bf0 <pid>:


void pid()
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	if  (flag_case == 2)
 8002bf4:	4bb0      	ldr	r3, [pc, #704]	; (8002eb8 <pid+0x2c8>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	f040 80f7 	bne.w	8002dec <pid+0x1fc>
	{
		 error = vb-omega_est;
 8002bfe:	4baf      	ldr	r3, [pc, #700]	; (8002ebc <pid+0x2cc>)
 8002c00:	ed93 7a00 	vldr	s14, [r3]
 8002c04:	4bae      	ldr	r3, [pc, #696]	; (8002ec0 <pid+0x2d0>)
 8002c06:	edd3 7a00 	vldr	s15, [r3]
 8002c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c0e:	4bad      	ldr	r3, [pc, #692]	; (8002ec4 <pid+0x2d4>)
 8002c10:	edc3 7a00 	vstr	s15, [r3]
		 p = (error);
 8002c14:	4bab      	ldr	r3, [pc, #684]	; (8002ec4 <pid+0x2d4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4aab      	ldr	r2, [pc, #684]	; (8002ec8 <pid+0x2d8>)
 8002c1a:	6013      	str	r3, [r2, #0]
		 i = i+error;
 8002c1c:	4bab      	ldr	r3, [pc, #684]	; (8002ecc <pid+0x2dc>)
 8002c1e:	ed93 7a00 	vldr	s14, [r3]
 8002c22:	4ba8      	ldr	r3, [pc, #672]	; (8002ec4 <pid+0x2d4>)
 8002c24:	edd3 7a00 	vldr	s15, [r3]
 8002c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2c:	4ba7      	ldr	r3, [pc, #668]	; (8002ecc <pid+0x2dc>)
 8002c2e:	edc3 7a00 	vstr	s15, [r3]
		 d = error - pre_error;
 8002c32:	4ba4      	ldr	r3, [pc, #656]	; (8002ec4 <pid+0x2d4>)
 8002c34:	ed93 7a00 	vldr	s14, [r3]
 8002c38:	4ba5      	ldr	r3, [pc, #660]	; (8002ed0 <pid+0x2e0>)
 8002c3a:	edd3 7a00 	vldr	s15, [r3]
 8002c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c42:	4ba4      	ldr	r3, [pc, #656]	; (8002ed4 <pid+0x2e4>)
 8002c44:	edc3 7a00 	vstr	s15, [r3]
		 pre_error = error;
 8002c48:	4b9e      	ldr	r3, [pc, #632]	; (8002ec4 <pid+0x2d4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4aa0      	ldr	r2, [pc, #640]	; (8002ed0 <pid+0x2e0>)
 8002c4e:	6013      	str	r3, [r2, #0]
		 PWMOut =( (p*K_P)+(i*K_I)+(d*K_D));
 8002c50:	4b9d      	ldr	r3, [pc, #628]	; (8002ec8 <pid+0x2d8>)
 8002c52:	ed93 7a00 	vldr	s14, [r3]
 8002c56:	4ba0      	ldr	r3, [pc, #640]	; (8002ed8 <pid+0x2e8>)
 8002c58:	edd3 7a00 	vldr	s15, [r3]
 8002c5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c60:	4b9a      	ldr	r3, [pc, #616]	; (8002ecc <pid+0x2dc>)
 8002c62:	edd3 6a00 	vldr	s13, [r3]
 8002c66:	4b9d      	ldr	r3, [pc, #628]	; (8002edc <pid+0x2ec>)
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c74:	4b97      	ldr	r3, [pc, #604]	; (8002ed4 <pid+0x2e4>)
 8002c76:	edd3 6a00 	vldr	s13, [r3]
 8002c7a:	4b99      	ldr	r3, [pc, #612]	; (8002ee0 <pid+0x2f0>)
 8002c7c:	edd3 7a00 	vldr	s15, [r3]
 8002c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c8c:	ee17 2a90 	vmov	r2, s15
 8002c90:	4b94      	ldr	r3, [pc, #592]	; (8002ee4 <pid+0x2f4>)
 8002c92:	601a      	str	r2, [r3, #0]

		 if(vb==0)
 8002c94:	4b89      	ldr	r3, [pc, #548]	; (8002ebc <pid+0x2cc>)
 8002c96:	edd3 7a00 	vldr	s15, [r3]
 8002c9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca2:	f040 816b 	bne.w	8002f7c <pid+0x38c>
		 {
			if(SpecialHome)
 8002ca6:	4b90      	ldr	r3, [pc, #576]	; (8002ee8 <pid+0x2f8>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <pid+0xc4>
			{
				ReachGoal();
 8002cae:	f7ff ff51 	bl	8002b54 <ReachGoal>
		if((RobotArm_Position) == (uint16_t)(angle*20))
		{
			ReachGoal();
		}
	}
}
 8002cb2:	e163      	b.n	8002f7c <pid+0x38c>
				if(reverse)
 8002cb4:	4b8d      	ldr	r3, [pc, #564]	; (8002eec <pid+0x2fc>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d042      	beq.n	8002d42 <pid+0x152>
					if((uint16_t)(angle*20) < 30*20 && (RobotArm_Position) > 330*20)
 8002cbc:	4b8c      	ldr	r3, [pc, #560]	; (8002ef0 <pid+0x300>)
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cce:	ee17 3a90 	vmov	r3, s15
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002cd8:	d20a      	bcs.n	8002cf0 <pid+0x100>
 8002cda:	4b86      	ldr	r3, [pc, #536]	; (8002ef4 <pid+0x304>)
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d904      	bls.n	8002cf0 <pid+0x100>
						PWMOut=600;
 8002ce6:	4b7f      	ldr	r3, [pc, #508]	; (8002ee4 <pid+0x2f4>)
 8002ce8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e069      	b.n	8002dc4 <pid+0x1d4>
					else if((RobotArm_Position) < (uint16_t)(angle*20))
 8002cf0:	4b7f      	ldr	r3, [pc, #508]	; (8002ef0 <pid+0x300>)
 8002cf2:	edd3 7a00 	vldr	s15, [r3]
 8002cf6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d02:	ee17 3a90 	vmov	r3, s15
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4b7a      	ldr	r3, [pc, #488]	; (8002ef4 <pid+0x304>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d904      	bls.n	8002d1a <pid+0x12a>
						PWMOut=400;
 8002d10:	4b74      	ldr	r3, [pc, #464]	; (8002ee4 <pid+0x2f4>)
 8002d12:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e054      	b.n	8002dc4 <pid+0x1d4>
					else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002d1a:	4b75      	ldr	r3, [pc, #468]	; (8002ef0 <pid+0x300>)
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d2c:	ee17 3a90 	vmov	r3, s15
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	4b70      	ldr	r3, [pc, #448]	; (8002ef4 <pid+0x304>)
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d244      	bcs.n	8002dc4 <pid+0x1d4>
						PWMOut=-1000;
 8002d3a:	4b6a      	ldr	r3, [pc, #424]	; (8002ee4 <pid+0x2f4>)
 8002d3c:	4a6e      	ldr	r2, [pc, #440]	; (8002ef8 <pid+0x308>)
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	e040      	b.n	8002dc4 <pid+0x1d4>
					if((uint16_t)(angle*20) > 330*20 && (RobotArm_Position) < 30*20)
 8002d42:	4b6b      	ldr	r3, [pc, #428]	; (8002ef0 <pid+0x300>)
 8002d44:	edd3 7a00 	vldr	s15, [r3]
 8002d48:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d54:	ee17 3a90 	vmov	r3, s15
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d908      	bls.n	8002d74 <pid+0x184>
 8002d62:	4b64      	ldr	r3, [pc, #400]	; (8002ef4 <pid+0x304>)
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002d6a:	d203      	bcs.n	8002d74 <pid+0x184>
						PWMOut=-600;
 8002d6c:	4b5d      	ldr	r3, [pc, #372]	; (8002ee4 <pid+0x2f4>)
 8002d6e:	4a63      	ldr	r2, [pc, #396]	; (8002efc <pid+0x30c>)
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	e027      	b.n	8002dc4 <pid+0x1d4>
					else if((RobotArm_Position) < (uint16_t)(angle*20))
 8002d74:	4b5e      	ldr	r3, [pc, #376]	; (8002ef0 <pid+0x300>)
 8002d76:	edd3 7a00 	vldr	s15, [r3]
 8002d7a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002d7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d86:	ee17 3a90 	vmov	r3, s15
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <pid+0x304>)
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d904      	bls.n	8002d9e <pid+0x1ae>
						PWMOut=1000;
 8002d94:	4b53      	ldr	r3, [pc, #332]	; (8002ee4 <pid+0x2f4>)
 8002d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e012      	b.n	8002dc4 <pid+0x1d4>
					else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002d9e:	4b54      	ldr	r3, [pc, #336]	; (8002ef0 <pid+0x300>)
 8002da0:	edd3 7a00 	vldr	s15, [r3]
 8002da4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002da8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002db0:	ee17 3a90 	vmov	r3, s15
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	4b4f      	ldr	r3, [pc, #316]	; (8002ef4 <pid+0x304>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d202      	bcs.n	8002dc4 <pid+0x1d4>
						PWMOut=-400;
 8002dbe:	4b49      	ldr	r3, [pc, #292]	; (8002ee4 <pid+0x2f4>)
 8002dc0:	4a4f      	ldr	r2, [pc, #316]	; (8002f00 <pid+0x310>)
 8002dc2:	601a      	str	r2, [r3, #0]
				if((RobotArm_Position) == (uint16_t)(angle*20))
 8002dc4:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <pid+0x300>)
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dd6:	ee17 3a90 	vmov	r3, s15
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <pid+0x304>)
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	f040 80cb 	bne.w	8002f7c <pid+0x38c>
					ReachGoal();
 8002de6:	f7ff feb5 	bl	8002b54 <ReachGoal>
}
 8002dea:	e0c7      	b.n	8002f7c <pid+0x38c>
	else if (flag_case == 1)
 8002dec:	4b32      	ldr	r3, [pc, #200]	; (8002eb8 <pid+0x2c8>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	f040 80c3 	bne.w	8002f7c <pid+0x38c>
		if(reverse)
 8002df6:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <pid+0x2fc>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d042      	beq.n	8002e84 <pid+0x294>
			if((uint16_t)(angle*20) < 30*20 && (RobotArm_Position) > 330*20)
 8002dfe:	4b3c      	ldr	r3, [pc, #240]	; (8002ef0 <pid+0x300>)
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e10:	ee17 3a90 	vmov	r3, s15
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002e1a:	d20a      	bcs.n	8002e32 <pid+0x242>
 8002e1c:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <pid+0x304>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d904      	bls.n	8002e32 <pid+0x242>
				PWMOut=600;
 8002e28:	4b2e      	ldr	r3, [pc, #184]	; (8002ee4 <pid+0x2f4>)
 8002e2a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e092      	b.n	8002f58 <pid+0x368>
			else if((RobotArm_Position) < (uint16_t)(angle*20))
 8002e32:	4b2f      	ldr	r3, [pc, #188]	; (8002ef0 <pid+0x300>)
 8002e34:	edd3 7a00 	vldr	s15, [r3]
 8002e38:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e44:	ee17 3a90 	vmov	r3, s15
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <pid+0x304>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d904      	bls.n	8002e5c <pid+0x26c>
				PWMOut=300;
 8002e52:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <pid+0x2f4>)
 8002e54:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e07d      	b.n	8002f58 <pid+0x368>
			else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002e5c:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <pid+0x300>)
 8002e5e:	edd3 7a00 	vldr	s15, [r3]
 8002e62:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002e66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e6e:	ee17 3a90 	vmov	r3, s15
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <pid+0x304>)
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d26d      	bcs.n	8002f58 <pid+0x368>
				PWMOut=-1600;
 8002e7c:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <pid+0x2f4>)
 8002e7e:	4a21      	ldr	r2, [pc, #132]	; (8002f04 <pid+0x314>)
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e069      	b.n	8002f58 <pid+0x368>
			if((uint16_t)(angle*20) > 330*20 && (RobotArm_Position) < 30*20)
 8002e84:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <pid+0x300>)
 8002e86:	edd3 7a00 	vldr	s15, [r3]
 8002e8a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e96:	ee17 3a90 	vmov	r3, s15
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d931      	bls.n	8002f08 <pid+0x318>
 8002ea4:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <pid+0x304>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002eac:	d22c      	bcs.n	8002f08 <pid+0x318>
				PWMOut=-600;
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <pid+0x2f4>)
 8002eb0:	4a12      	ldr	r2, [pc, #72]	; (8002efc <pid+0x30c>)
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	e050      	b.n	8002f58 <pid+0x368>
 8002eb6:	bf00      	nop
 8002eb8:	20000194 	.word	0x20000194
 8002ebc:	20000168 	.word	0x20000168
 8002ec0:	20000124 	.word	0x20000124
 8002ec4:	20000188 	.word	0x20000188
 8002ec8:	20000178 	.word	0x20000178
 8002ecc:	2000017c 	.word	0x2000017c
 8002ed0:	20000184 	.word	0x20000184
 8002ed4:	20000180 	.word	0x20000180
 8002ed8:	20000018 	.word	0x20000018
 8002edc:	2000001c 	.word	0x2000001c
 8002ee0:	2000010c 	.word	0x2000010c
 8002ee4:	20000104 	.word	0x20000104
 8002ee8:	200001dd 	.word	0x200001dd
 8002eec:	20000195 	.word	0x20000195
 8002ef0:	2000018c 	.word	0x2000018c
 8002ef4:	20000108 	.word	0x20000108
 8002ef8:	fffffc18 	.word	0xfffffc18
 8002efc:	fffffda8 	.word	0xfffffda8
 8002f00:	fffffe70 	.word	0xfffffe70
 8002f04:	fffff9c0 	.word	0xfffff9c0
			else if((RobotArm_Position) < (uint16_t)(angle*20))
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <pid+0x390>)
 8002f0a:	edd3 7a00 	vldr	s15, [r3]
 8002f0e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f1a:	ee17 3a90 	vmov	r3, s15
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <pid+0x394>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d904      	bls.n	8002f32 <pid+0x342>
				PWMOut=1600;
 8002f28:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <pid+0x398>)
 8002f2a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e012      	b.n	8002f58 <pid+0x368>
			else if((RobotArm_Position) > (uint16_t)(angle*20))
 8002f32:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <pid+0x390>)
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f44:	ee17 3a90 	vmov	r3, s15
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <pid+0x394>)
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d202      	bcs.n	8002f58 <pid+0x368>
				PWMOut=-300;
 8002f52:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <pid+0x398>)
 8002f54:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <pid+0x39c>)
 8002f56:	601a      	str	r2, [r3, #0]
		if((RobotArm_Position) == (uint16_t)(angle*20))
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <pid+0x390>)
 8002f5a:	edd3 7a00 	vldr	s15, [r3]
 8002f5e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f6a:	ee17 3a90 	vmov	r3, s15
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <pid+0x394>)
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d101      	bne.n	8002f7c <pid+0x38c>
			ReachGoal();
 8002f78:	f7ff fdec 	bl	8002b54 <ReachGoal>
}
 8002f7c:	bf00      	nop
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	2000018c 	.word	0x2000018c
 8002f84:	20000108 	.word	0x20000108
 8002f88:	20000104 	.word	0x20000104
 8002f8c:	fffffed4 	.word	0xfffffed4

08002f90 <UARTInit>:

void UARTInit(UARTStucrture *uart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8002f98:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <UARTInit+0x4c>)
 8002f9a:	88db      	ldrh	r3, [r3, #6]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	f006 f948 	bl	8009234 <calloc>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <UARTInit+0x4c>)
 8002fae:	889b      	ldrh	r3, [r3, #4]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f006 f93e 	bl	8009234 <calloc>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	81da      	strh	r2, [r3, #14]

}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200001b0 	.word	0x200001b0

08002fe0 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6919      	ldr	r1, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	88db      	ldrh	r3, [r3, #6]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f005 f9f5 	bl	80083e4 <HAL_UART_Receive_DMA>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <UARTGetRxHead>:

uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	88db      	ldrh	r3, [r3, #6]
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	1ad3      	subs	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <UARTReadChar>:

int16_t UARTReadChar(UARTStucrture *uart)
{
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8003030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003034:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	8a9b      	ldrh	r3, [r3, #20]
 800303a:	461c      	mov	r4, r3
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff ffe0 	bl	8003002 <UARTGetRxHead>
 8003042:	4603      	mov	r3, r0
 8003044:	429c      	cmp	r4, r3
 8003046:	d013      	beq.n	8003070 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	8a92      	ldrh	r2, [r2, #20]
 8003050:	4413      	add	r3, r2
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	8a9b      	ldrh	r3, [r3, #20]
 800305a:	3301      	adds	r3, #1
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	88d2      	ldrh	r2, [r2, #6]
 8003060:	fb93 f1f2 	sdiv	r1, r3, r2
 8003064:	fb02 f201 	mul.w	r2, r2, r1
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	b29a      	uxth	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8003070:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bd90      	pop	{r4, r7, pc}

0800307c <UARTTxDumpBuffer>:

void UARTTxDumpBuffer(UARTStucrture *uart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b20      	cmp	r3, #32
 8003090:	d13d      	bne.n	800310e <UARTTxDumpBuffer+0x92>
 8003092:	4b21      	ldr	r3, [pc, #132]	; (8003118 <UARTTxDumpBuffer+0x9c>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d139      	bne.n	800310e <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 800309a:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <UARTTxDumpBuffer+0x9c>)
 800309c:	2201      	movs	r2, #1
 800309e:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	89da      	ldrh	r2, [r3, #14]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	899b      	ldrh	r3, [r3, #12]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d02d      	beq.n	8003108 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	89da      	ldrh	r2, [r3, #14]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d906      	bls.n	80030c6 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	89da      	ldrh	r2, [r3, #14]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	e005      	b.n	80030d2 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	889a      	ldrh	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	8992      	ldrh	r2, [r2, #12]
 80030e0:	4413      	add	r3, r2
 80030e2:	89fa      	ldrh	r2, [r7, #14]
 80030e4:	4619      	mov	r1, r3
 80030e6:	f005 f911 	bl	800830c <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	899b      	ldrh	r3, [r3, #12]
 80030ee:	461a      	mov	r2, r3
 80030f0:	89fb      	ldrh	r3, [r7, #14]
 80030f2:	4413      	add	r3, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	8892      	ldrh	r2, [r2, #4]
 80030f8:	fb93 f1f2 	sdiv	r1, r3, r2
 80030fc:	fb02 f201 	mul.w	r2, r2, r1
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	b29a      	uxth	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <UARTTxDumpBuffer+0x9c>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
	}
}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000224 	.word	0x20000224

0800311c <UARTTxWrite>:

void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	4613      	mov	r3, r2
 8003128:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	889b      	ldrh	r3, [r3, #4]
 800312e:	88fa      	ldrh	r2, [r7, #6]
 8003130:	4293      	cmp	r3, r2
 8003132:	bf28      	it	cs
 8003134:	4613      	movcs	r3, r2
 8003136:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8003138:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	889b      	ldrh	r3, [r3, #4]
 800313e:	4619      	mov	r1, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	89db      	ldrh	r3, [r3, #14]
 8003144:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8003146:	4293      	cmp	r3, r2
 8003148:	bfa8      	it	ge
 800314a:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 800314c:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	89d2      	ldrh	r2, [r2, #14]
 8003156:	4413      	add	r3, r2
 8003158:	8aba      	ldrh	r2, [r7, #20]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	4618      	mov	r0, r3
 800315e:	f006 f89b 	bl	8009298 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	89db      	ldrh	r3, [r3, #14]
 8003166:	461a      	mov	r2, r3
 8003168:	8afb      	ldrh	r3, [r7, #22]
 800316a:	4413      	add	r3, r2
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	8892      	ldrh	r2, [r2, #4]
 8003170:	fb93 f1f2 	sdiv	r1, r3, r2
 8003174:	fb02 f201 	mul.w	r2, r2, r1
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8003180:	8afa      	ldrh	r2, [r7, #22]
 8003182:	8abb      	ldrh	r3, [r7, #20]
 8003184:	429a      	cmp	r2, r3
 8003186:	d00a      	beq.n	800319e <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6898      	ldr	r0, [r3, #8]
 800318c:	8abb      	ldrh	r3, [r7, #20]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8003192:	8afa      	ldrh	r2, [r7, #22]
 8003194:	8abb      	ldrh	r3, [r7, #20]
 8003196:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8003198:	461a      	mov	r2, r3
 800319a:	f006 f87d 	bl	8009298 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7ff ff6c 	bl	800307c <UARTTxDumpBuffer>
}
 80031a4:	bf00      	nop
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <UART_Ack1>:

void UART_Ack1()
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
	uint8_t temp[1];
	temp[0] = 'X'; //0x58
 80031b2:	2358      	movs	r3, #88	; 0x58
 80031b4:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 80031b6:	1d3b      	adds	r3, r7, #4
 80031b8:	2201      	movs	r2, #1
 80031ba:	4619      	mov	r1, r3
 80031bc:	4808      	ldr	r0, [pc, #32]	; (80031e0 <UART_Ack1+0x34>)
 80031be:	f7ff ffad 	bl	800311c <UARTTxWrite>
	HAL_Delay(1);
 80031c2:	2001      	movs	r0, #1
 80031c4:	f000 ff28 	bl	8004018 <HAL_Delay>
	temp[0] = 'u'; //0b01110101
 80031c8:	2375      	movs	r3, #117	; 0x75
 80031ca:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 80031cc:	1d3b      	adds	r3, r7, #4
 80031ce:	2201      	movs	r2, #1
 80031d0:	4619      	mov	r1, r3
 80031d2:	4803      	ldr	r0, [pc, #12]	; (80031e0 <UART_Ack1+0x34>)
 80031d4:	f7ff ffa2 	bl	800311c <UARTTxWrite>
	// HAL_Delay(1);
}
 80031d8:	bf00      	nop
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	200001b0 	.word	0x200001b0

080031e4 <UART_Ack2>:

void UART_Ack2()
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
	uint8_t temp[1];
	temp[0] = 'F'; //70
 80031ea:	2346      	movs	r3, #70	; 0x46
 80031ec:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	2201      	movs	r2, #1
 80031f2:	4619      	mov	r1, r3
 80031f4:	4808      	ldr	r0, [pc, #32]	; (8003218 <UART_Ack2+0x34>)
 80031f6:	f7ff ff91 	bl	800311c <UARTTxWrite>
	HAL_Delay(1);
 80031fa:	2001      	movs	r0, #1
 80031fc:	f000 ff0c 	bl	8004018 <HAL_Delay>
	temp[0] = 'n'; //0o156
 8003200:	236e      	movs	r3, #110	; 0x6e
 8003202:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, temp, 1);
 8003204:	1d3b      	adds	r3, r7, #4
 8003206:	2201      	movs	r2, #1
 8003208:	4619      	mov	r1, r3
 800320a:	4803      	ldr	r0, [pc, #12]	; (8003218 <UART_Ack2+0x34>)
 800320c:	f7ff ff86 	bl	800311c <UARTTxWrite>
	// HAL_Delay(1);
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	200001b0 	.word	0x200001b0

0800321c <UART_Flow2>:

void UART_Flow2()
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
	Serial_Mode  = (0b10010000 | UART_Mode);
 8003222:	4b4e      	ldr	r3, [pc, #312]	; (800335c <UART_Flow2+0x140>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800322a:	b2da      	uxtb	r2, r3
 800322c:	4b4c      	ldr	r3, [pc, #304]	; (8003360 <UART_Flow2+0x144>)
 800322e:	701a      	strb	r2, [r3, #0]
	Serial_Angle = (uint16_t)(Current_Angle * 10000 * pi / 180);
 8003230:	4b4c      	ldr	r3, [pc, #304]	; (8003364 <UART_Flow2+0x148>)
 8003232:	edd3 7a00 	vldr	s15, [r3]
 8003236:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003368 <UART_Flow2+0x14c>
 800323a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800323e:	4b4b      	ldr	r3, [pc, #300]	; (800336c <UART_Flow2+0x150>)
 8003240:	edd3 7a00 	vldr	s15, [r3]
 8003244:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003248:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003370 <UART_Flow2+0x154>
 800324c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003254:	ee17 3a90 	vmov	r3, s15
 8003258:	b29a      	uxth	r2, r3
 800325a:	4b46      	ldr	r3, [pc, #280]	; (8003374 <UART_Flow2+0x158>)
 800325c:	801a      	strh	r2, [r3, #0]
	Serial_Speed = (uint8_t) (Speed * 255 / 10);
 800325e:	4b46      	ldr	r3, [pc, #280]	; (8003378 <UART_Flow2+0x15c>)
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800337c <UART_Flow2+0x160>
 8003268:	ee27 7a87 	vmul.f32	s14, s15, s14
 800326c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003270:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003278:	edc7 7a01 	vstr	s15, [r7, #4]
 800327c:	793b      	ldrb	r3, [r7, #4]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <UART_Flow2+0x164>)
 8003282:	701a      	strb	r2, [r3, #0]

	ChkSum = Serial_Mode;
 8003284:	4b36      	ldr	r3, [pc, #216]	; (8003360 <UART_Flow2+0x144>)
 8003286:	781a      	ldrb	r2, [r3, #0]
 8003288:	4b3e      	ldr	r3, [pc, #248]	; (8003384 <UART_Flow2+0x168>)
 800328a:	701a      	strb	r2, [r3, #0]

	uint8_t temp[1];
	temp[0] = Serial_Mode;
 800328c:	4b34      	ldr	r3, [pc, #208]	; (8003360 <UART_Flow2+0x144>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	733b      	strb	r3, [r7, #12]
	UARTTxWrite(&UART2, temp, 1);
 8003292:	f107 030c 	add.w	r3, r7, #12
 8003296:	2201      	movs	r2, #1
 8003298:	4619      	mov	r1, r3
 800329a:	483b      	ldr	r0, [pc, #236]	; (8003388 <UART_Flow2+0x16c>)
 800329c:	f7ff ff3e 	bl	800311c <UARTTxWrite>
	HAL_Delay(1);
 80032a0:	2001      	movs	r0, #1
 80032a2:	f000 feb9 	bl	8004018 <HAL_Delay>

	if(UART_Mode == 10) { temp[0] = (uint8_t)(Serial_Angle / 256); }
 80032a6:	4b2d      	ldr	r3, [pc, #180]	; (800335c <UART_Flow2+0x140>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b0a      	cmp	r3, #10
 80032ac:	d106      	bne.n	80032bc <UART_Flow2+0xa0>
 80032ae:	4b31      	ldr	r3, [pc, #196]	; (8003374 <UART_Flow2+0x158>)
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	733b      	strb	r3, [r7, #12]
 80032ba:	e001      	b.n	80032c0 <UART_Flow2+0xa4>
	else                { temp[0] = 0; }
 80032bc:	2300      	movs	r3, #0
 80032be:	733b      	strb	r3, [r7, #12]
	ChkSum += temp[0];
 80032c0:	7b3a      	ldrb	r2, [r7, #12]
 80032c2:	4b30      	ldr	r3, [pc, #192]	; (8003384 <UART_Flow2+0x168>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	4413      	add	r3, r2
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b2e      	ldr	r3, [pc, #184]	; (8003384 <UART_Flow2+0x168>)
 80032cc:	701a      	strb	r2, [r3, #0]
	UARTTxWrite(&UART2, temp, 1);
 80032ce:	f107 030c 	add.w	r3, r7, #12
 80032d2:	2201      	movs	r2, #1
 80032d4:	4619      	mov	r1, r3
 80032d6:	482c      	ldr	r0, [pc, #176]	; (8003388 <UART_Flow2+0x16c>)
 80032d8:	f7ff ff20 	bl	800311c <UARTTxWrite>
	HAL_Delay(1);
 80032dc:	2001      	movs	r0, #1
 80032de:	f000 fe9b 	bl	8004018 <HAL_Delay>

	if(UART_Mode == 9)       { temp[0] = Current_Station; }
 80032e2:	4b1e      	ldr	r3, [pc, #120]	; (800335c <UART_Flow2+0x140>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b09      	cmp	r3, #9
 80032e8:	d103      	bne.n	80032f2 <UART_Flow2+0xd6>
 80032ea:	4b28      	ldr	r3, [pc, #160]	; (800338c <UART_Flow2+0x170>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	733b      	strb	r3, [r7, #12]
 80032f0:	e00f      	b.n	8003312 <UART_Flow2+0xf6>
	else if(UART_Mode == 10) { temp[0] = (uint8_t)(Serial_Angle % 256); }
 80032f2:	4b1a      	ldr	r3, [pc, #104]	; (800335c <UART_Flow2+0x140>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b0a      	cmp	r3, #10
 80032f8:	d104      	bne.n	8003304 <UART_Flow2+0xe8>
 80032fa:	4b1e      	ldr	r3, [pc, #120]	; (8003374 <UART_Flow2+0x158>)
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	733b      	strb	r3, [r7, #12]
 8003302:	e006      	b.n	8003312 <UART_Flow2+0xf6>
	else if(UART_Mode == 11) { temp[0] = Serial_Speed; }
 8003304:	4b15      	ldr	r3, [pc, #84]	; (800335c <UART_Flow2+0x140>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b0b      	cmp	r3, #11
 800330a:	d102      	bne.n	8003312 <UART_Flow2+0xf6>
 800330c:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <UART_Flow2+0x164>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	733b      	strb	r3, [r7, #12]
	ChkSum += temp[0];
 8003312:	7b3a      	ldrb	r2, [r7, #12]
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <UART_Flow2+0x168>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	4413      	add	r3, r2
 800331a:	b2da      	uxtb	r2, r3
 800331c:	4b19      	ldr	r3, [pc, #100]	; (8003384 <UART_Flow2+0x168>)
 800331e:	701a      	strb	r2, [r3, #0]
	UARTTxWrite(&UART2, temp, 1);
 8003320:	f107 030c 	add.w	r3, r7, #12
 8003324:	2201      	movs	r2, #1
 8003326:	4619      	mov	r1, r3
 8003328:	4817      	ldr	r0, [pc, #92]	; (8003388 <UART_Flow2+0x16c>)
 800332a:	f7ff fef7 	bl	800311c <UARTTxWrite>
	HAL_Delay(1);
 800332e:	2001      	movs	r0, #1
 8003330:	f000 fe72 	bl	8004018 <HAL_Delay>

	ChkSum = ~(ChkSum);
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <UART_Flow2+0x168>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	43db      	mvns	r3, r3
 800333a:	b2da      	uxtb	r2, r3
 800333c:	4b11      	ldr	r3, [pc, #68]	; (8003384 <UART_Flow2+0x168>)
 800333e:	701a      	strb	r2, [r3, #0]
	temp[0] = ChkSum;
 8003340:	4b10      	ldr	r3, [pc, #64]	; (8003384 <UART_Flow2+0x168>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	733b      	strb	r3, [r7, #12]
	UARTTxWrite(&UART2, temp, 1);
 8003346:	f107 030c 	add.w	r3, r7, #12
 800334a:	2201      	movs	r2, #1
 800334c:	4619      	mov	r1, r3
 800334e:	480e      	ldr	r0, [pc, #56]	; (8003388 <UART_Flow2+0x16c>)
 8003350:	f7ff fee4 	bl	800311c <UARTTxWrite>
	// HAL_Delay(1);
}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000212 	.word	0x20000212
 8003360:	20000234 	.word	0x20000234
 8003364:	200001cc 	.word	0x200001cc
 8003368:	461c4000 	.word	0x461c4000
 800336c:	20000030 	.word	0x20000030
 8003370:	43340000 	.word	0x43340000
 8003374:	20000330 	.word	0x20000330
 8003378:	200001d4 	.word	0x200001d4
 800337c:	437f0000 	.word	0x437f0000
 8003380:	200002d8 	.word	0x200002d8
 8003384:	200001f1 	.word	0x200001f1
 8003388:	200001b0 	.word	0x200001b0
 800338c:	200001d0 	.word	0x200001d0

08003390 <UART_Protocal>:


void UART_Protocal()
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
	static ProtocalState State = Start;

	InputChar = UARTReadChar(&UART2);
 8003396:	48a3      	ldr	r0, [pc, #652]	; (8003624 <UART_Protocal+0x294>)
 8003398:	f7ff fe46 	bl	8003028 <UARTReadChar>
 800339c:	4603      	mov	r3, r0
 800339e:	461a      	mov	r2, r3
 80033a0:	4ba1      	ldr	r3, [pc, #644]	; (8003628 <UART_Protocal+0x298>)
 80033a2:	801a      	strh	r2, [r3, #0]

	if (InputChar != -1)
 80033a4:	4ba0      	ldr	r3, [pc, #640]	; (8003628 <UART_Protocal+0x298>)
 80033a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ae:	f000 8130 	beq.w	8003612 <UART_Protocal+0x282>
	{
		InputByte = (uint8_t)InputChar;
 80033b2:	4b9d      	ldr	r3, [pc, #628]	; (8003628 <UART_Protocal+0x298>)
 80033b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4b9c      	ldr	r3, [pc, #624]	; (800362c <UART_Protocal+0x29c>)
 80033bc:	701a      	strb	r2, [r3, #0]

		switch(State)
 80033be:	4b9c      	ldr	r3, [pc, #624]	; (8003630 <UART_Protocal+0x2a0>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b07      	cmp	r3, #7
 80033c4:	f200 8121 	bhi.w	800360a <UART_Protocal+0x27a>
 80033c8:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <UART_Protocal+0x40>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	080033f1 	.word	0x080033f1
 80033d4:	08003487 	.word	0x08003487
 80033d8:	080034bb 	.word	0x080034bb
 80033dc:	080034cb 	.word	0x080034cb
 80033e0:	080034db 	.word	0x080034db
 80033e4:	0800351f 	.word	0x0800351f
 80033e8:	0800352f 	.word	0x0800352f
 80033ec:	0800358b 	.word	0x0800358b
		{
			case Start:
				if( ((InputByte>>4) & 0b00001111) == 0b00001001)
 80033f0:	4b8e      	ldr	r3, [pc, #568]	; (800362c <UART_Protocal+0x29c>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	2b09      	cmp	r3, #9
 80033fe:	d10a      	bne.n	8003416 <UART_Protocal+0x86>
				{
					UART_Mode = InputByte & 0b00001111;
 8003400:	4b8a      	ldr	r3, [pc, #552]	; (800362c <UART_Protocal+0x29c>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4b8a      	ldr	r3, [pc, #552]	; (8003634 <UART_Protocal+0x2a4>)
 800340c:	701a      	strb	r2, [r3, #0]
					UART_Mode_Print = UART_Mode;
 800340e:	4b89      	ldr	r3, [pc, #548]	; (8003634 <UART_Protocal+0x2a4>)
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	4b89      	ldr	r3, [pc, #548]	; (8003638 <UART_Protocal+0x2a8>)
 8003414:	701a      	strb	r2, [r3, #0]
				}
				if(UART_Mode >=1 && UART_Mode <= 14)
 8003416:	4b87      	ldr	r3, [pc, #540]	; (8003634 <UART_Protocal+0x2a4>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 80fb 	beq.w	8003616 <UART_Protocal+0x286>
 8003420:	4b84      	ldr	r3, [pc, #528]	; (8003634 <UART_Protocal+0x2a4>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b0e      	cmp	r3, #14
 8003426:	f200 80f6 	bhi.w	8003616 <UART_Protocal+0x286>
				{

					if(UART_Mode == 2 || UART_Mode == 3 || UART_Mode >= 8)
 800342a:	4b82      	ldr	r3, [pc, #520]	; (8003634 <UART_Protocal+0x2a4>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d007      	beq.n	8003442 <UART_Protocal+0xb2>
 8003432:	4b80      	ldr	r3, [pc, #512]	; (8003634 <UART_Protocal+0x2a4>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d003      	beq.n	8003442 <UART_Protocal+0xb2>
 800343a:	4b7e      	ldr	r3, [pc, #504]	; (8003634 <UART_Protocal+0x2a4>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b07      	cmp	r3, #7
 8003440:	d903      	bls.n	800344a <UART_Protocal+0xba>
					{
						State = Frame1_CheckSum;
 8003442:	4b7b      	ldr	r3, [pc, #492]	; (8003630 <UART_Protocal+0x2a0>)
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	e01c      	b.n	8003484 <UART_Protocal+0xf4>
					}
					else if(UART_Mode == 1 || UART_Mode == 4 || UART_Mode == 5 || UART_Mode == 6)
 800344a:	4b7a      	ldr	r3, [pc, #488]	; (8003634 <UART_Protocal+0x2a4>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d00b      	beq.n	800346a <UART_Protocal+0xda>
 8003452:	4b78      	ldr	r3, [pc, #480]	; (8003634 <UART_Protocal+0x2a4>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b04      	cmp	r3, #4
 8003458:	d007      	beq.n	800346a <UART_Protocal+0xda>
 800345a:	4b76      	ldr	r3, [pc, #472]	; (8003634 <UART_Protocal+0x2a4>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b05      	cmp	r3, #5
 8003460:	d003      	beq.n	800346a <UART_Protocal+0xda>
 8003462:	4b74      	ldr	r3, [pc, #464]	; (8003634 <UART_Protocal+0x2a4>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b06      	cmp	r3, #6
 8003468:	d103      	bne.n	8003472 <UART_Protocal+0xe2>
					{
						State = Frame2_Data1;
 800346a:	4b71      	ldr	r3, [pc, #452]	; (8003630 <UART_Protocal+0x2a0>)
 800346c:	2202      	movs	r2, #2
 800346e:	701a      	strb	r2, [r3, #0]
 8003470:	e008      	b.n	8003484 <UART_Protocal+0xf4>

					}
					else if(UART_Mode == 7)
 8003472:	4b70      	ldr	r3, [pc, #448]	; (8003634 <UART_Protocal+0x2a4>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b07      	cmp	r3, #7
 8003478:	f040 80cd 	bne.w	8003616 <UART_Protocal+0x286>
					{
						State = Frame3_Station;
 800347c:	4b6c      	ldr	r3, [pc, #432]	; (8003630 <UART_Protocal+0x2a0>)
 800347e:	2205      	movs	r2, #5
 8003480:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8003482:	e0c8      	b.n	8003616 <UART_Protocal+0x286>
 8003484:	e0c7      	b.n	8003616 <UART_Protocal+0x286>

			case Frame1_CheckSum:
				ChkSum = ~(0b10010000 | UART_Mode);
 8003486:	4b6b      	ldr	r3, [pc, #428]	; (8003634 <UART_Protocal+0x2a4>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800348e:	b2db      	uxtb	r3, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	b2da      	uxtb	r2, r3
 8003494:	4b69      	ldr	r3, [pc, #420]	; (800363c <UART_Protocal+0x2ac>)
 8003496:	701a      	strb	r2, [r3, #0]
				if(InputByte == ChkSum)
 8003498:	4b64      	ldr	r3, [pc, #400]	; (800362c <UART_Protocal+0x29c>)
 800349a:	781a      	ldrb	r2, [r3, #0]
 800349c:	4b67      	ldr	r3, [pc, #412]	; (800363c <UART_Protocal+0x2ac>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d103      	bne.n	80034ac <UART_Protocal+0x11c>
				{
					UART_Ack1();
 80034a4:	f7ff fe82 	bl	80031ac <UART_Ack1>
					UART_Execute();
 80034a8:	f000 f8d6 	bl	8003658 <UART_Execute>
				}
				ChkSum = 0;
 80034ac:	4b63      	ldr	r3, [pc, #396]	; (800363c <UART_Protocal+0x2ac>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
				State = Start;
 80034b2:	4b5f      	ldr	r3, [pc, #380]	; (8003630 <UART_Protocal+0x2a0>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	701a      	strb	r2, [r3, #0]
				break;
 80034b8:	e0b0      	b.n	800361c <UART_Protocal+0x28c>

			case Frame2_Data1:
				Data_Frame2[0] = InputByte;
 80034ba:	4b5c      	ldr	r3, [pc, #368]	; (800362c <UART_Protocal+0x29c>)
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	4b60      	ldr	r3, [pc, #384]	; (8003640 <UART_Protocal+0x2b0>)
 80034c0:	701a      	strb	r2, [r3, #0]
				State = Frame2_Data2;
 80034c2:	4b5b      	ldr	r3, [pc, #364]	; (8003630 <UART_Protocal+0x2a0>)
 80034c4:	2203      	movs	r2, #3
 80034c6:	701a      	strb	r2, [r3, #0]
				break;
 80034c8:	e0a8      	b.n	800361c <UART_Protocal+0x28c>

			case Frame2_Data2:
				Data_Frame2[1] = InputByte;
 80034ca:	4b58      	ldr	r3, [pc, #352]	; (800362c <UART_Protocal+0x29c>)
 80034cc:	781a      	ldrb	r2, [r3, #0]
 80034ce:	4b5c      	ldr	r3, [pc, #368]	; (8003640 <UART_Protocal+0x2b0>)
 80034d0:	705a      	strb	r2, [r3, #1]
				State = Frame2_CheckSum;
 80034d2:	4b57      	ldr	r3, [pc, #348]	; (8003630 <UART_Protocal+0x2a0>)
 80034d4:	2204      	movs	r2, #4
 80034d6:	701a      	strb	r2, [r3, #0]
				break;
 80034d8:	e0a0      	b.n	800361c <UART_Protocal+0x28c>

			case Frame2_CheckSum:
				ChkSum = ~( (0b10010000 | UART_Mode) + Data_Frame2[0] + Data_Frame2[1] );
 80034da:	4b56      	ldr	r3, [pc, #344]	; (8003634 <UART_Protocal+0x2a4>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	4b56      	ldr	r3, [pc, #344]	; (8003640 <UART_Protocal+0x2b0>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	4413      	add	r3, r2
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	4b54      	ldr	r3, [pc, #336]	; (8003640 <UART_Protocal+0x2b0>)
 80034ee:	785b      	ldrb	r3, [r3, #1]
 80034f0:	4413      	add	r3, r2
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	4b50      	ldr	r3, [pc, #320]	; (800363c <UART_Protocal+0x2ac>)
 80034fa:	701a      	strb	r2, [r3, #0]
				if(InputByte == ChkSum)
 80034fc:	4b4b      	ldr	r3, [pc, #300]	; (800362c <UART_Protocal+0x29c>)
 80034fe:	781a      	ldrb	r2, [r3, #0]
 8003500:	4b4e      	ldr	r3, [pc, #312]	; (800363c <UART_Protocal+0x2ac>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d103      	bne.n	8003510 <UART_Protocal+0x180>
				{
					UART_Ack1();
 8003508:	f7ff fe50 	bl	80031ac <UART_Ack1>
					UART_Execute();
 800350c:	f000 f8a4 	bl	8003658 <UART_Execute>
				}
				ChkSum = 0;
 8003510:	4b4a      	ldr	r3, [pc, #296]	; (800363c <UART_Protocal+0x2ac>)
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
				State = Start;
 8003516:	4b46      	ldr	r3, [pc, #280]	; (8003630 <UART_Protocal+0x2a0>)
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
				break;
 800351c:	e07e      	b.n	800361c <UART_Protocal+0x28c>

			case Frame3_Station:
				Multi_Station_Amount = InputByte;
 800351e:	4b43      	ldr	r3, [pc, #268]	; (800362c <UART_Protocal+0x29c>)
 8003520:	781a      	ldrb	r2, [r3, #0]
 8003522:	4b48      	ldr	r3, [pc, #288]	; (8003644 <UART_Protocal+0x2b4>)
 8003524:	701a      	strb	r2, [r3, #0]
				State = Frame3_Data;
 8003526:	4b42      	ldr	r3, [pc, #264]	; (8003630 <UART_Protocal+0x2a0>)
 8003528:	2206      	movs	r2, #6
 800352a:	701a      	strb	r2, [r3, #0]
				break;
 800352c:	e076      	b.n	800361c <UART_Protocal+0x28c>

			case Frame3_Data:
				Data_Frame3   [(int)Multi_Station_Current/2] = InputByte;
 800352e:	4b46      	ldr	r3, [pc, #280]	; (8003648 <UART_Protocal+0x2b8>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	4b3c      	ldr	r3, [pc, #240]	; (800362c <UART_Protocal+0x29c>)
 800353a:	7819      	ldrb	r1, [r3, #0]
 800353c:	4b43      	ldr	r3, [pc, #268]	; (800364c <UART_Protocal+0x2bc>)
 800353e:	5499      	strb	r1, [r3, r2]
				Multi_Station [Multi_Station_Current]        = InputByte & 0b00001111;
 8003540:	4b3a      	ldr	r3, [pc, #232]	; (800362c <UART_Protocal+0x29c>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	4a40      	ldr	r2, [pc, #256]	; (8003648 <UART_Protocal+0x2b8>)
 8003546:	7812      	ldrb	r2, [r2, #0]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	b2d9      	uxtb	r1, r3
 800354e:	4b40      	ldr	r3, [pc, #256]	; (8003650 <UART_Protocal+0x2c0>)
 8003550:	5499      	strb	r1, [r3, r2]
				Multi_Station [Multi_Station_Current+1] 	 = InputByte >> 4;
 8003552:	4b36      	ldr	r3, [pc, #216]	; (800362c <UART_Protocal+0x29c>)
 8003554:	781a      	ldrb	r2, [r3, #0]
 8003556:	4b3c      	ldr	r3, [pc, #240]	; (8003648 <UART_Protocal+0x2b8>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	3301      	adds	r3, #1
 800355c:	0912      	lsrs	r2, r2, #4
 800355e:	b2d1      	uxtb	r1, r2
 8003560:	4a3b      	ldr	r2, [pc, #236]	; (8003650 <UART_Protocal+0x2c0>)
 8003562:	54d1      	strb	r1, [r2, r3]
				Multi_Station_Current += 2;
 8003564:	4b38      	ldr	r3, [pc, #224]	; (8003648 <UART_Protocal+0x2b8>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	3302      	adds	r3, #2
 800356a:	b2da      	uxtb	r2, r3
 800356c:	4b36      	ldr	r3, [pc, #216]	; (8003648 <UART_Protocal+0x2b8>)
 800356e:	701a      	strb	r2, [r3, #0]
				if(Multi_Station_Current >= Multi_Station_Amount)
 8003570:	4b35      	ldr	r3, [pc, #212]	; (8003648 <UART_Protocal+0x2b8>)
 8003572:	781a      	ldrb	r2, [r3, #0]
 8003574:	4b33      	ldr	r3, [pc, #204]	; (8003644 <UART_Protocal+0x2b4>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d34e      	bcc.n	800361a <UART_Protocal+0x28a>
				{
					Multi_Station_Current = 0;
 800357c:	4b32      	ldr	r3, [pc, #200]	; (8003648 <UART_Protocal+0x2b8>)
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
					State = Frame3_CheckSum;
 8003582:	4b2b      	ldr	r3, [pc, #172]	; (8003630 <UART_Protocal+0x2a0>)
 8003584:	2207      	movs	r2, #7
 8003586:	701a      	strb	r2, [r3, #0]
				}
				break;
 8003588:	e047      	b.n	800361a <UART_Protocal+0x28a>

			case Frame3_CheckSum:
				ChkSum = (0b10010000 | UART_Mode);
 800358a:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <UART_Protocal+0x2a4>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8003592:	b2da      	uxtb	r2, r3
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <UART_Protocal+0x2ac>)
 8003596:	701a      	strb	r2, [r3, #0]
				ChkSum += Multi_Station_Amount;
 8003598:	4b28      	ldr	r3, [pc, #160]	; (800363c <UART_Protocal+0x2ac>)
 800359a:	781a      	ldrb	r2, [r3, #0]
 800359c:	4b29      	ldr	r3, [pc, #164]	; (8003644 <UART_Protocal+0x2b4>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	4413      	add	r3, r2
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	4b25      	ldr	r3, [pc, #148]	; (800363c <UART_Protocal+0x2ac>)
 80035a6:	701a      	strb	r2, [r3, #0]
				for(int i=0 ; i < (int)((Multi_Station_Amount+1)/2) ; i++)
 80035a8:	2300      	movs	r3, #0
 80035aa:	607b      	str	r3, [r7, #4]
 80035ac:	e00c      	b.n	80035c8 <UART_Protocal+0x238>
				{
					ChkSum += Data_Frame3[i];
 80035ae:	4a27      	ldr	r2, [pc, #156]	; (800364c <UART_Protocal+0x2bc>)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4413      	add	r3, r2
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	4b21      	ldr	r3, [pc, #132]	; (800363c <UART_Protocal+0x2ac>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	4413      	add	r3, r2
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	4b1f      	ldr	r3, [pc, #124]	; (800363c <UART_Protocal+0x2ac>)
 80035c0:	701a      	strb	r2, [r3, #0]
				for(int i=0 ; i < (int)((Multi_Station_Amount+1)/2) ; i++)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3301      	adds	r3, #1
 80035c6:	607b      	str	r3, [r7, #4]
 80035c8:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <UART_Protocal+0x2b4>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	3301      	adds	r3, #1
 80035ce:	0fda      	lsrs	r2, r3, #31
 80035d0:	4413      	add	r3, r2
 80035d2:	105b      	asrs	r3, r3, #1
 80035d4:	461a      	mov	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4293      	cmp	r3, r2
 80035da:	dbe8      	blt.n	80035ae <UART_Protocal+0x21e>
				}
				ChkSum = ~(ChkSum);
 80035dc:	4b17      	ldr	r3, [pc, #92]	; (800363c <UART_Protocal+0x2ac>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	4b15      	ldr	r3, [pc, #84]	; (800363c <UART_Protocal+0x2ac>)
 80035e6:	701a      	strb	r2, [r3, #0]
				if(InputByte == ChkSum)
 80035e8:	4b10      	ldr	r3, [pc, #64]	; (800362c <UART_Protocal+0x29c>)
 80035ea:	781a      	ldrb	r2, [r3, #0]
 80035ec:	4b13      	ldr	r3, [pc, #76]	; (800363c <UART_Protocal+0x2ac>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d103      	bne.n	80035fc <UART_Protocal+0x26c>
				{
					UART_Ack1();
 80035f4:	f7ff fdda 	bl	80031ac <UART_Ack1>
					UART_Execute();
 80035f8:	f000 f82e 	bl	8003658 <UART_Execute>
				}
				ChkSum = 0;
 80035fc:	4b0f      	ldr	r3, [pc, #60]	; (800363c <UART_Protocal+0x2ac>)
 80035fe:	2200      	movs	r2, #0
 8003600:	701a      	strb	r2, [r3, #0]
				State = Start;
 8003602:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <UART_Protocal+0x2a0>)
 8003604:	2200      	movs	r2, #0
 8003606:	701a      	strb	r2, [r3, #0]
				break;
 8003608:	e008      	b.n	800361c <UART_Protocal+0x28c>

			default:
				State = Start;
 800360a:	4b09      	ldr	r3, [pc, #36]	; (8003630 <UART_Protocal+0x2a0>)
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
				break;
 8003610:	e004      	b.n	800361c <UART_Protocal+0x28c>
		}
	}
 8003612:	bf00      	nop
 8003614:	e002      	b.n	800361c <UART_Protocal+0x28c>
				break;
 8003616:	bf00      	nop
 8003618:	e000      	b.n	800361c <UART_Protocal+0x28c>
				break;
 800361a:	bf00      	nop

}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	200001b0 	.word	0x200001b0
 8003628:	200001ee 	.word	0x200001ee
 800362c:	200001f0 	.word	0x200001f0
 8003630:	20000225 	.word	0x20000225
 8003634:	20000212 	.word	0x20000212
 8003638:	20000213 	.word	0x20000213
 800363c:	200001f1 	.word	0x200001f1
 8003640:	200001f4 	.word	0x200001f4
 8003644:	20000210 	.word	0x20000210
 8003648:	20000211 	.word	0x20000211
 800364c:	200001f8 	.word	0x200001f8
 8003650:	20000200 	.word	0x20000200
 8003654:	00000000 	.word	0x00000000

08003658 <UART_Execute>:

void UART_Execute()
{
 8003658:	b598      	push	{r3, r4, r7, lr}
 800365a:	af00      	add	r7, sp, #0
	switch(UART_Mode)
 800365c:	4b96      	ldr	r3, [pc, #600]	; (80038b8 <UART_Execute+0x260>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	3b01      	subs	r3, #1
 8003662:	2b0e      	cmp	r3, #14
 8003664:	f200 8119 	bhi.w	800389a <UART_Execute+0x242>
 8003668:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <UART_Execute+0x18>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	0800389b 	.word	0x0800389b
 8003674:	080036ad 	.word	0x080036ad
 8003678:	080036b5 	.word	0x080036b5
 800367c:	080036bd 	.word	0x080036bd
 8003680:	080036e9 	.word	0x080036e9
 8003684:	08003761 	.word	0x08003761
 8003688:	08003793 	.word	0x08003793
 800368c:	080037c9 	.word	0x080037c9
 8003690:	080037d9 	.word	0x080037d9
 8003694:	080037df 	.word	0x080037df
 8003698:	0800381f 	.word	0x0800381f
 800369c:	0800386f 	.word	0x0800386f
 80036a0:	08003877 	.word	0x08003877
 80036a4:	0800387f 	.word	0x0800387f
 80036a8:	0800389b 	.word	0x0800389b
	{
		case 1:
			break;
		case 2:
			MCU_Connected = 1;
 80036ac:	4b83      	ldr	r3, [pc, #524]	; (80038bc <UART_Execute+0x264>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
			break;
 80036b2:	e0f2      	b.n	800389a <UART_Execute+0x242>
		case 3:
			MCU_Connected = 0;
 80036b4:	4b81      	ldr	r3, [pc, #516]	; (80038bc <UART_Execute+0x264>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
			break;
 80036ba:	e0ee      	b.n	800389a <UART_Execute+0x242>
		case 4:
			Max_Speed = Data_Frame2[1] * 10 / 255;
 80036bc:	4b80      	ldr	r3, [pc, #512]	; (80038c0 <UART_Execute+0x268>)
 80036be:	785b      	ldrb	r3, [r3, #1]
 80036c0:	461a      	mov	r2, r3
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4a7e      	ldr	r2, [pc, #504]	; (80038c4 <UART_Execute+0x26c>)
 80036cc:	fb82 1203 	smull	r1, r2, r2, r3
 80036d0:	441a      	add	r2, r3
 80036d2:	11d2      	asrs	r2, r2, #7
 80036d4:	17db      	asrs	r3, r3, #31
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	ee07 3a90 	vmov	s15, r3
 80036dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036e0:	4b79      	ldr	r3, [pc, #484]	; (80038c8 <UART_Execute+0x270>)
 80036e2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80036e6:	e0d8      	b.n	800389a <UART_Execute+0x242>
		case 5:
			Goal_Mode = 1;
 80036e8:	4b78      	ldr	r3, [pc, #480]	; (80038cc <UART_Execute+0x274>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	701a      	strb	r2, [r3, #0]
			Goal_Angle = (Data_Frame2[0] * 256) + Data_Frame2[1];
 80036ee:	4b74      	ldr	r3, [pc, #464]	; (80038c0 <UART_Execute+0x268>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	4a72      	ldr	r2, [pc, #456]	; (80038c0 <UART_Execute+0x268>)
 80036f6:	7852      	ldrb	r2, [r2, #1]
 80036f8:	4413      	add	r3, r2
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003702:	4b73      	ldr	r3, [pc, #460]	; (80038d0 <UART_Execute+0x278>)
 8003704:	edc3 7a00 	vstr	s15, [r3]
			Goal_Angle = Goal_Angle / (pi * 10000) * 180.0;
 8003708:	4b71      	ldr	r3, [pc, #452]	; (80038d0 <UART_Execute+0x278>)
 800370a:	edd3 6a00 	vldr	s13, [r3]
 800370e:	4b71      	ldr	r3, [pc, #452]	; (80038d4 <UART_Execute+0x27c>)
 8003710:	edd3 7a00 	vldr	s15, [r3]
 8003714:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80038d8 <UART_Execute+0x280>
 8003718:	ee27 7a87 	vmul.f32	s14, s15, s14
 800371c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003720:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80038dc <UART_Execute+0x284>
 8003724:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003728:	4b69      	ldr	r3, [pc, #420]	; (80038d0 <UART_Execute+0x278>)
 800372a:	edc3 7a00 	vstr	s15, [r3]
			angle = round(Goal_Angle);
 800372e:	4b68      	ldr	r3, [pc, #416]	; (80038d0 <UART_Execute+0x278>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fc feb4 	bl	80004a0 <__aeabi_f2d>
 8003738:	4603      	mov	r3, r0
 800373a:	460c      	mov	r4, r1
 800373c:	ec44 3b10 	vmov	d0, r3, r4
 8003740:	f005 fe38 	bl	80093b4 <round>
 8003744:	ec54 3b10 	vmov	r3, r4, d0
 8003748:	4618      	mov	r0, r3
 800374a:	4621      	mov	r1, r4
 800374c:	f7fd f9b0 	bl	8000ab0 <__aeabi_d2f>
 8003750:	4602      	mov	r2, r0
 8003752:	4b63      	ldr	r3, [pc, #396]	; (80038e0 <UART_Execute+0x288>)
 8003754:	601a      	str	r2, [r3, #0]
			Lastest_Angle = Current_Angle;
 8003756:	4b63      	ldr	r3, [pc, #396]	; (80038e4 <UART_Execute+0x28c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a63      	ldr	r2, [pc, #396]	; (80038e8 <UART_Execute+0x290>)
 800375c:	6013      	str	r3, [r2, #0]
			break;
 800375e:	e09c      	b.n	800389a <UART_Execute+0x242>
		case 6:
			Goal_Mode = 2;
 8003760:	4b5a      	ldr	r3, [pc, #360]	; (80038cc <UART_Execute+0x274>)
 8003762:	2202      	movs	r2, #2
 8003764:	701a      	strb	r2, [r3, #0]
			Single_Station = Data_Frame2[1];
 8003766:	4b56      	ldr	r3, [pc, #344]	; (80038c0 <UART_Execute+0x268>)
 8003768:	785a      	ldrb	r2, [r3, #1]
 800376a:	4b60      	ldr	r3, [pc, #384]	; (80038ec <UART_Execute+0x294>)
 800376c:	701a      	strb	r2, [r3, #0]
			angle = Multi_Station_Angle[Single_Station];
 800376e:	4b5f      	ldr	r3, [pc, #380]	; (80038ec <UART_Execute+0x294>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	4b5e      	ldr	r3, [pc, #376]	; (80038f0 <UART_Execute+0x298>)
 8003776:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800377a:	ee07 3a90 	vmov	s15, r3
 800377e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003782:	4b57      	ldr	r3, [pc, #348]	; (80038e0 <UART_Execute+0x288>)
 8003784:	edc3 7a00 	vstr	s15, [r3]
			Lastest_Angle = Current_Angle;
 8003788:	4b56      	ldr	r3, [pc, #344]	; (80038e4 <UART_Execute+0x28c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a56      	ldr	r2, [pc, #344]	; (80038e8 <UART_Execute+0x290>)
 800378e:	6013      	str	r3, [r2, #0]
			break;
 8003790:	e083      	b.n	800389a <UART_Execute+0x242>
		case 7:
			Goal_Mode = 3;
 8003792:	4b4e      	ldr	r3, [pc, #312]	; (80038cc <UART_Execute+0x274>)
 8003794:	2203      	movs	r2, #3
 8003796:	701a      	strb	r2, [r3, #0]
			Current_Multi_Station = 0;
 8003798:	4b56      	ldr	r3, [pc, #344]	; (80038f4 <UART_Execute+0x29c>)
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
			angle = Multi_Station_Angle[ Multi_Station[Current_Multi_Station] ];
 800379e:	4b55      	ldr	r3, [pc, #340]	; (80038f4 <UART_Execute+0x29c>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	4b54      	ldr	r3, [pc, #336]	; (80038f8 <UART_Execute+0x2a0>)
 80037a6:	5c9b      	ldrb	r3, [r3, r2]
 80037a8:	461a      	mov	r2, r3
 80037aa:	4b51      	ldr	r3, [pc, #324]	; (80038f0 <UART_Execute+0x298>)
 80037ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80037b0:	ee07 3a90 	vmov	s15, r3
 80037b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b8:	4b49      	ldr	r3, [pc, #292]	; (80038e0 <UART_Execute+0x288>)
 80037ba:	edc3 7a00 	vstr	s15, [r3]
			Lastest_Angle = Current_Angle;
 80037be:	4b49      	ldr	r3, [pc, #292]	; (80038e4 <UART_Execute+0x28c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a49      	ldr	r2, [pc, #292]	; (80038e8 <UART_Execute+0x290>)
 80037c4:	6013      	str	r3, [r2, #0]
			break;
 80037c6:	e068      	b.n	800389a <UART_Execute+0x242>
		case 8:
			t = 0;
 80037c8:	4b4c      	ldr	r3, [pc, #304]	; (80038fc <UART_Execute+0x2a4>)
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
			Run = 1;
 80037d0:	4b4b      	ldr	r3, [pc, #300]	; (8003900 <UART_Execute+0x2a8>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
			break;
 80037d6:	e060      	b.n	800389a <UART_Execute+0x242>
		case 9:
			UART_Flow2();
 80037d8:	f7ff fd20 	bl	800321c <UART_Flow2>
			break;
 80037dc:	e05d      	b.n	800389a <UART_Execute+0x242>
		case 10:
			Current_Angle = ( EncoderPosition_Update() * 360.0 / 7200.0 );
 80037de:	f7fe fa33 	bl	8001c48 <EncoderPosition_Update>
 80037e2:	4603      	mov	r3, r0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fc fe39 	bl	800045c <__aeabi_ui2d>
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	4b45      	ldr	r3, [pc, #276]	; (8003904 <UART_Execute+0x2ac>)
 80037f0:	f7fc feae 	bl	8000550 <__aeabi_dmul>
 80037f4:	4603      	mov	r3, r0
 80037f6:	460c      	mov	r4, r1
 80037f8:	4618      	mov	r0, r3
 80037fa:	4621      	mov	r1, r4
 80037fc:	a32a      	add	r3, pc, #168	; (adr r3, 80038a8 <UART_Execute+0x250>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f7fc ffcf 	bl	80007a4 <__aeabi_ddiv>
 8003806:	4603      	mov	r3, r0
 8003808:	460c      	mov	r4, r1
 800380a:	4618      	mov	r0, r3
 800380c:	4621      	mov	r1, r4
 800380e:	f7fd f94f 	bl	8000ab0 <__aeabi_d2f>
 8003812:	4602      	mov	r2, r0
 8003814:	4b33      	ldr	r3, [pc, #204]	; (80038e4 <UART_Execute+0x28c>)
 8003816:	601a      	str	r2, [r3, #0]
			UART_Flow2();
 8003818:	f7ff fd00 	bl	800321c <UART_Flow2>
			break;
 800381c:	e03d      	b.n	800389a <UART_Execute+0x242>
		case 11:
			Speed = ( omega_est * 9.5493 );
 800381e:	4b3a      	ldr	r3, [pc, #232]	; (8003908 <UART_Execute+0x2b0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fc fe3c 	bl	80004a0 <__aeabi_f2d>
 8003828:	a321      	add	r3, pc, #132	; (adr r3, 80038b0 <UART_Execute+0x258>)
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f7fc fe8f 	bl	8000550 <__aeabi_dmul>
 8003832:	4603      	mov	r3, r0
 8003834:	460c      	mov	r4, r1
 8003836:	4618      	mov	r0, r3
 8003838:	4621      	mov	r1, r4
 800383a:	f7fd f939 	bl	8000ab0 <__aeabi_d2f>
 800383e:	4602      	mov	r2, r0
 8003840:	4b32      	ldr	r3, [pc, #200]	; (800390c <UART_Execute+0x2b4>)
 8003842:	601a      	str	r2, [r3, #0]
			if(Speed < 0) { Speed = 0 - Speed; }
 8003844:	4b31      	ldr	r3, [pc, #196]	; (800390c <UART_Execute+0x2b4>)
 8003846:	edd3 7a00 	vldr	s15, [r3]
 800384a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800384e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003852:	d509      	bpl.n	8003868 <UART_Execute+0x210>
 8003854:	4b2d      	ldr	r3, [pc, #180]	; (800390c <UART_Execute+0x2b4>)
 8003856:	edd3 7a00 	vldr	s15, [r3]
 800385a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003910 <UART_Execute+0x2b8>
 800385e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003862:	4b2a      	ldr	r3, [pc, #168]	; (800390c <UART_Execute+0x2b4>)
 8003864:	edc3 7a00 	vstr	s15, [r3]
			UART_Flow2();
 8003868:	f7ff fcd8 	bl	800321c <UART_Flow2>
			break;
 800386c:	e015      	b.n	800389a <UART_Execute+0x242>
		case 12:
			EndEff_Enable = 1;
 800386e:	4b29      	ldr	r3, [pc, #164]	; (8003914 <UART_Execute+0x2bc>)
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
			break;
 8003874:	e011      	b.n	800389a <UART_Execute+0x242>
		case 13:
			EndEff_Enable = 0;
 8003876:	4b27      	ldr	r3, [pc, #156]	; (8003914 <UART_Execute+0x2bc>)
 8003878:	2200      	movs	r2, #0
 800387a:	701a      	strb	r2, [r3, #0]
			break;
 800387c:	e00d      	b.n	800389a <UART_Execute+0x242>
		case 14:
			Home = 1;
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <UART_Execute+0x2c0>)
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]
			HomeMode = 1;
 8003884:	4b25      	ldr	r3, [pc, #148]	; (800391c <UART_Execute+0x2c4>)
 8003886:	2201      	movs	r2, #1
 8003888:	701a      	strb	r2, [r3, #0]
			HomeTimestamp = micros();
 800388a:	f7fe f8bf 	bl	8001a0c <micros>
 800388e:	4603      	mov	r3, r0
 8003890:	460c      	mov	r4, r1
 8003892:	4a23      	ldr	r2, [pc, #140]	; (8003920 <UART_Execute+0x2c8>)
 8003894:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8003898:	bf00      	nop
		case 15:
			break;
	}
	UART_Mode = 0;
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <UART_Execute+0x260>)
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
}
 80038a0:	bf00      	nop
 80038a2:	bd98      	pop	{r3, r4, r7, pc}
 80038a4:	f3af 8000 	nop.w
 80038a8:	00000000 	.word	0x00000000
 80038ac:	40bc2000 	.word	0x40bc2000
 80038b0:	d97f62b7 	.word	0xd97f62b7
 80038b4:	4023193d 	.word	0x4023193d
 80038b8:	20000212 	.word	0x20000212
 80038bc:	200001df 	.word	0x200001df
 80038c0:	200001f4 	.word	0x200001f4
 80038c4:	80808081 	.word	0x80808081
 80038c8:	200001e4 	.word	0x200001e4
 80038cc:	200001d2 	.word	0x200001d2
 80038d0:	200001e8 	.word	0x200001e8
 80038d4:	20000030 	.word	0x20000030
 80038d8:	461c4000 	.word	0x461c4000
 80038dc:	43340000 	.word	0x43340000
 80038e0:	2000018c 	.word	0x2000018c
 80038e4:	200001cc 	.word	0x200001cc
 80038e8:	200001c8 	.word	0x200001c8
 80038ec:	200001ec 	.word	0x200001ec
 80038f0:	20000034 	.word	0x20000034
 80038f4:	200001d1 	.word	0x200001d1
 80038f8:	20000200 	.word	0x20000200
 80038fc:	20000170 	.word	0x20000170
 8003900:	200001db 	.word	0x200001db
 8003904:	40768000 	.word	0x40768000
 8003908:	20000124 	.word	0x20000124
 800390c:	200001d4 	.word	0x200001d4
 8003910:	00000000 	.word	0x00000000
 8003914:	200001e0 	.word	0x200001e0
 8003918:	200001dc 	.word	0x200001dc
 800391c:	20000100 	.word	0x20000100
 8003920:	200000f0 	.word	0x200000f0

08003924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003928:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800392a:	e7fe      	b.n	800392a <Error_Handler+0x6>

0800392c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <HAL_MspInit+0x4c>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	4a0f      	ldr	r2, [pc, #60]	; (8003978 <HAL_MspInit+0x4c>)
 800393c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003940:	6453      	str	r3, [r2, #68]	; 0x44
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <HAL_MspInit+0x4c>)
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <HAL_MspInit+0x4c>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	4a08      	ldr	r2, [pc, #32]	; (8003978 <HAL_MspInit+0x4c>)
 8003958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395c:	6413      	str	r3, [r2, #64]	; 0x40
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_MspInit+0x4c>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800396a:	2007      	movs	r0, #7
 800396c:	f000 fc46 	bl	80041fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40023800 	.word	0x40023800

0800397c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	; 0x28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003984:	f107 0314 	add.w	r3, r7, #20
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <HAL_I2C_MspInit+0xa4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d13b      	bne.n	8003a16 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <HAL_I2C_MspInit+0xa8>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <HAL_I2C_MspInit+0xa8>)
 80039a8:	f043 0302 	orr.w	r3, r3, #2
 80039ac:	6313      	str	r3, [r2, #48]	; 0x30
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_I2C_MspInit+0xa8>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039ba:	23c0      	movs	r3, #192	; 0xc0
 80039bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039be:	2312      	movs	r3, #18
 80039c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039c2:	2301      	movs	r3, #1
 80039c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c6:	2303      	movs	r3, #3
 80039c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039ca:	2304      	movs	r3, #4
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	4619      	mov	r1, r3
 80039d4:	4814      	ldr	r0, [pc, #80]	; (8003a28 <HAL_I2C_MspInit+0xac>)
 80039d6:	f000 fff1 	bl	80049bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <HAL_I2C_MspInit+0xa8>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	4a10      	ldr	r2, [pc, #64]	; (8003a24 <HAL_I2C_MspInit+0xa8>)
 80039e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039e8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ea:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <HAL_I2C_MspInit+0xa8>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80039f6:	2200      	movs	r2, #0
 80039f8:	2100      	movs	r1, #0
 80039fa:	201f      	movs	r0, #31
 80039fc:	f000 fc09 	bl	8004212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003a00:	201f      	movs	r0, #31
 8003a02:	f000 fc22 	bl	800424a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2100      	movs	r1, #0
 8003a0a:	2020      	movs	r0, #32
 8003a0c:	f000 fc01 	bl	8004212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003a10:	2020      	movs	r0, #32
 8003a12:	f000 fc1a 	bl	800424a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a16:	bf00      	nop
 8003a18:	3728      	adds	r7, #40	; 0x28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40005400 	.word	0x40005400
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40020400 	.word	0x40020400

08003a2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	; 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a34:	f107 0314 	add.w	r3, r7, #20
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	60da      	str	r2, [r3, #12]
 8003a42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a19      	ldr	r2, [pc, #100]	; (8003ab0 <HAL_TIM_Encoder_MspInit+0x84>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d12c      	bne.n	8003aa8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	4a17      	ldr	r2, [pc, #92]	; (8003ab4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a5e:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	4a10      	ldr	r2, [pc, #64]	; (8003ab4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7a:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a94:	2300      	movs	r3, #0
 8003a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9c:	f107 0314 	add.w	r3, r7, #20
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4805      	ldr	r0, [pc, #20]	; (8003ab8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003aa4:	f000 ff8a 	bl	80049bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003aa8:	bf00      	nop
 8003aaa:	3728      	adds	r7, #40	; 0x28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40020000 	.word	0x40020000

08003abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003acc:	d116      	bne.n	8003afc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	4b1a      	ldr	r3, [pc, #104]	; (8003b3c <HAL_TIM_Base_MspInit+0x80>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	4a19      	ldr	r2, [pc, #100]	; (8003b3c <HAL_TIM_Base_MspInit+0x80>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ade:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <HAL_TIM_Base_MspInit+0x80>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003aea:	2200      	movs	r2, #0
 8003aec:	2100      	movs	r1, #0
 8003aee:	201c      	movs	r0, #28
 8003af0:	f000 fb8f 	bl	8004212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003af4:	201c      	movs	r0, #28
 8003af6:	f000 fba8 	bl	800424a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003afa:	e01a      	b.n	8003b32 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a0f      	ldr	r2, [pc, #60]	; (8003b40 <HAL_TIM_Base_MspInit+0x84>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d115      	bne.n	8003b32 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <HAL_TIM_Base_MspInit+0x80>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	4a0b      	ldr	r2, [pc, #44]	; (8003b3c <HAL_TIM_Base_MspInit+0x80>)
 8003b10:	f043 0304 	orr.w	r3, r3, #4
 8003b14:	6413      	str	r3, [r2, #64]	; 0x40
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <HAL_TIM_Base_MspInit+0x80>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b22:	2200      	movs	r2, #0
 8003b24:	2100      	movs	r1, #0
 8003b26:	201e      	movs	r0, #30
 8003b28:	f000 fb73 	bl	8004212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b2c:	201e      	movs	r0, #30
 8003b2e:	f000 fb8c 	bl	800424a <HAL_NVIC_EnableIRQ>
}
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40000800 	.word	0x40000800

08003b44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0b      	ldr	r2, [pc, #44]	; (8003b80 <HAL_TIM_PWM_MspInit+0x3c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d10d      	bne.n	8003b72 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <HAL_TIM_PWM_MspInit+0x40>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <HAL_TIM_PWM_MspInit+0x40>)
 8003b60:	f043 0302 	orr.w	r3, r3, #2
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <HAL_TIM_PWM_MspInit+0x40>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40023800 	.word	0x40023800

08003b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b90:	f107 030c 	add.w	r3, r7, #12
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <HAL_TIM_MspPostInit+0x68>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d11d      	bne.n	8003be6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <HAL_TIM_MspPostInit+0x6c>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	4a10      	ldr	r2, [pc, #64]	; (8003bf4 <HAL_TIM_MspPostInit+0x6c>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bba:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <HAL_TIM_MspPostInit+0x6c>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bc6:	23c0      	movs	r3, #192	; 0xc0
 8003bc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bda:	f107 030c 	add.w	r3, r7, #12
 8003bde:	4619      	mov	r1, r3
 8003be0:	4805      	ldr	r0, [pc, #20]	; (8003bf8 <HAL_TIM_MspPostInit+0x70>)
 8003be2:	f000 feeb 	bl	80049bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003be6:	bf00      	nop
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40020000 	.word	0x40020000

08003bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08a      	sub	sp, #40	; 0x28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c04:	f107 0314 	add.w	r3, r7, #20
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	609a      	str	r2, [r3, #8]
 8003c10:	60da      	str	r2, [r3, #12]
 8003c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a4c      	ldr	r2, [pc, #304]	; (8003d4c <HAL_UART_MspInit+0x150>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	f040 8091 	bne.w	8003d42 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	4b4a      	ldr	r3, [pc, #296]	; (8003d50 <HAL_UART_MspInit+0x154>)
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	4a49      	ldr	r2, [pc, #292]	; (8003d50 <HAL_UART_MspInit+0x154>)
 8003c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8003c30:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <HAL_UART_MspInit+0x154>)
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	4b43      	ldr	r3, [pc, #268]	; (8003d50 <HAL_UART_MspInit+0x154>)
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	4a42      	ldr	r2, [pc, #264]	; (8003d50 <HAL_UART_MspInit+0x154>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4c:	4b40      	ldr	r3, [pc, #256]	; (8003d50 <HAL_UART_MspInit+0x154>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c58:	230c      	movs	r3, #12
 8003c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c64:	2303      	movs	r3, #3
 8003c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c68:	2307      	movs	r3, #7
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	4619      	mov	r1, r3
 8003c72:	4838      	ldr	r0, [pc, #224]	; (8003d54 <HAL_UART_MspInit+0x158>)
 8003c74:	f000 fea2 	bl	80049bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003c78:	4b37      	ldr	r3, [pc, #220]	; (8003d58 <HAL_UART_MspInit+0x15c>)
 8003c7a:	4a38      	ldr	r2, [pc, #224]	; (8003d5c <HAL_UART_MspInit+0x160>)
 8003c7c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003c7e:	4b36      	ldr	r3, [pc, #216]	; (8003d58 <HAL_UART_MspInit+0x15c>)
 8003c80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c84:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c86:	4b34      	ldr	r3, [pc, #208]	; (8003d58 <HAL_UART_MspInit+0x15c>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c8c:	4b32      	ldr	r3, [pc, #200]	; (8003d58 <HAL_UART_MspInit+0x15c>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c92:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <HAL_UART_MspInit+0x15c>)
 8003c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c98:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c9a:	4b2f      	ldr	r3, [pc, #188]	; (8003d58 <HAL_UART_MspInit+0x15c>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ca0:	4b2d      	ldr	r3, [pc, #180]	; (8003d58 <HAL_UART_MspInit+0x15c>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003ca6:	4b2c      	ldr	r3, [pc, #176]	; (8003d58 <HAL_UART_MspInit+0x15c>)
 8003ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cae:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <HAL_UART_MspInit+0x15c>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cb4:	4b28      	ldr	r3, [pc, #160]	; (8003d58 <HAL_UART_MspInit+0x15c>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003cba:	4827      	ldr	r0, [pc, #156]	; (8003d58 <HAL_UART_MspInit+0x15c>)
 8003cbc:	f000 fae0 	bl	8004280 <HAL_DMA_Init>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003cc6:	f7ff fe2d 	bl	8003924 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a22      	ldr	r2, [pc, #136]	; (8003d58 <HAL_UART_MspInit+0x15c>)
 8003cce:	635a      	str	r2, [r3, #52]	; 0x34
 8003cd0:	4a21      	ldr	r2, [pc, #132]	; (8003d58 <HAL_UART_MspInit+0x15c>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003cd6:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <HAL_UART_MspInit+0x164>)
 8003cd8:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <HAL_UART_MspInit+0x168>)
 8003cda:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003cdc:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <HAL_UART_MspInit+0x164>)
 8003cde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ce2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ce4:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <HAL_UART_MspInit+0x164>)
 8003ce6:	2240      	movs	r2, #64	; 0x40
 8003ce8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cea:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <HAL_UART_MspInit+0x164>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_UART_MspInit+0x164>)
 8003cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cf6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cf8:	4b19      	ldr	r3, [pc, #100]	; (8003d60 <HAL_UART_MspInit+0x164>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cfe:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <HAL_UART_MspInit+0x164>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003d04:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <HAL_UART_MspInit+0x164>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <HAL_UART_MspInit+0x164>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d10:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <HAL_UART_MspInit+0x164>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003d16:	4812      	ldr	r0, [pc, #72]	; (8003d60 <HAL_UART_MspInit+0x164>)
 8003d18:	f000 fab2 	bl	8004280 <HAL_DMA_Init>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003d22:	f7ff fdff 	bl	8003924 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <HAL_UART_MspInit+0x164>)
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d2c:	4a0c      	ldr	r2, [pc, #48]	; (8003d60 <HAL_UART_MspInit+0x164>)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d32:	2200      	movs	r2, #0
 8003d34:	2100      	movs	r1, #0
 8003d36:	2026      	movs	r0, #38	; 0x26
 8003d38:	f000 fa6b 	bl	8004212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d3c:	2026      	movs	r0, #38	; 0x26
 8003d3e:	f000 fa84 	bl	800424a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d42:	bf00      	nop
 8003d44:	3728      	adds	r7, #40	; 0x28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40004400 	.word	0x40004400
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40020000 	.word	0x40020000
 8003d58:	20000238 	.word	0x20000238
 8003d5c:	40026088 	.word	0x40026088
 8003d60:	20000374 	.word	0x20000374
 8003d64:	400260a0 	.word	0x400260a0

08003d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d6c:	e7fe      	b.n	8003d6c <NMI_Handler+0x4>

08003d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d72:	e7fe      	b.n	8003d72 <HardFault_Handler+0x4>

08003d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d78:	e7fe      	b.n	8003d78 <MemManage_Handler+0x4>

08003d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d7e:	e7fe      	b.n	8003d7e <BusFault_Handler+0x4>

08003d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d84:	e7fe      	b.n	8003d84 <UsageFault_Handler+0x4>

08003d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d86:	b480      	push	{r7}
 8003d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003db4:	f000 f910 	bl	8003fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003dc0:	4802      	ldr	r0, [pc, #8]	; (8003dcc <DMA1_Stream5_IRQHandler+0x10>)
 8003dc2:	f000 fb85 	bl	80044d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000238 	.word	0x20000238

08003dd0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003dd4:	4802      	ldr	r0, [pc, #8]	; (8003de0 <DMA1_Stream6_IRQHandler+0x10>)
 8003dd6:	f000 fb7b 	bl	80044d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000374 	.word	0x20000374

08003de4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003de8:	4802      	ldr	r0, [pc, #8]	; (8003df4 <TIM2_IRQHandler+0x10>)
 8003dea:	f003 fc44 	bl	8007676 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000414 	.word	0x20000414

08003df8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003dfc:	4802      	ldr	r0, [pc, #8]	; (8003e08 <TIM4_IRQHandler+0x10>)
 8003dfe:	f003 fc3a 	bl	8007676 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000298 	.word	0x20000298

08003e0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003e10:	4802      	ldr	r0, [pc, #8]	; (8003e1c <I2C1_EV_IRQHandler+0x10>)
 8003e12:	f001 f97f 	bl	8005114 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200002dc 	.word	0x200002dc

08003e20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003e24:	4802      	ldr	r0, [pc, #8]	; (8003e30 <I2C1_ER_IRQHandler+0x10>)
 8003e26:	f001 fae2 	bl	80053ee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	200002dc 	.word	0x200002dc

08003e34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e38:	4802      	ldr	r0, [pc, #8]	; (8003e44 <USART2_IRQHandler+0x10>)
 8003e3a:	f004 fb53 	bl	80084e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000454 	.word	0x20000454

08003e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <_sbrk+0x5c>)
 8003e52:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <_sbrk+0x60>)
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e5c:	4b13      	ldr	r3, [pc, #76]	; (8003eac <_sbrk+0x64>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d102      	bne.n	8003e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e64:	4b11      	ldr	r3, [pc, #68]	; (8003eac <_sbrk+0x64>)
 8003e66:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <_sbrk+0x68>)
 8003e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <_sbrk+0x64>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4413      	add	r3, r2
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d207      	bcs.n	8003e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e78:	f005 f9e4 	bl	8009244 <__errno>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	230c      	movs	r3, #12
 8003e80:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e86:	e009      	b.n	8003e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e88:	4b08      	ldr	r3, [pc, #32]	; (8003eac <_sbrk+0x64>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e8e:	4b07      	ldr	r3, [pc, #28]	; (8003eac <_sbrk+0x64>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4413      	add	r3, r2
 8003e96:	4a05      	ldr	r2, [pc, #20]	; (8003eac <_sbrk+0x64>)
 8003e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20020000 	.word	0x20020000
 8003ea8:	00000400 	.word	0x00000400
 8003eac:	20000228 	.word	0x20000228
 8003eb0:	200004a0 	.word	0x200004a0

08003eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <SystemInit+0x28>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	4a07      	ldr	r2, [pc, #28]	; (8003edc <SystemInit+0x28>)
 8003ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <SystemInit+0x28>)
 8003eca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ece:	609a      	str	r2, [r3, #8]
#endif
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ee4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ee6:	e003      	b.n	8003ef0 <LoopCopyDataInit>

08003ee8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003eea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003eec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003eee:	3104      	adds	r1, #4

08003ef0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ef0:	480b      	ldr	r0, [pc, #44]	; (8003f20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ef4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ef6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ef8:	d3f6      	bcc.n	8003ee8 <CopyDataInit>
  ldr  r2, =_sbss
 8003efa:	4a0b      	ldr	r2, [pc, #44]	; (8003f28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003efc:	e002      	b.n	8003f04 <LoopFillZerobss>

08003efe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003efe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f00:	f842 3b04 	str.w	r3, [r2], #4

08003f04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f04:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f08:	d3f9      	bcc.n	8003efe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f0a:	f7ff ffd3 	bl	8003eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f0e:	f005 f99f 	bl	8009250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f12:	f7fd f8ad 	bl	8001070 <main>
  bx  lr    
 8003f16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f18:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003f1c:	0800a588 	.word	0x0800a588
  ldr  r0, =_sdata
 8003f20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f24:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8003f28:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 8003f2c:	2000049c 	.word	0x2000049c

08003f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f30:	e7fe      	b.n	8003f30 <ADC_IRQHandler>
	...

08003f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f38:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <HAL_Init+0x40>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a0d      	ldr	r2, [pc, #52]	; (8003f74 <HAL_Init+0x40>)
 8003f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_Init+0x40>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a0a      	ldr	r2, [pc, #40]	; (8003f74 <HAL_Init+0x40>)
 8003f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f50:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <HAL_Init+0x40>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <HAL_Init+0x40>)
 8003f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f5c:	2003      	movs	r0, #3
 8003f5e:	f000 f94d 	bl	80041fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f62:	2000      	movs	r0, #0
 8003f64:	f000 f808 	bl	8003f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f68:	f7ff fce0 	bl	800392c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40023c00 	.word	0x40023c00

08003f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f80:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <HAL_InitTick+0x54>)
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <HAL_InitTick+0x58>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 f965 	bl	8004266 <HAL_SYSTICK_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e00e      	b.n	8003fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d80a      	bhi.n	8003fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fac:	2200      	movs	r2, #0
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb4:	f000 f92d 	bl	8004212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fb8:	4a06      	ldr	r2, [pc, #24]	; (8003fd4 <HAL_InitTick+0x5c>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e000      	b.n	8003fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	2000004c 	.word	0x2000004c
 8003fd0:	20000054 	.word	0x20000054
 8003fd4:	20000050 	.word	0x20000050

08003fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_IncTick+0x20>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <HAL_IncTick+0x24>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <HAL_IncTick+0x24>)
 8003fea:	6013      	str	r3, [r2, #0]
}
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000054 	.word	0x20000054
 8003ffc:	20000494 	.word	0x20000494

08004000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return uwTick;
 8004004:	4b03      	ldr	r3, [pc, #12]	; (8004014 <HAL_GetTick+0x14>)
 8004006:	681b      	ldr	r3, [r3, #0]
}
 8004008:	4618      	mov	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000494 	.word	0x20000494

08004018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004020:	f7ff ffee 	bl	8004000 <HAL_GetTick>
 8004024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004030:	d005      	beq.n	800403e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_Delay+0x40>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800403e:	bf00      	nop
 8004040:	f7ff ffde 	bl	8004000 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	429a      	cmp	r2, r3
 800404e:	d8f7      	bhi.n	8004040 <HAL_Delay+0x28>
  {
  }
}
 8004050:	bf00      	nop
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000054 	.word	0x20000054

0800405c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <__NVIC_SetPriorityGrouping+0x44>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004078:	4013      	ands	r3, r2
 800407a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800408c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800408e:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	60d3      	str	r3, [r2, #12]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <__NVIC_GetPriorityGrouping+0x18>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	0a1b      	lsrs	r3, r3, #8
 80040ae:	f003 0307 	and.w	r3, r3, #7
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	db0b      	blt.n	80040ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	f003 021f 	and.w	r2, r3, #31
 80040d8:	4907      	ldr	r1, [pc, #28]	; (80040f8 <__NVIC_EnableIRQ+0x38>)
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2001      	movs	r0, #1
 80040e2:	fa00 f202 	lsl.w	r2, r0, r2
 80040e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	e000e100 	.word	0xe000e100

080040fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	6039      	str	r1, [r7, #0]
 8004106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410c:	2b00      	cmp	r3, #0
 800410e:	db0a      	blt.n	8004126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	b2da      	uxtb	r2, r3
 8004114:	490c      	ldr	r1, [pc, #48]	; (8004148 <__NVIC_SetPriority+0x4c>)
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	0112      	lsls	r2, r2, #4
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	440b      	add	r3, r1
 8004120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004124:	e00a      	b.n	800413c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	4908      	ldr	r1, [pc, #32]	; (800414c <__NVIC_SetPriority+0x50>)
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	3b04      	subs	r3, #4
 8004134:	0112      	lsls	r2, r2, #4
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	440b      	add	r3, r1
 800413a:	761a      	strb	r2, [r3, #24]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	e000e100 	.word	0xe000e100
 800414c:	e000ed00 	.word	0xe000ed00

08004150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004150:	b480      	push	{r7}
 8004152:	b089      	sub	sp, #36	; 0x24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f1c3 0307 	rsb	r3, r3, #7
 800416a:	2b04      	cmp	r3, #4
 800416c:	bf28      	it	cs
 800416e:	2304      	movcs	r3, #4
 8004170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3304      	adds	r3, #4
 8004176:	2b06      	cmp	r3, #6
 8004178:	d902      	bls.n	8004180 <NVIC_EncodePriority+0x30>
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3b03      	subs	r3, #3
 800417e:	e000      	b.n	8004182 <NVIC_EncodePriority+0x32>
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	401a      	ands	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004198:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	fa01 f303 	lsl.w	r3, r1, r3
 80041a2:	43d9      	mvns	r1, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a8:	4313      	orrs	r3, r2
         );
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3724      	adds	r7, #36	; 0x24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041c8:	d301      	bcc.n	80041ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041ca:	2301      	movs	r3, #1
 80041cc:	e00f      	b.n	80041ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ce:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <SysTick_Config+0x40>)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041d6:	210f      	movs	r1, #15
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041dc:	f7ff ff8e 	bl	80040fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041e0:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <SysTick_Config+0x40>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041e6:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <SysTick_Config+0x40>)
 80041e8:	2207      	movs	r2, #7
 80041ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	e000e010 	.word	0xe000e010

080041fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ff29 	bl	800405c <__NVIC_SetPriorityGrouping>
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004212:	b580      	push	{r7, lr}
 8004214:	b086      	sub	sp, #24
 8004216:	af00      	add	r7, sp, #0
 8004218:	4603      	mov	r3, r0
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004224:	f7ff ff3e 	bl	80040a4 <__NVIC_GetPriorityGrouping>
 8004228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	6978      	ldr	r0, [r7, #20]
 8004230:	f7ff ff8e 	bl	8004150 <NVIC_EncodePriority>
 8004234:	4602      	mov	r2, r0
 8004236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800423a:	4611      	mov	r1, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff ff5d 	bl	80040fc <__NVIC_SetPriority>
}
 8004242:	bf00      	nop
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	4603      	mov	r3, r0
 8004252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff ff31 	bl	80040c0 <__NVIC_EnableIRQ>
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff ffa2 	bl	80041b8 <SysTick_Config>
 8004274:	4603      	mov	r3, r0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800428c:	f7ff feb8 	bl	8004000 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e099      	b.n	80043d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0201 	bic.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042bc:	e00f      	b.n	80042de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042be:	f7ff fe9f 	bl	8004000 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b05      	cmp	r3, #5
 80042ca:	d908      	bls.n	80042de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2203      	movs	r2, #3
 80042d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e078      	b.n	80043d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e8      	bne.n	80042be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <HAL_DMA_Init+0x158>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800430a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004316:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004322:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	2b04      	cmp	r3, #4
 8004336:	d107      	bne.n	8004348 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	4313      	orrs	r3, r2
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f023 0307 	bic.w	r3, r3, #7
 800435e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	2b04      	cmp	r3, #4
 8004370:	d117      	bne.n	80043a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00e      	beq.n	80043a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fa9f 	bl	80048c8 <DMA_CheckFifoParam>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2240      	movs	r2, #64	; 0x40
 8004394:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800439e:	2301      	movs	r3, #1
 80043a0:	e016      	b.n	80043d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fa56 	bl	800485c <DMA_CalcBaseAndBitshift>
 80043b0:	4603      	mov	r3, r0
 80043b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b8:	223f      	movs	r2, #63	; 0x3f
 80043ba:	409a      	lsls	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	f010803f 	.word	0xf010803f

080043dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_DMA_Start_IT+0x26>
 80043fe:	2302      	movs	r3, #2
 8004400:	e040      	b.n	8004484 <HAL_DMA_Start_IT+0xa8>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	d12f      	bne.n	8004476 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2202      	movs	r2, #2
 800441a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f9e8 	bl	8004800 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	223f      	movs	r2, #63	; 0x3f
 8004436:	409a      	lsls	r2, r3
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0216 	orr.w	r2, r2, #22
 800444a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0208 	orr.w	r2, r2, #8
 8004462:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	e005      	b.n	8004482 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800447e:	2302      	movs	r3, #2
 8004480:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004482:	7dfb      	ldrb	r3, [r7, #23]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d004      	beq.n	80044aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2280      	movs	r2, #128	; 0x80
 80044a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e00c      	b.n	80044c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2205      	movs	r2, #5
 80044ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0201 	bic.w	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044dc:	4b92      	ldr	r3, [pc, #584]	; (8004728 <HAL_DMA_IRQHandler+0x258>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a92      	ldr	r2, [pc, #584]	; (800472c <HAL_DMA_IRQHandler+0x25c>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	0a9b      	lsrs	r3, r3, #10
 80044e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fa:	2208      	movs	r2, #8
 80044fc:	409a      	lsls	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4013      	ands	r3, r2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01a      	beq.n	800453c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d013      	beq.n	800453c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0204 	bic.w	r2, r2, #4
 8004522:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004528:	2208      	movs	r2, #8
 800452a:	409a      	lsls	r2, r3
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	f043 0201 	orr.w	r2, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004540:	2201      	movs	r2, #1
 8004542:	409a      	lsls	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d012      	beq.n	8004572 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00b      	beq.n	8004572 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455e:	2201      	movs	r2, #1
 8004560:	409a      	lsls	r2, r3
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456a:	f043 0202 	orr.w	r2, r3, #2
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004576:	2204      	movs	r2, #4
 8004578:	409a      	lsls	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d012      	beq.n	80045a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004594:	2204      	movs	r2, #4
 8004596:	409a      	lsls	r2, r3
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	f043 0204 	orr.w	r2, r3, #4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ac:	2210      	movs	r2, #16
 80045ae:	409a      	lsls	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d043      	beq.n	8004640 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d03c      	beq.n	8004640 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ca:	2210      	movs	r2, #16
 80045cc:	409a      	lsls	r2, r3
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d018      	beq.n	8004612 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d108      	bne.n	8004600 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d024      	beq.n	8004640 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	4798      	blx	r3
 80045fe:	e01f      	b.n	8004640 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01b      	beq.n	8004640 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4798      	blx	r3
 8004610:	e016      	b.n	8004640 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d107      	bne.n	8004630 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0208 	bic.w	r2, r2, #8
 800462e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004644:	2220      	movs	r2, #32
 8004646:	409a      	lsls	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4013      	ands	r3, r2
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 808e 	beq.w	800476e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 8086 	beq.w	800476e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004666:	2220      	movs	r2, #32
 8004668:	409a      	lsls	r2, r3
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b05      	cmp	r3, #5
 8004678:	d136      	bne.n	80046e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0216 	bic.w	r2, r2, #22
 8004688:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004698:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d103      	bne.n	80046aa <HAL_DMA_IRQHandler+0x1da>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0208 	bic.w	r2, r2, #8
 80046b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046be:	223f      	movs	r2, #63	; 0x3f
 80046c0:	409a      	lsls	r2, r3
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d07d      	beq.n	80047da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4798      	blx	r3
        }
        return;
 80046e6:	e078      	b.n	80047da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01c      	beq.n	8004730 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d108      	bne.n	8004716 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004708:	2b00      	cmp	r3, #0
 800470a:	d030      	beq.n	800476e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
 8004714:	e02b      	b.n	800476e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d027      	beq.n	800476e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
 8004726:	e022      	b.n	800476e <HAL_DMA_IRQHandler+0x29e>
 8004728:	2000004c 	.word	0x2000004c
 800472c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10f      	bne.n	800475e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0210 	bic.w	r2, r2, #16
 800474c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004772:	2b00      	cmp	r3, #0
 8004774:	d032      	beq.n	80047dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d022      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2205      	movs	r2, #5
 8004786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0201 	bic.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	3301      	adds	r3, #1
 800479e:	60bb      	str	r3, [r7, #8]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d307      	bcc.n	80047b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f2      	bne.n	800479a <HAL_DMA_IRQHandler+0x2ca>
 80047b4:	e000      	b.n	80047b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80047b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	4798      	blx	r3
 80047d8:	e000      	b.n	80047dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80047da:	bf00      	nop
    }
  }
}
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop

080047e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047f2:	b2db      	uxtb	r3, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800481c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b40      	cmp	r3, #64	; 0x40
 800482c:	d108      	bne.n	8004840 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800483e:	e007      	b.n	8004850 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	60da      	str	r2, [r3, #12]
}
 8004850:	bf00      	nop
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	3b10      	subs	r3, #16
 800486c:	4a14      	ldr	r2, [pc, #80]	; (80048c0 <DMA_CalcBaseAndBitshift+0x64>)
 800486e:	fba2 2303 	umull	r2, r3, r2, r3
 8004872:	091b      	lsrs	r3, r3, #4
 8004874:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004876:	4a13      	ldr	r2, [pc, #76]	; (80048c4 <DMA_CalcBaseAndBitshift+0x68>)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b03      	cmp	r3, #3
 8004888:	d909      	bls.n	800489e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004892:	f023 0303 	bic.w	r3, r3, #3
 8004896:	1d1a      	adds	r2, r3, #4
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	659a      	str	r2, [r3, #88]	; 0x58
 800489c:	e007      	b.n	80048ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048a6:	f023 0303 	bic.w	r3, r3, #3
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	aaaaaaab 	.word	0xaaaaaaab
 80048c4:	0800a528 	.word	0x0800a528

080048c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d11f      	bne.n	8004922 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d855      	bhi.n	8004994 <DMA_CheckFifoParam+0xcc>
 80048e8:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <DMA_CheckFifoParam+0x28>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004901 	.word	0x08004901
 80048f4:	08004913 	.word	0x08004913
 80048f8:	08004901 	.word	0x08004901
 80048fc:	08004995 	.word	0x08004995
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d045      	beq.n	8004998 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004910:	e042      	b.n	8004998 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800491a:	d13f      	bne.n	800499c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004920:	e03c      	b.n	800499c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492a:	d121      	bne.n	8004970 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b03      	cmp	r3, #3
 8004930:	d836      	bhi.n	80049a0 <DMA_CheckFifoParam+0xd8>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <DMA_CheckFifoParam+0x70>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	08004949 	.word	0x08004949
 800493c:	0800494f 	.word	0x0800494f
 8004940:	08004949 	.word	0x08004949
 8004944:	08004961 	.word	0x08004961
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
      break;
 800494c:	e02f      	b.n	80049ae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d024      	beq.n	80049a4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800495e:	e021      	b.n	80049a4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004968:	d11e      	bne.n	80049a8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800496e:	e01b      	b.n	80049a8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d902      	bls.n	800497c <DMA_CheckFifoParam+0xb4>
 8004976:	2b03      	cmp	r3, #3
 8004978:	d003      	beq.n	8004982 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800497a:	e018      	b.n	80049ae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
      break;
 8004980:	e015      	b.n	80049ae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00e      	beq.n	80049ac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	73fb      	strb	r3, [r7, #15]
      break;
 8004992:	e00b      	b.n	80049ac <DMA_CheckFifoParam+0xe4>
      break;
 8004994:	bf00      	nop
 8004996:	e00a      	b.n	80049ae <DMA_CheckFifoParam+0xe6>
      break;
 8004998:	bf00      	nop
 800499a:	e008      	b.n	80049ae <DMA_CheckFifoParam+0xe6>
      break;
 800499c:	bf00      	nop
 800499e:	e006      	b.n	80049ae <DMA_CheckFifoParam+0xe6>
      break;
 80049a0:	bf00      	nop
 80049a2:	e004      	b.n	80049ae <DMA_CheckFifoParam+0xe6>
      break;
 80049a4:	bf00      	nop
 80049a6:	e002      	b.n	80049ae <DMA_CheckFifoParam+0xe6>
      break;   
 80049a8:	bf00      	nop
 80049aa:	e000      	b.n	80049ae <DMA_CheckFifoParam+0xe6>
      break;
 80049ac:	bf00      	nop
    }
  } 
  
  return status; 
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049bc:	b480      	push	{r7}
 80049be:	b089      	sub	sp, #36	; 0x24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049d2:	2300      	movs	r3, #0
 80049d4:	61fb      	str	r3, [r7, #28]
 80049d6:	e159      	b.n	8004c8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049d8:	2201      	movs	r2, #1
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4013      	ands	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	f040 8148 	bne.w	8004c86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d00b      	beq.n	8004a16 <HAL_GPIO_Init+0x5a>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d007      	beq.n	8004a16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a0a:	2b11      	cmp	r3, #17
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b12      	cmp	r3, #18
 8004a14:	d130      	bne.n	8004a78 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	2203      	movs	r2, #3
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	43db      	mvns	r3, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	f003 0201 	and.w	r2, r3, #1
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	2203      	movs	r2, #3
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d003      	beq.n	8004ab8 <HAL_GPIO_Init+0xfc>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	2b12      	cmp	r3, #18
 8004ab6:	d123      	bne.n	8004b00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	08da      	lsrs	r2, r3, #3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3208      	adds	r2, #8
 8004ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	220f      	movs	r2, #15
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	08da      	lsrs	r2, r3, #3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3208      	adds	r2, #8
 8004afa:	69b9      	ldr	r1, [r7, #24]
 8004afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4013      	ands	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 0203 	and.w	r2, r3, #3
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 80a2 	beq.w	8004c86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	4b56      	ldr	r3, [pc, #344]	; (8004ca0 <HAL_GPIO_Init+0x2e4>)
 8004b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4a:	4a55      	ldr	r2, [pc, #340]	; (8004ca0 <HAL_GPIO_Init+0x2e4>)
 8004b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b50:	6453      	str	r3, [r2, #68]	; 0x44
 8004b52:	4b53      	ldr	r3, [pc, #332]	; (8004ca0 <HAL_GPIO_Init+0x2e4>)
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b5e:	4a51      	ldr	r2, [pc, #324]	; (8004ca4 <HAL_GPIO_Init+0x2e8>)
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	089b      	lsrs	r3, r3, #2
 8004b64:	3302      	adds	r3, #2
 8004b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	220f      	movs	r2, #15
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a48      	ldr	r2, [pc, #288]	; (8004ca8 <HAL_GPIO_Init+0x2ec>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d019      	beq.n	8004bbe <HAL_GPIO_Init+0x202>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a47      	ldr	r2, [pc, #284]	; (8004cac <HAL_GPIO_Init+0x2f0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d013      	beq.n	8004bba <HAL_GPIO_Init+0x1fe>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a46      	ldr	r2, [pc, #280]	; (8004cb0 <HAL_GPIO_Init+0x2f4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00d      	beq.n	8004bb6 <HAL_GPIO_Init+0x1fa>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a45      	ldr	r2, [pc, #276]	; (8004cb4 <HAL_GPIO_Init+0x2f8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d007      	beq.n	8004bb2 <HAL_GPIO_Init+0x1f6>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a44      	ldr	r2, [pc, #272]	; (8004cb8 <HAL_GPIO_Init+0x2fc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d101      	bne.n	8004bae <HAL_GPIO_Init+0x1f2>
 8004baa:	2304      	movs	r3, #4
 8004bac:	e008      	b.n	8004bc0 <HAL_GPIO_Init+0x204>
 8004bae:	2307      	movs	r3, #7
 8004bb0:	e006      	b.n	8004bc0 <HAL_GPIO_Init+0x204>
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e004      	b.n	8004bc0 <HAL_GPIO_Init+0x204>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e002      	b.n	8004bc0 <HAL_GPIO_Init+0x204>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <HAL_GPIO_Init+0x204>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	f002 0203 	and.w	r2, r2, #3
 8004bc6:	0092      	lsls	r2, r2, #2
 8004bc8:	4093      	lsls	r3, r2
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bd0:	4934      	ldr	r1, [pc, #208]	; (8004ca4 <HAL_GPIO_Init+0x2e8>)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	089b      	lsrs	r3, r3, #2
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bde:	4b37      	ldr	r3, [pc, #220]	; (8004cbc <HAL_GPIO_Init+0x300>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	43db      	mvns	r3, r3
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	4013      	ands	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c02:	4a2e      	ldr	r2, [pc, #184]	; (8004cbc <HAL_GPIO_Init+0x300>)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c08:	4b2c      	ldr	r3, [pc, #176]	; (8004cbc <HAL_GPIO_Init+0x300>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c2c:	4a23      	ldr	r2, [pc, #140]	; (8004cbc <HAL_GPIO_Init+0x300>)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c32:	4b22      	ldr	r3, [pc, #136]	; (8004cbc <HAL_GPIO_Init+0x300>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c56:	4a19      	ldr	r2, [pc, #100]	; (8004cbc <HAL_GPIO_Init+0x300>)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c5c:	4b17      	ldr	r3, [pc, #92]	; (8004cbc <HAL_GPIO_Init+0x300>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	43db      	mvns	r3, r3
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c80:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <HAL_GPIO_Init+0x300>)
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	2b0f      	cmp	r3, #15
 8004c90:	f67f aea2 	bls.w	80049d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c94:	bf00      	nop
 8004c96:	3724      	adds	r7, #36	; 0x24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	40013800 	.word	0x40013800
 8004ca8:	40020000 	.word	0x40020000
 8004cac:	40020400 	.word	0x40020400
 8004cb0:	40020800 	.word	0x40020800
 8004cb4:	40020c00 	.word	0x40020c00
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	40013c00 	.word	0x40013c00

08004cc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	887b      	ldrh	r3, [r7, #2]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	73fb      	strb	r3, [r7, #15]
 8004cdc:	e001      	b.n	8004ce2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	807b      	strh	r3, [r7, #2]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d00:	787b      	ldrb	r3, [r7, #1]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d06:	887a      	ldrh	r2, [r7, #2]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d0c:	e003      	b.n	8004d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d0e:	887b      	ldrh	r3, [r7, #2]
 8004d10:	041a      	lsls	r2, r3, #16
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	619a      	str	r2, [r3, #24]
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695a      	ldr	r2, [r3, #20]
 8004d32:	887b      	ldrh	r3, [r7, #2]
 8004d34:	401a      	ands	r2, r3
 8004d36:	887b      	ldrh	r3, [r7, #2]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d104      	bne.n	8004d46 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d3c:	887b      	ldrh	r3, [r7, #2]
 8004d3e:	041a      	lsls	r2, r3, #16
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004d44:	e002      	b.n	8004d4c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004d46:	887a      	ldrh	r2, [r7, #2]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	619a      	str	r2, [r3, #24]
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e11f      	b.n	8004faa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fe fdfc 	bl	800397c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2224      	movs	r2, #36	; 0x24
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0201 	bic.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004daa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004dbc:	f002 fa9a 	bl	80072f4 <HAL_RCC_GetPCLK1Freq>
 8004dc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	4a7b      	ldr	r2, [pc, #492]	; (8004fb4 <HAL_I2C_Init+0x25c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d807      	bhi.n	8004ddc <HAL_I2C_Init+0x84>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4a7a      	ldr	r2, [pc, #488]	; (8004fb8 <HAL_I2C_Init+0x260>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	bf94      	ite	ls
 8004dd4:	2301      	movls	r3, #1
 8004dd6:	2300      	movhi	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e006      	b.n	8004dea <HAL_I2C_Init+0x92>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4a77      	ldr	r2, [pc, #476]	; (8004fbc <HAL_I2C_Init+0x264>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	bf94      	ite	ls
 8004de4:	2301      	movls	r3, #1
 8004de6:	2300      	movhi	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e0db      	b.n	8004faa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4a72      	ldr	r2, [pc, #456]	; (8004fc0 <HAL_I2C_Init+0x268>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	0c9b      	lsrs	r3, r3, #18
 8004dfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4a64      	ldr	r2, [pc, #400]	; (8004fb4 <HAL_I2C_Init+0x25c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d802      	bhi.n	8004e2c <HAL_I2C_Init+0xd4>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	e009      	b.n	8004e40 <HAL_I2C_Init+0xe8>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	4a63      	ldr	r2, [pc, #396]	; (8004fc4 <HAL_I2C_Init+0x26c>)
 8004e38:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3c:	099b      	lsrs	r3, r3, #6
 8004e3e:	3301      	adds	r3, #1
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	430b      	orrs	r3, r1
 8004e46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	4956      	ldr	r1, [pc, #344]	; (8004fb4 <HAL_I2C_Init+0x25c>)
 8004e5c:	428b      	cmp	r3, r1
 8004e5e:	d80d      	bhi.n	8004e7c <HAL_I2C_Init+0x124>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	1e59      	subs	r1, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e6e:	3301      	adds	r3, #1
 8004e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	bf38      	it	cc
 8004e78:	2304      	movcc	r3, #4
 8004e7a:	e04f      	b.n	8004f1c <HAL_I2C_Init+0x1c4>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d111      	bne.n	8004ea8 <HAL_I2C_Init+0x150>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1e58      	subs	r0, r3, #1
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6859      	ldr	r1, [r3, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	440b      	add	r3, r1
 8004e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e96:	3301      	adds	r3, #1
 8004e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	bf0c      	ite	eq
 8004ea0:	2301      	moveq	r3, #1
 8004ea2:	2300      	movne	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	e012      	b.n	8004ece <HAL_I2C_Init+0x176>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	1e58      	subs	r0, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6859      	ldr	r1, [r3, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	0099      	lsls	r1, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2301      	moveq	r3, #1
 8004eca:	2300      	movne	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_I2C_Init+0x17e>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e022      	b.n	8004f1c <HAL_I2C_Init+0x1c4>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10e      	bne.n	8004efc <HAL_I2C_Init+0x1a4>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1e58      	subs	r0, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6859      	ldr	r1, [r3, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	440b      	add	r3, r1
 8004eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004efa:	e00f      	b.n	8004f1c <HAL_I2C_Init+0x1c4>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	1e58      	subs	r0, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6859      	ldr	r1, [r3, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	0099      	lsls	r1, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f12:	3301      	adds	r3, #1
 8004f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	6809      	ldr	r1, [r1, #0]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	69da      	ldr	r2, [r3, #28]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6911      	ldr	r1, [r2, #16]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	68d2      	ldr	r2, [r2, #12]
 8004f56:	4311      	orrs	r1, r2
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695a      	ldr	r2, [r3, #20]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	000186a0 	.word	0x000186a0
 8004fb8:	001e847f 	.word	0x001e847f
 8004fbc:	003d08ff 	.word	0x003d08ff
 8004fc0:	431bde83 	.word	0x431bde83
 8004fc4:	10624dd3 	.word	0x10624dd3

08004fc8 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	607a      	str	r2, [r7, #4]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	817b      	strh	r3, [r7, #10]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	f040 8085 	bne.w	80050f8 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fee:	4b46      	ldr	r3, [pc, #280]	; (8005108 <HAL_I2C_Master_Transmit_IT+0x140>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	08db      	lsrs	r3, r3, #3
 8004ff4:	4a45      	ldr	r2, [pc, #276]	; (800510c <HAL_I2C_Master_Transmit_IT+0x144>)
 8004ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffa:	0a1a      	lsrs	r2, r3, #8
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009a      	lsls	r2, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	3b01      	subs	r3, #1
 800500c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d116      	bne.n	8005042 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	f043 0220 	orr.w	r2, r3, #32
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e05b      	b.n	80050fa <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b02      	cmp	r3, #2
 800504e:	d0db      	beq.n	8005008 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_I2C_Master_Transmit_IT+0x96>
 800505a:	2302      	movs	r3, #2
 800505c:	e04d      	b.n	80050fa <HAL_I2C_Master_Transmit_IT+0x132>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b01      	cmp	r3, #1
 8005072:	d007      	beq.n	8005084 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005092:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2221      	movs	r2, #33	; 0x21
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2210      	movs	r2, #16
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	893a      	ldrh	r2, [r7, #8]
 80050b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4a13      	ldr	r2, [pc, #76]	; (8005110 <HAL_I2C_Master_Transmit_IT+0x148>)
 80050c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80050c6:	897a      	ldrh	r2, [r7, #10]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050da:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80050f2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	e000      	b.n	80050fa <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80050f8:	2302      	movs	r3, #2
  }
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	2000004c 	.word	0x2000004c
 800510c:	14f8b589 	.word	0x14f8b589
 8005110:	ffff0000 	.word	0xffff0000

08005114 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005134:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b10      	cmp	r3, #16
 8005142:	d003      	beq.n	800514c <HAL_I2C_EV_IRQHandler+0x38>
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	f040 80bd 	bne.w	80052c6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10d      	bne.n	8005182 <HAL_I2C_EV_IRQHandler+0x6e>
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800516c:	d003      	beq.n	8005176 <HAL_I2C_EV_IRQHandler+0x62>
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005174:	d101      	bne.n	800517a <HAL_I2C_EV_IRQHandler+0x66>
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <HAL_I2C_EV_IRQHandler+0x68>
 800517a:	2300      	movs	r3, #0
 800517c:	2b01      	cmp	r3, #1
 800517e:	f000 812e 	beq.w	80053de <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00c      	beq.n	80051a6 <HAL_I2C_EV_IRQHandler+0x92>
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	0a5b      	lsrs	r3, r3, #9
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d006      	beq.n	80051a6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 fc55 	bl	8006a48 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fd62 	bl	8005c68 <I2C_Master_SB>
 80051a4:	e08e      	b.n	80052c4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	08db      	lsrs	r3, r3, #3
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d009      	beq.n	80051c6 <HAL_I2C_EV_IRQHandler+0xb2>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	0a5b      	lsrs	r3, r3, #9
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fdd8 	bl	8005d74 <I2C_Master_ADD10>
 80051c4:	e07e      	b.n	80052c4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <HAL_I2C_EV_IRQHandler+0xd2>
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	0a5b      	lsrs	r3, r3, #9
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fdf2 	bl	8005dc8 <I2C_Master_ADDR>
 80051e4:	e06e      	b.n	80052c4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d037      	beq.n	8005262 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005200:	f000 80ef 	beq.w	80053e2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	09db      	lsrs	r3, r3, #7
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00f      	beq.n	8005230 <HAL_I2C_EV_IRQHandler+0x11c>
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	0a9b      	lsrs	r3, r3, #10
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d009      	beq.n	8005230 <HAL_I2C_EV_IRQHandler+0x11c>
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	089b      	lsrs	r3, r3, #2
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d103      	bne.n	8005230 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f9ef 	bl	800560c <I2C_MasterTransmit_TXE>
 800522e:	e049      	b.n	80052c4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	089b      	lsrs	r3, r3, #2
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 80d2 	beq.w	80053e2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	0a5b      	lsrs	r3, r3, #9
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 80cb 	beq.w	80053e2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	2b10      	cmp	r3, #16
 8005250:	d103      	bne.n	800525a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fa76 	bl	8005744 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005258:	e0c3      	b.n	80053e2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fada 	bl	8005814 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005260:	e0bf      	b.n	80053e2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800526c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005270:	f000 80b7 	beq.w	80053e2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	099b      	lsrs	r3, r3, #6
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00f      	beq.n	80052a0 <HAL_I2C_EV_IRQHandler+0x18c>
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	0a9b      	lsrs	r3, r3, #10
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <HAL_I2C_EV_IRQHandler+0x18c>
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	089b      	lsrs	r3, r3, #2
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d103      	bne.n	80052a0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fb4a 	bl	8005932 <I2C_MasterReceive_RXNE>
 800529e:	e011      	b.n	80052c4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	089b      	lsrs	r3, r3, #2
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 809a 	beq.w	80053e2 <HAL_I2C_EV_IRQHandler+0x2ce>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	0a5b      	lsrs	r3, r3, #9
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 8093 	beq.w	80053e2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fbe9 	bl	8005a94 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052c2:	e08e      	b.n	80053e2 <HAL_I2C_EV_IRQHandler+0x2ce>
 80052c4:	e08d      	b.n	80053e2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d004      	beq.n	80052d8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	e007      	b.n	80052e8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	085b      	lsrs	r3, r3, #1
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d012      	beq.n	800531a <HAL_I2C_EV_IRQHandler+0x206>
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	0a5b      	lsrs	r3, r3, #9
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00c      	beq.n	800531a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005310:	69b9      	ldr	r1, [r7, #24]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 ffa7 	bl	8006266 <I2C_Slave_ADDR>
 8005318:	e066      	b.n	80053e8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	091b      	lsrs	r3, r3, #4
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <HAL_I2C_EV_IRQHandler+0x226>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	0a5b      	lsrs	r3, r3, #9
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 ffdc 	bl	80062f0 <I2C_Slave_STOPF>
 8005338:	e056      	b.n	80053e8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800533a:	7bbb      	ldrb	r3, [r7, #14]
 800533c:	2b21      	cmp	r3, #33	; 0x21
 800533e:	d002      	beq.n	8005346 <HAL_I2C_EV_IRQHandler+0x232>
 8005340:	7bbb      	ldrb	r3, [r7, #14]
 8005342:	2b29      	cmp	r3, #41	; 0x29
 8005344:	d125      	bne.n	8005392 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	09db      	lsrs	r3, r3, #7
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00f      	beq.n	8005372 <HAL_I2C_EV_IRQHandler+0x25e>
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	0a9b      	lsrs	r3, r3, #10
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <HAL_I2C_EV_IRQHandler+0x25e>
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	089b      	lsrs	r3, r3, #2
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d103      	bne.n	8005372 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 febd 	bl	80060ea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005370:	e039      	b.n	80053e6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	089b      	lsrs	r3, r3, #2
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d033      	beq.n	80053e6 <HAL_I2C_EV_IRQHandler+0x2d2>
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	0a5b      	lsrs	r3, r3, #9
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d02d      	beq.n	80053e6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 feea 	bl	8006164 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005390:	e029      	b.n	80053e6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	099b      	lsrs	r3, r3, #6
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00f      	beq.n	80053be <HAL_I2C_EV_IRQHandler+0x2aa>
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	0a9b      	lsrs	r3, r3, #10
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d009      	beq.n	80053be <HAL_I2C_EV_IRQHandler+0x2aa>
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	089b      	lsrs	r3, r3, #2
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d103      	bne.n	80053be <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fef5 	bl	80061a6 <I2C_SlaveReceive_RXNE>
 80053bc:	e014      	b.n	80053e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	089b      	lsrs	r3, r3, #2
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00e      	beq.n	80053e8 <HAL_I2C_EV_IRQHandler+0x2d4>
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	0a5b      	lsrs	r3, r3, #9
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 ff23 	bl	8006222 <I2C_SlaveReceive_BTF>
 80053dc:	e004      	b.n	80053e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80053de:	bf00      	nop
 80053e0:	e002      	b.n	80053e8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053e2:	bf00      	nop
 80053e4:	e000      	b.n	80053e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053e6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80053e8:	3720      	adds	r7, #32
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b08a      	sub	sp, #40	; 0x28
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005406:	2300      	movs	r3, #0
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005410:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	0a1b      	lsrs	r3, r3, #8
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00e      	beq.n	800543c <HAL_I2C_ER_IRQHandler+0x4e>
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	0a1b      	lsrs	r3, r3, #8
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d008      	beq.n	800543c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	f043 0301 	orr.w	r3, r3, #1
 8005430:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800543a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	0a5b      	lsrs	r3, r3, #9
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00e      	beq.n	8005466 <HAL_I2C_ER_IRQHandler+0x78>
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	0a1b      	lsrs	r3, r3, #8
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	f043 0302 	orr.w	r3, r3, #2
 800545a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005464:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	0a9b      	lsrs	r3, r3, #10
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d03f      	beq.n	80054f2 <HAL_I2C_ER_IRQHandler+0x104>
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	0a1b      	lsrs	r3, r3, #8
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d039      	beq.n	80054f2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800547e:	7efb      	ldrb	r3, [r7, #27]
 8005480:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005490:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005498:	7ebb      	ldrb	r3, [r7, #26]
 800549a:	2b20      	cmp	r3, #32
 800549c:	d112      	bne.n	80054c4 <HAL_I2C_ER_IRQHandler+0xd6>
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10f      	bne.n	80054c4 <HAL_I2C_ER_IRQHandler+0xd6>
 80054a4:	7cfb      	ldrb	r3, [r7, #19]
 80054a6:	2b21      	cmp	r3, #33	; 0x21
 80054a8:	d008      	beq.n	80054bc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80054aa:	7cfb      	ldrb	r3, [r7, #19]
 80054ac:	2b29      	cmp	r3, #41	; 0x29
 80054ae:	d005      	beq.n	80054bc <HAL_I2C_ER_IRQHandler+0xce>
 80054b0:	7cfb      	ldrb	r3, [r7, #19]
 80054b2:	2b28      	cmp	r3, #40	; 0x28
 80054b4:	d106      	bne.n	80054c4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b21      	cmp	r3, #33	; 0x21
 80054ba:	d103      	bne.n	80054c4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f001 f847 	bl	8006550 <I2C_Slave_AF>
 80054c2:	e016      	b.n	80054f2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054cc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	f043 0304 	orr.w	r3, r3, #4
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80054d6:	7efb      	ldrb	r3, [r7, #27]
 80054d8:	2b10      	cmp	r3, #16
 80054da:	d002      	beq.n	80054e2 <HAL_I2C_ER_IRQHandler+0xf4>
 80054dc:	7efb      	ldrb	r3, [r7, #27]
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d107      	bne.n	80054f2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	0adb      	lsrs	r3, r3, #11
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00e      	beq.n	800551c <HAL_I2C_ER_IRQHandler+0x12e>
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	0a1b      	lsrs	r3, r3, #8
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d008      	beq.n	800551c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	f043 0308 	orr.w	r3, r3, #8
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800551a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	2b00      	cmp	r3, #0
 8005520:	d008      	beq.n	8005534 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f001 f87e 	bl	8006630 <I2C_ITError>
  }
}
 8005534:	bf00      	nop
 8005536:	3728      	adds	r7, #40	; 0x28
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	70fb      	strb	r3, [r7, #3]
 8005598:	4613      	mov	r3, r2
 800559a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005622:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562e:	2b00      	cmp	r3, #0
 8005630:	d150      	bne.n	80056d4 <I2C_MasterTransmit_TXE+0xc8>
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	2b21      	cmp	r3, #33	; 0x21
 8005636:	d14d      	bne.n	80056d4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b08      	cmp	r3, #8
 800563c:	d01d      	beq.n	800567a <I2C_MasterTransmit_TXE+0x6e>
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b20      	cmp	r3, #32
 8005642:	d01a      	beq.n	800567a <I2C_MasterTransmit_TXE+0x6e>
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800564a:	d016      	beq.n	800567a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800565a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2211      	movs	r2, #17
 8005660:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff ff62 	bl	800553c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005678:	e060      	b.n	800573c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005688:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005698:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b40      	cmp	r3, #64	; 0x40
 80056b2:	d107      	bne.n	80056c4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff ff7d 	bl	80055bc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056c2:	e03b      	b.n	800573c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7ff ff35 	bl	800553c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056d2:	e033      	b.n	800573c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	2b21      	cmp	r3, #33	; 0x21
 80056d8:	d005      	beq.n	80056e6 <I2C_MasterTransmit_TXE+0xda>
 80056da:	7bbb      	ldrb	r3, [r7, #14]
 80056dc:	2b40      	cmp	r3, #64	; 0x40
 80056de:	d12d      	bne.n	800573c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	2b22      	cmp	r3, #34	; 0x22
 80056e4:	d12a      	bne.n	800573c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d108      	bne.n	8005702 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005700:	e01c      	b.n	800573c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b40      	cmp	r3, #64	; 0x40
 800570c:	d103      	bne.n	8005716 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f880 	bl	8005814 <I2C_MemoryTransmit_TXE_BTF>
}
 8005714:	e012      	b.n	800573c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	781a      	ldrb	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800573a:	e7ff      	b.n	800573c <I2C_MasterTransmit_TXE+0x130>
 800573c:	bf00      	nop
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b21      	cmp	r3, #33	; 0x21
 800575c:	d156      	bne.n	800580c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d012      	beq.n	800578e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800578c:	e03e      	b.n	800580c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b08      	cmp	r3, #8
 8005792:	d01d      	beq.n	80057d0 <I2C_MasterTransmit_BTF+0x8c>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b20      	cmp	r3, #32
 8005798:	d01a      	beq.n	80057d0 <I2C_MasterTransmit_BTF+0x8c>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057a0:	d016      	beq.n	80057d0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057b0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2211      	movs	r2, #17
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff feb7 	bl	800553c <HAL_I2C_MasterTxCpltCallback>
}
 80057ce:	e01d      	b.n	800580c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7ff fe98 	bl	800553c <HAL_I2C_MasterTxCpltCallback>
}
 800580c:	bf00      	nop
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005822:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005828:	2b00      	cmp	r3, #0
 800582a:	d11d      	bne.n	8005868 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005830:	2b01      	cmp	r3, #1
 8005832:	d10b      	bne.n	800584c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005838:	b2da      	uxtb	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005844:	1c9a      	adds	r2, r3, #2
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800584a:	e06e      	b.n	800592a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005850:	b29b      	uxth	r3, r3
 8005852:	121b      	asrs	r3, r3, #8
 8005854:	b2da      	uxtb	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005866:	e060      	b.n	800592a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586c:	2b01      	cmp	r3, #1
 800586e:	d10b      	bne.n	8005888 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005874:	b2da      	uxtb	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005886:	e050      	b.n	800592a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588c:	2b02      	cmp	r3, #2
 800588e:	d14c      	bne.n	800592a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005890:	7bfb      	ldrb	r3, [r7, #15]
 8005892:	2b22      	cmp	r3, #34	; 0x22
 8005894:	d108      	bne.n	80058a8 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058a4:	601a      	str	r2, [r3, #0]
}
 80058a6:	e040      	b.n	800592a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d015      	beq.n	80058de <I2C_MemoryTransmit_TXE_BTF+0xca>
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	2b21      	cmp	r3, #33	; 0x21
 80058b6:	d112      	bne.n	80058de <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	781a      	ldrb	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058dc:	e025      	b.n	800592a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d120      	bne.n	800592a <I2C_MemoryTransmit_TXE_BTF+0x116>
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b21      	cmp	r3, #33	; 0x21
 80058ec:	d11d      	bne.n	800592a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058fc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff fe49 	bl	80055bc <HAL_I2C_MemTxCpltCallback>
}
 800592a:	bf00      	nop
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b22      	cmp	r3, #34	; 0x22
 8005944:	f040 80a2 	bne.w	8005a8c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594c:	b29b      	uxth	r3, r3
 800594e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b03      	cmp	r3, #3
 8005954:	d921      	bls.n	800599a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b03      	cmp	r3, #3
 8005984:	f040 8082 	bne.w	8005a8c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005996:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005998:	e078      	b.n	8005a8c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d074      	beq.n	8005a8c <I2C_MasterReceive_RXNE+0x15a>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d002      	beq.n	80059ae <I2C_MasterReceive_RXNE+0x7c>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d16e      	bne.n	8005a8c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f001 f818 	bl	80069e4 <I2C_WaitOnSTOPRequestThroughIT>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d142      	bne.n	8005a40 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059d8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b40      	cmp	r3, #64	; 0x40
 8005a12:	d10a      	bne.n	8005a2a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff fdd4 	bl	80055d0 <HAL_I2C_MemRxCpltCallback>
}
 8005a28:	e030      	b.n	8005a8c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2212      	movs	r2, #18
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fd89 	bl	8005550 <HAL_I2C_MasterRxCpltCallback>
}
 8005a3e:	e025      	b.n	8005a8c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a4e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff fdac 	bl	80055e4 <HAL_I2C_ErrorCallback>
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d11b      	bne.n	8005ae4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aba:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005ae2:	e0bd      	b.n	8005c60 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d129      	bne.n	8005b42 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005afc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d00a      	beq.n	8005b1a <I2C_MasterReceive_BTF+0x86>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d007      	beq.n	8005b1a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b18:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b40:	e08e      	b.n	8005c60 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d176      	bne.n	8005c3a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d002      	beq.n	8005b58 <I2C_MasterReceive_BTF+0xc4>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d108      	bne.n	8005b6a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	e019      	b.n	8005b9e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d002      	beq.n	8005b76 <I2C_MasterReceive_BTF+0xe2>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d108      	bne.n	8005b88 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	e00a      	b.n	8005b9e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b10      	cmp	r3, #16
 8005b8c:	d007      	beq.n	8005b9e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b9c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005bf8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b40      	cmp	r3, #64	; 0x40
 8005c0c:	d10a      	bne.n	8005c24 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff fcd7 	bl	80055d0 <HAL_I2C_MemRxCpltCallback>
}
 8005c22:	e01d      	b.n	8005c60 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2212      	movs	r2, #18
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff fc8c 	bl	8005550 <HAL_I2C_MasterRxCpltCallback>
}
 8005c38:	e012      	b.n	8005c60 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b40      	cmp	r3, #64	; 0x40
 8005c7a:	d117      	bne.n	8005cac <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d109      	bne.n	8005c98 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c94:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005c96:	e067      	b.n	8005d68 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	611a      	str	r2, [r3, #16]
}
 8005caa:	e05d      	b.n	8005d68 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cb4:	d133      	bne.n	8005d1e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b21      	cmp	r3, #33	; 0x21
 8005cc0:	d109      	bne.n	8005cd6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	461a      	mov	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cd2:	611a      	str	r2, [r3, #16]
 8005cd4:	e008      	b.n	8005ce8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d004      	beq.n	8005cfa <I2C_Master_SB+0x92>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d108      	bne.n	8005d0c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d032      	beq.n	8005d68 <I2C_Master_SB+0x100>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d02d      	beq.n	8005d68 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d1a:	605a      	str	r2, [r3, #4]
}
 8005d1c:	e024      	b.n	8005d68 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10e      	bne.n	8005d44 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	11db      	asrs	r3, r3, #7
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	f003 0306 	and.w	r3, r3, #6
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	f063 030f 	orn	r3, r3, #15
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	611a      	str	r2, [r3, #16]
}
 8005d42:	e011      	b.n	8005d68 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d10d      	bne.n	8005d68 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	11db      	asrs	r3, r3, #7
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	f003 0306 	and.w	r3, r3, #6
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	f063 030e 	orn	r3, r3, #14
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	611a      	str	r2, [r3, #16]
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d103      	bne.n	8005d98 <I2C_Master_ADD10+0x24>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d011      	beq.n	8005dbc <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d104      	bne.n	8005dac <I2C_Master_ADD10+0x38>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d007      	beq.n	8005dbc <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dba:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b091      	sub	sp, #68	; 0x44
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dde:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b22      	cmp	r3, #34	; 0x22
 8005df0:	f040 8169 	bne.w	80060c6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10f      	bne.n	8005e1c <I2C_Master_ADDR+0x54>
 8005dfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e00:	2b40      	cmp	r3, #64	; 0x40
 8005e02:	d10b      	bne.n	8005e1c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e04:	2300      	movs	r3, #0
 8005e06:	633b      	str	r3, [r7, #48]	; 0x30
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	633b      	str	r3, [r7, #48]	; 0x30
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	e160      	b.n	80060de <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d11d      	bne.n	8005e60 <I2C_Master_ADDR+0x98>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e2c:	d118      	bne.n	8005e60 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e52:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	651a      	str	r2, [r3, #80]	; 0x50
 8005e5e:	e13e      	b.n	80060de <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d113      	bne.n	8005e92 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	e115      	b.n	80060be <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	f040 808a 	bne.w	8005fb2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ea4:	d137      	bne.n	8005f16 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec4:	d113      	bne.n	8005eee <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	e0e7      	b.n	80060be <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eee:	2300      	movs	r3, #0
 8005ef0:	623b      	str	r3, [r7, #32]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	623b      	str	r3, [r7, #32]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	623b      	str	r3, [r7, #32]
 8005f02:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	e0d3      	b.n	80060be <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d02e      	beq.n	8005f7a <I2C_Master_ADDR+0x1b2>
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	d02b      	beq.n	8005f7a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f24:	2b12      	cmp	r3, #18
 8005f26:	d102      	bne.n	8005f2e <I2C_Master_ADDR+0x166>
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d125      	bne.n	8005f7a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d00e      	beq.n	8005f52 <I2C_Master_ADDR+0x18a>
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d00b      	beq.n	8005f52 <I2C_Master_ADDR+0x18a>
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	2b10      	cmp	r3, #16
 8005f3e:	d008      	beq.n	8005f52 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	e007      	b.n	8005f62 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f60:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	61fb      	str	r3, [r7, #28]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	e0a1      	b.n	80060be <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f88:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	61bb      	str	r3, [r7, #24]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	61bb      	str	r3, [r7, #24]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	61bb      	str	r3, [r7, #24]
 8005f9e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	e085      	b.n	80060be <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d14d      	bne.n	8006058 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d016      	beq.n	8005ff0 <I2C_Master_ADDR+0x228>
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d013      	beq.n	8005ff0 <I2C_Master_ADDR+0x228>
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	2b10      	cmp	r3, #16
 8005fcc:	d010      	beq.n	8005ff0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fdc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e007      	b.n	8006000 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ffe:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800600a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800600e:	d117      	bne.n	8006040 <I2C_Master_ADDR+0x278>
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006016:	d00b      	beq.n	8006030 <I2C_Master_ADDR+0x268>
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	2b01      	cmp	r3, #1
 800601c:	d008      	beq.n	8006030 <I2C_Master_ADDR+0x268>
 800601e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006020:	2b08      	cmp	r3, #8
 8006022:	d005      	beq.n	8006030 <I2C_Master_ADDR+0x268>
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	2b10      	cmp	r3, #16
 8006028:	d002      	beq.n	8006030 <I2C_Master_ADDR+0x268>
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	2b20      	cmp	r3, #32
 800602e:	d107      	bne.n	8006040 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800603e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006040:	2300      	movs	r3, #0
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	e032      	b.n	80060be <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006066:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006076:	d117      	bne.n	80060a8 <I2C_Master_ADDR+0x2e0>
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800607e:	d00b      	beq.n	8006098 <I2C_Master_ADDR+0x2d0>
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	2b01      	cmp	r3, #1
 8006084:	d008      	beq.n	8006098 <I2C_Master_ADDR+0x2d0>
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	2b08      	cmp	r3, #8
 800608a:	d005      	beq.n	8006098 <I2C_Master_ADDR+0x2d0>
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	2b10      	cmp	r3, #16
 8006090:	d002      	beq.n	8006098 <I2C_Master_ADDR+0x2d0>
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	2b20      	cmp	r3, #32
 8006096:	d107      	bne.n	80060a8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060a6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a8:	2300      	movs	r3, #0
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80060c4:	e00b      	b.n	80060de <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	68fb      	ldr	r3, [r7, #12]
}
 80060dc:	e7ff      	b.n	80060de <I2C_Master_ADDR+0x316>
 80060de:	bf00      	nop
 80060e0:	3744      	adds	r7, #68	; 0x44
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d02b      	beq.n	800615c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	781a      	ldrb	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d114      	bne.n	800615c <I2C_SlaveTransmit_TXE+0x72>
 8006132:	7bfb      	ldrb	r3, [r7, #15]
 8006134:	2b29      	cmp	r3, #41	; 0x29
 8006136:	d111      	bne.n	800615c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006146:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2221      	movs	r2, #33	; 0x21
 800614c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2228      	movs	r2, #40	; 0x28
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff fa04 	bl	8005564 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800615c:	bf00      	nop
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d011      	beq.n	800619a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	781a      	ldrb	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d02c      	beq.n	800621a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d114      	bne.n	800621a <I2C_SlaveReceive_RXNE+0x74>
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	2b2a      	cmp	r3, #42	; 0x2a
 80061f4:	d111      	bne.n	800621a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006204:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2222      	movs	r2, #34	; 0x22
 800620a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2228      	movs	r2, #40	; 0x28
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff f9af 	bl	8005578 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800621a:	bf00      	nop
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d012      	beq.n	800625a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006270:	2300      	movs	r3, #0
 8006272:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006280:	2b28      	cmp	r3, #40	; 0x28
 8006282:	d127      	bne.n	80062d4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006292:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	089b      	lsrs	r3, r3, #2
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80062a0:	2301      	movs	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	09db      	lsrs	r3, r3, #7
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d103      	bne.n	80062b8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	81bb      	strh	r3, [r7, #12]
 80062b6:	e002      	b.n	80062be <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80062c6:	89ba      	ldrh	r2, [r7, #12]
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff f95d 	bl	800558c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80062d2:	e008      	b.n	80062e6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0202 	mvn.w	r2, #2
 80062dc:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80062e6:	bf00      	nop
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800630e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006310:	2300      	movs	r3, #0
 8006312:	60bb      	str	r3, [r7, #8]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	60bb      	str	r3, [r7, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0201 	orr.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800633c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800634c:	d172      	bne.n	8006434 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	2b22      	cmp	r3, #34	; 0x22
 8006352:	d002      	beq.n	800635a <I2C_Slave_STOPF+0x6a>
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	2b2a      	cmp	r3, #42	; 0x2a
 8006358:	d135      	bne.n	80063c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	b29a      	uxth	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d005      	beq.n	800637e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	f043 0204 	orr.w	r2, r3, #4
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800638c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe fa26 	bl	80047e4 <HAL_DMA_GetState>
 8006398:	4603      	mov	r3, r0
 800639a:	2b01      	cmp	r3, #1
 800639c:	d049      	beq.n	8006432 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	4a69      	ldr	r2, [pc, #420]	; (8006548 <I2C_Slave_STOPF+0x258>)
 80063a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe f86e 	bl	800448c <HAL_DMA_Abort_IT>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d03d      	beq.n	8006432 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063c0:	4610      	mov	r0, r2
 80063c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063c4:	e035      	b.n	8006432 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	f043 0204 	orr.w	r2, r3, #4
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe f9f0 	bl	80047e4 <HAL_DMA_GetState>
 8006404:	4603      	mov	r3, r0
 8006406:	2b01      	cmp	r3, #1
 8006408:	d014      	beq.n	8006434 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640e:	4a4e      	ldr	r2, [pc, #312]	; (8006548 <I2C_Slave_STOPF+0x258>)
 8006410:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe f838 	bl	800448c <HAL_DMA_Abort_IT>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d008      	beq.n	8006434 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800642c:	4610      	mov	r0, r2
 800642e:	4798      	blx	r3
 8006430:	e000      	b.n	8006434 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006432:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d03e      	beq.n	80064bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b04      	cmp	r3, #4
 800644a:	d112      	bne.n	8006472 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647c:	2b40      	cmp	r3, #64	; 0x40
 800647e:	d112      	bne.n	80064a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691a      	ldr	r2, [r3, #16]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	f043 0204 	orr.w	r2, r3, #4
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f8b3 	bl	8006630 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80064ca:	e039      	b.n	8006540 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	2b2a      	cmp	r3, #42	; 0x2a
 80064d0:	d109      	bne.n	80064e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2228      	movs	r2, #40	; 0x28
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff f849 	bl	8005578 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b28      	cmp	r3, #40	; 0x28
 80064f0:	d111      	bne.n	8006516 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a15      	ldr	r2, [pc, #84]	; (800654c <I2C_Slave_STOPF+0x25c>)
 80064f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff f84a 	bl	80055a8 <HAL_I2C_ListenCpltCallback>
}
 8006514:	e014      	b.n	8006540 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651a:	2b22      	cmp	r3, #34	; 0x22
 800651c:	d002      	beq.n	8006524 <I2C_Slave_STOPF+0x234>
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	2b22      	cmp	r3, #34	; 0x22
 8006522:	d10d      	bne.n	8006540 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff f81c 	bl	8005578 <HAL_I2C_SlaveRxCpltCallback>
}
 8006540:	bf00      	nop
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	08006895 	.word	0x08006895
 800654c:	ffff0000 	.word	0xffff0000

08006550 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2b08      	cmp	r3, #8
 800656a:	d002      	beq.n	8006572 <I2C_Slave_AF+0x22>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b20      	cmp	r3, #32
 8006570:	d129      	bne.n	80065c6 <I2C_Slave_AF+0x76>
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	2b28      	cmp	r3, #40	; 0x28
 8006576:	d126      	bne.n	80065c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a2c      	ldr	r2, [pc, #176]	; (800662c <I2C_Slave_AF+0xdc>)
 800657c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800658c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006596:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fe fff2 	bl	80055a8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80065c4:	e02e      	b.n	8006624 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	2b21      	cmp	r3, #33	; 0x21
 80065ca:	d126      	bne.n	800661a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a17      	ldr	r2, [pc, #92]	; (800662c <I2C_Slave_AF+0xdc>)
 80065d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2221      	movs	r2, #33	; 0x21
 80065d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006600:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006610:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fe ffa6 	bl	8005564 <HAL_I2C_SlaveTxCpltCallback>
}
 8006618:	e004      	b.n	8006624 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006622:	615a      	str	r2, [r3, #20]
}
 8006624:	bf00      	nop
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	ffff0000 	.word	0xffff0000

08006630 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006646:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	2b10      	cmp	r3, #16
 800664c:	d002      	beq.n	8006654 <I2C_ITError+0x24>
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	2b40      	cmp	r3, #64	; 0x40
 8006652:	d10a      	bne.n	800666a <I2C_ITError+0x3a>
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	2b22      	cmp	r3, #34	; 0x22
 8006658:	d107      	bne.n	800666a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006668:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006670:	2b28      	cmp	r3, #40	; 0x28
 8006672:	d107      	bne.n	8006684 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2228      	movs	r2, #40	; 0x28
 800667e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006682:	e015      	b.n	80066b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800668e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006692:	d00a      	beq.n	80066aa <I2C_ITError+0x7a>
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	2b60      	cmp	r3, #96	; 0x60
 8006698:	d007      	beq.n	80066aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066be:	d162      	bne.n	8006786 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d020      	beq.n	8006720 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e2:	4a6a      	ldr	r2, [pc, #424]	; (800688c <I2C_ITError+0x25c>)
 80066e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fd fece 	bl	800448c <HAL_DMA_Abort_IT>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 8089 	beq.w	800680a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0201 	bic.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800671a:	4610      	mov	r0, r2
 800671c:	4798      	blx	r3
 800671e:	e074      	b.n	800680a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	4a59      	ldr	r2, [pc, #356]	; (800688c <I2C_ITError+0x25c>)
 8006726:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	4618      	mov	r0, r3
 800672e:	f7fd fead 	bl	800448c <HAL_DMA_Abort_IT>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d068      	beq.n	800680a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006742:	2b40      	cmp	r3, #64	; 0x40
 8006744:	d10b      	bne.n	800675e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	691a      	ldr	r2, [r3, #16]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0201 	bic.w	r2, r2, #1
 800676c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006780:	4610      	mov	r0, r2
 8006782:	4798      	blx	r3
 8006784:	e041      	b.n	800680a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b60      	cmp	r3, #96	; 0x60
 8006790:	d125      	bne.n	80067de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067aa:	2b40      	cmp	r3, #64	; 0x40
 80067ac:	d10b      	bne.n	80067c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0201 	bic.w	r2, r2, #1
 80067d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fe ff0e 	bl	80055f8 <HAL_I2C_AbortCpltCallback>
 80067dc:	e015      	b.n	800680a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b40      	cmp	r3, #64	; 0x40
 80067ea:	d10b      	bne.n	8006804 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691a      	ldr	r2, [r3, #16]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7fe feed 	bl	80055e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10e      	bne.n	8006838 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006820:	2b00      	cmp	r3, #0
 8006822:	d109      	bne.n	8006838 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800682a:	2b00      	cmp	r3, #0
 800682c:	d104      	bne.n	8006838 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006834:	2b00      	cmp	r3, #0
 8006836:	d007      	beq.n	8006848 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006846:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800684e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b04      	cmp	r3, #4
 800685a:	d113      	bne.n	8006884 <I2C_ITError+0x254>
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	2b28      	cmp	r3, #40	; 0x28
 8006860:	d110      	bne.n	8006884 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a0a      	ldr	r2, [pc, #40]	; (8006890 <I2C_ITError+0x260>)
 8006866:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fe fe92 	bl	80055a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006884:	bf00      	nop
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	08006895 	.word	0x08006895
 8006890:	ffff0000 	.word	0xffff0000

08006894 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80068ae:	4b4b      	ldr	r3, [pc, #300]	; (80069dc <I2C_DMAAbort+0x148>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	08db      	lsrs	r3, r3, #3
 80068b4:	4a4a      	ldr	r2, [pc, #296]	; (80069e0 <I2C_DMAAbort+0x14c>)
 80068b6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ba:	0a1a      	lsrs	r2, r3, #8
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	00da      	lsls	r2, r3, #3
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	f043 0220 	orr.w	r2, r3, #32
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80068da:	e00a      	b.n	80068f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3b01      	subs	r3, #1
 80068e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068f0:	d0ea      	beq.n	80068c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fe:	2200      	movs	r2, #0
 8006900:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690e:	2200      	movs	r2, #0
 8006910:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006920:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2200      	movs	r2, #0
 8006926:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006934:	2200      	movs	r2, #0
 8006936:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	2200      	movs	r2, #0
 8006946:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0201 	bic.w	r2, r2, #1
 8006956:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b60      	cmp	r3, #96	; 0x60
 8006962:	d10e      	bne.n	8006982 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2200      	movs	r2, #0
 8006978:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800697a:	6978      	ldr	r0, [r7, #20]
 800697c:	f7fe fe3c 	bl	80055f8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006980:	e027      	b.n	80069d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006982:	7cfb      	ldrb	r3, [r7, #19]
 8006984:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006988:	2b28      	cmp	r3, #40	; 0x28
 800698a:	d117      	bne.n	80069bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2200      	movs	r2, #0
 80069b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2228      	movs	r2, #40	; 0x28
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069ba:	e007      	b.n	80069cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80069cc:	6978      	ldr	r0, [r7, #20]
 80069ce:	f7fe fe09 	bl	80055e4 <HAL_I2C_ErrorCallback>
}
 80069d2:	bf00      	nop
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	2000004c 	.word	0x2000004c
 80069e0:	14f8b589 	.word	0x14f8b589

080069e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80069f0:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	08db      	lsrs	r3, r3, #3
 80069f6:	4a13      	ldr	r2, [pc, #76]	; (8006a44 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80069f8:	fba2 2303 	umull	r2, r3, r2, r3
 80069fc:	0a1a      	lsrs	r2, r3, #8
 80069fe:	4613      	mov	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d107      	bne.n	8006a22 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f043 0220 	orr.w	r2, r3, #32
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e008      	b.n	8006a34 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a30:	d0e9      	beq.n	8006a06 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	2000004c 	.word	0x2000004c
 8006a44:	14f8b589 	.word	0x14f8b589

08006a48 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a58:	d103      	bne.n	8006a62 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a60:	e007      	b.n	8006a72 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a66:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006a6a:	d102      	bne.n	8006a72 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2208      	movs	r2, #8
 8006a70:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
	...

08006a80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e25b      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d075      	beq.n	8006b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a9e:	4ba3      	ldr	r3, [pc, #652]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 030c 	and.w	r3, r3, #12
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d00c      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aaa:	4ba0      	ldr	r3, [pc, #640]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d112      	bne.n	8006adc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ab6:	4b9d      	ldr	r3, [pc, #628]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ac2:	d10b      	bne.n	8006adc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac4:	4b99      	ldr	r3, [pc, #612]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d05b      	beq.n	8006b88 <HAL_RCC_OscConfig+0x108>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d157      	bne.n	8006b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e236      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae4:	d106      	bne.n	8006af4 <HAL_RCC_OscConfig+0x74>
 8006ae6:	4b91      	ldr	r3, [pc, #580]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a90      	ldr	r2, [pc, #576]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	e01d      	b.n	8006b30 <HAL_RCC_OscConfig+0xb0>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006afc:	d10c      	bne.n	8006b18 <HAL_RCC_OscConfig+0x98>
 8006afe:	4b8b      	ldr	r3, [pc, #556]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a8a      	ldr	r2, [pc, #552]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	4b88      	ldr	r3, [pc, #544]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a87      	ldr	r2, [pc, #540]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	e00b      	b.n	8006b30 <HAL_RCC_OscConfig+0xb0>
 8006b18:	4b84      	ldr	r3, [pc, #528]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a83      	ldr	r2, [pc, #524]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	4b81      	ldr	r3, [pc, #516]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a80      	ldr	r2, [pc, #512]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d013      	beq.n	8006b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b38:	f7fd fa62 	bl	8004000 <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b40:	f7fd fa5e 	bl	8004000 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b64      	cmp	r3, #100	; 0x64
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e1fb      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b52:	4b76      	ldr	r3, [pc, #472]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0f0      	beq.n	8006b40 <HAL_RCC_OscConfig+0xc0>
 8006b5e:	e014      	b.n	8006b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b60:	f7fd fa4e 	bl	8004000 <HAL_GetTick>
 8006b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b66:	e008      	b.n	8006b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b68:	f7fd fa4a 	bl	8004000 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b64      	cmp	r3, #100	; 0x64
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e1e7      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b7a:	4b6c      	ldr	r3, [pc, #432]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1f0      	bne.n	8006b68 <HAL_RCC_OscConfig+0xe8>
 8006b86:	e000      	b.n	8006b8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d063      	beq.n	8006c5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b96:	4b65      	ldr	r3, [pc, #404]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 030c 	and.w	r3, r3, #12
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00b      	beq.n	8006bba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ba2:	4b62      	ldr	r3, [pc, #392]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006baa:	2b08      	cmp	r3, #8
 8006bac:	d11c      	bne.n	8006be8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bae:	4b5f      	ldr	r3, [pc, #380]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d116      	bne.n	8006be8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bba:	4b5c      	ldr	r3, [pc, #368]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d005      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x152>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d001      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e1bb      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bd2:	4b56      	ldr	r3, [pc, #344]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	4952      	ldr	r1, [pc, #328]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006be6:	e03a      	b.n	8006c5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d020      	beq.n	8006c32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bf0:	4b4f      	ldr	r3, [pc, #316]	; (8006d30 <HAL_RCC_OscConfig+0x2b0>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf6:	f7fd fa03 	bl	8004000 <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bfe:	f7fd f9ff 	bl	8004000 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e19c      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c10:	4b46      	ldr	r3, [pc, #280]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0f0      	beq.n	8006bfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c1c:	4b43      	ldr	r3, [pc, #268]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	4940      	ldr	r1, [pc, #256]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	600b      	str	r3, [r1, #0]
 8006c30:	e015      	b.n	8006c5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c32:	4b3f      	ldr	r3, [pc, #252]	; (8006d30 <HAL_RCC_OscConfig+0x2b0>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c38:	f7fd f9e2 	bl	8004000 <HAL_GetTick>
 8006c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c3e:	e008      	b.n	8006c52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c40:	f7fd f9de 	bl	8004000 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e17b      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c52:	4b36      	ldr	r3, [pc, #216]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1f0      	bne.n	8006c40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0308 	and.w	r3, r3, #8
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d030      	beq.n	8006ccc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d016      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c72:	4b30      	ldr	r3, [pc, #192]	; (8006d34 <HAL_RCC_OscConfig+0x2b4>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c78:	f7fd f9c2 	bl	8004000 <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c80:	f7fd f9be 	bl	8004000 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e15b      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c92:	4b26      	ldr	r3, [pc, #152]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0f0      	beq.n	8006c80 <HAL_RCC_OscConfig+0x200>
 8006c9e:	e015      	b.n	8006ccc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ca0:	4b24      	ldr	r3, [pc, #144]	; (8006d34 <HAL_RCC_OscConfig+0x2b4>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ca6:	f7fd f9ab 	bl	8004000 <HAL_GetTick>
 8006caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cae:	f7fd f9a7 	bl	8004000 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e144      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cc0:	4b1a      	ldr	r3, [pc, #104]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1f0      	bne.n	8006cae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 80a0 	beq.w	8006e1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cde:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10f      	bne.n	8006d0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cea:	2300      	movs	r3, #0
 8006cec:	60bb      	str	r3, [r7, #8]
 8006cee:	4b0f      	ldr	r3, [pc, #60]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	4a0e      	ldr	r2, [pc, #56]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8006cfa:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <HAL_RCC_OscConfig+0x2ac>)
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d02:	60bb      	str	r3, [r7, #8]
 8006d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d06:	2301      	movs	r3, #1
 8006d08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d0a:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <HAL_RCC_OscConfig+0x2b8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d121      	bne.n	8006d5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d16:	4b08      	ldr	r3, [pc, #32]	; (8006d38 <HAL_RCC_OscConfig+0x2b8>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a07      	ldr	r2, [pc, #28]	; (8006d38 <HAL_RCC_OscConfig+0x2b8>)
 8006d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d22:	f7fd f96d 	bl	8004000 <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d28:	e011      	b.n	8006d4e <HAL_RCC_OscConfig+0x2ce>
 8006d2a:	bf00      	nop
 8006d2c:	40023800 	.word	0x40023800
 8006d30:	42470000 	.word	0x42470000
 8006d34:	42470e80 	.word	0x42470e80
 8006d38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d3c:	f7fd f960 	bl	8004000 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e0fd      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d4e:	4b81      	ldr	r3, [pc, #516]	; (8006f54 <HAL_RCC_OscConfig+0x4d4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0f0      	beq.n	8006d3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d106      	bne.n	8006d70 <HAL_RCC_OscConfig+0x2f0>
 8006d62:	4b7d      	ldr	r3, [pc, #500]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d66:	4a7c      	ldr	r2, [pc, #496]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d6e:	e01c      	b.n	8006daa <HAL_RCC_OscConfig+0x32a>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	2b05      	cmp	r3, #5
 8006d76:	d10c      	bne.n	8006d92 <HAL_RCC_OscConfig+0x312>
 8006d78:	4b77      	ldr	r3, [pc, #476]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7c:	4a76      	ldr	r2, [pc, #472]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006d7e:	f043 0304 	orr.w	r3, r3, #4
 8006d82:	6713      	str	r3, [r2, #112]	; 0x70
 8006d84:	4b74      	ldr	r3, [pc, #464]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d88:	4a73      	ldr	r2, [pc, #460]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d90:	e00b      	b.n	8006daa <HAL_RCC_OscConfig+0x32a>
 8006d92:	4b71      	ldr	r3, [pc, #452]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d96:	4a70      	ldr	r2, [pc, #448]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006d98:	f023 0301 	bic.w	r3, r3, #1
 8006d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d9e:	4b6e      	ldr	r3, [pc, #440]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da2:	4a6d      	ldr	r2, [pc, #436]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006da4:	f023 0304 	bic.w	r3, r3, #4
 8006da8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d015      	beq.n	8006dde <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db2:	f7fd f925 	bl	8004000 <HAL_GetTick>
 8006db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db8:	e00a      	b.n	8006dd0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dba:	f7fd f921 	bl	8004000 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e0bc      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd0:	4b61      	ldr	r3, [pc, #388]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0ee      	beq.n	8006dba <HAL_RCC_OscConfig+0x33a>
 8006ddc:	e014      	b.n	8006e08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dde:	f7fd f90f 	bl	8004000 <HAL_GetTick>
 8006de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006de4:	e00a      	b.n	8006dfc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006de6:	f7fd f90b 	bl	8004000 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d901      	bls.n	8006dfc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e0a6      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dfc:	4b56      	ldr	r3, [pc, #344]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1ee      	bne.n	8006de6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d105      	bne.n	8006e1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e0e:	4b52      	ldr	r3, [pc, #328]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	4a51      	ldr	r2, [pc, #324]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 8092 	beq.w	8006f48 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e24:	4b4c      	ldr	r3, [pc, #304]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f003 030c 	and.w	r3, r3, #12
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	d05c      	beq.n	8006eea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d141      	bne.n	8006ebc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e38:	4b48      	ldr	r3, [pc, #288]	; (8006f5c <HAL_RCC_OscConfig+0x4dc>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e3e:	f7fd f8df 	bl	8004000 <HAL_GetTick>
 8006e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e44:	e008      	b.n	8006e58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e46:	f7fd f8db 	bl	8004000 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e078      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e58:	4b3f      	ldr	r3, [pc, #252]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1f0      	bne.n	8006e46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	69da      	ldr	r2, [r3, #28]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	019b      	lsls	r3, r3, #6
 8006e74:	431a      	orrs	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7a:	085b      	lsrs	r3, r3, #1
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	041b      	lsls	r3, r3, #16
 8006e80:	431a      	orrs	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e86:	061b      	lsls	r3, r3, #24
 8006e88:	4933      	ldr	r1, [pc, #204]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e8e:	4b33      	ldr	r3, [pc, #204]	; (8006f5c <HAL_RCC_OscConfig+0x4dc>)
 8006e90:	2201      	movs	r2, #1
 8006e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e94:	f7fd f8b4 	bl	8004000 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e9c:	f7fd f8b0 	bl	8004000 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e04d      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eae:	4b2a      	ldr	r3, [pc, #168]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0f0      	beq.n	8006e9c <HAL_RCC_OscConfig+0x41c>
 8006eba:	e045      	b.n	8006f48 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ebc:	4b27      	ldr	r3, [pc, #156]	; (8006f5c <HAL_RCC_OscConfig+0x4dc>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ec2:	f7fd f89d 	bl	8004000 <HAL_GetTick>
 8006ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ec8:	e008      	b.n	8006edc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eca:	f7fd f899 	bl	8004000 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e036      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006edc:	4b1e      	ldr	r3, [pc, #120]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1f0      	bne.n	8006eca <HAL_RCC_OscConfig+0x44a>
 8006ee8:	e02e      	b.n	8006f48 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d101      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e029      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ef6:	4b18      	ldr	r3, [pc, #96]	; (8006f58 <HAL_RCC_OscConfig+0x4d8>)
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d11c      	bne.n	8006f44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d115      	bne.n	8006f44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f1e:	4013      	ands	r3, r2
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d10d      	bne.n	8006f44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d106      	bne.n	8006f44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d001      	beq.n	8006f48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e000      	b.n	8006f4a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	40007000 	.word	0x40007000
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	42470060 	.word	0x42470060

08006f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0cc      	b.n	800710e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f74:	4b68      	ldr	r3, [pc, #416]	; (8007118 <HAL_RCC_ClockConfig+0x1b8>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d90c      	bls.n	8006f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f82:	4b65      	ldr	r3, [pc, #404]	; (8007118 <HAL_RCC_ClockConfig+0x1b8>)
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f8a:	4b63      	ldr	r3, [pc, #396]	; (8007118 <HAL_RCC_ClockConfig+0x1b8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 030f 	and.w	r3, r3, #15
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d001      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e0b8      	b.n	800710e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d020      	beq.n	8006fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fb4:	4b59      	ldr	r3, [pc, #356]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	4a58      	ldr	r2, [pc, #352]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 8006fba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d005      	beq.n	8006fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fcc:	4b53      	ldr	r3, [pc, #332]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	4a52      	ldr	r2, [pc, #328]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 8006fd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fd8:	4b50      	ldr	r3, [pc, #320]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	494d      	ldr	r1, [pc, #308]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d044      	beq.n	8007080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d107      	bne.n	800700e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ffe:	4b47      	ldr	r3, [pc, #284]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d119      	bne.n	800703e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e07f      	b.n	800710e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2b02      	cmp	r3, #2
 8007014:	d003      	beq.n	800701e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800701a:	2b03      	cmp	r3, #3
 800701c:	d107      	bne.n	800702e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800701e:	4b3f      	ldr	r3, [pc, #252]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d109      	bne.n	800703e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e06f      	b.n	800710e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800702e:	4b3b      	ldr	r3, [pc, #236]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e067      	b.n	800710e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800703e:	4b37      	ldr	r3, [pc, #220]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f023 0203 	bic.w	r2, r3, #3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	4934      	ldr	r1, [pc, #208]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 800704c:	4313      	orrs	r3, r2
 800704e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007050:	f7fc ffd6 	bl	8004000 <HAL_GetTick>
 8007054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007056:	e00a      	b.n	800706e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007058:	f7fc ffd2 	bl	8004000 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	f241 3288 	movw	r2, #5000	; 0x1388
 8007066:	4293      	cmp	r3, r2
 8007068:	d901      	bls.n	800706e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e04f      	b.n	800710e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800706e:	4b2b      	ldr	r3, [pc, #172]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 020c 	and.w	r2, r3, #12
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	429a      	cmp	r2, r3
 800707e:	d1eb      	bne.n	8007058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007080:	4b25      	ldr	r3, [pc, #148]	; (8007118 <HAL_RCC_ClockConfig+0x1b8>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d20c      	bcs.n	80070a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800708e:	4b22      	ldr	r3, [pc, #136]	; (8007118 <HAL_RCC_ClockConfig+0x1b8>)
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007096:	4b20      	ldr	r3, [pc, #128]	; (8007118 <HAL_RCC_ClockConfig+0x1b8>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d001      	beq.n	80070a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e032      	b.n	800710e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d008      	beq.n	80070c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070b4:	4b19      	ldr	r3, [pc, #100]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	4916      	ldr	r1, [pc, #88]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d009      	beq.n	80070e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070d2:	4b12      	ldr	r3, [pc, #72]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	490e      	ldr	r1, [pc, #56]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070e6:	f000 f821 	bl	800712c <HAL_RCC_GetSysClockFreq>
 80070ea:	4601      	mov	r1, r0
 80070ec:	4b0b      	ldr	r3, [pc, #44]	; (800711c <HAL_RCC_ClockConfig+0x1bc>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	091b      	lsrs	r3, r3, #4
 80070f2:	f003 030f 	and.w	r3, r3, #15
 80070f6:	4a0a      	ldr	r2, [pc, #40]	; (8007120 <HAL_RCC_ClockConfig+0x1c0>)
 80070f8:	5cd3      	ldrb	r3, [r2, r3]
 80070fa:	fa21 f303 	lsr.w	r3, r1, r3
 80070fe:	4a09      	ldr	r2, [pc, #36]	; (8007124 <HAL_RCC_ClockConfig+0x1c4>)
 8007100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <HAL_RCC_ClockConfig+0x1c8>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4618      	mov	r0, r3
 8007108:	f7fc ff36 	bl	8003f78 <HAL_InitTick>

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	40023c00 	.word	0x40023c00
 800711c:	40023800 	.word	0x40023800
 8007120:	0800a510 	.word	0x0800a510
 8007124:	2000004c 	.word	0x2000004c
 8007128:	20000050 	.word	0x20000050

0800712c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800712c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	607b      	str	r3, [r7, #4]
 8007136:	2300      	movs	r3, #0
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	2300      	movs	r3, #0
 800713c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007142:	4b63      	ldr	r3, [pc, #396]	; (80072d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f003 030c 	and.w	r3, r3, #12
 800714a:	2b04      	cmp	r3, #4
 800714c:	d007      	beq.n	800715e <HAL_RCC_GetSysClockFreq+0x32>
 800714e:	2b08      	cmp	r3, #8
 8007150:	d008      	beq.n	8007164 <HAL_RCC_GetSysClockFreq+0x38>
 8007152:	2b00      	cmp	r3, #0
 8007154:	f040 80b4 	bne.w	80072c0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007158:	4b5e      	ldr	r3, [pc, #376]	; (80072d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800715a:	60bb      	str	r3, [r7, #8]
       break;
 800715c:	e0b3      	b.n	80072c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800715e:	4b5e      	ldr	r3, [pc, #376]	; (80072d8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007160:	60bb      	str	r3, [r7, #8]
      break;
 8007162:	e0b0      	b.n	80072c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007164:	4b5a      	ldr	r3, [pc, #360]	; (80072d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800716c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800716e:	4b58      	ldr	r3, [pc, #352]	; (80072d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d04a      	beq.n	8007210 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800717a:	4b55      	ldr	r3, [pc, #340]	; (80072d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	099b      	lsrs	r3, r3, #6
 8007180:	f04f 0400 	mov.w	r4, #0
 8007184:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	ea03 0501 	and.w	r5, r3, r1
 8007190:	ea04 0602 	and.w	r6, r4, r2
 8007194:	4629      	mov	r1, r5
 8007196:	4632      	mov	r2, r6
 8007198:	f04f 0300 	mov.w	r3, #0
 800719c:	f04f 0400 	mov.w	r4, #0
 80071a0:	0154      	lsls	r4, r2, #5
 80071a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80071a6:	014b      	lsls	r3, r1, #5
 80071a8:	4619      	mov	r1, r3
 80071aa:	4622      	mov	r2, r4
 80071ac:	1b49      	subs	r1, r1, r5
 80071ae:	eb62 0206 	sbc.w	r2, r2, r6
 80071b2:	f04f 0300 	mov.w	r3, #0
 80071b6:	f04f 0400 	mov.w	r4, #0
 80071ba:	0194      	lsls	r4, r2, #6
 80071bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80071c0:	018b      	lsls	r3, r1, #6
 80071c2:	1a5b      	subs	r3, r3, r1
 80071c4:	eb64 0402 	sbc.w	r4, r4, r2
 80071c8:	f04f 0100 	mov.w	r1, #0
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	00e2      	lsls	r2, r4, #3
 80071d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80071d6:	00d9      	lsls	r1, r3, #3
 80071d8:	460b      	mov	r3, r1
 80071da:	4614      	mov	r4, r2
 80071dc:	195b      	adds	r3, r3, r5
 80071de:	eb44 0406 	adc.w	r4, r4, r6
 80071e2:	f04f 0100 	mov.w	r1, #0
 80071e6:	f04f 0200 	mov.w	r2, #0
 80071ea:	0262      	lsls	r2, r4, #9
 80071ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80071f0:	0259      	lsls	r1, r3, #9
 80071f2:	460b      	mov	r3, r1
 80071f4:	4614      	mov	r4, r2
 80071f6:	4618      	mov	r0, r3
 80071f8:	4621      	mov	r1, r4
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f04f 0400 	mov.w	r4, #0
 8007200:	461a      	mov	r2, r3
 8007202:	4623      	mov	r3, r4
 8007204:	f7f9 fdb2 	bl	8000d6c <__aeabi_uldivmod>
 8007208:	4603      	mov	r3, r0
 800720a:	460c      	mov	r4, r1
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	e049      	b.n	80072a4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007210:	4b2f      	ldr	r3, [pc, #188]	; (80072d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	099b      	lsrs	r3, r3, #6
 8007216:	f04f 0400 	mov.w	r4, #0
 800721a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800721e:	f04f 0200 	mov.w	r2, #0
 8007222:	ea03 0501 	and.w	r5, r3, r1
 8007226:	ea04 0602 	and.w	r6, r4, r2
 800722a:	4629      	mov	r1, r5
 800722c:	4632      	mov	r2, r6
 800722e:	f04f 0300 	mov.w	r3, #0
 8007232:	f04f 0400 	mov.w	r4, #0
 8007236:	0154      	lsls	r4, r2, #5
 8007238:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800723c:	014b      	lsls	r3, r1, #5
 800723e:	4619      	mov	r1, r3
 8007240:	4622      	mov	r2, r4
 8007242:	1b49      	subs	r1, r1, r5
 8007244:	eb62 0206 	sbc.w	r2, r2, r6
 8007248:	f04f 0300 	mov.w	r3, #0
 800724c:	f04f 0400 	mov.w	r4, #0
 8007250:	0194      	lsls	r4, r2, #6
 8007252:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007256:	018b      	lsls	r3, r1, #6
 8007258:	1a5b      	subs	r3, r3, r1
 800725a:	eb64 0402 	sbc.w	r4, r4, r2
 800725e:	f04f 0100 	mov.w	r1, #0
 8007262:	f04f 0200 	mov.w	r2, #0
 8007266:	00e2      	lsls	r2, r4, #3
 8007268:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800726c:	00d9      	lsls	r1, r3, #3
 800726e:	460b      	mov	r3, r1
 8007270:	4614      	mov	r4, r2
 8007272:	195b      	adds	r3, r3, r5
 8007274:	eb44 0406 	adc.w	r4, r4, r6
 8007278:	f04f 0100 	mov.w	r1, #0
 800727c:	f04f 0200 	mov.w	r2, #0
 8007280:	02a2      	lsls	r2, r4, #10
 8007282:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007286:	0299      	lsls	r1, r3, #10
 8007288:	460b      	mov	r3, r1
 800728a:	4614      	mov	r4, r2
 800728c:	4618      	mov	r0, r3
 800728e:	4621      	mov	r1, r4
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f04f 0400 	mov.w	r4, #0
 8007296:	461a      	mov	r2, r3
 8007298:	4623      	mov	r3, r4
 800729a:	f7f9 fd67 	bl	8000d6c <__aeabi_uldivmod>
 800729e:	4603      	mov	r3, r0
 80072a0:	460c      	mov	r4, r1
 80072a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072a4:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	0c1b      	lsrs	r3, r3, #16
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	3301      	adds	r3, #1
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072bc:	60bb      	str	r3, [r7, #8]
      break;
 80072be:	e002      	b.n	80072c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072c0:	4b04      	ldr	r3, [pc, #16]	; (80072d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80072c2:	60bb      	str	r3, [r7, #8]
      break;
 80072c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072c6:	68bb      	ldr	r3, [r7, #8]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d0:	40023800 	.word	0x40023800
 80072d4:	00f42400 	.word	0x00f42400
 80072d8:	007a1200 	.word	0x007a1200

080072dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072e0:	4b03      	ldr	r3, [pc, #12]	; (80072f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80072e2:	681b      	ldr	r3, [r3, #0]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	2000004c 	.word	0x2000004c

080072f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072f8:	f7ff fff0 	bl	80072dc <HAL_RCC_GetHCLKFreq>
 80072fc:	4601      	mov	r1, r0
 80072fe:	4b05      	ldr	r3, [pc, #20]	; (8007314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	0a9b      	lsrs	r3, r3, #10
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	4a03      	ldr	r2, [pc, #12]	; (8007318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800730a:	5cd3      	ldrb	r3, [r2, r3]
 800730c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007310:	4618      	mov	r0, r3
 8007312:	bd80      	pop	{r7, pc}
 8007314:	40023800 	.word	0x40023800
 8007318:	0800a520 	.word	0x0800a520

0800731c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007320:	f7ff ffdc 	bl	80072dc <HAL_RCC_GetHCLKFreq>
 8007324:	4601      	mov	r1, r0
 8007326:	4b05      	ldr	r3, [pc, #20]	; (800733c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	0b5b      	lsrs	r3, r3, #13
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	4a03      	ldr	r2, [pc, #12]	; (8007340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007332:	5cd3      	ldrb	r3, [r2, r3]
 8007334:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007338:	4618      	mov	r0, r3
 800733a:	bd80      	pop	{r7, pc}
 800733c:	40023800 	.word	0x40023800
 8007340:	0800a520 	.word	0x0800a520

08007344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e01d      	b.n	8007392 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fc fba6 	bl	8003abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3304      	adds	r3, #4
 8007380:	4619      	mov	r1, r3
 8007382:	4610      	mov	r0, r2
 8007384:	f000 fc26 	bl	8007bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800739a:	b480      	push	{r7}
 800739c:	b085      	sub	sp, #20
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2202      	movs	r2, #2
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2b06      	cmp	r3, #6
 80073ba:	d007      	beq.n	80073cc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0201 	orr.w	r2, r2, #1
 80073ca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b085      	sub	sp, #20
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 0201 	orr.w	r2, r2, #1
 80073f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f003 0307 	and.w	r3, r3, #7
 8007404:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b06      	cmp	r3, #6
 800740a:	d007      	beq.n	800741c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0201 	orr.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e01d      	b.n	8007478 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	d106      	bne.n	8007456 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7fc fb77 	bl	8003b44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2202      	movs	r2, #2
 800745a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	3304      	adds	r3, #4
 8007466:	4619      	mov	r1, r3
 8007468:	4610      	mov	r0, r2
 800746a:	f000 fbb3 	bl	8007bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2201      	movs	r2, #1
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fe44 	bl	8008120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a10      	ldr	r2, [pc, #64]	; (80074e0 <HAL_TIM_PWM_Start+0x60>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d107      	bne.n	80074b2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b06      	cmp	r3, #6
 80074c2:	d007      	beq.n	80074d4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0201 	orr.w	r2, r2, #1
 80074d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	40010000 	.word	0x40010000

080074e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e083      	b.n	8007600 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d106      	bne.n	8007512 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fc fa8d 	bl	8003a2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2202      	movs	r2, #2
 8007516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6812      	ldr	r2, [r2, #0]
 8007524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007528:	f023 0307 	bic.w	r3, r3, #7
 800752c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3304      	adds	r3, #4
 8007536:	4619      	mov	r1, r3
 8007538:	4610      	mov	r0, r2
 800753a:	f000 fb4b 	bl	8007bd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	4313      	orrs	r3, r2
 800755e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007566:	f023 0303 	bic.w	r3, r3, #3
 800756a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	021b      	lsls	r3, r3, #8
 8007576:	4313      	orrs	r3, r2
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	4313      	orrs	r3, r2
 800757c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007584:	f023 030c 	bic.w	r3, r3, #12
 8007588:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	021b      	lsls	r3, r3, #8
 80075a0:	4313      	orrs	r3, r2
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	011a      	lsls	r2, r3, #4
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	031b      	lsls	r3, r3, #12
 80075b4:	4313      	orrs	r3, r2
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80075c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80075ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	4313      	orrs	r3, r2
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3718      	adds	r7, #24
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <HAL_TIM_Encoder_Start+0x16>
 8007618:	2b04      	cmp	r3, #4
 800761a:	d008      	beq.n	800762e <HAL_TIM_Encoder_Start+0x26>
 800761c:	e00f      	b.n	800763e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2201      	movs	r2, #1
 8007624:	2100      	movs	r1, #0
 8007626:	4618      	mov	r0, r3
 8007628:	f000 fd7a 	bl	8008120 <TIM_CCxChannelCmd>
      break;
 800762c:	e016      	b.n	800765c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2201      	movs	r2, #1
 8007634:	2104      	movs	r1, #4
 8007636:	4618      	mov	r0, r3
 8007638:	f000 fd72 	bl	8008120 <TIM_CCxChannelCmd>
      break;
 800763c:	e00e      	b.n	800765c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2201      	movs	r2, #1
 8007644:	2100      	movs	r1, #0
 8007646:	4618      	mov	r0, r3
 8007648:	f000 fd6a 	bl	8008120 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2201      	movs	r2, #1
 8007652:	2104      	movs	r1, #4
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fd63 	bl	8008120 <TIM_CCxChannelCmd>
      break;
 800765a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0201 	orr.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b02      	cmp	r3, #2
 800768a:	d122      	bne.n	80076d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b02      	cmp	r3, #2
 8007698:	d11b      	bne.n	80076d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f06f 0202 	mvn.w	r2, #2
 80076a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	f003 0303 	and.w	r3, r3, #3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d003      	beq.n	80076c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fa6c 	bl	8007b96 <HAL_TIM_IC_CaptureCallback>
 80076be:	e005      	b.n	80076cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fa5e 	bl	8007b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fa6f 	bl	8007baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d122      	bne.n	8007726 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f003 0304 	and.w	r3, r3, #4
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d11b      	bne.n	8007726 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f06f 0204 	mvn.w	r2, #4
 80076f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fa42 	bl	8007b96 <HAL_TIM_IC_CaptureCallback>
 8007712:	e005      	b.n	8007720 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fa34 	bl	8007b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa45 	bl	8007baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b08      	cmp	r3, #8
 8007732:	d122      	bne.n	800777a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f003 0308 	and.w	r3, r3, #8
 800773e:	2b08      	cmp	r3, #8
 8007740:	d11b      	bne.n	800777a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f06f 0208 	mvn.w	r2, #8
 800774a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2204      	movs	r2, #4
 8007750:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69db      	ldr	r3, [r3, #28]
 8007758:	f003 0303 	and.w	r3, r3, #3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fa18 	bl	8007b96 <HAL_TIM_IC_CaptureCallback>
 8007766:	e005      	b.n	8007774 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fa0a 	bl	8007b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fa1b 	bl	8007baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	f003 0310 	and.w	r3, r3, #16
 8007784:	2b10      	cmp	r3, #16
 8007786:	d122      	bne.n	80077ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f003 0310 	and.w	r3, r3, #16
 8007792:	2b10      	cmp	r3, #16
 8007794:	d11b      	bne.n	80077ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f06f 0210 	mvn.w	r2, #16
 800779e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2208      	movs	r2, #8
 80077a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f9ee 	bl	8007b96 <HAL_TIM_IC_CaptureCallback>
 80077ba:	e005      	b.n	80077c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f9e0 	bl	8007b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f9f1 	bl	8007baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d10e      	bne.n	80077fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d107      	bne.n	80077fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f06f 0201 	mvn.w	r2, #1
 80077f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7fa f8ed 	bl	80019d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007804:	2b80      	cmp	r3, #128	; 0x80
 8007806:	d10e      	bne.n	8007826 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007812:	2b80      	cmp	r3, #128	; 0x80
 8007814:	d107      	bne.n	8007826 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800781e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fd1b 	bl	800825c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007830:	2b40      	cmp	r3, #64	; 0x40
 8007832:	d10e      	bne.n	8007852 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783e:	2b40      	cmp	r3, #64	; 0x40
 8007840:	d107      	bne.n	8007852 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800784a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f9b6 	bl	8007bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	f003 0320 	and.w	r3, r3, #32
 800785c:	2b20      	cmp	r3, #32
 800785e:	d10e      	bne.n	800787e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f003 0320 	and.w	r3, r3, #32
 800786a:	2b20      	cmp	r3, #32
 800786c:	d107      	bne.n	800787e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f06f 0220 	mvn.w	r2, #32
 8007876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fce5 	bl	8008248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800787e:	bf00      	nop
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800789e:	2302      	movs	r3, #2
 80078a0:	e0b4      	b.n	8007a0c <HAL_TIM_PWM_ConfigChannel+0x184>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2202      	movs	r2, #2
 80078ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b0c      	cmp	r3, #12
 80078b6:	f200 809f 	bhi.w	80079f8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80078ba:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	080078f5 	.word	0x080078f5
 80078c4:	080079f9 	.word	0x080079f9
 80078c8:	080079f9 	.word	0x080079f9
 80078cc:	080079f9 	.word	0x080079f9
 80078d0:	08007935 	.word	0x08007935
 80078d4:	080079f9 	.word	0x080079f9
 80078d8:	080079f9 	.word	0x080079f9
 80078dc:	080079f9 	.word	0x080079f9
 80078e0:	08007977 	.word	0x08007977
 80078e4:	080079f9 	.word	0x080079f9
 80078e8:	080079f9 	.word	0x080079f9
 80078ec:	080079f9 	.word	0x080079f9
 80078f0:	080079b7 	.word	0x080079b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 f9ea 	bl	8007cd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699a      	ldr	r2, [r3, #24]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0208 	orr.w	r2, r2, #8
 800790e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699a      	ldr	r2, [r3, #24]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 0204 	bic.w	r2, r2, #4
 800791e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6999      	ldr	r1, [r3, #24]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	619a      	str	r2, [r3, #24]
      break;
 8007932:	e062      	b.n	80079fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68b9      	ldr	r1, [r7, #8]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fa30 	bl	8007da0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	699a      	ldr	r2, [r3, #24]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800794e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699a      	ldr	r2, [r3, #24]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800795e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6999      	ldr	r1, [r3, #24]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	021a      	lsls	r2, r3, #8
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	619a      	str	r2, [r3, #24]
      break;
 8007974:	e041      	b.n	80079fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68b9      	ldr	r1, [r7, #8]
 800797c:	4618      	mov	r0, r3
 800797e:	f000 fa7b 	bl	8007e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69da      	ldr	r2, [r3, #28]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f042 0208 	orr.w	r2, r2, #8
 8007990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69da      	ldr	r2, [r3, #28]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 0204 	bic.w	r2, r2, #4
 80079a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69d9      	ldr	r1, [r3, #28]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	691a      	ldr	r2, [r3, #16]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	61da      	str	r2, [r3, #28]
      break;
 80079b4:	e021      	b.n	80079fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68b9      	ldr	r1, [r7, #8]
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 fac5 	bl	8007f4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69da      	ldr	r2, [r3, #28]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	69da      	ldr	r2, [r3, #28]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	69d9      	ldr	r1, [r3, #28]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	021a      	lsls	r2, r3, #8
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	61da      	str	r2, [r3, #28]
      break;
 80079f6:	e000      	b.n	80079fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80079f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d101      	bne.n	8007a2c <HAL_TIM_ConfigClockSource+0x18>
 8007a28:	2302      	movs	r3, #2
 8007a2a:	e0a6      	b.n	8007b7a <HAL_TIM_ConfigClockSource+0x166>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b40      	cmp	r3, #64	; 0x40
 8007a62:	d067      	beq.n	8007b34 <HAL_TIM_ConfigClockSource+0x120>
 8007a64:	2b40      	cmp	r3, #64	; 0x40
 8007a66:	d80b      	bhi.n	8007a80 <HAL_TIM_ConfigClockSource+0x6c>
 8007a68:	2b10      	cmp	r3, #16
 8007a6a:	d073      	beq.n	8007b54 <HAL_TIM_ConfigClockSource+0x140>
 8007a6c:	2b10      	cmp	r3, #16
 8007a6e:	d802      	bhi.n	8007a76 <HAL_TIM_ConfigClockSource+0x62>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d06f      	beq.n	8007b54 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007a74:	e078      	b.n	8007b68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007a76:	2b20      	cmp	r3, #32
 8007a78:	d06c      	beq.n	8007b54 <HAL_TIM_ConfigClockSource+0x140>
 8007a7a:	2b30      	cmp	r3, #48	; 0x30
 8007a7c:	d06a      	beq.n	8007b54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007a7e:	e073      	b.n	8007b68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007a80:	2b70      	cmp	r3, #112	; 0x70
 8007a82:	d00d      	beq.n	8007aa0 <HAL_TIM_ConfigClockSource+0x8c>
 8007a84:	2b70      	cmp	r3, #112	; 0x70
 8007a86:	d804      	bhi.n	8007a92 <HAL_TIM_ConfigClockSource+0x7e>
 8007a88:	2b50      	cmp	r3, #80	; 0x50
 8007a8a:	d033      	beq.n	8007af4 <HAL_TIM_ConfigClockSource+0xe0>
 8007a8c:	2b60      	cmp	r3, #96	; 0x60
 8007a8e:	d041      	beq.n	8007b14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007a90:	e06a      	b.n	8007b68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a96:	d066      	beq.n	8007b66 <HAL_TIM_ConfigClockSource+0x152>
 8007a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a9c:	d017      	beq.n	8007ace <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007a9e:	e063      	b.n	8007b68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6818      	ldr	r0, [r3, #0]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	6899      	ldr	r1, [r3, #8]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f000 fb16 	bl	80080e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ac2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	609a      	str	r2, [r3, #8]
      break;
 8007acc:	e04c      	b.n	8007b68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	6899      	ldr	r1, [r3, #8]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	f000 faff 	bl	80080e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007af0:	609a      	str	r2, [r3, #8]
      break;
 8007af2:	e039      	b.n	8007b68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6818      	ldr	r0, [r3, #0]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	6859      	ldr	r1, [r3, #4]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	461a      	mov	r2, r3
 8007b02:	f000 fa73 	bl	8007fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2150      	movs	r1, #80	; 0x50
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 facc 	bl	80080aa <TIM_ITRx_SetConfig>
      break;
 8007b12:	e029      	b.n	8007b68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6818      	ldr	r0, [r3, #0]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	6859      	ldr	r1, [r3, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	461a      	mov	r2, r3
 8007b22:	f000 fa92 	bl	800804a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2160      	movs	r1, #96	; 0x60
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fabc 	bl	80080aa <TIM_ITRx_SetConfig>
      break;
 8007b32:	e019      	b.n	8007b68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6818      	ldr	r0, [r3, #0]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	6859      	ldr	r1, [r3, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	461a      	mov	r2, r3
 8007b42:	f000 fa53 	bl	8007fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2140      	movs	r1, #64	; 0x40
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 faac 	bl	80080aa <TIM_ITRx_SetConfig>
      break;
 8007b52:	e009      	b.n	8007b68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4610      	mov	r0, r2
 8007b60:	f000 faa3 	bl	80080aa <TIM_ITRx_SetConfig>
      break;
 8007b64:	e000      	b.n	8007b68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007b66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b8a:	bf00      	nop
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b9e:	bf00      	nop
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bb2:	bf00      	nop
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
	...

08007bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a34      	ldr	r2, [pc, #208]	; (8007cb8 <TIM_Base_SetConfig+0xe4>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d00f      	beq.n	8007c0c <TIM_Base_SetConfig+0x38>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf2:	d00b      	beq.n	8007c0c <TIM_Base_SetConfig+0x38>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a31      	ldr	r2, [pc, #196]	; (8007cbc <TIM_Base_SetConfig+0xe8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d007      	beq.n	8007c0c <TIM_Base_SetConfig+0x38>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a30      	ldr	r2, [pc, #192]	; (8007cc0 <TIM_Base_SetConfig+0xec>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d003      	beq.n	8007c0c <TIM_Base_SetConfig+0x38>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a2f      	ldr	r2, [pc, #188]	; (8007cc4 <TIM_Base_SetConfig+0xf0>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d108      	bne.n	8007c1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a25      	ldr	r2, [pc, #148]	; (8007cb8 <TIM_Base_SetConfig+0xe4>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d01b      	beq.n	8007c5e <TIM_Base_SetConfig+0x8a>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c2c:	d017      	beq.n	8007c5e <TIM_Base_SetConfig+0x8a>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a22      	ldr	r2, [pc, #136]	; (8007cbc <TIM_Base_SetConfig+0xe8>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d013      	beq.n	8007c5e <TIM_Base_SetConfig+0x8a>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a21      	ldr	r2, [pc, #132]	; (8007cc0 <TIM_Base_SetConfig+0xec>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d00f      	beq.n	8007c5e <TIM_Base_SetConfig+0x8a>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a20      	ldr	r2, [pc, #128]	; (8007cc4 <TIM_Base_SetConfig+0xf0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00b      	beq.n	8007c5e <TIM_Base_SetConfig+0x8a>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a1f      	ldr	r2, [pc, #124]	; (8007cc8 <TIM_Base_SetConfig+0xf4>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d007      	beq.n	8007c5e <TIM_Base_SetConfig+0x8a>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a1e      	ldr	r2, [pc, #120]	; (8007ccc <TIM_Base_SetConfig+0xf8>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d003      	beq.n	8007c5e <TIM_Base_SetConfig+0x8a>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a1d      	ldr	r2, [pc, #116]	; (8007cd0 <TIM_Base_SetConfig+0xfc>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d108      	bne.n	8007c70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a08      	ldr	r2, [pc, #32]	; (8007cb8 <TIM_Base_SetConfig+0xe4>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d103      	bne.n	8007ca4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	691a      	ldr	r2, [r3, #16]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	615a      	str	r2, [r3, #20]
}
 8007caa:	bf00      	nop
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	40010000 	.word	0x40010000
 8007cbc:	40000400 	.word	0x40000400
 8007cc0:	40000800 	.word	0x40000800
 8007cc4:	40000c00 	.word	0x40000c00
 8007cc8:	40014000 	.word	0x40014000
 8007ccc:	40014400 	.word	0x40014400
 8007cd0:	40014800 	.word	0x40014800

08007cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	f023 0201 	bic.w	r2, r3, #1
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 0303 	bic.w	r3, r3, #3
 8007d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f023 0302 	bic.w	r3, r3, #2
 8007d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a1c      	ldr	r2, [pc, #112]	; (8007d9c <TIM_OC1_SetConfig+0xc8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d10c      	bne.n	8007d4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f023 0308 	bic.w	r3, r3, #8
 8007d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f023 0304 	bic.w	r3, r3, #4
 8007d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a13      	ldr	r2, [pc, #76]	; (8007d9c <TIM_OC1_SetConfig+0xc8>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d111      	bne.n	8007d76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	621a      	str	r2, [r3, #32]
}
 8007d90:	bf00      	nop
 8007d92:	371c      	adds	r7, #28
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	40010000 	.word	0x40010000

08007da0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	f023 0210 	bic.w	r2, r3, #16
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	021b      	lsls	r3, r3, #8
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f023 0320 	bic.w	r3, r3, #32
 8007dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a1e      	ldr	r2, [pc, #120]	; (8007e74 <TIM_OC2_SetConfig+0xd4>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d10d      	bne.n	8007e1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	011b      	lsls	r3, r3, #4
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a15      	ldr	r2, [pc, #84]	; (8007e74 <TIM_OC2_SetConfig+0xd4>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d113      	bne.n	8007e4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	621a      	str	r2, [r3, #32]
}
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	40010000 	.word	0x40010000

08007e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 0303 	bic.w	r3, r3, #3
 8007eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a1d      	ldr	r2, [pc, #116]	; (8007f48 <TIM_OC3_SetConfig+0xd0>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d10d      	bne.n	8007ef2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	021b      	lsls	r3, r3, #8
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a14      	ldr	r2, [pc, #80]	; (8007f48 <TIM_OC3_SetConfig+0xd0>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d113      	bne.n	8007f22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	011b      	lsls	r3, r3, #4
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	621a      	str	r2, [r3, #32]
}
 8007f3c:	bf00      	nop
 8007f3e:	371c      	adds	r7, #28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	40010000 	.word	0x40010000

08007f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	021b      	lsls	r3, r3, #8
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	031b      	lsls	r3, r3, #12
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a10      	ldr	r2, [pc, #64]	; (8007fe8 <TIM_OC4_SetConfig+0x9c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d109      	bne.n	8007fc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	019b      	lsls	r3, r3, #6
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	621a      	str	r2, [r3, #32]
}
 8007fda:	bf00      	nop
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	40010000 	.word	0x40010000

08007fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	f023 0201 	bic.w	r2, r3, #1
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4313      	orrs	r3, r2
 8008020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f023 030a 	bic.w	r3, r3, #10
 8008028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	621a      	str	r2, [r3, #32]
}
 800803e:	bf00      	nop
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800804a:	b480      	push	{r7}
 800804c:	b087      	sub	sp, #28
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	f023 0210 	bic.w	r2, r3, #16
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	031b      	lsls	r3, r3, #12
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	4313      	orrs	r3, r2
 800807e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	011b      	lsls	r3, r3, #4
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	4313      	orrs	r3, r2
 8008090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	621a      	str	r2, [r3, #32]
}
 800809e:	bf00      	nop
 80080a0:	371c      	adds	r7, #28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b085      	sub	sp, #20
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	f043 0307 	orr.w	r3, r3, #7
 80080cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	609a      	str	r2, [r3, #8]
}
 80080d4:	bf00      	nop
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	021a      	lsls	r2, r3, #8
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	431a      	orrs	r2, r3
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	4313      	orrs	r3, r2
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	4313      	orrs	r3, r2
 800810c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	609a      	str	r2, [r3, #8]
}
 8008114:	bf00      	nop
 8008116:	371c      	adds	r7, #28
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008120:	b480      	push	{r7}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f003 031f 	and.w	r3, r3, #31
 8008132:	2201      	movs	r2, #1
 8008134:	fa02 f303 	lsl.w	r3, r2, r3
 8008138:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6a1a      	ldr	r2, [r3, #32]
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	43db      	mvns	r3, r3
 8008142:	401a      	ands	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6a1a      	ldr	r2, [r3, #32]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f003 031f 	and.w	r3, r3, #31
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	fa01 f303 	lsl.w	r3, r1, r3
 8008158:	431a      	orrs	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	621a      	str	r2, [r3, #32]
}
 800815e:	bf00      	nop
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
	...

0800816c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800817c:	2b01      	cmp	r3, #1
 800817e:	d101      	bne.n	8008184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008180:	2302      	movs	r3, #2
 8008182:	e050      	b.n	8008226 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a1c      	ldr	r2, [pc, #112]	; (8008234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d018      	beq.n	80081fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d0:	d013      	beq.n	80081fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a18      	ldr	r2, [pc, #96]	; (8008238 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d00e      	beq.n	80081fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a16      	ldr	r2, [pc, #88]	; (800823c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d009      	beq.n	80081fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a15      	ldr	r2, [pc, #84]	; (8008240 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d004      	beq.n	80081fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a13      	ldr	r2, [pc, #76]	; (8008244 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d10c      	bne.n	8008214 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	4313      	orrs	r3, r2
 800820a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	40010000 	.word	0x40010000
 8008238:	40000400 	.word	0x40000400
 800823c:	40000800 	.word	0x40000800
 8008240:	40000c00 	.word	0x40000c00
 8008244:	40014000 	.word	0x40014000

08008248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e03f      	b.n	8008302 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d106      	bne.n	800829c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7fb fcb0 	bl	8003bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2224      	movs	r2, #36	; 0x24
 80082a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fc41 	bl	8008b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	691a      	ldr	r2, [r3, #16]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	695a      	ldr	r2, [r3, #20]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68da      	ldr	r2, [r3, #12]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2220      	movs	r2, #32
 80082f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2220      	movs	r2, #32
 80082fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b20      	cmp	r3, #32
 8008324:	d153      	bne.n	80083ce <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <HAL_UART_Transmit_DMA+0x26>
 800832c:	88fb      	ldrh	r3, [r7, #6]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e04c      	b.n	80083d0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800833c:	2b01      	cmp	r3, #1
 800833e:	d101      	bne.n	8008344 <HAL_UART_Transmit_DMA+0x38>
 8008340:	2302      	movs	r3, #2
 8008342:	e045      	b.n	80083d0 <HAL_UART_Transmit_DMA+0xc4>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	88fa      	ldrh	r2, [r7, #6]
 8008356:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	88fa      	ldrh	r2, [r7, #6]
 800835c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2221      	movs	r2, #33	; 0x21
 8008368:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008370:	4a19      	ldr	r2, [pc, #100]	; (80083d8 <HAL_UART_Transmit_DMA+0xcc>)
 8008372:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008378:	4a18      	ldr	r2, [pc, #96]	; (80083dc <HAL_UART_Transmit_DMA+0xd0>)
 800837a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008380:	4a17      	ldr	r2, [pc, #92]	; (80083e0 <HAL_UART_Transmit_DMA+0xd4>)
 8008382:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008388:	2200      	movs	r2, #0
 800838a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800838c:	f107 0308 	add.w	r3, r7, #8
 8008390:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	6819      	ldr	r1, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3304      	adds	r3, #4
 80083a0:	461a      	mov	r2, r3
 80083a2:	88fb      	ldrh	r3, [r7, #6]
 80083a4:	f7fc f81a 	bl	80043dc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083b0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	695a      	ldr	r2, [r3, #20]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083c8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	e000      	b.n	80083d0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80083ce:	2302      	movs	r3, #2
  }
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	08008749 	.word	0x08008749
 80083dc:	0800879b 	.word	0x0800879b
 80083e0:	0800883b 	.word	0x0800883b

080083e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	d166      	bne.n	80084cc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <HAL_UART_Receive_DMA+0x26>
 8008404:	88fb      	ldrh	r3, [r7, #6]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e05f      	b.n	80084ce <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008414:	2b01      	cmp	r3, #1
 8008416:	d101      	bne.n	800841c <HAL_UART_Receive_DMA+0x38>
 8008418:	2302      	movs	r3, #2
 800841a:	e058      	b.n	80084ce <HAL_UART_Receive_DMA+0xea>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	88fa      	ldrh	r2, [r7, #6]
 800842e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2222      	movs	r2, #34	; 0x22
 800843a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008442:	4a25      	ldr	r2, [pc, #148]	; (80084d8 <HAL_UART_Receive_DMA+0xf4>)
 8008444:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844a:	4a24      	ldr	r2, [pc, #144]	; (80084dc <HAL_UART_Receive_DMA+0xf8>)
 800844c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008452:	4a23      	ldr	r2, [pc, #140]	; (80084e0 <HAL_UART_Receive_DMA+0xfc>)
 8008454:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845a:	2200      	movs	r2, #0
 800845c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800845e:	f107 0308 	add.w	r3, r7, #8
 8008462:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3304      	adds	r3, #4
 800846e:	4619      	mov	r1, r3
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	88fb      	ldrh	r3, [r7, #6]
 8008476:	f7fb ffb1 	bl	80043dc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800847a:	2300      	movs	r3, #0
 800847c:	613b      	str	r3, [r7, #16]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	613b      	str	r3, [r7, #16]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	613b      	str	r3, [r7, #16]
 800848e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084a6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	695a      	ldr	r2, [r3, #20]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0201 	orr.w	r2, r2, #1
 80084b6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	695a      	ldr	r2, [r3, #20]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084c6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	e000      	b.n	80084ce <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80084cc:	2302      	movs	r3, #2
  }
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3718      	adds	r7, #24
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	080087b7 	.word	0x080087b7
 80084dc:	0800881f 	.word	0x0800881f
 80084e0:	0800883b 	.word	0x0800883b

080084e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008504:	2300      	movs	r3, #0
 8008506:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008508:	2300      	movs	r3, #0
 800850a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10d      	bne.n	8008536 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	f003 0320 	and.w	r3, r3, #32
 8008520:	2b00      	cmp	r3, #0
 8008522:	d008      	beq.n	8008536 <HAL_UART_IRQHandler+0x52>
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	f003 0320 	and.w	r3, r3, #32
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fa83 	bl	8008a3a <UART_Receive_IT>
      return;
 8008534:	e0d1      	b.n	80086da <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 80b0 	beq.w	800869e <HAL_UART_IRQHandler+0x1ba>
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	d105      	bne.n	8008554 <HAL_UART_IRQHandler+0x70>
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 80a5 	beq.w	800869e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00a      	beq.n	8008574 <HAL_UART_IRQHandler+0x90>
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856c:	f043 0201 	orr.w	r2, r3, #1
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	f003 0304 	and.w	r3, r3, #4
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <HAL_UART_IRQHandler+0xb0>
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f003 0301 	and.w	r3, r3, #1
 8008584:	2b00      	cmp	r3, #0
 8008586:	d005      	beq.n	8008594 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858c:	f043 0202 	orr.w	r2, r3, #2
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <HAL_UART_IRQHandler+0xd0>
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d005      	beq.n	80085b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ac:	f043 0204 	orr.w	r2, r3, #4
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	f003 0308 	and.w	r3, r3, #8
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00f      	beq.n	80085de <HAL_UART_IRQHandler+0xfa>
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	f003 0320 	and.w	r3, r3, #32
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d104      	bne.n	80085d2 <HAL_UART_IRQHandler+0xee>
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d005      	beq.n	80085de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d6:	f043 0208 	orr.w	r2, r3, #8
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d078      	beq.n	80086d8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	f003 0320 	and.w	r3, r3, #32
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d007      	beq.n	8008600 <HAL_UART_IRQHandler+0x11c>
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fa1d 	bl	8008a3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800860a:	2b40      	cmp	r3, #64	; 0x40
 800860c:	bf0c      	ite	eq
 800860e:	2301      	moveq	r3, #1
 8008610:	2300      	movne	r3, #0
 8008612:	b2db      	uxtb	r3, r3
 8008614:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861a:	f003 0308 	and.w	r3, r3, #8
 800861e:	2b00      	cmp	r3, #0
 8008620:	d102      	bne.n	8008628 <HAL_UART_IRQHandler+0x144>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d031      	beq.n	800868c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f966 	bl	80088fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008638:	2b40      	cmp	r3, #64	; 0x40
 800863a:	d123      	bne.n	8008684 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	695a      	ldr	r2, [r3, #20]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800864a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008650:	2b00      	cmp	r3, #0
 8008652:	d013      	beq.n	800867c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008658:	4a21      	ldr	r2, [pc, #132]	; (80086e0 <HAL_UART_IRQHandler+0x1fc>)
 800865a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008660:	4618      	mov	r0, r3
 8008662:	f7fb ff13 	bl	800448c <HAL_DMA_Abort_IT>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d016      	beq.n	800869a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008676:	4610      	mov	r0, r2
 8008678:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800867a:	e00e      	b.n	800869a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f859 	bl	8008734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008682:	e00a      	b.n	800869a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f855 	bl	8008734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800868a:	e006      	b.n	800869a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f851 	bl	8008734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008698:	e01e      	b.n	80086d8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800869a:	bf00      	nop
    return;
 800869c:	e01c      	b.n	80086d8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d008      	beq.n	80086ba <HAL_UART_IRQHandler+0x1d6>
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f953 	bl	800895e <UART_Transmit_IT>
    return;
 80086b8:	e00f      	b.n	80086da <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00a      	beq.n	80086da <HAL_UART_IRQHandler+0x1f6>
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d005      	beq.n	80086da <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f99b 	bl	8008a0a <UART_EndTransmit_IT>
    return;
 80086d4:	bf00      	nop
 80086d6:	e000      	b.n	80086da <HAL_UART_IRQHandler+0x1f6>
    return;
 80086d8:	bf00      	nop
  }
}
 80086da:	3720      	adds	r7, #32
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	08008937 	.word	0x08008937

080086e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008754:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008760:	2b00      	cmp	r3, #0
 8008762:	d113      	bne.n	800878c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695a      	ldr	r2, [r3, #20]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008778:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008788:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800878a:	e002      	b.n	8008792 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f7ff ffa9 	bl	80086e4 <HAL_UART_TxCpltCallback>
}
 8008792:	bf00      	nop
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f7ff ffa5 	bl	80086f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ae:	bf00      	nop
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d11e      	bne.n	8008810 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087e6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	695a      	ldr	r2, [r3, #20]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0201 	bic.w	r2, r2, #1
 80087f6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	695a      	ldr	r2, [r3, #20]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008806:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2220      	movs	r2, #32
 800880c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f7ff ff7b 	bl	800870c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008816:	bf00      	nop
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f7ff ff77 	bl	8008720 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008832:	bf00      	nop
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008842:	2300      	movs	r3, #0
 8008844:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008856:	2b80      	cmp	r3, #128	; 0x80
 8008858:	bf0c      	ite	eq
 800885a:	2301      	moveq	r3, #1
 800885c:	2300      	movne	r3, #0
 800885e:	b2db      	uxtb	r3, r3
 8008860:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b21      	cmp	r3, #33	; 0x21
 800886c:	d108      	bne.n	8008880 <UART_DMAError+0x46>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d005      	beq.n	8008880 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2200      	movs	r2, #0
 8008878:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800887a:	68b8      	ldr	r0, [r7, #8]
 800887c:	f000 f827 	bl	80088ce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888a:	2b40      	cmp	r3, #64	; 0x40
 800888c:	bf0c      	ite	eq
 800888e:	2301      	moveq	r3, #1
 8008890:	2300      	movne	r3, #0
 8008892:	b2db      	uxtb	r3, r3
 8008894:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b22      	cmp	r3, #34	; 0x22
 80088a0:	d108      	bne.n	80088b4 <UART_DMAError+0x7a>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2200      	movs	r2, #0
 80088ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80088ae:	68b8      	ldr	r0, [r7, #8]
 80088b0:	f000 f823 	bl	80088fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b8:	f043 0210 	orr.w	r2, r3, #16
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088c0:	68b8      	ldr	r0, [r7, #8]
 80088c2:	f7ff ff37 	bl	8008734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088c6:	bf00      	nop
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b083      	sub	sp, #12
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68da      	ldr	r2, [r3, #12]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80088e4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2220      	movs	r2, #32
 80088ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80088ee:	bf00      	nop
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b083      	sub	sp, #12
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008910:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	695a      	ldr	r2, [r3, #20]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f022 0201 	bic.w	r2, r2, #1
 8008920:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2220      	movs	r2, #32
 8008926:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b084      	sub	sp, #16
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008942:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f7ff feef 	bl	8008734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008956:	bf00      	nop
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800895e:	b480      	push	{r7}
 8008960:	b085      	sub	sp, #20
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b21      	cmp	r3, #33	; 0x21
 8008970:	d144      	bne.n	80089fc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800897a:	d11a      	bne.n	80089b2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008990:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d105      	bne.n	80089a6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	1c9a      	adds	r2, r3, #2
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	621a      	str	r2, [r3, #32]
 80089a4:	e00e      	b.n	80089c4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	1c5a      	adds	r2, r3, #1
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	621a      	str	r2, [r3, #32]
 80089b0:	e008      	b.n	80089c4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	1c59      	adds	r1, r3, #1
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	6211      	str	r1, [r2, #32]
 80089bc:	781a      	ldrb	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	3b01      	subs	r3, #1
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	4619      	mov	r1, r3
 80089d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10f      	bne.n	80089f8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68da      	ldr	r2, [r3, #12]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	e000      	b.n	80089fe <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80089fc:	2302      	movs	r3, #2
  }
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68da      	ldr	r2, [r3, #12]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7ff fe5a 	bl	80086e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b22      	cmp	r3, #34	; 0x22
 8008a4c:	d171      	bne.n	8008b32 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a56:	d123      	bne.n	8008aa0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d10e      	bne.n	8008a84 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7c:	1c9a      	adds	r2, r3, #2
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	629a      	str	r2, [r3, #40]	; 0x28
 8008a82:	e029      	b.n	8008ad8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a98:	1c5a      	adds	r2, r3, #1
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	629a      	str	r2, [r3, #40]	; 0x28
 8008a9e:	e01b      	b.n	8008ad8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10a      	bne.n	8008abe <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6858      	ldr	r0, [r3, #4]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab2:	1c59      	adds	r1, r3, #1
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	6291      	str	r1, [r2, #40]	; 0x28
 8008ab8:	b2c2      	uxtb	r2, r0
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	e00c      	b.n	8008ad8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aca:	1c58      	adds	r0, r3, #1
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	6288      	str	r0, [r1, #40]	; 0x28
 8008ad0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008ad4:	b2d2      	uxtb	r2, r2
 8008ad6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d120      	bne.n	8008b2e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68da      	ldr	r2, [r3, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f022 0220 	bic.w	r2, r2, #32
 8008afa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68da      	ldr	r2, [r3, #12]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	695a      	ldr	r2, [r3, #20]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0201 	bic.w	r2, r2, #1
 8008b1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff fdf1 	bl	800870c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e002      	b.n	8008b34 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	e000      	b.n	8008b34 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008b32:	2302      	movs	r3, #2
  }
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b40:	b085      	sub	sp, #20
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68da      	ldr	r2, [r3, #12]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689a      	ldr	r2, [r3, #8]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	431a      	orrs	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008b7e:	f023 030c 	bic.w	r3, r3, #12
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	6812      	ldr	r2, [r2, #0]
 8008b86:	68f9      	ldr	r1, [r7, #12]
 8008b88:	430b      	orrs	r3, r1
 8008b8a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	699a      	ldr	r2, [r3, #24]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	430a      	orrs	r2, r1
 8008ba0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008baa:	f040 818b 	bne.w	8008ec4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4ac1      	ldr	r2, [pc, #772]	; (8008eb8 <UART_SetConfig+0x37c>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d005      	beq.n	8008bc4 <UART_SetConfig+0x88>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4abf      	ldr	r2, [pc, #764]	; (8008ebc <UART_SetConfig+0x380>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	f040 80bd 	bne.w	8008d3e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bc4:	f7fe fbaa 	bl	800731c <HAL_RCC_GetPCLK2Freq>
 8008bc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	461d      	mov	r5, r3
 8008bce:	f04f 0600 	mov.w	r6, #0
 8008bd2:	46a8      	mov	r8, r5
 8008bd4:	46b1      	mov	r9, r6
 8008bd6:	eb18 0308 	adds.w	r3, r8, r8
 8008bda:	eb49 0409 	adc.w	r4, r9, r9
 8008bde:	4698      	mov	r8, r3
 8008be0:	46a1      	mov	r9, r4
 8008be2:	eb18 0805 	adds.w	r8, r8, r5
 8008be6:	eb49 0906 	adc.w	r9, r9, r6
 8008bea:	f04f 0100 	mov.w	r1, #0
 8008bee:	f04f 0200 	mov.w	r2, #0
 8008bf2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008bf6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008bfa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008bfe:	4688      	mov	r8, r1
 8008c00:	4691      	mov	r9, r2
 8008c02:	eb18 0005 	adds.w	r0, r8, r5
 8008c06:	eb49 0106 	adc.w	r1, r9, r6
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	461d      	mov	r5, r3
 8008c10:	f04f 0600 	mov.w	r6, #0
 8008c14:	196b      	adds	r3, r5, r5
 8008c16:	eb46 0406 	adc.w	r4, r6, r6
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	4623      	mov	r3, r4
 8008c1e:	f7f8 f8a5 	bl	8000d6c <__aeabi_uldivmod>
 8008c22:	4603      	mov	r3, r0
 8008c24:	460c      	mov	r4, r1
 8008c26:	461a      	mov	r2, r3
 8008c28:	4ba5      	ldr	r3, [pc, #660]	; (8008ec0 <UART_SetConfig+0x384>)
 8008c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8008c2e:	095b      	lsrs	r3, r3, #5
 8008c30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	461d      	mov	r5, r3
 8008c38:	f04f 0600 	mov.w	r6, #0
 8008c3c:	46a9      	mov	r9, r5
 8008c3e:	46b2      	mov	sl, r6
 8008c40:	eb19 0309 	adds.w	r3, r9, r9
 8008c44:	eb4a 040a 	adc.w	r4, sl, sl
 8008c48:	4699      	mov	r9, r3
 8008c4a:	46a2      	mov	sl, r4
 8008c4c:	eb19 0905 	adds.w	r9, r9, r5
 8008c50:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c54:	f04f 0100 	mov.w	r1, #0
 8008c58:	f04f 0200 	mov.w	r2, #0
 8008c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c68:	4689      	mov	r9, r1
 8008c6a:	4692      	mov	sl, r2
 8008c6c:	eb19 0005 	adds.w	r0, r9, r5
 8008c70:	eb4a 0106 	adc.w	r1, sl, r6
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	461d      	mov	r5, r3
 8008c7a:	f04f 0600 	mov.w	r6, #0
 8008c7e:	196b      	adds	r3, r5, r5
 8008c80:	eb46 0406 	adc.w	r4, r6, r6
 8008c84:	461a      	mov	r2, r3
 8008c86:	4623      	mov	r3, r4
 8008c88:	f7f8 f870 	bl	8000d6c <__aeabi_uldivmod>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	460c      	mov	r4, r1
 8008c90:	461a      	mov	r2, r3
 8008c92:	4b8b      	ldr	r3, [pc, #556]	; (8008ec0 <UART_SetConfig+0x384>)
 8008c94:	fba3 1302 	umull	r1, r3, r3, r2
 8008c98:	095b      	lsrs	r3, r3, #5
 8008c9a:	2164      	movs	r1, #100	; 0x64
 8008c9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	00db      	lsls	r3, r3, #3
 8008ca4:	3332      	adds	r3, #50	; 0x32
 8008ca6:	4a86      	ldr	r2, [pc, #536]	; (8008ec0 <UART_SetConfig+0x384>)
 8008ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cac:	095b      	lsrs	r3, r3, #5
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008cb4:	4498      	add	r8, r3
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	461d      	mov	r5, r3
 8008cba:	f04f 0600 	mov.w	r6, #0
 8008cbe:	46a9      	mov	r9, r5
 8008cc0:	46b2      	mov	sl, r6
 8008cc2:	eb19 0309 	adds.w	r3, r9, r9
 8008cc6:	eb4a 040a 	adc.w	r4, sl, sl
 8008cca:	4699      	mov	r9, r3
 8008ccc:	46a2      	mov	sl, r4
 8008cce:	eb19 0905 	adds.w	r9, r9, r5
 8008cd2:	eb4a 0a06 	adc.w	sl, sl, r6
 8008cd6:	f04f 0100 	mov.w	r1, #0
 8008cda:	f04f 0200 	mov.w	r2, #0
 8008cde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ce2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ce6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008cea:	4689      	mov	r9, r1
 8008cec:	4692      	mov	sl, r2
 8008cee:	eb19 0005 	adds.w	r0, r9, r5
 8008cf2:	eb4a 0106 	adc.w	r1, sl, r6
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	461d      	mov	r5, r3
 8008cfc:	f04f 0600 	mov.w	r6, #0
 8008d00:	196b      	adds	r3, r5, r5
 8008d02:	eb46 0406 	adc.w	r4, r6, r6
 8008d06:	461a      	mov	r2, r3
 8008d08:	4623      	mov	r3, r4
 8008d0a:	f7f8 f82f 	bl	8000d6c <__aeabi_uldivmod>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	460c      	mov	r4, r1
 8008d12:	461a      	mov	r2, r3
 8008d14:	4b6a      	ldr	r3, [pc, #424]	; (8008ec0 <UART_SetConfig+0x384>)
 8008d16:	fba3 1302 	umull	r1, r3, r3, r2
 8008d1a:	095b      	lsrs	r3, r3, #5
 8008d1c:	2164      	movs	r1, #100	; 0x64
 8008d1e:	fb01 f303 	mul.w	r3, r1, r3
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	3332      	adds	r3, #50	; 0x32
 8008d28:	4a65      	ldr	r2, [pc, #404]	; (8008ec0 <UART_SetConfig+0x384>)
 8008d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2e:	095b      	lsrs	r3, r3, #5
 8008d30:	f003 0207 	and.w	r2, r3, #7
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4442      	add	r2, r8
 8008d3a:	609a      	str	r2, [r3, #8]
 8008d3c:	e26f      	b.n	800921e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d3e:	f7fe fad9 	bl	80072f4 <HAL_RCC_GetPCLK1Freq>
 8008d42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	461d      	mov	r5, r3
 8008d48:	f04f 0600 	mov.w	r6, #0
 8008d4c:	46a8      	mov	r8, r5
 8008d4e:	46b1      	mov	r9, r6
 8008d50:	eb18 0308 	adds.w	r3, r8, r8
 8008d54:	eb49 0409 	adc.w	r4, r9, r9
 8008d58:	4698      	mov	r8, r3
 8008d5a:	46a1      	mov	r9, r4
 8008d5c:	eb18 0805 	adds.w	r8, r8, r5
 8008d60:	eb49 0906 	adc.w	r9, r9, r6
 8008d64:	f04f 0100 	mov.w	r1, #0
 8008d68:	f04f 0200 	mov.w	r2, #0
 8008d6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008d70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008d74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008d78:	4688      	mov	r8, r1
 8008d7a:	4691      	mov	r9, r2
 8008d7c:	eb18 0005 	adds.w	r0, r8, r5
 8008d80:	eb49 0106 	adc.w	r1, r9, r6
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	461d      	mov	r5, r3
 8008d8a:	f04f 0600 	mov.w	r6, #0
 8008d8e:	196b      	adds	r3, r5, r5
 8008d90:	eb46 0406 	adc.w	r4, r6, r6
 8008d94:	461a      	mov	r2, r3
 8008d96:	4623      	mov	r3, r4
 8008d98:	f7f7 ffe8 	bl	8000d6c <__aeabi_uldivmod>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	460c      	mov	r4, r1
 8008da0:	461a      	mov	r2, r3
 8008da2:	4b47      	ldr	r3, [pc, #284]	; (8008ec0 <UART_SetConfig+0x384>)
 8008da4:	fba3 2302 	umull	r2, r3, r3, r2
 8008da8:	095b      	lsrs	r3, r3, #5
 8008daa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	461d      	mov	r5, r3
 8008db2:	f04f 0600 	mov.w	r6, #0
 8008db6:	46a9      	mov	r9, r5
 8008db8:	46b2      	mov	sl, r6
 8008dba:	eb19 0309 	adds.w	r3, r9, r9
 8008dbe:	eb4a 040a 	adc.w	r4, sl, sl
 8008dc2:	4699      	mov	r9, r3
 8008dc4:	46a2      	mov	sl, r4
 8008dc6:	eb19 0905 	adds.w	r9, r9, r5
 8008dca:	eb4a 0a06 	adc.w	sl, sl, r6
 8008dce:	f04f 0100 	mov.w	r1, #0
 8008dd2:	f04f 0200 	mov.w	r2, #0
 8008dd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008dda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008dde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008de2:	4689      	mov	r9, r1
 8008de4:	4692      	mov	sl, r2
 8008de6:	eb19 0005 	adds.w	r0, r9, r5
 8008dea:	eb4a 0106 	adc.w	r1, sl, r6
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	461d      	mov	r5, r3
 8008df4:	f04f 0600 	mov.w	r6, #0
 8008df8:	196b      	adds	r3, r5, r5
 8008dfa:	eb46 0406 	adc.w	r4, r6, r6
 8008dfe:	461a      	mov	r2, r3
 8008e00:	4623      	mov	r3, r4
 8008e02:	f7f7 ffb3 	bl	8000d6c <__aeabi_uldivmod>
 8008e06:	4603      	mov	r3, r0
 8008e08:	460c      	mov	r4, r1
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	4b2c      	ldr	r3, [pc, #176]	; (8008ec0 <UART_SetConfig+0x384>)
 8008e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8008e12:	095b      	lsrs	r3, r3, #5
 8008e14:	2164      	movs	r1, #100	; 0x64
 8008e16:	fb01 f303 	mul.w	r3, r1, r3
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	00db      	lsls	r3, r3, #3
 8008e1e:	3332      	adds	r3, #50	; 0x32
 8008e20:	4a27      	ldr	r2, [pc, #156]	; (8008ec0 <UART_SetConfig+0x384>)
 8008e22:	fba2 2303 	umull	r2, r3, r2, r3
 8008e26:	095b      	lsrs	r3, r3, #5
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e2e:	4498      	add	r8, r3
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	461d      	mov	r5, r3
 8008e34:	f04f 0600 	mov.w	r6, #0
 8008e38:	46a9      	mov	r9, r5
 8008e3a:	46b2      	mov	sl, r6
 8008e3c:	eb19 0309 	adds.w	r3, r9, r9
 8008e40:	eb4a 040a 	adc.w	r4, sl, sl
 8008e44:	4699      	mov	r9, r3
 8008e46:	46a2      	mov	sl, r4
 8008e48:	eb19 0905 	adds.w	r9, r9, r5
 8008e4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008e50:	f04f 0100 	mov.w	r1, #0
 8008e54:	f04f 0200 	mov.w	r2, #0
 8008e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e64:	4689      	mov	r9, r1
 8008e66:	4692      	mov	sl, r2
 8008e68:	eb19 0005 	adds.w	r0, r9, r5
 8008e6c:	eb4a 0106 	adc.w	r1, sl, r6
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	461d      	mov	r5, r3
 8008e76:	f04f 0600 	mov.w	r6, #0
 8008e7a:	196b      	adds	r3, r5, r5
 8008e7c:	eb46 0406 	adc.w	r4, r6, r6
 8008e80:	461a      	mov	r2, r3
 8008e82:	4623      	mov	r3, r4
 8008e84:	f7f7 ff72 	bl	8000d6c <__aeabi_uldivmod>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	4b0c      	ldr	r3, [pc, #48]	; (8008ec0 <UART_SetConfig+0x384>)
 8008e90:	fba3 1302 	umull	r1, r3, r3, r2
 8008e94:	095b      	lsrs	r3, r3, #5
 8008e96:	2164      	movs	r1, #100	; 0x64
 8008e98:	fb01 f303 	mul.w	r3, r1, r3
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	3332      	adds	r3, #50	; 0x32
 8008ea2:	4a07      	ldr	r2, [pc, #28]	; (8008ec0 <UART_SetConfig+0x384>)
 8008ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea8:	095b      	lsrs	r3, r3, #5
 8008eaa:	f003 0207 	and.w	r2, r3, #7
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4442      	add	r2, r8
 8008eb4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008eb6:	e1b2      	b.n	800921e <UART_SetConfig+0x6e2>
 8008eb8:	40011000 	.word	0x40011000
 8008ebc:	40011400 	.word	0x40011400
 8008ec0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4ad7      	ldr	r2, [pc, #860]	; (8009228 <UART_SetConfig+0x6ec>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d005      	beq.n	8008eda <UART_SetConfig+0x39e>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4ad6      	ldr	r2, [pc, #856]	; (800922c <UART_SetConfig+0x6f0>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	f040 80d1 	bne.w	800907c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008eda:	f7fe fa1f 	bl	800731c <HAL_RCC_GetPCLK2Freq>
 8008ede:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	469a      	mov	sl, r3
 8008ee4:	f04f 0b00 	mov.w	fp, #0
 8008ee8:	46d0      	mov	r8, sl
 8008eea:	46d9      	mov	r9, fp
 8008eec:	eb18 0308 	adds.w	r3, r8, r8
 8008ef0:	eb49 0409 	adc.w	r4, r9, r9
 8008ef4:	4698      	mov	r8, r3
 8008ef6:	46a1      	mov	r9, r4
 8008ef8:	eb18 080a 	adds.w	r8, r8, sl
 8008efc:	eb49 090b 	adc.w	r9, r9, fp
 8008f00:	f04f 0100 	mov.w	r1, #0
 8008f04:	f04f 0200 	mov.w	r2, #0
 8008f08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008f0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008f10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008f14:	4688      	mov	r8, r1
 8008f16:	4691      	mov	r9, r2
 8008f18:	eb1a 0508 	adds.w	r5, sl, r8
 8008f1c:	eb4b 0609 	adc.w	r6, fp, r9
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	4619      	mov	r1, r3
 8008f26:	f04f 0200 	mov.w	r2, #0
 8008f2a:	f04f 0300 	mov.w	r3, #0
 8008f2e:	f04f 0400 	mov.w	r4, #0
 8008f32:	0094      	lsls	r4, r2, #2
 8008f34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f38:	008b      	lsls	r3, r1, #2
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	4623      	mov	r3, r4
 8008f3e:	4628      	mov	r0, r5
 8008f40:	4631      	mov	r1, r6
 8008f42:	f7f7 ff13 	bl	8000d6c <__aeabi_uldivmod>
 8008f46:	4603      	mov	r3, r0
 8008f48:	460c      	mov	r4, r1
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	4bb8      	ldr	r3, [pc, #736]	; (8009230 <UART_SetConfig+0x6f4>)
 8008f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f52:	095b      	lsrs	r3, r3, #5
 8008f54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	469b      	mov	fp, r3
 8008f5c:	f04f 0c00 	mov.w	ip, #0
 8008f60:	46d9      	mov	r9, fp
 8008f62:	46e2      	mov	sl, ip
 8008f64:	eb19 0309 	adds.w	r3, r9, r9
 8008f68:	eb4a 040a 	adc.w	r4, sl, sl
 8008f6c:	4699      	mov	r9, r3
 8008f6e:	46a2      	mov	sl, r4
 8008f70:	eb19 090b 	adds.w	r9, r9, fp
 8008f74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f78:	f04f 0100 	mov.w	r1, #0
 8008f7c:	f04f 0200 	mov.w	r2, #0
 8008f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f8c:	4689      	mov	r9, r1
 8008f8e:	4692      	mov	sl, r2
 8008f90:	eb1b 0509 	adds.w	r5, fp, r9
 8008f94:	eb4c 060a 	adc.w	r6, ip, sl
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	f04f 0200 	mov.w	r2, #0
 8008fa2:	f04f 0300 	mov.w	r3, #0
 8008fa6:	f04f 0400 	mov.w	r4, #0
 8008faa:	0094      	lsls	r4, r2, #2
 8008fac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008fb0:	008b      	lsls	r3, r1, #2
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	4623      	mov	r3, r4
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	4631      	mov	r1, r6
 8008fba:	f7f7 fed7 	bl	8000d6c <__aeabi_uldivmod>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	460c      	mov	r4, r1
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	4b9a      	ldr	r3, [pc, #616]	; (8009230 <UART_SetConfig+0x6f4>)
 8008fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8008fca:	095b      	lsrs	r3, r3, #5
 8008fcc:	2164      	movs	r1, #100	; 0x64
 8008fce:	fb01 f303 	mul.w	r3, r1, r3
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	011b      	lsls	r3, r3, #4
 8008fd6:	3332      	adds	r3, #50	; 0x32
 8008fd8:	4a95      	ldr	r2, [pc, #596]	; (8009230 <UART_SetConfig+0x6f4>)
 8008fda:	fba2 2303 	umull	r2, r3, r2, r3
 8008fde:	095b      	lsrs	r3, r3, #5
 8008fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fe4:	4498      	add	r8, r3
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	469b      	mov	fp, r3
 8008fea:	f04f 0c00 	mov.w	ip, #0
 8008fee:	46d9      	mov	r9, fp
 8008ff0:	46e2      	mov	sl, ip
 8008ff2:	eb19 0309 	adds.w	r3, r9, r9
 8008ff6:	eb4a 040a 	adc.w	r4, sl, sl
 8008ffa:	4699      	mov	r9, r3
 8008ffc:	46a2      	mov	sl, r4
 8008ffe:	eb19 090b 	adds.w	r9, r9, fp
 8009002:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009006:	f04f 0100 	mov.w	r1, #0
 800900a:	f04f 0200 	mov.w	r2, #0
 800900e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009012:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009016:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800901a:	4689      	mov	r9, r1
 800901c:	4692      	mov	sl, r2
 800901e:	eb1b 0509 	adds.w	r5, fp, r9
 8009022:	eb4c 060a 	adc.w	r6, ip, sl
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	4619      	mov	r1, r3
 800902c:	f04f 0200 	mov.w	r2, #0
 8009030:	f04f 0300 	mov.w	r3, #0
 8009034:	f04f 0400 	mov.w	r4, #0
 8009038:	0094      	lsls	r4, r2, #2
 800903a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800903e:	008b      	lsls	r3, r1, #2
 8009040:	461a      	mov	r2, r3
 8009042:	4623      	mov	r3, r4
 8009044:	4628      	mov	r0, r5
 8009046:	4631      	mov	r1, r6
 8009048:	f7f7 fe90 	bl	8000d6c <__aeabi_uldivmod>
 800904c:	4603      	mov	r3, r0
 800904e:	460c      	mov	r4, r1
 8009050:	461a      	mov	r2, r3
 8009052:	4b77      	ldr	r3, [pc, #476]	; (8009230 <UART_SetConfig+0x6f4>)
 8009054:	fba3 1302 	umull	r1, r3, r3, r2
 8009058:	095b      	lsrs	r3, r3, #5
 800905a:	2164      	movs	r1, #100	; 0x64
 800905c:	fb01 f303 	mul.w	r3, r1, r3
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	011b      	lsls	r3, r3, #4
 8009064:	3332      	adds	r3, #50	; 0x32
 8009066:	4a72      	ldr	r2, [pc, #456]	; (8009230 <UART_SetConfig+0x6f4>)
 8009068:	fba2 2303 	umull	r2, r3, r2, r3
 800906c:	095b      	lsrs	r3, r3, #5
 800906e:	f003 020f 	and.w	r2, r3, #15
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4442      	add	r2, r8
 8009078:	609a      	str	r2, [r3, #8]
 800907a:	e0d0      	b.n	800921e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800907c:	f7fe f93a 	bl	80072f4 <HAL_RCC_GetPCLK1Freq>
 8009080:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	469a      	mov	sl, r3
 8009086:	f04f 0b00 	mov.w	fp, #0
 800908a:	46d0      	mov	r8, sl
 800908c:	46d9      	mov	r9, fp
 800908e:	eb18 0308 	adds.w	r3, r8, r8
 8009092:	eb49 0409 	adc.w	r4, r9, r9
 8009096:	4698      	mov	r8, r3
 8009098:	46a1      	mov	r9, r4
 800909a:	eb18 080a 	adds.w	r8, r8, sl
 800909e:	eb49 090b 	adc.w	r9, r9, fp
 80090a2:	f04f 0100 	mov.w	r1, #0
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80090ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80090b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80090b6:	4688      	mov	r8, r1
 80090b8:	4691      	mov	r9, r2
 80090ba:	eb1a 0508 	adds.w	r5, sl, r8
 80090be:	eb4b 0609 	adc.w	r6, fp, r9
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	4619      	mov	r1, r3
 80090c8:	f04f 0200 	mov.w	r2, #0
 80090cc:	f04f 0300 	mov.w	r3, #0
 80090d0:	f04f 0400 	mov.w	r4, #0
 80090d4:	0094      	lsls	r4, r2, #2
 80090d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80090da:	008b      	lsls	r3, r1, #2
 80090dc:	461a      	mov	r2, r3
 80090de:	4623      	mov	r3, r4
 80090e0:	4628      	mov	r0, r5
 80090e2:	4631      	mov	r1, r6
 80090e4:	f7f7 fe42 	bl	8000d6c <__aeabi_uldivmod>
 80090e8:	4603      	mov	r3, r0
 80090ea:	460c      	mov	r4, r1
 80090ec:	461a      	mov	r2, r3
 80090ee:	4b50      	ldr	r3, [pc, #320]	; (8009230 <UART_SetConfig+0x6f4>)
 80090f0:	fba3 2302 	umull	r2, r3, r3, r2
 80090f4:	095b      	lsrs	r3, r3, #5
 80090f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	469b      	mov	fp, r3
 80090fe:	f04f 0c00 	mov.w	ip, #0
 8009102:	46d9      	mov	r9, fp
 8009104:	46e2      	mov	sl, ip
 8009106:	eb19 0309 	adds.w	r3, r9, r9
 800910a:	eb4a 040a 	adc.w	r4, sl, sl
 800910e:	4699      	mov	r9, r3
 8009110:	46a2      	mov	sl, r4
 8009112:	eb19 090b 	adds.w	r9, r9, fp
 8009116:	eb4a 0a0c 	adc.w	sl, sl, ip
 800911a:	f04f 0100 	mov.w	r1, #0
 800911e:	f04f 0200 	mov.w	r2, #0
 8009122:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009126:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800912a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800912e:	4689      	mov	r9, r1
 8009130:	4692      	mov	sl, r2
 8009132:	eb1b 0509 	adds.w	r5, fp, r9
 8009136:	eb4c 060a 	adc.w	r6, ip, sl
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	4619      	mov	r1, r3
 8009140:	f04f 0200 	mov.w	r2, #0
 8009144:	f04f 0300 	mov.w	r3, #0
 8009148:	f04f 0400 	mov.w	r4, #0
 800914c:	0094      	lsls	r4, r2, #2
 800914e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009152:	008b      	lsls	r3, r1, #2
 8009154:	461a      	mov	r2, r3
 8009156:	4623      	mov	r3, r4
 8009158:	4628      	mov	r0, r5
 800915a:	4631      	mov	r1, r6
 800915c:	f7f7 fe06 	bl	8000d6c <__aeabi_uldivmod>
 8009160:	4603      	mov	r3, r0
 8009162:	460c      	mov	r4, r1
 8009164:	461a      	mov	r2, r3
 8009166:	4b32      	ldr	r3, [pc, #200]	; (8009230 <UART_SetConfig+0x6f4>)
 8009168:	fba3 1302 	umull	r1, r3, r3, r2
 800916c:	095b      	lsrs	r3, r3, #5
 800916e:	2164      	movs	r1, #100	; 0x64
 8009170:	fb01 f303 	mul.w	r3, r1, r3
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	011b      	lsls	r3, r3, #4
 8009178:	3332      	adds	r3, #50	; 0x32
 800917a:	4a2d      	ldr	r2, [pc, #180]	; (8009230 <UART_SetConfig+0x6f4>)
 800917c:	fba2 2303 	umull	r2, r3, r2, r3
 8009180:	095b      	lsrs	r3, r3, #5
 8009182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009186:	4498      	add	r8, r3
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	469b      	mov	fp, r3
 800918c:	f04f 0c00 	mov.w	ip, #0
 8009190:	46d9      	mov	r9, fp
 8009192:	46e2      	mov	sl, ip
 8009194:	eb19 0309 	adds.w	r3, r9, r9
 8009198:	eb4a 040a 	adc.w	r4, sl, sl
 800919c:	4699      	mov	r9, r3
 800919e:	46a2      	mov	sl, r4
 80091a0:	eb19 090b 	adds.w	r9, r9, fp
 80091a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80091a8:	f04f 0100 	mov.w	r1, #0
 80091ac:	f04f 0200 	mov.w	r2, #0
 80091b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80091b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80091bc:	4689      	mov	r9, r1
 80091be:	4692      	mov	sl, r2
 80091c0:	eb1b 0509 	adds.w	r5, fp, r9
 80091c4:	eb4c 060a 	adc.w	r6, ip, sl
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	4619      	mov	r1, r3
 80091ce:	f04f 0200 	mov.w	r2, #0
 80091d2:	f04f 0300 	mov.w	r3, #0
 80091d6:	f04f 0400 	mov.w	r4, #0
 80091da:	0094      	lsls	r4, r2, #2
 80091dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80091e0:	008b      	lsls	r3, r1, #2
 80091e2:	461a      	mov	r2, r3
 80091e4:	4623      	mov	r3, r4
 80091e6:	4628      	mov	r0, r5
 80091e8:	4631      	mov	r1, r6
 80091ea:	f7f7 fdbf 	bl	8000d6c <__aeabi_uldivmod>
 80091ee:	4603      	mov	r3, r0
 80091f0:	460c      	mov	r4, r1
 80091f2:	461a      	mov	r2, r3
 80091f4:	4b0e      	ldr	r3, [pc, #56]	; (8009230 <UART_SetConfig+0x6f4>)
 80091f6:	fba3 1302 	umull	r1, r3, r3, r2
 80091fa:	095b      	lsrs	r3, r3, #5
 80091fc:	2164      	movs	r1, #100	; 0x64
 80091fe:	fb01 f303 	mul.w	r3, r1, r3
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	011b      	lsls	r3, r3, #4
 8009206:	3332      	adds	r3, #50	; 0x32
 8009208:	4a09      	ldr	r2, [pc, #36]	; (8009230 <UART_SetConfig+0x6f4>)
 800920a:	fba2 2303 	umull	r2, r3, r2, r3
 800920e:	095b      	lsrs	r3, r3, #5
 8009210:	f003 020f 	and.w	r2, r3, #15
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4442      	add	r2, r8
 800921a:	609a      	str	r2, [r3, #8]
}
 800921c:	e7ff      	b.n	800921e <UART_SetConfig+0x6e2>
 800921e:	bf00      	nop
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009228:	40011000 	.word	0x40011000
 800922c:	40011400 	.word	0x40011400
 8009230:	51eb851f 	.word	0x51eb851f

08009234 <calloc>:
 8009234:	4b02      	ldr	r3, [pc, #8]	; (8009240 <calloc+0xc>)
 8009236:	460a      	mov	r2, r1
 8009238:	4601      	mov	r1, r0
 800923a:	6818      	ldr	r0, [r3, #0]
 800923c:	f000 b83f 	b.w	80092be <_calloc_r>
 8009240:	20000058 	.word	0x20000058

08009244 <__errno>:
 8009244:	4b01      	ldr	r3, [pc, #4]	; (800924c <__errno+0x8>)
 8009246:	6818      	ldr	r0, [r3, #0]
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	20000058 	.word	0x20000058

08009250 <__libc_init_array>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	4e0d      	ldr	r6, [pc, #52]	; (8009288 <__libc_init_array+0x38>)
 8009254:	4c0d      	ldr	r4, [pc, #52]	; (800928c <__libc_init_array+0x3c>)
 8009256:	1ba4      	subs	r4, r4, r6
 8009258:	10a4      	asrs	r4, r4, #2
 800925a:	2500      	movs	r5, #0
 800925c:	42a5      	cmp	r5, r4
 800925e:	d109      	bne.n	8009274 <__libc_init_array+0x24>
 8009260:	4e0b      	ldr	r6, [pc, #44]	; (8009290 <__libc_init_array+0x40>)
 8009262:	4c0c      	ldr	r4, [pc, #48]	; (8009294 <__libc_init_array+0x44>)
 8009264:	f001 f946 	bl	800a4f4 <_init>
 8009268:	1ba4      	subs	r4, r4, r6
 800926a:	10a4      	asrs	r4, r4, #2
 800926c:	2500      	movs	r5, #0
 800926e:	42a5      	cmp	r5, r4
 8009270:	d105      	bne.n	800927e <__libc_init_array+0x2e>
 8009272:	bd70      	pop	{r4, r5, r6, pc}
 8009274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009278:	4798      	blx	r3
 800927a:	3501      	adds	r5, #1
 800927c:	e7ee      	b.n	800925c <__libc_init_array+0xc>
 800927e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009282:	4798      	blx	r3
 8009284:	3501      	adds	r5, #1
 8009286:	e7f2      	b.n	800926e <__libc_init_array+0x1e>
 8009288:	0800a580 	.word	0x0800a580
 800928c:	0800a580 	.word	0x0800a580
 8009290:	0800a580 	.word	0x0800a580
 8009294:	0800a584 	.word	0x0800a584

08009298 <memcpy>:
 8009298:	b510      	push	{r4, lr}
 800929a:	1e43      	subs	r3, r0, #1
 800929c:	440a      	add	r2, r1
 800929e:	4291      	cmp	r1, r2
 80092a0:	d100      	bne.n	80092a4 <memcpy+0xc>
 80092a2:	bd10      	pop	{r4, pc}
 80092a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092ac:	e7f7      	b.n	800929e <memcpy+0x6>

080092ae <memset>:
 80092ae:	4402      	add	r2, r0
 80092b0:	4603      	mov	r3, r0
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d100      	bne.n	80092b8 <memset+0xa>
 80092b6:	4770      	bx	lr
 80092b8:	f803 1b01 	strb.w	r1, [r3], #1
 80092bc:	e7f9      	b.n	80092b2 <memset+0x4>

080092be <_calloc_r>:
 80092be:	b538      	push	{r3, r4, r5, lr}
 80092c0:	fb02 f401 	mul.w	r4, r2, r1
 80092c4:	4621      	mov	r1, r4
 80092c6:	f000 f809 	bl	80092dc <_malloc_r>
 80092ca:	4605      	mov	r5, r0
 80092cc:	b118      	cbz	r0, 80092d6 <_calloc_r+0x18>
 80092ce:	4622      	mov	r2, r4
 80092d0:	2100      	movs	r1, #0
 80092d2:	f7ff ffec 	bl	80092ae <memset>
 80092d6:	4628      	mov	r0, r5
 80092d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080092dc <_malloc_r>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	1ccd      	adds	r5, r1, #3
 80092e0:	f025 0503 	bic.w	r5, r5, #3
 80092e4:	3508      	adds	r5, #8
 80092e6:	2d0c      	cmp	r5, #12
 80092e8:	bf38      	it	cc
 80092ea:	250c      	movcc	r5, #12
 80092ec:	2d00      	cmp	r5, #0
 80092ee:	4606      	mov	r6, r0
 80092f0:	db01      	blt.n	80092f6 <_malloc_r+0x1a>
 80092f2:	42a9      	cmp	r1, r5
 80092f4:	d903      	bls.n	80092fe <_malloc_r+0x22>
 80092f6:	230c      	movs	r3, #12
 80092f8:	6033      	str	r3, [r6, #0]
 80092fa:	2000      	movs	r0, #0
 80092fc:	bd70      	pop	{r4, r5, r6, pc}
 80092fe:	f000 f857 	bl	80093b0 <__malloc_lock>
 8009302:	4a21      	ldr	r2, [pc, #132]	; (8009388 <_malloc_r+0xac>)
 8009304:	6814      	ldr	r4, [r2, #0]
 8009306:	4621      	mov	r1, r4
 8009308:	b991      	cbnz	r1, 8009330 <_malloc_r+0x54>
 800930a:	4c20      	ldr	r4, [pc, #128]	; (800938c <_malloc_r+0xb0>)
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	b91b      	cbnz	r3, 8009318 <_malloc_r+0x3c>
 8009310:	4630      	mov	r0, r6
 8009312:	f000 f83d 	bl	8009390 <_sbrk_r>
 8009316:	6020      	str	r0, [r4, #0]
 8009318:	4629      	mov	r1, r5
 800931a:	4630      	mov	r0, r6
 800931c:	f000 f838 	bl	8009390 <_sbrk_r>
 8009320:	1c43      	adds	r3, r0, #1
 8009322:	d124      	bne.n	800936e <_malloc_r+0x92>
 8009324:	230c      	movs	r3, #12
 8009326:	6033      	str	r3, [r6, #0]
 8009328:	4630      	mov	r0, r6
 800932a:	f000 f842 	bl	80093b2 <__malloc_unlock>
 800932e:	e7e4      	b.n	80092fa <_malloc_r+0x1e>
 8009330:	680b      	ldr	r3, [r1, #0]
 8009332:	1b5b      	subs	r3, r3, r5
 8009334:	d418      	bmi.n	8009368 <_malloc_r+0x8c>
 8009336:	2b0b      	cmp	r3, #11
 8009338:	d90f      	bls.n	800935a <_malloc_r+0x7e>
 800933a:	600b      	str	r3, [r1, #0]
 800933c:	50cd      	str	r5, [r1, r3]
 800933e:	18cc      	adds	r4, r1, r3
 8009340:	4630      	mov	r0, r6
 8009342:	f000 f836 	bl	80093b2 <__malloc_unlock>
 8009346:	f104 000b 	add.w	r0, r4, #11
 800934a:	1d23      	adds	r3, r4, #4
 800934c:	f020 0007 	bic.w	r0, r0, #7
 8009350:	1ac3      	subs	r3, r0, r3
 8009352:	d0d3      	beq.n	80092fc <_malloc_r+0x20>
 8009354:	425a      	negs	r2, r3
 8009356:	50e2      	str	r2, [r4, r3]
 8009358:	e7d0      	b.n	80092fc <_malloc_r+0x20>
 800935a:	428c      	cmp	r4, r1
 800935c:	684b      	ldr	r3, [r1, #4]
 800935e:	bf16      	itet	ne
 8009360:	6063      	strne	r3, [r4, #4]
 8009362:	6013      	streq	r3, [r2, #0]
 8009364:	460c      	movne	r4, r1
 8009366:	e7eb      	b.n	8009340 <_malloc_r+0x64>
 8009368:	460c      	mov	r4, r1
 800936a:	6849      	ldr	r1, [r1, #4]
 800936c:	e7cc      	b.n	8009308 <_malloc_r+0x2c>
 800936e:	1cc4      	adds	r4, r0, #3
 8009370:	f024 0403 	bic.w	r4, r4, #3
 8009374:	42a0      	cmp	r0, r4
 8009376:	d005      	beq.n	8009384 <_malloc_r+0xa8>
 8009378:	1a21      	subs	r1, r4, r0
 800937a:	4630      	mov	r0, r6
 800937c:	f000 f808 	bl	8009390 <_sbrk_r>
 8009380:	3001      	adds	r0, #1
 8009382:	d0cf      	beq.n	8009324 <_malloc_r+0x48>
 8009384:	6025      	str	r5, [r4, #0]
 8009386:	e7db      	b.n	8009340 <_malloc_r+0x64>
 8009388:	2000022c 	.word	0x2000022c
 800938c:	20000230 	.word	0x20000230

08009390 <_sbrk_r>:
 8009390:	b538      	push	{r3, r4, r5, lr}
 8009392:	4c06      	ldr	r4, [pc, #24]	; (80093ac <_sbrk_r+0x1c>)
 8009394:	2300      	movs	r3, #0
 8009396:	4605      	mov	r5, r0
 8009398:	4608      	mov	r0, r1
 800939a:	6023      	str	r3, [r4, #0]
 800939c:	f7fa fd54 	bl	8003e48 <_sbrk>
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	d102      	bne.n	80093aa <_sbrk_r+0x1a>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	b103      	cbz	r3, 80093aa <_sbrk_r+0x1a>
 80093a8:	602b      	str	r3, [r5, #0]
 80093aa:	bd38      	pop	{r3, r4, r5, pc}
 80093ac:	20000498 	.word	0x20000498

080093b0 <__malloc_lock>:
 80093b0:	4770      	bx	lr

080093b2 <__malloc_unlock>:
 80093b2:	4770      	bx	lr

080093b4 <round>:
 80093b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b6:	ec57 6b10 	vmov	r6, r7, d0
 80093ba:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80093be:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80093c2:	2c13      	cmp	r4, #19
 80093c4:	463b      	mov	r3, r7
 80093c6:	463d      	mov	r5, r7
 80093c8:	dc17      	bgt.n	80093fa <round+0x46>
 80093ca:	2c00      	cmp	r4, #0
 80093cc:	da09      	bge.n	80093e2 <round+0x2e>
 80093ce:	3401      	adds	r4, #1
 80093d0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80093d4:	d103      	bne.n	80093de <round+0x2a>
 80093d6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80093da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80093de:	2100      	movs	r1, #0
 80093e0:	e02c      	b.n	800943c <round+0x88>
 80093e2:	4a18      	ldr	r2, [pc, #96]	; (8009444 <round+0x90>)
 80093e4:	4122      	asrs	r2, r4
 80093e6:	4217      	tst	r7, r2
 80093e8:	d100      	bne.n	80093ec <round+0x38>
 80093ea:	b19e      	cbz	r6, 8009414 <round+0x60>
 80093ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80093f0:	4123      	asrs	r3, r4
 80093f2:	442b      	add	r3, r5
 80093f4:	ea23 0302 	bic.w	r3, r3, r2
 80093f8:	e7f1      	b.n	80093de <round+0x2a>
 80093fa:	2c33      	cmp	r4, #51	; 0x33
 80093fc:	dd0d      	ble.n	800941a <round+0x66>
 80093fe:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009402:	d107      	bne.n	8009414 <round+0x60>
 8009404:	4630      	mov	r0, r6
 8009406:	4639      	mov	r1, r7
 8009408:	ee10 2a10 	vmov	r2, s0
 800940c:	f7f6 feea 	bl	80001e4 <__adddf3>
 8009410:	4606      	mov	r6, r0
 8009412:	460f      	mov	r7, r1
 8009414:	ec47 6b10 	vmov	d0, r6, r7
 8009418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800941a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800941e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009422:	40d0      	lsrs	r0, r2
 8009424:	4206      	tst	r6, r0
 8009426:	d0f5      	beq.n	8009414 <round+0x60>
 8009428:	2201      	movs	r2, #1
 800942a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800942e:	fa02 f404 	lsl.w	r4, r2, r4
 8009432:	1931      	adds	r1, r6, r4
 8009434:	bf28      	it	cs
 8009436:	189b      	addcs	r3, r3, r2
 8009438:	ea21 0100 	bic.w	r1, r1, r0
 800943c:	461f      	mov	r7, r3
 800943e:	460e      	mov	r6, r1
 8009440:	e7e8      	b.n	8009414 <round+0x60>
 8009442:	bf00      	nop
 8009444:	000fffff 	.word	0x000fffff

08009448 <pow>:
 8009448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	ed2d 8b04 	vpush	{d8-d9}
 8009450:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009724 <pow+0x2dc>
 8009454:	b08d      	sub	sp, #52	; 0x34
 8009456:	ec57 6b10 	vmov	r6, r7, d0
 800945a:	ec55 4b11 	vmov	r4, r5, d1
 800945e:	f000 f963 	bl	8009728 <__ieee754_pow>
 8009462:	f999 3000 	ldrsb.w	r3, [r9]
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	3301      	adds	r3, #1
 800946a:	eeb0 8a40 	vmov.f32	s16, s0
 800946e:	eef0 8a60 	vmov.f32	s17, s1
 8009472:	46c8      	mov	r8, r9
 8009474:	d05f      	beq.n	8009536 <pow+0xee>
 8009476:	4622      	mov	r2, r4
 8009478:	462b      	mov	r3, r5
 800947a:	4620      	mov	r0, r4
 800947c:	4629      	mov	r1, r5
 800947e:	f7f7 fb01 	bl	8000a84 <__aeabi_dcmpun>
 8009482:	4683      	mov	fp, r0
 8009484:	2800      	cmp	r0, #0
 8009486:	d156      	bne.n	8009536 <pow+0xee>
 8009488:	4632      	mov	r2, r6
 800948a:	463b      	mov	r3, r7
 800948c:	4630      	mov	r0, r6
 800948e:	4639      	mov	r1, r7
 8009490:	f7f7 faf8 	bl	8000a84 <__aeabi_dcmpun>
 8009494:	9001      	str	r0, [sp, #4]
 8009496:	b1e8      	cbz	r0, 80094d4 <pow+0x8c>
 8009498:	2200      	movs	r2, #0
 800949a:	2300      	movs	r3, #0
 800949c:	4620      	mov	r0, r4
 800949e:	4629      	mov	r1, r5
 80094a0:	f7f7 fabe 	bl	8000a20 <__aeabi_dcmpeq>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d046      	beq.n	8009536 <pow+0xee>
 80094a8:	2301      	movs	r3, #1
 80094aa:	9302      	str	r3, [sp, #8]
 80094ac:	4b96      	ldr	r3, [pc, #600]	; (8009708 <pow+0x2c0>)
 80094ae:	9303      	str	r3, [sp, #12]
 80094b0:	4b96      	ldr	r3, [pc, #600]	; (800970c <pow+0x2c4>)
 80094b2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80094b6:	2200      	movs	r2, #0
 80094b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094bc:	9b00      	ldr	r3, [sp, #0]
 80094be:	2b02      	cmp	r3, #2
 80094c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80094c4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80094c8:	d033      	beq.n	8009532 <pow+0xea>
 80094ca:	a802      	add	r0, sp, #8
 80094cc:	f000 fefb 	bl	800a2c6 <matherr>
 80094d0:	bb48      	cbnz	r0, 8009526 <pow+0xde>
 80094d2:	e05d      	b.n	8009590 <pow+0x148>
 80094d4:	f04f 0a00 	mov.w	sl, #0
 80094d8:	f04f 0b00 	mov.w	fp, #0
 80094dc:	4652      	mov	r2, sl
 80094de:	465b      	mov	r3, fp
 80094e0:	4630      	mov	r0, r6
 80094e2:	4639      	mov	r1, r7
 80094e4:	f7f7 fa9c 	bl	8000a20 <__aeabi_dcmpeq>
 80094e8:	ec4b ab19 	vmov	d9, sl, fp
 80094ec:	2800      	cmp	r0, #0
 80094ee:	d054      	beq.n	800959a <pow+0x152>
 80094f0:	4652      	mov	r2, sl
 80094f2:	465b      	mov	r3, fp
 80094f4:	4620      	mov	r0, r4
 80094f6:	4629      	mov	r1, r5
 80094f8:	f7f7 fa92 	bl	8000a20 <__aeabi_dcmpeq>
 80094fc:	4680      	mov	r8, r0
 80094fe:	b318      	cbz	r0, 8009548 <pow+0x100>
 8009500:	2301      	movs	r3, #1
 8009502:	9302      	str	r3, [sp, #8]
 8009504:	4b80      	ldr	r3, [pc, #512]	; (8009708 <pow+0x2c0>)
 8009506:	9303      	str	r3, [sp, #12]
 8009508:	9b01      	ldr	r3, [sp, #4]
 800950a:	930a      	str	r3, [sp, #40]	; 0x28
 800950c:	9b00      	ldr	r3, [sp, #0]
 800950e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009512:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009516:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0d5      	beq.n	80094ca <pow+0x82>
 800951e:	4b7b      	ldr	r3, [pc, #492]	; (800970c <pow+0x2c4>)
 8009520:	2200      	movs	r2, #0
 8009522:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009528:	b11b      	cbz	r3, 8009532 <pow+0xea>
 800952a:	f7ff fe8b 	bl	8009244 <__errno>
 800952e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009530:	6003      	str	r3, [r0, #0]
 8009532:	ed9d 8b08 	vldr	d8, [sp, #32]
 8009536:	eeb0 0a48 	vmov.f32	s0, s16
 800953a:	eef0 0a68 	vmov.f32	s1, s17
 800953e:	b00d      	add	sp, #52	; 0x34
 8009540:	ecbd 8b04 	vpop	{d8-d9}
 8009544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009548:	ec45 4b10 	vmov	d0, r4, r5
 800954c:	f000 feb3 	bl	800a2b6 <finite>
 8009550:	2800      	cmp	r0, #0
 8009552:	d0f0      	beq.n	8009536 <pow+0xee>
 8009554:	4652      	mov	r2, sl
 8009556:	465b      	mov	r3, fp
 8009558:	4620      	mov	r0, r4
 800955a:	4629      	mov	r1, r5
 800955c:	f7f7 fa6a 	bl	8000a34 <__aeabi_dcmplt>
 8009560:	2800      	cmp	r0, #0
 8009562:	d0e8      	beq.n	8009536 <pow+0xee>
 8009564:	2301      	movs	r3, #1
 8009566:	9302      	str	r3, [sp, #8]
 8009568:	4b67      	ldr	r3, [pc, #412]	; (8009708 <pow+0x2c0>)
 800956a:	9303      	str	r3, [sp, #12]
 800956c:	f999 3000 	ldrsb.w	r3, [r9]
 8009570:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009574:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009578:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800957c:	b913      	cbnz	r3, 8009584 <pow+0x13c>
 800957e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009582:	e7a2      	b.n	80094ca <pow+0x82>
 8009584:	4962      	ldr	r1, [pc, #392]	; (8009710 <pow+0x2c8>)
 8009586:	2000      	movs	r0, #0
 8009588:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d19c      	bne.n	80094ca <pow+0x82>
 8009590:	f7ff fe58 	bl	8009244 <__errno>
 8009594:	2321      	movs	r3, #33	; 0x21
 8009596:	6003      	str	r3, [r0, #0]
 8009598:	e7c5      	b.n	8009526 <pow+0xde>
 800959a:	eeb0 0a48 	vmov.f32	s0, s16
 800959e:	eef0 0a68 	vmov.f32	s1, s17
 80095a2:	f000 fe88 	bl	800a2b6 <finite>
 80095a6:	9000      	str	r0, [sp, #0]
 80095a8:	2800      	cmp	r0, #0
 80095aa:	f040 8081 	bne.w	80096b0 <pow+0x268>
 80095ae:	ec47 6b10 	vmov	d0, r6, r7
 80095b2:	f000 fe80 	bl	800a2b6 <finite>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	d07a      	beq.n	80096b0 <pow+0x268>
 80095ba:	ec45 4b10 	vmov	d0, r4, r5
 80095be:	f000 fe7a 	bl	800a2b6 <finite>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d074      	beq.n	80096b0 <pow+0x268>
 80095c6:	ec53 2b18 	vmov	r2, r3, d8
 80095ca:	ee18 0a10 	vmov	r0, s16
 80095ce:	4619      	mov	r1, r3
 80095d0:	f7f7 fa58 	bl	8000a84 <__aeabi_dcmpun>
 80095d4:	f999 9000 	ldrsb.w	r9, [r9]
 80095d8:	4b4b      	ldr	r3, [pc, #300]	; (8009708 <pow+0x2c0>)
 80095da:	b1b0      	cbz	r0, 800960a <pow+0x1c2>
 80095dc:	2201      	movs	r2, #1
 80095de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095e2:	9b00      	ldr	r3, [sp, #0]
 80095e4:	930a      	str	r3, [sp, #40]	; 0x28
 80095e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80095ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80095ee:	f1b9 0f00 	cmp.w	r9, #0
 80095f2:	d0c4      	beq.n	800957e <pow+0x136>
 80095f4:	4652      	mov	r2, sl
 80095f6:	465b      	mov	r3, fp
 80095f8:	4650      	mov	r0, sl
 80095fa:	4659      	mov	r1, fp
 80095fc:	f7f7 f8d2 	bl	80007a4 <__aeabi_ddiv>
 8009600:	f1b9 0f02 	cmp.w	r9, #2
 8009604:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009608:	e7c1      	b.n	800958e <pow+0x146>
 800960a:	2203      	movs	r2, #3
 800960c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009610:	900a      	str	r0, [sp, #40]	; 0x28
 8009612:	4629      	mov	r1, r5
 8009614:	4620      	mov	r0, r4
 8009616:	2200      	movs	r2, #0
 8009618:	4b3e      	ldr	r3, [pc, #248]	; (8009714 <pow+0x2cc>)
 800961a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800961e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009622:	f7f6 ff95 	bl	8000550 <__aeabi_dmul>
 8009626:	4604      	mov	r4, r0
 8009628:	460d      	mov	r5, r1
 800962a:	f1b9 0f00 	cmp.w	r9, #0
 800962e:	d124      	bne.n	800967a <pow+0x232>
 8009630:	4b39      	ldr	r3, [pc, #228]	; (8009718 <pow+0x2d0>)
 8009632:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009636:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800963a:	4630      	mov	r0, r6
 800963c:	4652      	mov	r2, sl
 800963e:	465b      	mov	r3, fp
 8009640:	4639      	mov	r1, r7
 8009642:	f7f7 f9f7 	bl	8000a34 <__aeabi_dcmplt>
 8009646:	2800      	cmp	r0, #0
 8009648:	d056      	beq.n	80096f8 <pow+0x2b0>
 800964a:	ec45 4b10 	vmov	d0, r4, r5
 800964e:	f000 fe47 	bl	800a2e0 <rint>
 8009652:	4622      	mov	r2, r4
 8009654:	462b      	mov	r3, r5
 8009656:	ec51 0b10 	vmov	r0, r1, d0
 800965a:	f7f7 f9e1 	bl	8000a20 <__aeabi_dcmpeq>
 800965e:	b920      	cbnz	r0, 800966a <pow+0x222>
 8009660:	4b2e      	ldr	r3, [pc, #184]	; (800971c <pow+0x2d4>)
 8009662:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009666:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800966a:	f998 3000 	ldrsb.w	r3, [r8]
 800966e:	2b02      	cmp	r3, #2
 8009670:	d142      	bne.n	80096f8 <pow+0x2b0>
 8009672:	f7ff fde7 	bl	8009244 <__errno>
 8009676:	2322      	movs	r3, #34	; 0x22
 8009678:	e78d      	b.n	8009596 <pow+0x14e>
 800967a:	4b29      	ldr	r3, [pc, #164]	; (8009720 <pow+0x2d8>)
 800967c:	2200      	movs	r2, #0
 800967e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009682:	4630      	mov	r0, r6
 8009684:	4652      	mov	r2, sl
 8009686:	465b      	mov	r3, fp
 8009688:	4639      	mov	r1, r7
 800968a:	f7f7 f9d3 	bl	8000a34 <__aeabi_dcmplt>
 800968e:	2800      	cmp	r0, #0
 8009690:	d0eb      	beq.n	800966a <pow+0x222>
 8009692:	ec45 4b10 	vmov	d0, r4, r5
 8009696:	f000 fe23 	bl	800a2e0 <rint>
 800969a:	4622      	mov	r2, r4
 800969c:	462b      	mov	r3, r5
 800969e:	ec51 0b10 	vmov	r0, r1, d0
 80096a2:	f7f7 f9bd 	bl	8000a20 <__aeabi_dcmpeq>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d1df      	bne.n	800966a <pow+0x222>
 80096aa:	2200      	movs	r2, #0
 80096ac:	4b18      	ldr	r3, [pc, #96]	; (8009710 <pow+0x2c8>)
 80096ae:	e7da      	b.n	8009666 <pow+0x21e>
 80096b0:	2200      	movs	r2, #0
 80096b2:	2300      	movs	r3, #0
 80096b4:	ec51 0b18 	vmov	r0, r1, d8
 80096b8:	f7f7 f9b2 	bl	8000a20 <__aeabi_dcmpeq>
 80096bc:	2800      	cmp	r0, #0
 80096be:	f43f af3a 	beq.w	8009536 <pow+0xee>
 80096c2:	ec47 6b10 	vmov	d0, r6, r7
 80096c6:	f000 fdf6 	bl	800a2b6 <finite>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	f43f af33 	beq.w	8009536 <pow+0xee>
 80096d0:	ec45 4b10 	vmov	d0, r4, r5
 80096d4:	f000 fdef 	bl	800a2b6 <finite>
 80096d8:	2800      	cmp	r0, #0
 80096da:	f43f af2c 	beq.w	8009536 <pow+0xee>
 80096de:	2304      	movs	r3, #4
 80096e0:	9302      	str	r3, [sp, #8]
 80096e2:	4b09      	ldr	r3, [pc, #36]	; (8009708 <pow+0x2c0>)
 80096e4:	9303      	str	r3, [sp, #12]
 80096e6:	2300      	movs	r3, #0
 80096e8:	930a      	str	r3, [sp, #40]	; 0x28
 80096ea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80096ee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80096f2:	ed8d 9b08 	vstr	d9, [sp, #32]
 80096f6:	e7b8      	b.n	800966a <pow+0x222>
 80096f8:	a802      	add	r0, sp, #8
 80096fa:	f000 fde4 	bl	800a2c6 <matherr>
 80096fe:	2800      	cmp	r0, #0
 8009700:	f47f af11 	bne.w	8009526 <pow+0xde>
 8009704:	e7b5      	b.n	8009672 <pow+0x22a>
 8009706:	bf00      	nop
 8009708:	0800a530 	.word	0x0800a530
 800970c:	3ff00000 	.word	0x3ff00000
 8009710:	fff00000 	.word	0xfff00000
 8009714:	3fe00000 	.word	0x3fe00000
 8009718:	47efffff 	.word	0x47efffff
 800971c:	c7efffff 	.word	0xc7efffff
 8009720:	7ff00000 	.word	0x7ff00000
 8009724:	200000bc 	.word	0x200000bc

08009728 <__ieee754_pow>:
 8009728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	b091      	sub	sp, #68	; 0x44
 800972e:	ed8d 1b00 	vstr	d1, [sp]
 8009732:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009736:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800973a:	ea58 0302 	orrs.w	r3, r8, r2
 800973e:	ec57 6b10 	vmov	r6, r7, d0
 8009742:	f000 84be 	beq.w	800a0c2 <__ieee754_pow+0x99a>
 8009746:	4b7a      	ldr	r3, [pc, #488]	; (8009930 <__ieee754_pow+0x208>)
 8009748:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800974c:	429c      	cmp	r4, r3
 800974e:	463d      	mov	r5, r7
 8009750:	ee10 aa10 	vmov	sl, s0
 8009754:	dc09      	bgt.n	800976a <__ieee754_pow+0x42>
 8009756:	d103      	bne.n	8009760 <__ieee754_pow+0x38>
 8009758:	b93e      	cbnz	r6, 800976a <__ieee754_pow+0x42>
 800975a:	45a0      	cmp	r8, r4
 800975c:	dc0d      	bgt.n	800977a <__ieee754_pow+0x52>
 800975e:	e001      	b.n	8009764 <__ieee754_pow+0x3c>
 8009760:	4598      	cmp	r8, r3
 8009762:	dc02      	bgt.n	800976a <__ieee754_pow+0x42>
 8009764:	4598      	cmp	r8, r3
 8009766:	d10e      	bne.n	8009786 <__ieee754_pow+0x5e>
 8009768:	b16a      	cbz	r2, 8009786 <__ieee754_pow+0x5e>
 800976a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800976e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009772:	ea54 030a 	orrs.w	r3, r4, sl
 8009776:	f000 84a4 	beq.w	800a0c2 <__ieee754_pow+0x99a>
 800977a:	486e      	ldr	r0, [pc, #440]	; (8009934 <__ieee754_pow+0x20c>)
 800977c:	b011      	add	sp, #68	; 0x44
 800977e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009782:	f000 bda5 	b.w	800a2d0 <nan>
 8009786:	2d00      	cmp	r5, #0
 8009788:	da53      	bge.n	8009832 <__ieee754_pow+0x10a>
 800978a:	4b6b      	ldr	r3, [pc, #428]	; (8009938 <__ieee754_pow+0x210>)
 800978c:	4598      	cmp	r8, r3
 800978e:	dc4d      	bgt.n	800982c <__ieee754_pow+0x104>
 8009790:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009794:	4598      	cmp	r8, r3
 8009796:	dd4c      	ble.n	8009832 <__ieee754_pow+0x10a>
 8009798:	ea4f 5328 	mov.w	r3, r8, asr #20
 800979c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80097a0:	2b14      	cmp	r3, #20
 80097a2:	dd26      	ble.n	80097f2 <__ieee754_pow+0xca>
 80097a4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80097a8:	fa22 f103 	lsr.w	r1, r2, r3
 80097ac:	fa01 f303 	lsl.w	r3, r1, r3
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d13e      	bne.n	8009832 <__ieee754_pow+0x10a>
 80097b4:	f001 0101 	and.w	r1, r1, #1
 80097b8:	f1c1 0b02 	rsb	fp, r1, #2
 80097bc:	2a00      	cmp	r2, #0
 80097be:	d15b      	bne.n	8009878 <__ieee754_pow+0x150>
 80097c0:	4b5b      	ldr	r3, [pc, #364]	; (8009930 <__ieee754_pow+0x208>)
 80097c2:	4598      	cmp	r8, r3
 80097c4:	d124      	bne.n	8009810 <__ieee754_pow+0xe8>
 80097c6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80097ca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80097ce:	ea53 030a 	orrs.w	r3, r3, sl
 80097d2:	f000 8476 	beq.w	800a0c2 <__ieee754_pow+0x99a>
 80097d6:	4b59      	ldr	r3, [pc, #356]	; (800993c <__ieee754_pow+0x214>)
 80097d8:	429c      	cmp	r4, r3
 80097da:	dd2d      	ble.n	8009838 <__ieee754_pow+0x110>
 80097dc:	f1b9 0f00 	cmp.w	r9, #0
 80097e0:	f280 8473 	bge.w	800a0ca <__ieee754_pow+0x9a2>
 80097e4:	2000      	movs	r0, #0
 80097e6:	2100      	movs	r1, #0
 80097e8:	ec41 0b10 	vmov	d0, r0, r1
 80097ec:	b011      	add	sp, #68	; 0x44
 80097ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f2:	2a00      	cmp	r2, #0
 80097f4:	d13e      	bne.n	8009874 <__ieee754_pow+0x14c>
 80097f6:	f1c3 0314 	rsb	r3, r3, #20
 80097fa:	fa48 f103 	asr.w	r1, r8, r3
 80097fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009802:	4543      	cmp	r3, r8
 8009804:	f040 8469 	bne.w	800a0da <__ieee754_pow+0x9b2>
 8009808:	f001 0101 	and.w	r1, r1, #1
 800980c:	f1c1 0b02 	rsb	fp, r1, #2
 8009810:	4b4b      	ldr	r3, [pc, #300]	; (8009940 <__ieee754_pow+0x218>)
 8009812:	4598      	cmp	r8, r3
 8009814:	d118      	bne.n	8009848 <__ieee754_pow+0x120>
 8009816:	f1b9 0f00 	cmp.w	r9, #0
 800981a:	f280 845a 	bge.w	800a0d2 <__ieee754_pow+0x9aa>
 800981e:	4948      	ldr	r1, [pc, #288]	; (8009940 <__ieee754_pow+0x218>)
 8009820:	4632      	mov	r2, r6
 8009822:	463b      	mov	r3, r7
 8009824:	2000      	movs	r0, #0
 8009826:	f7f6 ffbd 	bl	80007a4 <__aeabi_ddiv>
 800982a:	e7dd      	b.n	80097e8 <__ieee754_pow+0xc0>
 800982c:	f04f 0b02 	mov.w	fp, #2
 8009830:	e7c4      	b.n	80097bc <__ieee754_pow+0x94>
 8009832:	f04f 0b00 	mov.w	fp, #0
 8009836:	e7c1      	b.n	80097bc <__ieee754_pow+0x94>
 8009838:	f1b9 0f00 	cmp.w	r9, #0
 800983c:	dad2      	bge.n	80097e4 <__ieee754_pow+0xbc>
 800983e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009842:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009846:	e7cf      	b.n	80097e8 <__ieee754_pow+0xc0>
 8009848:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800984c:	d106      	bne.n	800985c <__ieee754_pow+0x134>
 800984e:	4632      	mov	r2, r6
 8009850:	463b      	mov	r3, r7
 8009852:	4610      	mov	r0, r2
 8009854:	4619      	mov	r1, r3
 8009856:	f7f6 fe7b 	bl	8000550 <__aeabi_dmul>
 800985a:	e7c5      	b.n	80097e8 <__ieee754_pow+0xc0>
 800985c:	4b39      	ldr	r3, [pc, #228]	; (8009944 <__ieee754_pow+0x21c>)
 800985e:	4599      	cmp	r9, r3
 8009860:	d10a      	bne.n	8009878 <__ieee754_pow+0x150>
 8009862:	2d00      	cmp	r5, #0
 8009864:	db08      	blt.n	8009878 <__ieee754_pow+0x150>
 8009866:	ec47 6b10 	vmov	d0, r6, r7
 800986a:	b011      	add	sp, #68	; 0x44
 800986c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009870:	f000 bc68 	b.w	800a144 <__ieee754_sqrt>
 8009874:	f04f 0b00 	mov.w	fp, #0
 8009878:	ec47 6b10 	vmov	d0, r6, r7
 800987c:	f000 fd12 	bl	800a2a4 <fabs>
 8009880:	ec51 0b10 	vmov	r0, r1, d0
 8009884:	f1ba 0f00 	cmp.w	sl, #0
 8009888:	d127      	bne.n	80098da <__ieee754_pow+0x1b2>
 800988a:	b124      	cbz	r4, 8009896 <__ieee754_pow+0x16e>
 800988c:	4b2c      	ldr	r3, [pc, #176]	; (8009940 <__ieee754_pow+0x218>)
 800988e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009892:	429a      	cmp	r2, r3
 8009894:	d121      	bne.n	80098da <__ieee754_pow+0x1b2>
 8009896:	f1b9 0f00 	cmp.w	r9, #0
 800989a:	da05      	bge.n	80098a8 <__ieee754_pow+0x180>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	2000      	movs	r0, #0
 80098a2:	4927      	ldr	r1, [pc, #156]	; (8009940 <__ieee754_pow+0x218>)
 80098a4:	f7f6 ff7e 	bl	80007a4 <__aeabi_ddiv>
 80098a8:	2d00      	cmp	r5, #0
 80098aa:	da9d      	bge.n	80097e8 <__ieee754_pow+0xc0>
 80098ac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80098b0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80098b4:	ea54 030b 	orrs.w	r3, r4, fp
 80098b8:	d108      	bne.n	80098cc <__ieee754_pow+0x1a4>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	4610      	mov	r0, r2
 80098c0:	4619      	mov	r1, r3
 80098c2:	f7f6 fc8d 	bl	80001e0 <__aeabi_dsub>
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	e7ac      	b.n	8009826 <__ieee754_pow+0xfe>
 80098cc:	f1bb 0f01 	cmp.w	fp, #1
 80098d0:	d18a      	bne.n	80097e8 <__ieee754_pow+0xc0>
 80098d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098d6:	4619      	mov	r1, r3
 80098d8:	e786      	b.n	80097e8 <__ieee754_pow+0xc0>
 80098da:	0fed      	lsrs	r5, r5, #31
 80098dc:	1e6b      	subs	r3, r5, #1
 80098de:	930d      	str	r3, [sp, #52]	; 0x34
 80098e0:	ea5b 0303 	orrs.w	r3, fp, r3
 80098e4:	d102      	bne.n	80098ec <__ieee754_pow+0x1c4>
 80098e6:	4632      	mov	r2, r6
 80098e8:	463b      	mov	r3, r7
 80098ea:	e7e8      	b.n	80098be <__ieee754_pow+0x196>
 80098ec:	4b16      	ldr	r3, [pc, #88]	; (8009948 <__ieee754_pow+0x220>)
 80098ee:	4598      	cmp	r8, r3
 80098f0:	f340 80fe 	ble.w	8009af0 <__ieee754_pow+0x3c8>
 80098f4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80098f8:	4598      	cmp	r8, r3
 80098fa:	dd0a      	ble.n	8009912 <__ieee754_pow+0x1ea>
 80098fc:	4b0f      	ldr	r3, [pc, #60]	; (800993c <__ieee754_pow+0x214>)
 80098fe:	429c      	cmp	r4, r3
 8009900:	dc0d      	bgt.n	800991e <__ieee754_pow+0x1f6>
 8009902:	f1b9 0f00 	cmp.w	r9, #0
 8009906:	f6bf af6d 	bge.w	80097e4 <__ieee754_pow+0xbc>
 800990a:	a307      	add	r3, pc, #28	; (adr r3, 8009928 <__ieee754_pow+0x200>)
 800990c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009910:	e79f      	b.n	8009852 <__ieee754_pow+0x12a>
 8009912:	4b0e      	ldr	r3, [pc, #56]	; (800994c <__ieee754_pow+0x224>)
 8009914:	429c      	cmp	r4, r3
 8009916:	ddf4      	ble.n	8009902 <__ieee754_pow+0x1da>
 8009918:	4b09      	ldr	r3, [pc, #36]	; (8009940 <__ieee754_pow+0x218>)
 800991a:	429c      	cmp	r4, r3
 800991c:	dd18      	ble.n	8009950 <__ieee754_pow+0x228>
 800991e:	f1b9 0f00 	cmp.w	r9, #0
 8009922:	dcf2      	bgt.n	800990a <__ieee754_pow+0x1e2>
 8009924:	e75e      	b.n	80097e4 <__ieee754_pow+0xbc>
 8009926:	bf00      	nop
 8009928:	8800759c 	.word	0x8800759c
 800992c:	7e37e43c 	.word	0x7e37e43c
 8009930:	7ff00000 	.word	0x7ff00000
 8009934:	0800a533 	.word	0x0800a533
 8009938:	433fffff 	.word	0x433fffff
 800993c:	3fefffff 	.word	0x3fefffff
 8009940:	3ff00000 	.word	0x3ff00000
 8009944:	3fe00000 	.word	0x3fe00000
 8009948:	41e00000 	.word	0x41e00000
 800994c:	3feffffe 	.word	0x3feffffe
 8009950:	2200      	movs	r2, #0
 8009952:	4b63      	ldr	r3, [pc, #396]	; (8009ae0 <__ieee754_pow+0x3b8>)
 8009954:	f7f6 fc44 	bl	80001e0 <__aeabi_dsub>
 8009958:	a355      	add	r3, pc, #340	; (adr r3, 8009ab0 <__ieee754_pow+0x388>)
 800995a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995e:	4604      	mov	r4, r0
 8009960:	460d      	mov	r5, r1
 8009962:	f7f6 fdf5 	bl	8000550 <__aeabi_dmul>
 8009966:	a354      	add	r3, pc, #336	; (adr r3, 8009ab8 <__ieee754_pow+0x390>)
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	4606      	mov	r6, r0
 800996e:	460f      	mov	r7, r1
 8009970:	4620      	mov	r0, r4
 8009972:	4629      	mov	r1, r5
 8009974:	f7f6 fdec 	bl	8000550 <__aeabi_dmul>
 8009978:	2200      	movs	r2, #0
 800997a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800997e:	4b59      	ldr	r3, [pc, #356]	; (8009ae4 <__ieee754_pow+0x3bc>)
 8009980:	4620      	mov	r0, r4
 8009982:	4629      	mov	r1, r5
 8009984:	f7f6 fde4 	bl	8000550 <__aeabi_dmul>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	a14c      	add	r1, pc, #304	; (adr r1, 8009ac0 <__ieee754_pow+0x398>)
 800998e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009992:	f7f6 fc25 	bl	80001e0 <__aeabi_dsub>
 8009996:	4622      	mov	r2, r4
 8009998:	462b      	mov	r3, r5
 800999a:	f7f6 fdd9 	bl	8000550 <__aeabi_dmul>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	2000      	movs	r0, #0
 80099a4:	4950      	ldr	r1, [pc, #320]	; (8009ae8 <__ieee754_pow+0x3c0>)
 80099a6:	f7f6 fc1b 	bl	80001e0 <__aeabi_dsub>
 80099aa:	4622      	mov	r2, r4
 80099ac:	462b      	mov	r3, r5
 80099ae:	4680      	mov	r8, r0
 80099b0:	4689      	mov	r9, r1
 80099b2:	4620      	mov	r0, r4
 80099b4:	4629      	mov	r1, r5
 80099b6:	f7f6 fdcb 	bl	8000550 <__aeabi_dmul>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4640      	mov	r0, r8
 80099c0:	4649      	mov	r1, r9
 80099c2:	f7f6 fdc5 	bl	8000550 <__aeabi_dmul>
 80099c6:	a340      	add	r3, pc, #256	; (adr r3, 8009ac8 <__ieee754_pow+0x3a0>)
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	f7f6 fdc0 	bl	8000550 <__aeabi_dmul>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099d8:	f7f6 fc02 	bl	80001e0 <__aeabi_dsub>
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	4604      	mov	r4, r0
 80099e2:	460d      	mov	r5, r1
 80099e4:	4630      	mov	r0, r6
 80099e6:	4639      	mov	r1, r7
 80099e8:	f7f6 fbfc 	bl	80001e4 <__adddf3>
 80099ec:	2000      	movs	r0, #0
 80099ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099f2:	4632      	mov	r2, r6
 80099f4:	463b      	mov	r3, r7
 80099f6:	f7f6 fbf3 	bl	80001e0 <__aeabi_dsub>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	4620      	mov	r0, r4
 8009a00:	4629      	mov	r1, r5
 8009a02:	f7f6 fbed 	bl	80001e0 <__aeabi_dsub>
 8009a06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a08:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	4606      	mov	r6, r0
 8009a10:	460f      	mov	r7, r1
 8009a12:	f040 81eb 	bne.w	8009dec <__ieee754_pow+0x6c4>
 8009a16:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009ad0 <__ieee754_pow+0x3a8>
 8009a1a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009a1e:	2400      	movs	r4, #0
 8009a20:	4622      	mov	r2, r4
 8009a22:	462b      	mov	r3, r5
 8009a24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a2c:	f7f6 fbd8 	bl	80001e0 <__aeabi_dsub>
 8009a30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a34:	f7f6 fd8c 	bl	8000550 <__aeabi_dmul>
 8009a38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a3c:	4680      	mov	r8, r0
 8009a3e:	4689      	mov	r9, r1
 8009a40:	4630      	mov	r0, r6
 8009a42:	4639      	mov	r1, r7
 8009a44:	f7f6 fd84 	bl	8000550 <__aeabi_dmul>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4640      	mov	r0, r8
 8009a4e:	4649      	mov	r1, r9
 8009a50:	f7f6 fbc8 	bl	80001e4 <__adddf3>
 8009a54:	4622      	mov	r2, r4
 8009a56:	462b      	mov	r3, r5
 8009a58:	4680      	mov	r8, r0
 8009a5a:	4689      	mov	r9, r1
 8009a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a60:	f7f6 fd76 	bl	8000550 <__aeabi_dmul>
 8009a64:	460b      	mov	r3, r1
 8009a66:	4604      	mov	r4, r0
 8009a68:	460d      	mov	r5, r1
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	4640      	mov	r0, r8
 8009a70:	e9cd 4500 	strd	r4, r5, [sp]
 8009a74:	f7f6 fbb6 	bl	80001e4 <__adddf3>
 8009a78:	4b1c      	ldr	r3, [pc, #112]	; (8009aec <__ieee754_pow+0x3c4>)
 8009a7a:	4299      	cmp	r1, r3
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	460f      	mov	r7, r1
 8009a80:	468b      	mov	fp, r1
 8009a82:	f340 82f7 	ble.w	800a074 <__ieee754_pow+0x94c>
 8009a86:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009a8a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009a8e:	4303      	orrs	r3, r0
 8009a90:	f000 81ea 	beq.w	8009e68 <__ieee754_pow+0x740>
 8009a94:	a310      	add	r3, pc, #64	; (adr r3, 8009ad8 <__ieee754_pow+0x3b0>)
 8009a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a9e:	f7f6 fd57 	bl	8000550 <__aeabi_dmul>
 8009aa2:	a30d      	add	r3, pc, #52	; (adr r3, 8009ad8 <__ieee754_pow+0x3b0>)
 8009aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa8:	e6d5      	b.n	8009856 <__ieee754_pow+0x12e>
 8009aaa:	bf00      	nop
 8009aac:	f3af 8000 	nop.w
 8009ab0:	60000000 	.word	0x60000000
 8009ab4:	3ff71547 	.word	0x3ff71547
 8009ab8:	f85ddf44 	.word	0xf85ddf44
 8009abc:	3e54ae0b 	.word	0x3e54ae0b
 8009ac0:	55555555 	.word	0x55555555
 8009ac4:	3fd55555 	.word	0x3fd55555
 8009ac8:	652b82fe 	.word	0x652b82fe
 8009acc:	3ff71547 	.word	0x3ff71547
 8009ad0:	00000000 	.word	0x00000000
 8009ad4:	bff00000 	.word	0xbff00000
 8009ad8:	8800759c 	.word	0x8800759c
 8009adc:	7e37e43c 	.word	0x7e37e43c
 8009ae0:	3ff00000 	.word	0x3ff00000
 8009ae4:	3fd00000 	.word	0x3fd00000
 8009ae8:	3fe00000 	.word	0x3fe00000
 8009aec:	408fffff 	.word	0x408fffff
 8009af0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009af4:	f04f 0200 	mov.w	r2, #0
 8009af8:	da05      	bge.n	8009b06 <__ieee754_pow+0x3de>
 8009afa:	4bd3      	ldr	r3, [pc, #844]	; (8009e48 <__ieee754_pow+0x720>)
 8009afc:	f7f6 fd28 	bl	8000550 <__aeabi_dmul>
 8009b00:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009b04:	460c      	mov	r4, r1
 8009b06:	1523      	asrs	r3, r4, #20
 8009b08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009b0c:	4413      	add	r3, r2
 8009b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b10:	4bce      	ldr	r3, [pc, #824]	; (8009e4c <__ieee754_pow+0x724>)
 8009b12:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009b16:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009b1a:	429c      	cmp	r4, r3
 8009b1c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009b20:	dd08      	ble.n	8009b34 <__ieee754_pow+0x40c>
 8009b22:	4bcb      	ldr	r3, [pc, #812]	; (8009e50 <__ieee754_pow+0x728>)
 8009b24:	429c      	cmp	r4, r3
 8009b26:	f340 815e 	ble.w	8009de6 <__ieee754_pow+0x6be>
 8009b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b30:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009b34:	f04f 0a00 	mov.w	sl, #0
 8009b38:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009b3c:	930c      	str	r3, [sp, #48]	; 0x30
 8009b3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b40:	4bc4      	ldr	r3, [pc, #784]	; (8009e54 <__ieee754_pow+0x72c>)
 8009b42:	4413      	add	r3, r2
 8009b44:	ed93 7b00 	vldr	d7, [r3]
 8009b48:	4629      	mov	r1, r5
 8009b4a:	ec53 2b17 	vmov	r2, r3, d7
 8009b4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009b56:	f7f6 fb43 	bl	80001e0 <__aeabi_dsub>
 8009b5a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009b5e:	4606      	mov	r6, r0
 8009b60:	460f      	mov	r7, r1
 8009b62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b66:	f7f6 fb3d 	bl	80001e4 <__adddf3>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	2000      	movs	r0, #0
 8009b70:	49b9      	ldr	r1, [pc, #740]	; (8009e58 <__ieee754_pow+0x730>)
 8009b72:	f7f6 fe17 	bl	80007a4 <__aeabi_ddiv>
 8009b76:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	4630      	mov	r0, r6
 8009b80:	4639      	mov	r1, r7
 8009b82:	f7f6 fce5 	bl	8000550 <__aeabi_dmul>
 8009b86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b8a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009b8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009b92:	2300      	movs	r3, #0
 8009b94:	9302      	str	r3, [sp, #8]
 8009b96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009b9a:	106d      	asrs	r5, r5, #1
 8009b9c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009ba0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009baa:	4640      	mov	r0, r8
 8009bac:	4649      	mov	r1, r9
 8009bae:	4614      	mov	r4, r2
 8009bb0:	461d      	mov	r5, r3
 8009bb2:	f7f6 fccd 	bl	8000550 <__aeabi_dmul>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4630      	mov	r0, r6
 8009bbc:	4639      	mov	r1, r7
 8009bbe:	f7f6 fb0f 	bl	80001e0 <__aeabi_dsub>
 8009bc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	460f      	mov	r7, r1
 8009bca:	4620      	mov	r0, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f7f6 fb07 	bl	80001e0 <__aeabi_dsub>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009bda:	f7f6 fb01 	bl	80001e0 <__aeabi_dsub>
 8009bde:	4642      	mov	r2, r8
 8009be0:	464b      	mov	r3, r9
 8009be2:	f7f6 fcb5 	bl	8000550 <__aeabi_dmul>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	4630      	mov	r0, r6
 8009bec:	4639      	mov	r1, r7
 8009bee:	f7f6 faf7 	bl	80001e0 <__aeabi_dsub>
 8009bf2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009bf6:	f7f6 fcab 	bl	8000550 <__aeabi_dmul>
 8009bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c02:	4610      	mov	r0, r2
 8009c04:	4619      	mov	r1, r3
 8009c06:	f7f6 fca3 	bl	8000550 <__aeabi_dmul>
 8009c0a:	a37b      	add	r3, pc, #492	; (adr r3, 8009df8 <__ieee754_pow+0x6d0>)
 8009c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c10:	4604      	mov	r4, r0
 8009c12:	460d      	mov	r5, r1
 8009c14:	f7f6 fc9c 	bl	8000550 <__aeabi_dmul>
 8009c18:	a379      	add	r3, pc, #484	; (adr r3, 8009e00 <__ieee754_pow+0x6d8>)
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	f7f6 fae1 	bl	80001e4 <__adddf3>
 8009c22:	4622      	mov	r2, r4
 8009c24:	462b      	mov	r3, r5
 8009c26:	f7f6 fc93 	bl	8000550 <__aeabi_dmul>
 8009c2a:	a377      	add	r3, pc, #476	; (adr r3, 8009e08 <__ieee754_pow+0x6e0>)
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	f7f6 fad8 	bl	80001e4 <__adddf3>
 8009c34:	4622      	mov	r2, r4
 8009c36:	462b      	mov	r3, r5
 8009c38:	f7f6 fc8a 	bl	8000550 <__aeabi_dmul>
 8009c3c:	a374      	add	r3, pc, #464	; (adr r3, 8009e10 <__ieee754_pow+0x6e8>)
 8009c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c42:	f7f6 facf 	bl	80001e4 <__adddf3>
 8009c46:	4622      	mov	r2, r4
 8009c48:	462b      	mov	r3, r5
 8009c4a:	f7f6 fc81 	bl	8000550 <__aeabi_dmul>
 8009c4e:	a372      	add	r3, pc, #456	; (adr r3, 8009e18 <__ieee754_pow+0x6f0>)
 8009c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c54:	f7f6 fac6 	bl	80001e4 <__adddf3>
 8009c58:	4622      	mov	r2, r4
 8009c5a:	462b      	mov	r3, r5
 8009c5c:	f7f6 fc78 	bl	8000550 <__aeabi_dmul>
 8009c60:	a36f      	add	r3, pc, #444	; (adr r3, 8009e20 <__ieee754_pow+0x6f8>)
 8009c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c66:	f7f6 fabd 	bl	80001e4 <__adddf3>
 8009c6a:	4622      	mov	r2, r4
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	460f      	mov	r7, r1
 8009c70:	462b      	mov	r3, r5
 8009c72:	4620      	mov	r0, r4
 8009c74:	4629      	mov	r1, r5
 8009c76:	f7f6 fc6b 	bl	8000550 <__aeabi_dmul>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4630      	mov	r0, r6
 8009c80:	4639      	mov	r1, r7
 8009c82:	f7f6 fc65 	bl	8000550 <__aeabi_dmul>
 8009c86:	4642      	mov	r2, r8
 8009c88:	4604      	mov	r4, r0
 8009c8a:	460d      	mov	r5, r1
 8009c8c:	464b      	mov	r3, r9
 8009c8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c92:	f7f6 faa7 	bl	80001e4 <__adddf3>
 8009c96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c9a:	f7f6 fc59 	bl	8000550 <__aeabi_dmul>
 8009c9e:	4622      	mov	r2, r4
 8009ca0:	462b      	mov	r3, r5
 8009ca2:	f7f6 fa9f 	bl	80001e4 <__adddf3>
 8009ca6:	4642      	mov	r2, r8
 8009ca8:	4606      	mov	r6, r0
 8009caa:	460f      	mov	r7, r1
 8009cac:	464b      	mov	r3, r9
 8009cae:	4640      	mov	r0, r8
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	f7f6 fc4d 	bl	8000550 <__aeabi_dmul>
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	4b68      	ldr	r3, [pc, #416]	; (8009e5c <__ieee754_pow+0x734>)
 8009cba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009cbe:	f7f6 fa91 	bl	80001e4 <__adddf3>
 8009cc2:	4632      	mov	r2, r6
 8009cc4:	463b      	mov	r3, r7
 8009cc6:	f7f6 fa8d 	bl	80001e4 <__adddf3>
 8009cca:	9802      	ldr	r0, [sp, #8]
 8009ccc:	460d      	mov	r5, r1
 8009cce:	4604      	mov	r4, r0
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	f7f6 fc3a 	bl	8000550 <__aeabi_dmul>
 8009cdc:	2200      	movs	r2, #0
 8009cde:	4680      	mov	r8, r0
 8009ce0:	4689      	mov	r9, r1
 8009ce2:	4b5e      	ldr	r3, [pc, #376]	; (8009e5c <__ieee754_pow+0x734>)
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	f7f6 fa7a 	bl	80001e0 <__aeabi_dsub>
 8009cec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009cf0:	f7f6 fa76 	bl	80001e0 <__aeabi_dsub>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	4639      	mov	r1, r7
 8009cfc:	f7f6 fa70 	bl	80001e0 <__aeabi_dsub>
 8009d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d04:	f7f6 fc24 	bl	8000550 <__aeabi_dmul>
 8009d08:	4622      	mov	r2, r4
 8009d0a:	4606      	mov	r6, r0
 8009d0c:	460f      	mov	r7, r1
 8009d0e:	462b      	mov	r3, r5
 8009d10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d14:	f7f6 fc1c 	bl	8000550 <__aeabi_dmul>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	4639      	mov	r1, r7
 8009d20:	f7f6 fa60 	bl	80001e4 <__adddf3>
 8009d24:	4606      	mov	r6, r0
 8009d26:	460f      	mov	r7, r1
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4640      	mov	r0, r8
 8009d2e:	4649      	mov	r1, r9
 8009d30:	f7f6 fa58 	bl	80001e4 <__adddf3>
 8009d34:	9802      	ldr	r0, [sp, #8]
 8009d36:	a33c      	add	r3, pc, #240	; (adr r3, 8009e28 <__ieee754_pow+0x700>)
 8009d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	460d      	mov	r5, r1
 8009d40:	f7f6 fc06 	bl	8000550 <__aeabi_dmul>
 8009d44:	4642      	mov	r2, r8
 8009d46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	4629      	mov	r1, r5
 8009d50:	f7f6 fa46 	bl	80001e0 <__aeabi_dsub>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	4630      	mov	r0, r6
 8009d5a:	4639      	mov	r1, r7
 8009d5c:	f7f6 fa40 	bl	80001e0 <__aeabi_dsub>
 8009d60:	a333      	add	r3, pc, #204	; (adr r3, 8009e30 <__ieee754_pow+0x708>)
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	f7f6 fbf3 	bl	8000550 <__aeabi_dmul>
 8009d6a:	a333      	add	r3, pc, #204	; (adr r3, 8009e38 <__ieee754_pow+0x710>)
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	4606      	mov	r6, r0
 8009d72:	460f      	mov	r7, r1
 8009d74:	4620      	mov	r0, r4
 8009d76:	4629      	mov	r1, r5
 8009d78:	f7f6 fbea 	bl	8000550 <__aeabi_dmul>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4630      	mov	r0, r6
 8009d82:	4639      	mov	r1, r7
 8009d84:	f7f6 fa2e 	bl	80001e4 <__adddf3>
 8009d88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d8a:	4b35      	ldr	r3, [pc, #212]	; (8009e60 <__ieee754_pow+0x738>)
 8009d8c:	4413      	add	r3, r2
 8009d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d92:	f7f6 fa27 	bl	80001e4 <__adddf3>
 8009d96:	4604      	mov	r4, r0
 8009d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d9a:	460d      	mov	r5, r1
 8009d9c:	f7f6 fb6e 	bl	800047c <__aeabi_i2d>
 8009da0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009da2:	4b30      	ldr	r3, [pc, #192]	; (8009e64 <__ieee754_pow+0x73c>)
 8009da4:	4413      	add	r3, r2
 8009da6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009daa:	4606      	mov	r6, r0
 8009dac:	460f      	mov	r7, r1
 8009dae:	4622      	mov	r2, r4
 8009db0:	462b      	mov	r3, r5
 8009db2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009db6:	f7f6 fa15 	bl	80001e4 <__adddf3>
 8009dba:	4642      	mov	r2, r8
 8009dbc:	464b      	mov	r3, r9
 8009dbe:	f7f6 fa11 	bl	80001e4 <__adddf3>
 8009dc2:	4632      	mov	r2, r6
 8009dc4:	463b      	mov	r3, r7
 8009dc6:	f7f6 fa0d 	bl	80001e4 <__adddf3>
 8009dca:	9802      	ldr	r0, [sp, #8]
 8009dcc:	4632      	mov	r2, r6
 8009dce:	463b      	mov	r3, r7
 8009dd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009dd4:	f7f6 fa04 	bl	80001e0 <__aeabi_dsub>
 8009dd8:	4642      	mov	r2, r8
 8009dda:	464b      	mov	r3, r9
 8009ddc:	f7f6 fa00 	bl	80001e0 <__aeabi_dsub>
 8009de0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009de4:	e607      	b.n	80099f6 <__ieee754_pow+0x2ce>
 8009de6:	f04f 0a01 	mov.w	sl, #1
 8009dea:	e6a5      	b.n	8009b38 <__ieee754_pow+0x410>
 8009dec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009e40 <__ieee754_pow+0x718>
 8009df0:	e613      	b.n	8009a1a <__ieee754_pow+0x2f2>
 8009df2:	bf00      	nop
 8009df4:	f3af 8000 	nop.w
 8009df8:	4a454eef 	.word	0x4a454eef
 8009dfc:	3fca7e28 	.word	0x3fca7e28
 8009e00:	93c9db65 	.word	0x93c9db65
 8009e04:	3fcd864a 	.word	0x3fcd864a
 8009e08:	a91d4101 	.word	0xa91d4101
 8009e0c:	3fd17460 	.word	0x3fd17460
 8009e10:	518f264d 	.word	0x518f264d
 8009e14:	3fd55555 	.word	0x3fd55555
 8009e18:	db6fabff 	.word	0xdb6fabff
 8009e1c:	3fdb6db6 	.word	0x3fdb6db6
 8009e20:	33333303 	.word	0x33333303
 8009e24:	3fe33333 	.word	0x3fe33333
 8009e28:	e0000000 	.word	0xe0000000
 8009e2c:	3feec709 	.word	0x3feec709
 8009e30:	dc3a03fd 	.word	0xdc3a03fd
 8009e34:	3feec709 	.word	0x3feec709
 8009e38:	145b01f5 	.word	0x145b01f5
 8009e3c:	be3e2fe0 	.word	0xbe3e2fe0
 8009e40:	00000000 	.word	0x00000000
 8009e44:	3ff00000 	.word	0x3ff00000
 8009e48:	43400000 	.word	0x43400000
 8009e4c:	0003988e 	.word	0x0003988e
 8009e50:	000bb679 	.word	0x000bb679
 8009e54:	0800a538 	.word	0x0800a538
 8009e58:	3ff00000 	.word	0x3ff00000
 8009e5c:	40080000 	.word	0x40080000
 8009e60:	0800a558 	.word	0x0800a558
 8009e64:	0800a548 	.word	0x0800a548
 8009e68:	a3b4      	add	r3, pc, #720	; (adr r3, 800a13c <__ieee754_pow+0xa14>)
 8009e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6e:	4640      	mov	r0, r8
 8009e70:	4649      	mov	r1, r9
 8009e72:	f7f6 f9b7 	bl	80001e4 <__adddf3>
 8009e76:	4622      	mov	r2, r4
 8009e78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e7c:	462b      	mov	r3, r5
 8009e7e:	4630      	mov	r0, r6
 8009e80:	4639      	mov	r1, r7
 8009e82:	f7f6 f9ad 	bl	80001e0 <__aeabi_dsub>
 8009e86:	4602      	mov	r2, r0
 8009e88:	460b      	mov	r3, r1
 8009e8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e8e:	f7f6 fdef 	bl	8000a70 <__aeabi_dcmpgt>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	f47f adfe 	bne.w	8009a94 <__ieee754_pow+0x36c>
 8009e98:	4aa3      	ldr	r2, [pc, #652]	; (800a128 <__ieee754_pow+0xa00>)
 8009e9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	f340 810a 	ble.w	800a0b8 <__ieee754_pow+0x990>
 8009ea4:	151b      	asrs	r3, r3, #20
 8009ea6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009eaa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009eae:	fa4a f303 	asr.w	r3, sl, r3
 8009eb2:	445b      	add	r3, fp
 8009eb4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009eb8:	4e9c      	ldr	r6, [pc, #624]	; (800a12c <__ieee754_pow+0xa04>)
 8009eba:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009ebe:	4116      	asrs	r6, r2
 8009ec0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	ea23 0106 	bic.w	r1, r3, r6
 8009eca:	f1c2 0214 	rsb	r2, r2, #20
 8009ece:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009ed2:	fa4a fa02 	asr.w	sl, sl, r2
 8009ed6:	f1bb 0f00 	cmp.w	fp, #0
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4620      	mov	r0, r4
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	bfb8      	it	lt
 8009ee4:	f1ca 0a00 	rsblt	sl, sl, #0
 8009ee8:	f7f6 f97a 	bl	80001e0 <__aeabi_dsub>
 8009eec:	e9cd 0100 	strd	r0, r1, [sp]
 8009ef0:	4642      	mov	r2, r8
 8009ef2:	464b      	mov	r3, r9
 8009ef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ef8:	f7f6 f974 	bl	80001e4 <__adddf3>
 8009efc:	2000      	movs	r0, #0
 8009efe:	a378      	add	r3, pc, #480	; (adr r3, 800a0e0 <__ieee754_pow+0x9b8>)
 8009f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f04:	4604      	mov	r4, r0
 8009f06:	460d      	mov	r5, r1
 8009f08:	f7f6 fb22 	bl	8000550 <__aeabi_dmul>
 8009f0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f10:	4606      	mov	r6, r0
 8009f12:	460f      	mov	r7, r1
 8009f14:	4620      	mov	r0, r4
 8009f16:	4629      	mov	r1, r5
 8009f18:	f7f6 f962 	bl	80001e0 <__aeabi_dsub>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4640      	mov	r0, r8
 8009f22:	4649      	mov	r1, r9
 8009f24:	f7f6 f95c 	bl	80001e0 <__aeabi_dsub>
 8009f28:	a36f      	add	r3, pc, #444	; (adr r3, 800a0e8 <__ieee754_pow+0x9c0>)
 8009f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2e:	f7f6 fb0f 	bl	8000550 <__aeabi_dmul>
 8009f32:	a36f      	add	r3, pc, #444	; (adr r3, 800a0f0 <__ieee754_pow+0x9c8>)
 8009f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f38:	4680      	mov	r8, r0
 8009f3a:	4689      	mov	r9, r1
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	4629      	mov	r1, r5
 8009f40:	f7f6 fb06 	bl	8000550 <__aeabi_dmul>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	4640      	mov	r0, r8
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	f7f6 f94a 	bl	80001e4 <__adddf3>
 8009f50:	4604      	mov	r4, r0
 8009f52:	460d      	mov	r5, r1
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	4630      	mov	r0, r6
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	f7f6 f942 	bl	80001e4 <__adddf3>
 8009f60:	4632      	mov	r2, r6
 8009f62:	463b      	mov	r3, r7
 8009f64:	4680      	mov	r8, r0
 8009f66:	4689      	mov	r9, r1
 8009f68:	f7f6 f93a 	bl	80001e0 <__aeabi_dsub>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4620      	mov	r0, r4
 8009f72:	4629      	mov	r1, r5
 8009f74:	f7f6 f934 	bl	80001e0 <__aeabi_dsub>
 8009f78:	4642      	mov	r2, r8
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	460f      	mov	r7, r1
 8009f7e:	464b      	mov	r3, r9
 8009f80:	4640      	mov	r0, r8
 8009f82:	4649      	mov	r1, r9
 8009f84:	f7f6 fae4 	bl	8000550 <__aeabi_dmul>
 8009f88:	a35b      	add	r3, pc, #364	; (adr r3, 800a0f8 <__ieee754_pow+0x9d0>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	4604      	mov	r4, r0
 8009f90:	460d      	mov	r5, r1
 8009f92:	f7f6 fadd 	bl	8000550 <__aeabi_dmul>
 8009f96:	a35a      	add	r3, pc, #360	; (adr r3, 800a100 <__ieee754_pow+0x9d8>)
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	f7f6 f920 	bl	80001e0 <__aeabi_dsub>
 8009fa0:	4622      	mov	r2, r4
 8009fa2:	462b      	mov	r3, r5
 8009fa4:	f7f6 fad4 	bl	8000550 <__aeabi_dmul>
 8009fa8:	a357      	add	r3, pc, #348	; (adr r3, 800a108 <__ieee754_pow+0x9e0>)
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	f7f6 f919 	bl	80001e4 <__adddf3>
 8009fb2:	4622      	mov	r2, r4
 8009fb4:	462b      	mov	r3, r5
 8009fb6:	f7f6 facb 	bl	8000550 <__aeabi_dmul>
 8009fba:	a355      	add	r3, pc, #340	; (adr r3, 800a110 <__ieee754_pow+0x9e8>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	f7f6 f90e 	bl	80001e0 <__aeabi_dsub>
 8009fc4:	4622      	mov	r2, r4
 8009fc6:	462b      	mov	r3, r5
 8009fc8:	f7f6 fac2 	bl	8000550 <__aeabi_dmul>
 8009fcc:	a352      	add	r3, pc, #328	; (adr r3, 800a118 <__ieee754_pow+0x9f0>)
 8009fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd2:	f7f6 f907 	bl	80001e4 <__adddf3>
 8009fd6:	4622      	mov	r2, r4
 8009fd8:	462b      	mov	r3, r5
 8009fda:	f7f6 fab9 	bl	8000550 <__aeabi_dmul>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	4649      	mov	r1, r9
 8009fe6:	f7f6 f8fb 	bl	80001e0 <__aeabi_dsub>
 8009fea:	4604      	mov	r4, r0
 8009fec:	460d      	mov	r5, r1
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4640      	mov	r0, r8
 8009ff4:	4649      	mov	r1, r9
 8009ff6:	f7f6 faab 	bl	8000550 <__aeabi_dmul>
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	e9cd 0100 	strd	r0, r1, [sp]
 800a000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a004:	4620      	mov	r0, r4
 800a006:	4629      	mov	r1, r5
 800a008:	f7f6 f8ea 	bl	80001e0 <__aeabi_dsub>
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a014:	f7f6 fbc6 	bl	80007a4 <__aeabi_ddiv>
 800a018:	4632      	mov	r2, r6
 800a01a:	4604      	mov	r4, r0
 800a01c:	460d      	mov	r5, r1
 800a01e:	463b      	mov	r3, r7
 800a020:	4640      	mov	r0, r8
 800a022:	4649      	mov	r1, r9
 800a024:	f7f6 fa94 	bl	8000550 <__aeabi_dmul>
 800a028:	4632      	mov	r2, r6
 800a02a:	463b      	mov	r3, r7
 800a02c:	f7f6 f8da 	bl	80001e4 <__adddf3>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4620      	mov	r0, r4
 800a036:	4629      	mov	r1, r5
 800a038:	f7f6 f8d2 	bl	80001e0 <__aeabi_dsub>
 800a03c:	4642      	mov	r2, r8
 800a03e:	464b      	mov	r3, r9
 800a040:	f7f6 f8ce 	bl	80001e0 <__aeabi_dsub>
 800a044:	4602      	mov	r2, r0
 800a046:	460b      	mov	r3, r1
 800a048:	2000      	movs	r0, #0
 800a04a:	4939      	ldr	r1, [pc, #228]	; (800a130 <__ieee754_pow+0xa08>)
 800a04c:	f7f6 f8c8 	bl	80001e0 <__aeabi_dsub>
 800a050:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a054:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	da2f      	bge.n	800a0be <__ieee754_pow+0x996>
 800a05e:	4650      	mov	r0, sl
 800a060:	ec43 2b10 	vmov	d0, r2, r3
 800a064:	f000 f9c0 	bl	800a3e8 <scalbn>
 800a068:	ec51 0b10 	vmov	r0, r1, d0
 800a06c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a070:	f7ff bbf1 	b.w	8009856 <__ieee754_pow+0x12e>
 800a074:	4b2f      	ldr	r3, [pc, #188]	; (800a134 <__ieee754_pow+0xa0c>)
 800a076:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a07a:	429e      	cmp	r6, r3
 800a07c:	f77f af0c 	ble.w	8009e98 <__ieee754_pow+0x770>
 800a080:	4b2d      	ldr	r3, [pc, #180]	; (800a138 <__ieee754_pow+0xa10>)
 800a082:	440b      	add	r3, r1
 800a084:	4303      	orrs	r3, r0
 800a086:	d00b      	beq.n	800a0a0 <__ieee754_pow+0x978>
 800a088:	a325      	add	r3, pc, #148	; (adr r3, 800a120 <__ieee754_pow+0x9f8>)
 800a08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a092:	f7f6 fa5d 	bl	8000550 <__aeabi_dmul>
 800a096:	a322      	add	r3, pc, #136	; (adr r3, 800a120 <__ieee754_pow+0x9f8>)
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	f7ff bbdb 	b.w	8009856 <__ieee754_pow+0x12e>
 800a0a0:	4622      	mov	r2, r4
 800a0a2:	462b      	mov	r3, r5
 800a0a4:	f7f6 f89c 	bl	80001e0 <__aeabi_dsub>
 800a0a8:	4642      	mov	r2, r8
 800a0aa:	464b      	mov	r3, r9
 800a0ac:	f7f6 fcd6 	bl	8000a5c <__aeabi_dcmpge>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	f43f aef1 	beq.w	8009e98 <__ieee754_pow+0x770>
 800a0b6:	e7e7      	b.n	800a088 <__ieee754_pow+0x960>
 800a0b8:	f04f 0a00 	mov.w	sl, #0
 800a0bc:	e718      	b.n	8009ef0 <__ieee754_pow+0x7c8>
 800a0be:	4621      	mov	r1, r4
 800a0c0:	e7d4      	b.n	800a06c <__ieee754_pow+0x944>
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	491a      	ldr	r1, [pc, #104]	; (800a130 <__ieee754_pow+0xa08>)
 800a0c6:	f7ff bb8f 	b.w	80097e8 <__ieee754_pow+0xc0>
 800a0ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0ce:	f7ff bb8b 	b.w	80097e8 <__ieee754_pow+0xc0>
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	4639      	mov	r1, r7
 800a0d6:	f7ff bb87 	b.w	80097e8 <__ieee754_pow+0xc0>
 800a0da:	4693      	mov	fp, r2
 800a0dc:	f7ff bb98 	b.w	8009810 <__ieee754_pow+0xe8>
 800a0e0:	00000000 	.word	0x00000000
 800a0e4:	3fe62e43 	.word	0x3fe62e43
 800a0e8:	fefa39ef 	.word	0xfefa39ef
 800a0ec:	3fe62e42 	.word	0x3fe62e42
 800a0f0:	0ca86c39 	.word	0x0ca86c39
 800a0f4:	be205c61 	.word	0xbe205c61
 800a0f8:	72bea4d0 	.word	0x72bea4d0
 800a0fc:	3e663769 	.word	0x3e663769
 800a100:	c5d26bf1 	.word	0xc5d26bf1
 800a104:	3ebbbd41 	.word	0x3ebbbd41
 800a108:	af25de2c 	.word	0xaf25de2c
 800a10c:	3f11566a 	.word	0x3f11566a
 800a110:	16bebd93 	.word	0x16bebd93
 800a114:	3f66c16c 	.word	0x3f66c16c
 800a118:	5555553e 	.word	0x5555553e
 800a11c:	3fc55555 	.word	0x3fc55555
 800a120:	c2f8f359 	.word	0xc2f8f359
 800a124:	01a56e1f 	.word	0x01a56e1f
 800a128:	3fe00000 	.word	0x3fe00000
 800a12c:	000fffff 	.word	0x000fffff
 800a130:	3ff00000 	.word	0x3ff00000
 800a134:	4090cbff 	.word	0x4090cbff
 800a138:	3f6f3400 	.word	0x3f6f3400
 800a13c:	652b82fe 	.word	0x652b82fe
 800a140:	3c971547 	.word	0x3c971547

0800a144 <__ieee754_sqrt>:
 800a144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a148:	4955      	ldr	r1, [pc, #340]	; (800a2a0 <__ieee754_sqrt+0x15c>)
 800a14a:	ec55 4b10 	vmov	r4, r5, d0
 800a14e:	43a9      	bics	r1, r5
 800a150:	462b      	mov	r3, r5
 800a152:	462a      	mov	r2, r5
 800a154:	d112      	bne.n	800a17c <__ieee754_sqrt+0x38>
 800a156:	ee10 2a10 	vmov	r2, s0
 800a15a:	ee10 0a10 	vmov	r0, s0
 800a15e:	4629      	mov	r1, r5
 800a160:	f7f6 f9f6 	bl	8000550 <__aeabi_dmul>
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	4620      	mov	r0, r4
 800a16a:	4629      	mov	r1, r5
 800a16c:	f7f6 f83a 	bl	80001e4 <__adddf3>
 800a170:	4604      	mov	r4, r0
 800a172:	460d      	mov	r5, r1
 800a174:	ec45 4b10 	vmov	d0, r4, r5
 800a178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a17c:	2d00      	cmp	r5, #0
 800a17e:	ee10 0a10 	vmov	r0, s0
 800a182:	4621      	mov	r1, r4
 800a184:	dc0f      	bgt.n	800a1a6 <__ieee754_sqrt+0x62>
 800a186:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a18a:	4330      	orrs	r0, r6
 800a18c:	d0f2      	beq.n	800a174 <__ieee754_sqrt+0x30>
 800a18e:	b155      	cbz	r5, 800a1a6 <__ieee754_sqrt+0x62>
 800a190:	ee10 2a10 	vmov	r2, s0
 800a194:	4620      	mov	r0, r4
 800a196:	4629      	mov	r1, r5
 800a198:	f7f6 f822 	bl	80001e0 <__aeabi_dsub>
 800a19c:	4602      	mov	r2, r0
 800a19e:	460b      	mov	r3, r1
 800a1a0:	f7f6 fb00 	bl	80007a4 <__aeabi_ddiv>
 800a1a4:	e7e4      	b.n	800a170 <__ieee754_sqrt+0x2c>
 800a1a6:	151b      	asrs	r3, r3, #20
 800a1a8:	d073      	beq.n	800a292 <__ieee754_sqrt+0x14e>
 800a1aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a1ae:	07dd      	lsls	r5, r3, #31
 800a1b0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a1b4:	bf48      	it	mi
 800a1b6:	0fc8      	lsrmi	r0, r1, #31
 800a1b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a1bc:	bf44      	itt	mi
 800a1be:	0049      	lslmi	r1, r1, #1
 800a1c0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a1c4:	2500      	movs	r5, #0
 800a1c6:	1058      	asrs	r0, r3, #1
 800a1c8:	0fcb      	lsrs	r3, r1, #31
 800a1ca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a1ce:	0049      	lsls	r1, r1, #1
 800a1d0:	2316      	movs	r3, #22
 800a1d2:	462c      	mov	r4, r5
 800a1d4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a1d8:	19a7      	adds	r7, r4, r6
 800a1da:	4297      	cmp	r7, r2
 800a1dc:	bfde      	ittt	le
 800a1de:	19bc      	addle	r4, r7, r6
 800a1e0:	1bd2      	suble	r2, r2, r7
 800a1e2:	19ad      	addle	r5, r5, r6
 800a1e4:	0fcf      	lsrs	r7, r1, #31
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a1ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a1f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a1f4:	d1f0      	bne.n	800a1d8 <__ieee754_sqrt+0x94>
 800a1f6:	f04f 0c20 	mov.w	ip, #32
 800a1fa:	469e      	mov	lr, r3
 800a1fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a200:	42a2      	cmp	r2, r4
 800a202:	eb06 070e 	add.w	r7, r6, lr
 800a206:	dc02      	bgt.n	800a20e <__ieee754_sqrt+0xca>
 800a208:	d112      	bne.n	800a230 <__ieee754_sqrt+0xec>
 800a20a:	428f      	cmp	r7, r1
 800a20c:	d810      	bhi.n	800a230 <__ieee754_sqrt+0xec>
 800a20e:	2f00      	cmp	r7, #0
 800a210:	eb07 0e06 	add.w	lr, r7, r6
 800a214:	da42      	bge.n	800a29c <__ieee754_sqrt+0x158>
 800a216:	f1be 0f00 	cmp.w	lr, #0
 800a21a:	db3f      	blt.n	800a29c <__ieee754_sqrt+0x158>
 800a21c:	f104 0801 	add.w	r8, r4, #1
 800a220:	1b12      	subs	r2, r2, r4
 800a222:	428f      	cmp	r7, r1
 800a224:	bf88      	it	hi
 800a226:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a22a:	1bc9      	subs	r1, r1, r7
 800a22c:	4433      	add	r3, r6
 800a22e:	4644      	mov	r4, r8
 800a230:	0052      	lsls	r2, r2, #1
 800a232:	f1bc 0c01 	subs.w	ip, ip, #1
 800a236:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a23a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a23e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a242:	d1dd      	bne.n	800a200 <__ieee754_sqrt+0xbc>
 800a244:	430a      	orrs	r2, r1
 800a246:	d006      	beq.n	800a256 <__ieee754_sqrt+0x112>
 800a248:	1c5c      	adds	r4, r3, #1
 800a24a:	bf13      	iteet	ne
 800a24c:	3301      	addne	r3, #1
 800a24e:	3501      	addeq	r5, #1
 800a250:	4663      	moveq	r3, ip
 800a252:	f023 0301 	bicne.w	r3, r3, #1
 800a256:	106a      	asrs	r2, r5, #1
 800a258:	085b      	lsrs	r3, r3, #1
 800a25a:	07e9      	lsls	r1, r5, #31
 800a25c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a260:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a264:	bf48      	it	mi
 800a266:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a26a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a26e:	461c      	mov	r4, r3
 800a270:	e780      	b.n	800a174 <__ieee754_sqrt+0x30>
 800a272:	0aca      	lsrs	r2, r1, #11
 800a274:	3815      	subs	r0, #21
 800a276:	0549      	lsls	r1, r1, #21
 800a278:	2a00      	cmp	r2, #0
 800a27a:	d0fa      	beq.n	800a272 <__ieee754_sqrt+0x12e>
 800a27c:	02d6      	lsls	r6, r2, #11
 800a27e:	d50a      	bpl.n	800a296 <__ieee754_sqrt+0x152>
 800a280:	f1c3 0420 	rsb	r4, r3, #32
 800a284:	fa21 f404 	lsr.w	r4, r1, r4
 800a288:	1e5d      	subs	r5, r3, #1
 800a28a:	4099      	lsls	r1, r3
 800a28c:	4322      	orrs	r2, r4
 800a28e:	1b43      	subs	r3, r0, r5
 800a290:	e78b      	b.n	800a1aa <__ieee754_sqrt+0x66>
 800a292:	4618      	mov	r0, r3
 800a294:	e7f0      	b.n	800a278 <__ieee754_sqrt+0x134>
 800a296:	0052      	lsls	r2, r2, #1
 800a298:	3301      	adds	r3, #1
 800a29a:	e7ef      	b.n	800a27c <__ieee754_sqrt+0x138>
 800a29c:	46a0      	mov	r8, r4
 800a29e:	e7bf      	b.n	800a220 <__ieee754_sqrt+0xdc>
 800a2a0:	7ff00000 	.word	0x7ff00000

0800a2a4 <fabs>:
 800a2a4:	ec51 0b10 	vmov	r0, r1, d0
 800a2a8:	ee10 2a10 	vmov	r2, s0
 800a2ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2b0:	ec43 2b10 	vmov	d0, r2, r3
 800a2b4:	4770      	bx	lr

0800a2b6 <finite>:
 800a2b6:	ee10 3a90 	vmov	r3, s1
 800a2ba:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a2be:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a2c2:	0fc0      	lsrs	r0, r0, #31
 800a2c4:	4770      	bx	lr

0800a2c6 <matherr>:
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	4770      	bx	lr
 800a2ca:	0000      	movs	r0, r0
 800a2cc:	0000      	movs	r0, r0
	...

0800a2d0 <nan>:
 800a2d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a2d8 <nan+0x8>
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	00000000 	.word	0x00000000
 800a2dc:	7ff80000 	.word	0x7ff80000

0800a2e0 <rint>:
 800a2e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2e2:	ec51 0b10 	vmov	r0, r1, d0
 800a2e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a2ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a2ee:	2e13      	cmp	r6, #19
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	ee10 4a10 	vmov	r4, s0
 800a2f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a2fa:	dc56      	bgt.n	800a3aa <rint+0xca>
 800a2fc:	2e00      	cmp	r6, #0
 800a2fe:	da2b      	bge.n	800a358 <rint+0x78>
 800a300:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a304:	4302      	orrs	r2, r0
 800a306:	d023      	beq.n	800a350 <rint+0x70>
 800a308:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a30c:	4302      	orrs	r2, r0
 800a30e:	4254      	negs	r4, r2
 800a310:	4314      	orrs	r4, r2
 800a312:	0c4b      	lsrs	r3, r1, #17
 800a314:	0b24      	lsrs	r4, r4, #12
 800a316:	045b      	lsls	r3, r3, #17
 800a318:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a31c:	ea44 0103 	orr.w	r1, r4, r3
 800a320:	460b      	mov	r3, r1
 800a322:	492f      	ldr	r1, [pc, #188]	; (800a3e0 <rint+0x100>)
 800a324:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a328:	e9d1 6700 	ldrd	r6, r7, [r1]
 800a32c:	4602      	mov	r2, r0
 800a32e:	4639      	mov	r1, r7
 800a330:	4630      	mov	r0, r6
 800a332:	f7f5 ff57 	bl	80001e4 <__adddf3>
 800a336:	e9cd 0100 	strd	r0, r1, [sp]
 800a33a:	463b      	mov	r3, r7
 800a33c:	4632      	mov	r2, r6
 800a33e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a342:	f7f5 ff4d 	bl	80001e0 <__aeabi_dsub>
 800a346:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a34a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a34e:	4639      	mov	r1, r7
 800a350:	ec41 0b10 	vmov	d0, r0, r1
 800a354:	b003      	add	sp, #12
 800a356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a358:	4a22      	ldr	r2, [pc, #136]	; (800a3e4 <rint+0x104>)
 800a35a:	4132      	asrs	r2, r6
 800a35c:	ea01 0702 	and.w	r7, r1, r2
 800a360:	4307      	orrs	r7, r0
 800a362:	d0f5      	beq.n	800a350 <rint+0x70>
 800a364:	0852      	lsrs	r2, r2, #1
 800a366:	4011      	ands	r1, r2
 800a368:	430c      	orrs	r4, r1
 800a36a:	d00b      	beq.n	800a384 <rint+0xa4>
 800a36c:	ea23 0202 	bic.w	r2, r3, r2
 800a370:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a374:	2e13      	cmp	r6, #19
 800a376:	fa43 f306 	asr.w	r3, r3, r6
 800a37a:	bf0c      	ite	eq
 800a37c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a380:	2400      	movne	r4, #0
 800a382:	4313      	orrs	r3, r2
 800a384:	4916      	ldr	r1, [pc, #88]	; (800a3e0 <rint+0x100>)
 800a386:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a38a:	4622      	mov	r2, r4
 800a38c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a390:	4620      	mov	r0, r4
 800a392:	4629      	mov	r1, r5
 800a394:	f7f5 ff26 	bl	80001e4 <__adddf3>
 800a398:	e9cd 0100 	strd	r0, r1, [sp]
 800a39c:	4622      	mov	r2, r4
 800a39e:	462b      	mov	r3, r5
 800a3a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3a4:	f7f5 ff1c 	bl	80001e0 <__aeabi_dsub>
 800a3a8:	e7d2      	b.n	800a350 <rint+0x70>
 800a3aa:	2e33      	cmp	r6, #51	; 0x33
 800a3ac:	dd07      	ble.n	800a3be <rint+0xde>
 800a3ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a3b2:	d1cd      	bne.n	800a350 <rint+0x70>
 800a3b4:	ee10 2a10 	vmov	r2, s0
 800a3b8:	f7f5 ff14 	bl	80001e4 <__adddf3>
 800a3bc:	e7c8      	b.n	800a350 <rint+0x70>
 800a3be:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800a3c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3c6:	40f2      	lsrs	r2, r6
 800a3c8:	4210      	tst	r0, r2
 800a3ca:	d0c1      	beq.n	800a350 <rint+0x70>
 800a3cc:	0852      	lsrs	r2, r2, #1
 800a3ce:	4210      	tst	r0, r2
 800a3d0:	bf1f      	itttt	ne
 800a3d2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a3d6:	ea20 0202 	bicne.w	r2, r0, r2
 800a3da:	4134      	asrne	r4, r6
 800a3dc:	4314      	orrne	r4, r2
 800a3de:	e7d1      	b.n	800a384 <rint+0xa4>
 800a3e0:	0800a568 	.word	0x0800a568
 800a3e4:	000fffff 	.word	0x000fffff

0800a3e8 <scalbn>:
 800a3e8:	b570      	push	{r4, r5, r6, lr}
 800a3ea:	ec55 4b10 	vmov	r4, r5, d0
 800a3ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	462b      	mov	r3, r5
 800a3f6:	b9aa      	cbnz	r2, 800a424 <scalbn+0x3c>
 800a3f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a3fc:	4323      	orrs	r3, r4
 800a3fe:	d03b      	beq.n	800a478 <scalbn+0x90>
 800a400:	4b31      	ldr	r3, [pc, #196]	; (800a4c8 <scalbn+0xe0>)
 800a402:	4629      	mov	r1, r5
 800a404:	2200      	movs	r2, #0
 800a406:	ee10 0a10 	vmov	r0, s0
 800a40a:	f7f6 f8a1 	bl	8000550 <__aeabi_dmul>
 800a40e:	4b2f      	ldr	r3, [pc, #188]	; (800a4cc <scalbn+0xe4>)
 800a410:	429e      	cmp	r6, r3
 800a412:	4604      	mov	r4, r0
 800a414:	460d      	mov	r5, r1
 800a416:	da12      	bge.n	800a43e <scalbn+0x56>
 800a418:	a327      	add	r3, pc, #156	; (adr r3, 800a4b8 <scalbn+0xd0>)
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	f7f6 f897 	bl	8000550 <__aeabi_dmul>
 800a422:	e009      	b.n	800a438 <scalbn+0x50>
 800a424:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a428:	428a      	cmp	r2, r1
 800a42a:	d10c      	bne.n	800a446 <scalbn+0x5e>
 800a42c:	ee10 2a10 	vmov	r2, s0
 800a430:	4620      	mov	r0, r4
 800a432:	4629      	mov	r1, r5
 800a434:	f7f5 fed6 	bl	80001e4 <__adddf3>
 800a438:	4604      	mov	r4, r0
 800a43a:	460d      	mov	r5, r1
 800a43c:	e01c      	b.n	800a478 <scalbn+0x90>
 800a43e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a442:	460b      	mov	r3, r1
 800a444:	3a36      	subs	r2, #54	; 0x36
 800a446:	4432      	add	r2, r6
 800a448:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a44c:	428a      	cmp	r2, r1
 800a44e:	dd0b      	ble.n	800a468 <scalbn+0x80>
 800a450:	ec45 4b11 	vmov	d1, r4, r5
 800a454:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a4c0 <scalbn+0xd8>
 800a458:	f000 f83c 	bl	800a4d4 <copysign>
 800a45c:	a318      	add	r3, pc, #96	; (adr r3, 800a4c0 <scalbn+0xd8>)
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	ec51 0b10 	vmov	r0, r1, d0
 800a466:	e7da      	b.n	800a41e <scalbn+0x36>
 800a468:	2a00      	cmp	r2, #0
 800a46a:	dd08      	ble.n	800a47e <scalbn+0x96>
 800a46c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a470:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a474:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a478:	ec45 4b10 	vmov	d0, r4, r5
 800a47c:	bd70      	pop	{r4, r5, r6, pc}
 800a47e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a482:	da0d      	bge.n	800a4a0 <scalbn+0xb8>
 800a484:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a488:	429e      	cmp	r6, r3
 800a48a:	ec45 4b11 	vmov	d1, r4, r5
 800a48e:	dce1      	bgt.n	800a454 <scalbn+0x6c>
 800a490:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a4b8 <scalbn+0xd0>
 800a494:	f000 f81e 	bl	800a4d4 <copysign>
 800a498:	a307      	add	r3, pc, #28	; (adr r3, 800a4b8 <scalbn+0xd0>)
 800a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49e:	e7e0      	b.n	800a462 <scalbn+0x7a>
 800a4a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a4a4:	3236      	adds	r2, #54	; 0x36
 800a4a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a4aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	4b06      	ldr	r3, [pc, #24]	; (800a4d0 <scalbn+0xe8>)
 800a4b6:	e7b2      	b.n	800a41e <scalbn+0x36>
 800a4b8:	c2f8f359 	.word	0xc2f8f359
 800a4bc:	01a56e1f 	.word	0x01a56e1f
 800a4c0:	8800759c 	.word	0x8800759c
 800a4c4:	7e37e43c 	.word	0x7e37e43c
 800a4c8:	43500000 	.word	0x43500000
 800a4cc:	ffff3cb0 	.word	0xffff3cb0
 800a4d0:	3c900000 	.word	0x3c900000

0800a4d4 <copysign>:
 800a4d4:	ec51 0b10 	vmov	r0, r1, d0
 800a4d8:	ee11 0a90 	vmov	r0, s3
 800a4dc:	ee10 2a10 	vmov	r2, s0
 800a4e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a4e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a4e8:	ea41 0300 	orr.w	r3, r1, r0
 800a4ec:	ec43 2b10 	vmov	d0, r2, r3
 800a4f0:	4770      	bx	lr
	...

0800a4f4 <_init>:
 800a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f6:	bf00      	nop
 800a4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4fa:	bc08      	pop	{r3}
 800a4fc:	469e      	mov	lr, r3
 800a4fe:	4770      	bx	lr

0800a500 <_fini>:
 800a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a502:	bf00      	nop
 800a504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a506:	bc08      	pop	{r3}
 800a508:	469e      	mov	lr, r3
 800a50a:	4770      	bx	lr
